

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Jul 25 05:14:57 2019

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    67                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    68  0000                     
    69                           	psect	idataBANK0
    70  006726                     __pidataBANK0:
    71                           	opt stack 0
    72                           
    73                           ;initializer for _Stat
    74  006726  01                 	db	1
    75  0000                     _ANSELA	set	3896
    76  0000                     _ANSELB	set	3897
    77  0000                     _ANSELC	set	3898
    78  0000                     _ANSELD	set	3899
    79  0000                     _ANSELE	set	3900
    80  0000                     _INTCON2bits	set	4081
    81  0000                     _LATA	set	3977
    82  0000                     _LATB	set	3978
    83  0000                     _LATC	set	3979
    84  0000                     _LATD	set	3980
    85  0000                     _LATE	set	3981
    86  0000                     _OSCCON	set	4051
    87  0000                     _OSCCON2	set	4050
    88  0000                     _OSCTUNE	set	3995
    89  0000                     _SSP1ADD	set	4040
    90  0000                     _SSP1BUF	set	4041
    91  0000                     _SSP1CON1	set	4038
    92  0000                     _SSP1CON1bits	set	4038
    93  0000                     _SSP1STAT	set	4039
    94  0000                     _SSP1STATbits	set	4039
    95  0000                     _TRISA	set	3986
    96  0000                     _TRISB	set	3987
    97  0000                     _TRISC	set	3988
    98  0000                     _TRISD	set	3989
    99  0000                     _TRISE	set	3990
   100  0000                     _WPUB	set	3937
   101  0000                     _LATB0	set	31824
   102  0000                     _LATC0	set	31832
   103                           
   104                           	psect	smallconst
   105  001000                     __psmallconst:
   106                           	opt stack 0
   107  001000  00                 	db	0
   108  001001                     STR_4:
   109  001001  48                 	db	72	;'H'
   110  001002  65                 	db	101	;'e'
   111  001003  6C                 	db	108	;'l'
   112  001004  6C                 	db	108	;'l'
   113  001005  6F                 	db	111	;'o'
   114  001006  20                 	db	32
   115  001007  77                 	db	119	;'w'
   116  001008  6F                 	db	111	;'o'
   117  001009  72                 	db	114	;'r'
   118  00100A  6C                 	db	108	;'l'
   119  00100B  64                 	db	100	;'d'
   120  00100C  21                 	db	33
   121  00100D  0D                 	db	13
   122  00100E  0A                 	db	10
   123  00100F  00                 	db	0
   124  001010                     STR_1:
   125  001010  22                 	db	34
   126  001011  2A                 	db	42
   127  001012  2B                 	db	43
   128  001013  2C                 	db	44
   129  001014  3A                 	db	58	;':'
   130  001015  3B                 	db	59	;';'
   131  001016  3C                 	db	60	;'<'
   132  001017  3D                 	db	61	;'='
   133  001018  3E                 	db	62	;'>'
   134  001019  3F                 	db	63	;'?'
   135  00101A  5B                 	db	91	;'['
   136  00101B  5D                 	db	93	;']'
   137  00101C  7C                 	db	124
   138  00101D  7F                 	db	127
   139  00101E  00                 	db	0
   140  00101F                     STR_3:
   141  00101F  68                 	db	104	;'h'
   142  001020  65                 	db	101	;'e'
   143  001021  6C                 	db	108	;'l'
   144  001022  6C                 	db	108	;'l'
   145  001023  6F                 	db	111	;'o'
   146  001024  2E                 	db	46
   147  001025  74                 	db	116	;'t'
   148  001026  78                 	db	120	;'x'
   149  001027  74                 	db	116	;'t'
   150  001028  00                 	db	0
   151  0000                     
   152                           ; #config settings
   153  001029  00                 	db	0	; dummy byte at the end
   154  0000                     
   155                           	psect	cinit
   156  0065E2                     __pcinit:
   157                           	opt stack 0
   158  0065E2                     start_initialization:
   159                           	opt stack 0
   160  0065E2                     __initialization:
   161                           	opt stack 0
   162                           
   163                           ; Clear objects allocated to BIGRAM (558 bytes)
   164  0065E2  EE0D  F00A         	lfsr	0,__pbssBIGRAM
   165  0065E6  EE12 F02E          	lfsr	1,558
   166  0065EA                     clear_0:
   167  0065EA  6AEE               	clrf	postinc0,c
   168  0065EC  50E5               	movf	postdec1,w,c
   169  0065EE  50E1               	movf	fsr1l,w,c
   170  0065F0  E1FC               	bnz	clear_0
   171  0065F2  50E2               	movf	fsr1h,w,c
   172  0065F4  E1FA               	bnz	clear_0
   173                           
   174                           ; Clear objects allocated to BANK0 (37 bytes)
   175  0065F6  EE00  F0D2         	lfsr	0,__pbssBANK0
   176  0065FA  0E25               	movlw	37
   177  0065FC                     clear_1:
   178  0065FC  6AEE               	clrf	postinc0,c
   179  0065FE  06E8               	decf	wreg,f,c
   180  006600  E1FD               	bnz	clear_1
   181                           
   182                           ; Initialize objects allocated to BANK0 (1 bytes)
   183                           ; load TBLPTR registers with __pidataBANK0
   184  006602  0E26               	movlw	low __pidataBANK0
   185  006604  6EF6               	movwf	tblptrl,c
   186  006606  0E67               	movlw	high __pidataBANK0
   187  006608  6EF7               	movwf	tblptrh,c
   188  00660A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   189  00660C  6EF8               	movwf	tblptru,c
   190  00660E  0009               	tblrd		*+	;fetch initializer
   191  006610  CFF5 F0F7          	movff	tablat,__pdataBANK0
   192  006614                     end_of_initialization:
   193                           	opt stack 0
   194  006614                     __end_of__initialization:
   195                           	opt stack 0
   196  006614  0100               	movlb	0
   197  006616  EF65  F02E         	goto	_main	;jump to C main() function
   198                           tblptru	equ	0xFF8
   199                           tblptrh	equ	0xFF7
   200                           tblptrl	equ	0xFF6
   201                           tablat	equ	0xFF5
   202                           postinc0	equ	0xFEE
   203                           wreg	equ	0xFE8
   204                           postdec1	equ	0xFE5
   205                           fsr1h	equ	0xFE2
   206                           fsr1l	equ	0xFE1
   207                           
   208                           	psect	bssBANK0
   209  0000D2                     __pbssBANK0:
   210                           	opt stack 0
   211  0000D2                     _Fsid:
   212                           	opt stack 0
   213  0000D2                     	ds	2
   214  0000D4                     ff@FatFs:
   215                           	opt stack 0
   216  0000D4                     	ds	2
   217  0000D6                     _CardType:
   218                           	opt stack 0
   219  0000D6                     	ds	1
   220  0000D7                     _Fil:
   221                           	opt stack 0
   222  0000D7                     	ds	32
   223                           tblptru	equ	0xFF8
   224                           tblptrh	equ	0xFF7
   225                           tblptrl	equ	0xFF6
   226                           tablat	equ	0xFF5
   227                           postinc0	equ	0xFEE
   228                           wreg	equ	0xFE8
   229                           postdec1	equ	0xFE5
   230                           fsr1h	equ	0xFE2
   231                           fsr1l	equ	0xFE1
   232                           
   233                           	psect	dataBANK0
   234  0000F7                     __pdataBANK0:
   235                           	opt stack 0
   236  0000F7                     _Stat:
   237                           	opt stack 0
   238  0000F7                     	ds	1
   239                           tblptru	equ	0xFF8
   240                           tblptrh	equ	0xFF7
   241                           tblptrl	equ	0xFF6
   242                           tablat	equ	0xFF5
   243                           postinc0	equ	0xFEE
   244                           wreg	equ	0xFE8
   245                           postdec1	equ	0xFE5
   246                           fsr1h	equ	0xFE2
   247                           fsr1l	equ	0xFE1
   248                           
   249                           	psect	bssBIGRAM
   250  000D0A                     __pbssBIGRAM:
   251                           	opt stack 0
   252  000D0A                     _FatFs:
   253                           	opt stack 0
   254  000D0A                     	ds	558
   255                           tblptru	equ	0xFF8
   256                           tblptrh	equ	0xFF7
   257                           tblptrl	equ	0xFF6
   258                           tablat	equ	0xFF5
   259                           postinc0	equ	0xFEE
   260                           wreg	equ	0xFE8
   261                           postdec1	equ	0xFE5
   262                           fsr1h	equ	0xFE2
   263                           fsr1l	equ	0xFE1
   264                           
   265                           	psect	cstackBANK0
   266  000060                     __pcstackBANK0:
   267                           	opt stack 0
   268  000060                     remove_chain@res:
   269                           	opt stack 0
   270  000060                     create_chain@res:
   271                           	opt stack 0
   272  000060                     dir_sdi@ic:
   273                           	opt stack 0
   274  000060                     find_volume@br:
   275                           	opt stack 0
   276                           
   277                           ; 16 bytes @ 0x0
   278  000060                     	ds	1
   279  000061                     remove_chain@nxt:
   280                           	opt stack 0
   281  000061                     create_chain@scl:
   282                           	opt stack 0
   283                           
   284                           ; 4 bytes @ 0x1
   285  000061                     	ds	1
   286  000062                     dir_sdi@sect:
   287                           	opt stack 0
   288                           
   289                           ; 4 bytes @ 0x2
   290  000062                     	ds	3
   291  000065                     create_chain@ncl:
   292                           	opt stack 0
   293                           
   294                           ; 4 bytes @ 0x5
   295  000065                     	ds	1
   296  000066                     dir_sdi@clst:
   297                           	opt stack 0
   298                           
   299                           ; 4 bytes @ 0x6
   300  000066                     	ds	3
   301  000069                     create_chain@cs:
   302                           	opt stack 0
   303                           
   304                           ; 4 bytes @ 0x9
   305  000069                     	ds	4
   306  00006D                     dir_next@dp:
   307                           	opt stack 0
   308  00006D                     f_write@fp:
   309                           	opt stack 0
   310  00006D                     f_lseek@fp:
   311                           	opt stack 0
   312                           
   313                           ; 2 bytes @ 0xD
   314  00006D                     	ds	2
   315  00006F                     dir_next@stretch:
   316                           	opt stack 0
   317  00006F                     f_write@buff:
   318                           	opt stack 0
   319  00006F                     f_lseek@ofs:
   320                           	opt stack 0
   321                           
   322                           ; 4 bytes @ 0xF
   323  00006F                     	ds	1
   324  000070                     _find_volume$1095:
   325                           	opt stack 0
   326                           
   327                           ; 4 bytes @ 0x10
   328  000070                     	ds	1
   329  000071                     ??_dir_next:
   330  000071                     f_write@btw:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0x11
   334  000071                     	ds	2
   335  000073                     ??_f_lseek:
   336  000073                     f_write@bw:
   337                           	opt stack 0
   338                           
   339                           ; 2 bytes @ 0x13
   340  000073                     	ds	1
   341  000074                     _find_volume$1096:
   342                           	opt stack 0
   343                           
   344                           ; 2 bytes @ 0x14
   345  000074                     	ds	1
   346  000075                     ??_f_write:
   347                           
   348                           ; 0 bytes @ 0x15
   349  000075                     	ds	1
   350  000076                     find_volume@szbfat:
   351                           	opt stack 0
   352                           
   353                           ; 4 bytes @ 0x16
   354  000076                     	ds	2
   355  000078                     dir_next@c:
   356                           	opt stack 0
   357                           
   358                           ; 2 bytes @ 0x18
   359  000078                     	ds	2
   360  00007A                     dir_next@i:
   361                           	opt stack 0
   362  00007A                     find_volume@pt:
   363                           	opt stack 0
   364                           
   365                           ; 2 bytes @ 0x1A
   366  00007A                     	ds	2
   367  00007C                     dir_next@clst:
   368                           	opt stack 0
   369  00007C                     find_volume@sysect:
   370                           	opt stack 0
   371                           
   372                           ; 4 bytes @ 0x1C
   373  00007C                     	ds	3
   374  00007F                     f_lseek@ifptr:
   375                           	opt stack 0
   376                           
   377                           ; 4 bytes @ 0x1F
   378  00007F                     	ds	1
   379  000080                     dir_alloc@dp:
   380                           	opt stack 0
   381  000080                     dir_find@dp:
   382                           	opt stack 0
   383  000080                     find_volume@vol:
   384                           	opt stack 0
   385                           
   386                           ; 2 bytes @ 0x20
   387  000080                     	ds	2
   388  000082                     dir_find@c:
   389                           	opt stack 0
   390  000082                     dir_alloc@nent:
   391                           	opt stack 0
   392  000082                     find_volume@nrsv:
   393                           	opt stack 0
   394                           
   395                           ; 2 bytes @ 0x22
   396  000082                     	ds	1
   397  000083                     f_lseek@res:
   398                           	opt stack 0
   399  000083                     dir_find@dir:
   400                           	opt stack 0
   401                           
   402                           ; 2 bytes @ 0x23
   403  000083                     	ds	1
   404  000084                     ??_dir_alloc:
   405  000084                     find_volume@tsect:
   406                           	opt stack 0
   407  000084                     f_lseek@nsect:
   408                           	opt stack 0
   409                           
   410                           ; 4 bytes @ 0x24
   411  000084                     	ds	1
   412  000085                     dir_find@res:
   413                           	opt stack 0
   414  000085                     f_write@res:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0x25
   418  000085                     	ds	1
   419  000086                     follow_path@dp:
   420                           	opt stack 0
   421  000086                     f_write@wbuff:
   422                           	opt stack 0
   423                           
   424                           ; 2 bytes @ 0x26
   425  000086                     	ds	1
   426  000087                     dir_alloc@n:
   427                           	opt stack 0
   428                           
   429                           ; 2 bytes @ 0x27
   430  000087                     	ds	1
   431  000088                     f_write@csect:
   432                           	opt stack 0
   433  000088                     follow_path@path:
   434                           	opt stack 0
   435  000088                     find_volume@nclst:
   436                           	opt stack 0
   437  000088                     f_lseek@bcs:
   438                           	opt stack 0
   439                           
   440                           ; 4 bytes @ 0x28
   441  000088                     	ds	1
   442  000089                     dir_alloc@res:
   443                           	opt stack 0
   444  000089                     f_write@cc:
   445                           	opt stack 0
   446                           
   447                           ; 2 bytes @ 0x29
   448  000089                     	ds	1
   449  00008A                     dir_register@dp:
   450                           	opt stack 0
   451  00008A                     follow_path@dir:
   452                           	opt stack 0
   453                           
   454                           ; 2 bytes @ 0x2A
   455  00008A                     	ds	1
   456  00008B                     f_write@sect:
   457                           	opt stack 0
   458                           
   459                           ; 4 bytes @ 0x2B
   460  00008B                     	ds	1
   461  00008C                     dir_register@res:
   462                           	opt stack 0
   463  00008C                     follow_path@ns:
   464                           	opt stack 0
   465  00008C                     find_volume@stat:
   466                           	opt stack 0
   467  00008C                     f_lseek@clst:
   468                           	opt stack 0
   469                           
   470                           ; 4 bytes @ 0x2C
   471  00008C                     	ds	1
   472  00008D                     follow_path@res:
   473                           	opt stack 0
   474  00008D                     find_volume@fasize:
   475                           	opt stack 0
   476                           
   477                           ; 4 bytes @ 0x2D
   478  00008D                     	ds	2
   479  00008F                     f_write@clst:
   480                           	opt stack 0
   481                           
   482                           ; 4 bytes @ 0x2F
   483  00008F                     	ds	2
   484  000091                     find_volume@bsect:
   485                           	opt stack 0
   486                           
   487                           ; 4 bytes @ 0x31
   488  000091                     	ds	2
   489  000093                     f_write@wcnt:
   490                           	opt stack 0
   491                           
   492                           ; 2 bytes @ 0x33
   493  000093                     	ds	2
   494  000095                     find_volume@i:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x35
   498  000095                     	ds	2
   499  000097                     find_volume@fmt:
   500                           	opt stack 0
   501                           
   502                           ; 1 bytes @ 0x37
   503  000097                     	ds	1
   504  000098                     find_volume@fs:
   505                           	opt stack 0
   506                           
   507                           ; 2 bytes @ 0x38
   508  000098                     	ds	2
   509  00009A                     f_open@fp:
   510                           	opt stack 0
   511                           
   512                           ; 2 bytes @ 0x3A
   513  00009A                     	ds	2
   514  00009C                     f_open@path:
   515                           	opt stack 0
   516                           
   517                           ; 2 bytes @ 0x3C
   518  00009C                     	ds	2
   519  00009E                     f_open@mode:
   520                           	opt stack 0
   521                           
   522                           ; 1 bytes @ 0x3E
   523  00009E                     	ds	1
   524  00009F                     ??_f_open:
   525                           
   526                           ; 0 bytes @ 0x3F
   527  00009F                     	ds	4
   528  0000A3                     f_open@sfn:
   529                           	opt stack 0
   530                           
   531                           ; 12 bytes @ 0x43
   532  0000A3                     	ds	12
   533  0000AF                     f_open@cl:
   534                           	opt stack 0
   535                           
   536                           ; 4 bytes @ 0x4F
   537  0000AF                     	ds	4
   538  0000B3                     f_open@dw:
   539                           	opt stack 0
   540                           
   541                           ; 4 bytes @ 0x53
   542  0000B3                     	ds	4
   543  0000B7                     f_open@res:
   544                           	opt stack 0
   545                           
   546                           ; 1 bytes @ 0x57
   547  0000B7                     	ds	1
   548  0000B8                     f_open@dir:
   549                           	opt stack 0
   550                           
   551                           ; 2 bytes @ 0x58
   552  0000B8                     	ds	2
   553  0000BA                     f_open@dj:
   554                           	opt stack 0
   555                           
   556                           ; 22 bytes @ 0x5A
   557  0000BA                     	ds	22
   558  0000D0                     main@bw:
   559                           	opt stack 0
   560                           
   561                           ; 2 bytes @ 0x70
   562  0000D0                     	ds	2
   563                           tblptru	equ	0xFF8
   564                           tblptrh	equ	0xFF7
   565                           tblptrl	equ	0xFF6
   566                           tablat	equ	0xFF5
   567                           postinc0	equ	0xFEE
   568                           wreg	equ	0xFE8
   569                           postdec1	equ	0xFE5
   570                           fsr1h	equ	0xFE2
   571                           fsr1l	equ	0xFE1
   572                           
   573                           	psect	cstackCOMRAM
   574  000001                     __pcstackCOMRAM:
   575                           	opt stack 0
   576  000001                     ?_mem_cmp:
   577                           	opt stack 0
   578  000001                     ?_chk_chr:
   579                           	opt stack 0
   580  000001                     ?_get_ldnumber:
   581                           	opt stack 0
   582  000001                     ?___wmul:
   583                           	opt stack 0
   584  000001                     ?_ld_clust:
   585                           	opt stack 0
   586  000001                     ?___lmul:
   587                           	opt stack 0
   588  000001                     ?___lldiv:
   589                           	opt stack 0
   590  000001                     SPI1_Exchange8bit@data:
   591                           	opt stack 0
   592  000001                     disk_status@pdrv:
   593                           	opt stack 0
   594  000001                     mem_cpy@dst:
   595                           	opt stack 0
   596  000001                     mem_set@dst:
   597                           	opt stack 0
   598  000001                     mem_cmp@dst:
   599                           	opt stack 0
   600  000001                     chk_chr@str:
   601                           	opt stack 0
   602  000001                     ld_clust@fs:
   603                           	opt stack 0
   604  000001                     st_clust@dir:
   605                           	opt stack 0
   606  000001                     get_ldnumber@path:
   607                           	opt stack 0
   608  000001                     ___wmul@multiplier:
   609                           	opt stack 0
   610  000001                     ___lmul@multiplier:
   611                           	opt stack 0
   612  000001                     ___lldiv@dividend:
   613                           	opt stack 0
   614                           
   615                           ; 4 bytes @ 0x0
   616  000001                     	ds	1
   617  000002                     wait_ready@tmr:
   618                           	opt stack 0
   619  000002                     rcvr_datablock@buff:
   620                           	opt stack 0
   621  000002                     validate@obj:
   622                           	opt stack 0
   623                           
   624                           ; 2 bytes @ 0x1
   625  000002                     	ds	1
   626  000003                     ??_get_ldnumber:
   627  000003                     mem_cpy@src:
   628                           	opt stack 0
   629  000003                     mem_set@val:
   630                           	opt stack 0
   631  000003                     mem_cmp@src:
   632                           	opt stack 0
   633  000003                     chk_chr@chr:
   634                           	opt stack 0
   635  000003                     ld_clust@dir:
   636                           	opt stack 0
   637  000003                     ___wmul@multiplicand:
   638                           	opt stack 0
   639  000003                     st_clust@cl:
   640                           	opt stack 0
   641                           
   642                           ; 4 bytes @ 0x2
   643  000003                     	ds	1
   644  000004                     ??_validate:
   645  000004                     rcvr_datablock@btr:
   646                           	opt stack 0
   647  000004                     xmit_datablock@buff:
   648                           	opt stack 0
   649  000004                     ___send_cmd@arg:
   650                           	opt stack 0
   651                           
   652                           ; 4 bytes @ 0x3
   653  000004                     	ds	1
   654  000005                     ??_chk_chr:
   655  000005                     ??_ld_clust:
   656  000005                     mem_cpy@cnt:
   657                           	opt stack 0
   658  000005                     mem_set@cnt:
   659                           	opt stack 0
   660  000005                     mem_cmp@cnt:
   661                           	opt stack 0
   662  000005                     _get_ldnumber$1015:
   663                           	opt stack 0
   664  000005                     ___wmul@product:
   665                           	opt stack 0
   666  000005                     ___lmul@multiplicand:
   667                           	opt stack 0
   668  000005                     ___lldiv@divisor:
   669                           	opt stack 0
   670                           
   671                           ; 4 bytes @ 0x4
   672  000005                     	ds	1
   673  000006                     rcvr_datablock@tmr:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0x5
   677  000006                     	ds	1
   678  000007                     ??_mem_cpy:
   679  000007                     ??_mem_cmp:
   680  000007                     xmit_datablock@token:
   681                           	opt stack 0
   682  000007                     mem_set@d:
   683                           	opt stack 0
   684  000007                     get_ldnumber@tp:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x6
   688  000007                     	ds	1
   689  000008                     rcvr_datablock@token:
   690                           	opt stack 0
   691  000008                     ___send_cmd@res:
   692                           	opt stack 0
   693  000008                     xmit_datablock@i:
   694                           	opt stack 0
   695  000008                     validate@fil:
   696                           	opt stack 0
   697                           
   698                           ; 2 bytes @ 0x7
   699  000008                     	ds	1
   700  000009                     ___send_cmd@n:
   701                           	opt stack 0
   702  000009                     mem_cpy@d:
   703                           	opt stack 0
   704  000009                     create_name@dp:
   705                           	opt stack 0
   706  000009                     get_ldnumber@vol:
   707                           	opt stack 0
   708  000009                     ___lmul@product:
   709                           	opt stack 0
   710  000009                     ___lldiv@quotient:
   711                           	opt stack 0
   712                           
   713                           ; 4 bytes @ 0x8
   714  000009                     	ds	1
   715  00000A                     xmit_datablock@resp:
   716                           	opt stack 0
   717  00000A                     ___send_cmd@cmd:
   718                           	opt stack 0
   719  00000A                     mem_cmp@d:
   720                           	opt stack 0
   721                           
   722                           ; 2 bytes @ 0x9
   723  00000A                     	ds	1
   724  00000B                     mem_cpy@s:
   725                           	opt stack 0
   726  00000B                     create_name@path:
   727                           	opt stack 0
   728  00000B                     get_ldnumber@i:
   729                           	opt stack 0
   730  00000B                     send_cmd@arg:
   731                           	opt stack 0
   732  00000B                     ld_clust@cl:
   733                           	opt stack 0
   734                           
   735                           ; 4 bytes @ 0xA
   736  00000B                     	ds	1
   737  00000C                     mem_cmp@s:
   738                           	opt stack 0
   739                           
   740                           ; 2 bytes @ 0xB
   741  00000C                     	ds	1
   742  00000D                     ??_create_name:
   743  00000D                     ?_clust2sect:
   744                           	opt stack 0
   745  00000D                     ___lldiv@counter:
   746                           	opt stack 0
   747  00000D                     clust2sect@fs:
   748                           	opt stack 0
   749  00000D                     get_ldnumber@tt:
   750                           	opt stack 0
   751                           
   752                           ; 2 bytes @ 0xC
   753  00000D                     	ds	1
   754  00000E                     mem_cmp@r:
   755                           	opt stack 0
   756                           
   757                           ; 2 bytes @ 0xD
   758  00000E                     	ds	1
   759  00000F                     send_cmd@cmd:
   760                           	opt stack 0
   761  00000F                     clust2sect@clst:
   762                           	opt stack 0
   763                           
   764                           ; 4 bytes @ 0xE
   765  00000F                     	ds	1
   766  000010                     send_cmd@res:
   767                           	opt stack 0
   768                           
   769                           ; 1 bytes @ 0xF
   770  000010                     	ds	1
   771  000011                     ??_disk_initialize:
   772  000011                     disk_ioctl@cmd:
   773                           	opt stack 0
   774  000011                     disk_read@buff:
   775                           	opt stack 0
   776  000011                     disk_write@buff:
   777                           	opt stack 0
   778  000011                     _create_name$991:
   779                           	opt stack 0
   780                           
   781                           ; 2 bytes @ 0x10
   782  000011                     	ds	1
   783  000012                     disk_initialize@pdrv:
   784                           	opt stack 0
   785  000012                     disk_ioctl@buff:
   786                           	opt stack 0
   787                           
   788                           ; 2 bytes @ 0x11
   789  000012                     	ds	1
   790  000013                     ??_clust2sect:
   791  000013                     create_name@si:
   792                           	opt stack 0
   793  000013                     disk_initialize@ocr:
   794                           	opt stack 0
   795  000013                     disk_read@sector:
   796                           	opt stack 0
   797  000013                     disk_write@sector:
   798                           	opt stack 0
   799                           
   800                           ; 4 bytes @ 0x12
   801  000013                     	ds	1
   802  000014                     ??_disk_ioctl:
   803                           
   804                           ; 0 bytes @ 0x13
   805  000014                     	ds	1
   806  000015                     create_name@b:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x14
   810  000015                     	ds	1
   811  000016                     create_name@ni:
   812                           	opt stack 0
   813                           
   814                           ; 2 bytes @ 0x15
   815  000016                     	ds	1
   816  000017                     _disk_initialize$500:
   817                           	opt stack 0
   818  000017                     disk_read@count:
   819                           	opt stack 0
   820  000017                     disk_write@count:
   821                           	opt stack 0
   822                           
   823                           ; 2 bytes @ 0x16
   824  000017                     	ds	1
   825  000018                     create_name@p:
   826                           	opt stack 0
   827                           
   828                           ; 2 bytes @ 0x17
   829  000018                     	ds	1
   830  000019                     ??_disk_write:
   831  000019                     disk_initialize@cmd:
   832                           	opt stack 0
   833  000019                     disk_read@pdrv:
   834                           	opt stack 0
   835                           
   836                           ; 1 bytes @ 0x18
   837  000019                     	ds	1
   838  00001A                     disk_initialize@ty:
   839                           	opt stack 0
   840  00001A                     disk_write@pdrv:
   841                           	opt stack 0
   842  00001A                     create_name@d:
   843                           	opt stack 0
   844  00001A                     _disk_read$510:
   845                           	opt stack 0
   846                           
   847                           ; 2 bytes @ 0x19
   848  00001A                     	ds	1
   849  00001B                     disk_initialize@tmr:
   850                           	opt stack 0
   851  00001B                     sync_window@fs:
   852                           	opt stack 0
   853  00001B                     create_name@sfn:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0x1A
   857  00001B                     	ds	1
   858  00001C                     disk_read@cmd:
   859                           	opt stack 0
   860                           
   861                           ; 1 bytes @ 0x1B
   862  00001C                     	ds	1
   863  00001D                     ??_sync_window:
   864  00001D                     disk_initialize@n:
   865                           	opt stack 0
   866  00001D                     create_name@i:
   867                           	opt stack 0
   868                           
   869                           ; 2 bytes @ 0x1C
   870  00001D                     	ds	2
   871  00001F                     create_name@c:
   872                           	opt stack 0
   873                           
   874                           ; 1 bytes @ 0x1E
   875  00001F                     	ds	2
   876  000021                     disk_ioctl@csd:
   877                           	opt stack 0
   878                           
   879                           ; 16 bytes @ 0x20
   880  000021                     	ds	8
   881  000029                     sync_window@res:
   882                           	opt stack 0
   883                           
   884                           ; 1 bytes @ 0x28
   885  000029                     	ds	1
   886  00002A                     sync_window@nf:
   887                           	opt stack 0
   888                           
   889                           ; 2 bytes @ 0x29
   890  00002A                     	ds	2
   891  00002C                     sync_window@wsect:
   892                           	opt stack 0
   893                           
   894                           ; 4 bytes @ 0x2B
   895  00002C                     	ds	4
   896  000030                     move_window@fs:
   897                           	opt stack 0
   898                           
   899                           ; 2 bytes @ 0x2F
   900  000030                     	ds	1
   901  000031                     disk_ioctl@pdrv:
   902                           	opt stack 0
   903                           
   904                           ; 1 bytes @ 0x30
   905  000031                     	ds	1
   906  000032                     disk_ioctl@csize:
   907                           	opt stack 0
   908  000032                     move_window@sector:
   909                           	opt stack 0
   910                           
   911                           ; 4 bytes @ 0x31
   912  000032                     	ds	4
   913  000036                     disk_ioctl@res:
   914                           	opt stack 0
   915                           
   916                           ; 1 bytes @ 0x35
   917  000036                     	ds	1
   918  000037                     disk_ioctl@n:
   919                           	opt stack 0
   920                           
   921                           ; 1 bytes @ 0x36
   922  000037                     	ds	1
   923  000038                     disk_ioctl@ptr:
   924                           	opt stack 0
   925                           
   926                           ; 2 bytes @ 0x37
   927  000038                     	ds	2
   928  00003A                     move_window@res:
   929                           	opt stack 0
   930  00003A                     sync_fs@fs:
   931                           	opt stack 0
   932                           
   933                           ; 2 bytes @ 0x39
   934  00003A                     	ds	1
   935  00003B                     ?_get_fat:
   936                           	opt stack 0
   937  00003B                     get_fat@fs:
   938                           	opt stack 0
   939  00003B                     put_fat@fs:
   940                           	opt stack 0
   941  00003B                     check_fs@fs:
   942                           	opt stack 0
   943                           
   944                           ; 2 bytes @ 0x3A
   945  00003B                     	ds	1
   946  00003C                     ??_sync_fs:
   947                           
   948                           ; 0 bytes @ 0x3B
   949  00003C                     	ds	1
   950  00003D                     get_fat@clst:
   951                           	opt stack 0
   952  00003D                     put_fat@clst:
   953                           	opt stack 0
   954  00003D                     check_fs@sect:
   955                           	opt stack 0
   956                           
   957                           ; 4 bytes @ 0x3C
   958  00003D                     	ds	4
   959  000041                     ??_get_fat:
   960  000041                     ??_check_fs:
   961  000041                     put_fat@val:
   962                           	opt stack 0
   963                           
   964                           ; 4 bytes @ 0x40
   965  000041                     	ds	3
   966  000044                     sync_fs@res:
   967                           	opt stack 0
   968                           
   969                           ; 1 bytes @ 0x43
   970  000044                     	ds	1
   971  000045                     ??_put_fat:
   972  000045                     find_volume@rfs:
   973                           	opt stack 0
   974  000045                     f_sync@fp:
   975                           	opt stack 0
   976                           
   977                           ; 2 bytes @ 0x44
   978  000045                     	ds	2
   979  000047                     find_volume@path:
   980                           	opt stack 0
   981  000047                     f_sync@tm:
   982                           	opt stack 0
   983                           
   984                           ; 4 bytes @ 0x46
   985  000047                     	ds	2
   986  000049                     find_volume@wmode:
   987                           	opt stack 0
   988  000049                     _get_fat$741:
   989                           	opt stack 0
   990                           
   991                           ; 2 bytes @ 0x48
   992  000049                     	ds	1
   993  00004A                     ??_find_volume:
   994                           
   995                           ; 0 bytes @ 0x49
   996  00004A                     	ds	1
   997  00004B                     f_sync@res:
   998                           	opt stack 0
   999  00004B                     get_fat@val:
  1000                           	opt stack 0
  1001                           
  1002                           ; 4 bytes @ 0x4A
  1003  00004B                     	ds	1
  1004  00004C                     f_sync@dir:
  1005                           	opt stack 0
  1006                           
  1007                           ; 2 bytes @ 0x4B
  1008  00004C                     	ds	1
  1009  00004D                     _put_fat$767:
  1010                           	opt stack 0
  1011                           
  1012                           ; 2 bytes @ 0x4C
  1013  00004D                     	ds	1
  1014  00004E                     f_close@fp:
  1015                           	opt stack 0
  1016                           
  1017                           ; 2 bytes @ 0x4D
  1018  00004E                     	ds	1
  1019  00004F                     get_fat@wc:
  1020                           	opt stack 0
  1021  00004F                     _put_fat$768:
  1022                           	opt stack 0
  1023                           
  1024                           ; 2 bytes @ 0x4E
  1025  00004F                     	ds	1
  1026  000050                     f_close@res:
  1027                           	opt stack 0
  1028                           
  1029                           ; 1 bytes @ 0x4F
  1030  000050                     	ds	1
  1031  000051                     get_fat@p:
  1032                           	opt stack 0
  1033  000051                     put_fat@bc:
  1034                           	opt stack 0
  1035                           
  1036                           ; 2 bytes @ 0x50
  1037  000051                     	ds	1
  1038  000052                     f_mount@fs:
  1039                           	opt stack 0
  1040                           
  1041                           ; 2 bytes @ 0x51
  1042  000052                     	ds	1
  1043  000053                     put_fat@res:
  1044                           	opt stack 0
  1045  000053                     get_fat@bc:
  1046                           	opt stack 0
  1047                           
  1048                           ; 2 bytes @ 0x52
  1049  000053                     	ds	1
  1050  000054                     put_fat@p:
  1051                           	opt stack 0
  1052  000054                     f_mount@path:
  1053                           	opt stack 0
  1054                           
  1055                           ; 2 bytes @ 0x53
  1056  000054                     	ds	1
  1057  000055                     dir_sdi@dp:
  1058                           	opt stack 0
  1059                           
  1060                           ; 2 bytes @ 0x54
  1061  000055                     	ds	1
  1062  000056                     ?_create_chain:
  1063                           	opt stack 0
  1064  000056                     f_mount@opt:
  1065                           	opt stack 0
  1066  000056                     remove_chain@fs:
  1067                           	opt stack 0
  1068  000056                     create_chain@fs:
  1069                           	opt stack 0
  1070                           
  1071                           ; 2 bytes @ 0x55
  1072  000056                     	ds	1
  1073  000057                     f_mount@res:
  1074                           	opt stack 0
  1075  000057                     dir_sdi@idx:
  1076                           	opt stack 0
  1077                           
  1078                           ; 2 bytes @ 0x56
  1079  000057                     	ds	1
  1080  000058                     f_mount@cfs:
  1081                           	opt stack 0
  1082  000058                     remove_chain@clst:
  1083                           	opt stack 0
  1084  000058                     create_chain@clst:
  1085                           	opt stack 0
  1086                           
  1087                           ; 4 bytes @ 0x57
  1088  000058                     	ds	1
  1089  000059                     ??_dir_sdi:
  1090                           
  1091                           ; 0 bytes @ 0x58
  1092  000059                     	ds	1
  1093  00005A                     f_mount@rp:
  1094                           	opt stack 0
  1095                           
  1096                           ; 2 bytes @ 0x59
  1097  00005A                     	ds	2
  1098  00005C                     f_mount@vol:
  1099                           	opt stack 0
  1100                           
  1101                           ; 2 bytes @ 0x5B
  1102  00005C                     	ds	4
  1103  000060                     tblptru	equ	0xFF8
  1104                           tblptrh	equ	0xFF7
  1105                           tblptrl	equ	0xFF6
  1106                           tablat	equ	0xFF5
  1107                           postinc0	equ	0xFEE
  1108                           wreg	equ	0xFE8
  1109                           postdec1	equ	0xFE5
  1110                           fsr1h	equ	0xFE2
  1111                           fsr1l	equ	0xFE1
  1112                           
  1113                           ; 0 bytes @ 0x5F
  1114 ;;
  1115 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1116 ;;
  1117 ;; *************** function _main *****************
  1118 ;; Defined at:
  1119 ;;		line 57 in file "main.c"
  1120 ;; Parameters:    Size  Location     Type
  1121 ;;		None
  1122 ;; Auto vars:     Size  Location     Type
  1123 ;;  bw              2  112[BANK0 ] unsigned int 
  1124 ;; Return value:  Size  Location     Type
  1125 ;;		None               void
  1126 ;; Registers used:
  1127 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1128 ;; Tracked objects:
  1129 ;;		On entry : 0/0
  1130 ;;		On exit  : 0/0
  1131 ;;		Unchanged: 0/0
  1132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1134 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1136 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1137 ;;Total ram usage:        2 bytes
  1138 ;; Hardware stack levels required when called:   14
  1139 ;; This function calls:
  1140 ;;		_SYSTEM_Initialize
  1141 ;;		_f_close
  1142 ;;		_f_lseek
  1143 ;;		_f_mount
  1144 ;;		_f_open
  1145 ;;		_f_write
  1146 ;; This function is called by:
  1147 ;;		Startup code after reset
  1148 ;; This function uses a non-reentrant model
  1149 ;;
  1150                           
  1151                           	psect	text0
  1152  005CCA                     __ptext0:
  1153                           	opt stack 0
  1154  005CCA                     _main:
  1155                           	opt stack 17
  1156                           
  1157                           ;main.c: 58: UINT bw;
  1158                           ;main.c: 61: SYSTEM_Initialize();
  1159                           
  1160                           ;incstack = 0
  1161  005CCA  EC78  F033         	call	_SYSTEM_Initialize	;wreg free
  1162                           
  1163                           ;main.c: 91: if (f_mount(&FatFs, "", 1) == FR_OK) {
  1164  005CCE  0E0A               	movlw	low _FatFs
  1165  005CD0  6E52               	movwf	f_mount@fs,c
  1166  005CD2  0E0D               	movlw	high _FatFs
  1167  005CD4  6E53               	movwf	f_mount@fs+1,c
  1168  005CD6  0E0F               	movlw	low (STR_4+14)
  1169  005CD8  6E54               	movwf	f_mount@path,c
  1170  005CDA  0E10               	movlw	high (STR_4+14)
  1171  005CDC  6E55               	movwf	f_mount@path+1,c
  1172  005CDE  0E01               	movlw	1
  1173  005CE0  6E56               	movwf	f_mount@opt,c
  1174  005CE2  EC8E  F02F         	call	_f_mount	;wreg free
  1175  005CE6  0900               	iorlw	0
  1176  005CE8  A4D8               	btfss	status,2,c
  1177  005CEA  D055               	goto	l819
  1178                           
  1179                           ;main.c: 92: do { LATB0 = 0; } while(0);
  1180  005CEC  908A               	bcf	3978,0,c	;volatile
  1181  005CEE  D000               	goto	l6005
  1182  005CF0                     l6005:
  1183                           
  1184                           ;main.c: 93: if (f_open(&Fil, "hello.txt", 0x10 | 0x01 | 0x02) == FR_OK) {
  1185  005CF0  0ED7               	movlw	low _Fil
  1186  005CF2  0100               	movlb	0	; () banked
  1187  005CF4  6F9A               	movwf	f_open@fp& (0+255),b
  1188  005CF6  0E00               	movlw	high _Fil
  1189  005CF8  0100               	movlb	0	; () banked
  1190  005CFA  6F9B               	movwf	(f_open@fp+1)& (0+255),b
  1191  005CFC  0E1F               	movlw	low STR_3
  1192  005CFE  0100               	movlb	0	; () banked
  1193  005D00  6F9C               	movwf	f_open@path& (0+255),b
  1194  005D02  0E10               	movlw	high STR_3
  1195  005D04  0100               	movlb	0	; () banked
  1196  005D06  6F9D               	movwf	(f_open@path+1)& (0+255),b
  1197  005D08  0E13               	movlw	19
  1198  005D0A  0100               	movlb	0	; () banked
  1199  005D0C  6F9E               	movwf	f_open@mode& (0+255),b
  1200  005D0E  EC11  F01B         	call	_f_open	;wreg free
  1201  005D12  0900               	iorlw	0
  1202  005D14  A4D8               	btfss	status,2,c
  1203  005D16  D03F               	goto	l819
  1204                           
  1205                           ;main.c: 95: if ((Fil.fsize != 0) && (f_lseek(&Fil, Fil.fsize) != FR_OK)) goto endSD;
  1206  005D18  0100               	movlb	0	; () banked
  1207  005D1A  51E1               	movf	(_Fil+10)& (0+255),w,b
  1208  005D1C  0100               	movlb	0	; () banked
  1209  005D1E  11E2               	iorwf	(_Fil+11)& (0+255),w,b
  1210  005D20  0100               	movlb	0	; () banked
  1211  005D22  11E3               	iorwf	(_Fil+12)& (0+255),w,b
  1212  005D24  0100               	movlb	0	; () banked
  1213  005D26  11E4               	iorwf	(_Fil+13)& (0+255),w,b
  1214  005D28  B4D8               	btfsc	status,2,c
  1215  005D2A  D015               	goto	l6013
  1216                           
  1217                           ; BSR set to: 0
  1218  005D2C  0ED7               	movlw	low _Fil
  1219  005D2E  0100               	movlb	0	; () banked
  1220  005D30  6F6D               	movwf	f_lseek@fp& (0+255),b
  1221  005D32  0E00               	movlw	high _Fil
  1222  005D34  0100               	movlb	0	; () banked
  1223  005D36  6F6E               	movwf	(f_lseek@fp+1)& (0+255),b
  1224  005D38  C0E1  F06F         	movff	_Fil+10,f_lseek@ofs
  1225  005D3C  C0E2  F070         	movff	_Fil+11,f_lseek@ofs+1
  1226  005D40  C0E3  F071         	movff	_Fil+12,f_lseek@ofs+2
  1227  005D44  C0E4  F072         	movff	_Fil+13,f_lseek@ofs+3
  1228  005D48  EC71  F012         	call	_f_lseek	;wreg free
  1229  005D4C  0900               	iorlw	0
  1230  005D4E  A4D8               	btfss	status,2,c
  1231  005D50  D01C               	goto	l6015
  1232  005D52  D001               	goto	l6013
  1233  005D54  D01A               	goto	l6015
  1234  005D56                     l6013:
  1235                           
  1236                           ;main.c: 97: f_write(&Fil, "Hello world!\r\n", 14, &bw);
  1237  005D56  0ED7               	movlw	low _Fil
  1238  005D58  0100               	movlb	0	; () banked
  1239  005D5A  6F6D               	movwf	f_write@fp& (0+255),b
  1240  005D5C  0E00               	movlw	high _Fil
  1241  005D5E  0100               	movlb	0	; () banked
  1242  005D60  6F6E               	movwf	(f_write@fp+1)& (0+255),b
  1243  005D62  0E01               	movlw	low STR_4
  1244  005D64  0100               	movlb	0	; () banked
  1245  005D66  6F6F               	movwf	f_write@buff& (0+255),b
  1246  005D68  0E10               	movlw	high STR_4
  1247  005D6A  0100               	movlb	0	; () banked
  1248  005D6C  6F70               	movwf	(f_write@buff+1)& (0+255),b
  1249  005D6E  0E00               	movlw	0
  1250  005D70  0100               	movlb	0	; () banked
  1251  005D72  6F72               	movwf	(f_write@btw+1)& (0+255),b
  1252  005D74  0E0E               	movlw	14
  1253  005D76  6F71               	movwf	f_write@btw& (0+255),b
  1254  005D78  0ED0               	movlw	low main@bw
  1255  005D7A  0100               	movlb	0	; () banked
  1256  005D7C  6F73               	movwf	f_write@bw& (0+255),b
  1257  005D7E  0E00               	movlw	high main@bw
  1258  005D80  0100               	movlb	0	; () banked
  1259  005D82  6F74               	movwf	(f_write@bw+1)& (0+255),b
  1260  005D84  ECD7  F00D         	call	_f_write	;wreg free
  1261  005D88  D000               	goto	l6015
  1262  005D8A                     l6015:
  1263  005D8A  0ED7               	movlw	low _Fil
  1264  005D8C  6E4E               	movwf	f_close@fp,c
  1265  005D8E  0E00               	movlw	high _Fil
  1266  005D90  6E4F               	movwf	f_close@fp+1,c
  1267  005D92  ECD3  F032         	call	_f_close	;wreg free
  1268  005D96                     l819:
  1269  005D96  D7FF               	goto	l819
  1270  005D98  EF00  F000         	goto	start
  1271  005D9C                     __end_of_main:
  1272                           	opt stack 0
  1273                           tblptru	equ	0xFF8
  1274                           tblptrh	equ	0xFF7
  1275                           tblptrl	equ	0xFF6
  1276                           tablat	equ	0xFF5
  1277                           postinc0	equ	0xFEE
  1278                           wreg	equ	0xFE8
  1279                           postdec1	equ	0xFE5
  1280                           fsr1h	equ	0xFE2
  1281                           fsr1l	equ	0xFE1
  1282                           status	equ	0xFD8
  1283                           
  1284 ;; *************** function _f_write *****************
  1285 ;; Defined at:
  1286 ;;		line 2691 in file "ff.c"
  1287 ;; Parameters:    Size  Location     Type
  1288 ;;  fp              2   13[BANK0 ] PTR struct .
  1289 ;;		 -> Fil(32), 
  1290 ;;  buff            2   15[BANK0 ] PTR const void 
  1291 ;;		 -> STR_4(15), 
  1292 ;;  btw             2   17[BANK0 ] unsigned int 
  1293 ;;  bw              2   19[BANK0 ] PTR unsigned int 
  1294 ;;		 -> main@bw(2), 
  1295 ;; Auto vars:     Size  Location     Type
  1296 ;;  clst            4   47[BANK0 ] unsigned long 
  1297 ;;  sect            4   43[BANK0 ] unsigned long 
  1298 ;;  wcnt            2   51[BANK0 ] unsigned int 
  1299 ;;  cc              2   41[BANK0 ] unsigned int 
  1300 ;;  wbuff           2   38[BANK0 ] PTR const unsigned char 
  1301 ;;		 -> STR_4(15), 
  1302 ;;  csect           1   40[BANK0 ] unsigned char 
  1303 ;;  res             1   37[BANK0 ] enum E88
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  1    wreg      enum E88
  1306 ;; Registers used:
  1307 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1308 ;; Tracked objects:
  1309 ;;		On entry : 0/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1313 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1314 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1315 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1316 ;;      Totals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1317 ;;Total ram usage:       40 bytes
  1318 ;; Hardware stack levels used:    1
  1319 ;; Hardware stack levels required when called:   10
  1320 ;; This function calls:
  1321 ;;		_clust2sect
  1322 ;;		_create_chain
  1323 ;;		_disk_write
  1324 ;;		_mem_cpy
  1325 ;;		_move_window
  1326 ;;		_sync_window
  1327 ;;		_validate
  1328 ;; This function is called by:
  1329 ;;		_main
  1330 ;; This function uses a non-reentrant model
  1331 ;;
  1332                           
  1333                           	psect	text1
  1334  001BAE                     __ptext1:
  1335                           	opt stack 0
  1336  001BAE                     _f_write:
  1337                           	opt stack 20
  1338                           
  1339                           ;ff.c: 2698: FRESULT res;
  1340                           ;ff.c: 2699: DWORD clst, sect;
  1341                           ;ff.c: 2700: UINT wcnt, cc;
  1342                           ;ff.c: 2701: const BYTE *wbuff = (const BYTE*)buff;
  1343                           
  1344                           ;incstack = 0
  1345  001BAE  C06F  F086         	movff	f_write@buff,f_write@wbuff
  1346  001BB2  C070  F087         	movff	f_write@buff+1,f_write@wbuff+1
  1347                           
  1348                           ;ff.c: 2702: BYTE csect;
  1349                           ;ff.c: 2705: *bw = 0;
  1350  001BB6  C073  FFD9         	movff	f_write@bw,fsr2l
  1351  001BBA  C074  FFDA         	movff	f_write@bw+1,fsr2h
  1352  001BBE  0E00               	movlw	0
  1353  001BC0  6EDE               	movwf	postinc2,c
  1354  001BC2  0E00               	movlw	0
  1355  001BC4  6EDD               	movwf	postdec2,c
  1356                           
  1357                           ;ff.c: 2707: res = validate(fp);
  1358  001BC6  C06D  F002         	movff	f_write@fp,validate@obj
  1359  001BCA  C06E  F003         	movff	f_write@fp+1,validate@obj+1
  1360  001BCE  EC3F  F030         	call	_validate	;wreg free
  1361  001BD2  0100               	movlb	0	; () banked
  1362  001BD4  6F85               	movwf	f_write@res& (0+255),b
  1363                           
  1364                           ; BSR set to: 0
  1365                           ;ff.c: 2708: if (res != FR_OK) return res;
  1366  001BD6  0100               	movlb	0	; () banked
  1367  001BD8  5185               	movf	f_write@res& (0+255),w,b
  1368  001BDA  0100               	movlb	0	; () banked
  1369  001BDC  A4D8               	btfss	status,2,c
  1370  001BDE  0012               	return	
  1371  001BE0  D001               	goto	l5625
  1372                           
  1373                           ; BSR set to: 0
  1374                           ;	Return value of _f_write is never used
  1375  001BE2  0012               	return	
  1376  001BE4                     l5625:
  1377                           
  1378                           ; BSR set to: 0
  1379                           ;ff.c: 2709: if (fp->err)
  1380  001BE4  0100               	movlb	0	; () banked
  1381  001BE6  EE20 F005          	lfsr	2,5
  1382  001BEA  516D               	movf	f_write@fp& (0+255),w,b
  1383  001BEC  26D9               	addwf	fsr2l,f,c
  1384  001BEE  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1385  001BF0  22DA               	addwfc	fsr2h,f,c
  1386  001BF2  50DF               	movf	indf2,w,c
  1387  001BF4  A4D8               	btfss	status,2,c
  1388  001BF6  0012               	return	
  1389  001BF8  D001               	goto	l5629
  1390                           
  1391                           ; BSR set to: 0
  1392                           ;ff.c: 2710: return (FRESULT)fp->err;
  1393                           ;	Return value of _f_write is never used
  1394  001BFA  0012               	return	
  1395  001BFC                     l5629:
  1396                           
  1397                           ; BSR set to: 0
  1398                           ;ff.c: 2711: if (!(fp->flag & 0x02))
  1399  001BFC  0100               	movlb	0	; () banked
  1400  001BFE  EE20 F004          	lfsr	2,4
  1401  001C02  516D               	movf	f_write@fp& (0+255),w,b
  1402  001C04  26D9               	addwf	fsr2l,f,c
  1403  001C06  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1404  001C08  22DA               	addwfc	fsr2h,f,c
  1405  001C0A  0100               	movlb	0	; () banked
  1406  001C0C  A2DF               	btfss	indf2,1,c
  1407  001C0E  0012               	return	
  1408  001C10  D001               	goto	l5633
  1409                           
  1410                           ; BSR set to: 0
  1411                           ;ff.c: 2712: return FR_DENIED;
  1412                           ;	Return value of _f_write is never used
  1413  001C12  0012               	return	
  1414  001C14                     l5633:
  1415                           
  1416                           ; BSR set to: 0
  1417                           ;ff.c: 2713: if (fp->fptr + btw < fp->fptr) btw = 0;
  1418  001C14  0100               	movlb	0	; () banked
  1419  001C16  EE20 F006          	lfsr	2,6
  1420  001C1A  516D               	movf	f_write@fp& (0+255),w,b
  1421  001C1C  26D9               	addwf	fsr2l,f,c
  1422  001C1E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1423  001C20  22DA               	addwfc	fsr2h,f,c
  1424  001C22  0100               	movlb	0	; () banked
  1425  001C24  EE10 F006          	lfsr	1,6
  1426  001C28  516D               	movf	f_write@fp& (0+255),w,b
  1427  001C2A  26E1               	addwf	fsr1l,f,c
  1428  001C2C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1429  001C2E  22E2               	addwfc	fsr1h,f,c
  1430  001C30  CFE6 F079          	movff	postinc1,??_f_write+4
  1431  001C34  CFE6 F07A          	movff	postinc1,??_f_write+5
  1432  001C38  CFE6 F07B          	movff	postinc1,??_f_write+6
  1433  001C3C  CFE6 F07C          	movff	postinc1,??_f_write+7
  1434  001C40  0100               	movlb	0	; () banked
  1435  001C42  5171               	movf	f_write@btw& (0+255),w,b
  1436  001C44  0100               	movlb	0	; () banked
  1437  001C46  2579               	addwf	(??_f_write+4)& (0+255),w,b
  1438  001C48  0100               	movlb	0	; () banked
  1439  001C4A  6F7D               	movwf	(??_f_write+8)& (0+255),b
  1440  001C4C  0100               	movlb	0	; () banked
  1441  001C4E  5172               	movf	(f_write@btw+1)& (0+255),w,b
  1442  001C50  0100               	movlb	0	; () banked
  1443  001C52  217A               	addwfc	(??_f_write+5)& (0+255),w,b
  1444  001C54  0100               	movlb	0	; () banked
  1445  001C56  6F7E               	movwf	(??_f_write+9)& (0+255),b
  1446  001C58  0E00               	movlw	0
  1447  001C5A  0100               	movlb	0	; () banked
  1448  001C5C  217B               	addwfc	(??_f_write+6)& (0+255),w,b
  1449  001C5E  0100               	movlb	0	; () banked
  1450  001C60  6F7F               	movwf	(??_f_write+10)& (0+255),b
  1451  001C62  0E00               	movlw	0
  1452  001C64  0100               	movlb	0	; () banked
  1453  001C66  217C               	addwfc	(??_f_write+7)& (0+255),w,b
  1454  001C68  0100               	movlb	0	; () banked
  1455  001C6A  6F80               	movwf	(??_f_write+11)& (0+255),b
  1456  001C6C  50DE               	movf	postinc2,w,c
  1457  001C6E  0100               	movlb	0	; () banked
  1458  001C70  5D7D               	subwf	(??_f_write+8)& (0+255),w,b
  1459  001C72  50DE               	movf	postinc2,w,c
  1460  001C74  0100               	movlb	0	; () banked
  1461  001C76  597E               	subwfb	(??_f_write+9)& (0+255),w,b
  1462  001C78  50DE               	movf	postinc2,w,c
  1463  001C7A  0100               	movlb	0	; () banked
  1464  001C7C  597F               	subwfb	(??_f_write+10)& (0+255),w,b
  1465  001C7E  50DE               	movf	postinc2,w,c
  1466  001C80  0100               	movlb	0	; () banked
  1467  001C82  5980               	subwfb	(??_f_write+11)& (0+255),w,b
  1468  001C84  B0D8               	btfsc	status,0,c
  1469  001C86  D3ED               	goto	l5745
  1470                           
  1471                           ; BSR set to: 0
  1472  001C88  0E00               	movlw	0
  1473  001C8A  0100               	movlb	0	; () banked
  1474  001C8C  6F72               	movwf	(f_write@btw+1)& (0+255),b
  1475  001C8E  0E00               	movlw	0
  1476  001C90  6F71               	movwf	f_write@btw& (0+255),b
  1477                           
  1478                           ; BSR set to: 0
  1479                           ;ff.c: 2715: for ( ; btw;
  1480                           ;ff.c: 2716: wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
  1481  001C92  D3E7               	goto	l5745
  1482  001C94                     l5637:
  1483                           
  1484                           ; BSR set to: 0
  1485                           ;ff.c: 2717: if ((fp->fptr % ((UINT)512)) == 0) {
  1486  001C94  0100               	movlb	0	; () banked
  1487  001C96  EE20 F006          	lfsr	2,6
  1488  001C9A  516D               	movf	f_write@fp& (0+255),w,b
  1489  001C9C  26D9               	addwf	fsr2l,f,c
  1490  001C9E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1491  001CA0  22DA               	addwfc	fsr2h,f,c
  1492  001CA2  0EFF               	movlw	255
  1493  001CA4  14DE               	andwf	postinc2,w,c
  1494  001CA6  0100               	movlb	0	; () banked
  1495  001CA8  6F75               	movwf	??_f_write& (0+255),b
  1496  001CAA  0E01               	movlw	1
  1497  001CAC  14DE               	andwf	postinc2,w,c
  1498  001CAE  0100               	movlb	0	; () banked
  1499  001CB0  6F76               	movwf	(??_f_write+1)& (0+255),b
  1500  001CB2  0E00               	movlw	0
  1501  001CB4  14DE               	andwf	postinc2,w,c
  1502  001CB6  0100               	movlb	0	; () banked
  1503  001CB8  6F77               	movwf	(??_f_write+2)& (0+255),b
  1504  001CBA  0E00               	movlw	0
  1505  001CBC  14DE               	andwf	postinc2,w,c
  1506  001CBE  0100               	movlb	0	; () banked
  1507  001CC0  6F78               	movwf	(??_f_write+3)& (0+255),b
  1508  001CC2  0100               	movlb	0	; () banked
  1509  001CC4  5175               	movf	??_f_write& (0+255),w,b
  1510  001CC6  0100               	movlb	0	; () banked
  1511  001CC8  1176               	iorwf	(??_f_write+1)& (0+255),w,b
  1512  001CCA  0100               	movlb	0	; () banked
  1513  001CCC  1177               	iorwf	(??_f_write+2)& (0+255),w,b
  1514  001CCE  0100               	movlb	0	; () banked
  1515  001CD0  1178               	iorwf	(??_f_write+3)& (0+255),w,b
  1516  001CD2  A4D8               	btfss	status,2,c
  1517  001CD4  D2F9               	goto	l5721
  1518                           
  1519                           ; BSR set to: 0
  1520                           ;ff.c: 2718: csect = (BYTE)(fp->fptr / ((UINT)512) & (fp->fs->csize - 1));
  1521  001CD6  0100               	movlb	0	; () banked
  1522  001CD8  EE20 F006          	lfsr	2,6
  1523  001CDC  516D               	movf	f_write@fp& (0+255),w,b
  1524  001CDE  26D9               	addwf	fsr2l,f,c
  1525  001CE0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1526  001CE2  22DA               	addwfc	fsr2h,f,c
  1527  001CE4  CFDE F075          	movff	postinc2,??_f_write
  1528  001CE8  CFDE F076          	movff	postinc2,??_f_write+1
  1529  001CEC  CFDE F077          	movff	postinc2,??_f_write+2
  1530  001CF0  CFDE F078          	movff	postinc2,??_f_write+3
  1531  001CF4  0E0A               	movlw	10
  1532  001CF6  D006               	goto	u8110
  1533  001CF8                     u8115:
  1534  001CF8  0100               	movlb	0	; () banked
  1535  001CFA  90D8               	bcf	status,0,c
  1536  001CFC  3378               	rrcf	(??_f_write+3)& (0+255),f,b
  1537  001CFE  3377               	rrcf	(??_f_write+2)& (0+255),f,b
  1538  001D00  3376               	rrcf	(??_f_write+1)& (0+255),f,b
  1539  001D02  3375               	rrcf	??_f_write& (0+255),f,b
  1540  001D04                     u8110:
  1541  001D04  2EE8               	decfsz	wreg,f,c
  1542  001D06  D7F8               	goto	u8115
  1543  001D08  C06D  FFD9         	movff	f_write@fp,fsr2l
  1544  001D0C  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1545  001D10  EE10 F002          	lfsr	1,2
  1546  001D14  50DE               	movf	postinc2,w,c
  1547  001D16  26E1               	addwf	fsr1l,f,c
  1548  001D18  50DD               	movf	postdec2,w,c
  1549  001D1A  22E2               	addwfc	fsr1h,f,c
  1550  001D1C  50E7               	movf	indf1,w,c
  1551  001D1E  0100               	movlb	0	; () banked
  1552  001D20  6F79               	movwf	(??_f_write+4)& (0+255),b
  1553  001D22  0100               	movlb	0	; () banked
  1554  001D24  0579               	decf	(??_f_write+4)& (0+255),w,b
  1555  001D26  0100               	movlb	0	; () banked
  1556  001D28  1575               	andwf	??_f_write& (0+255),w,b
  1557  001D2A  0100               	movlb	0	; () banked
  1558  001D2C  6F88               	movwf	f_write@csect& (0+255),b
  1559                           
  1560                           ; BSR set to: 0
  1561                           ;ff.c: 2719: if (!csect) {
  1562  001D2E  0100               	movlb	0	; () banked
  1563  001D30  5188               	movf	f_write@csect& (0+255),w,b
  1564  001D32  0100               	movlb	0	; () banked
  1565  001D34  A4D8               	btfss	status,2,c
  1566  001D36  D0BF               	goto	l5673
  1567                           
  1568                           ; BSR set to: 0
  1569                           ;ff.c: 2720: if (fp->fptr == 0) {
  1570  001D38  0100               	movlb	0	; () banked
  1571  001D3A  EE20 F006          	lfsr	2,6
  1572  001D3E  516D               	movf	f_write@fp& (0+255),w,b
  1573  001D40  26D9               	addwf	fsr2l,f,c
  1574  001D42  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1575  001D44  22DA               	addwfc	fsr2h,f,c
  1576  001D46  50DE               	movf	postinc2,w,c
  1577  001D48  10DE               	iorwf	postinc2,w,c
  1578  001D4A  10DE               	iorwf	postinc2,w,c
  1579  001D4C  10DE               	iorwf	postinc2,w,c
  1580  001D4E  A4D8               	btfss	status,2,c
  1581  001D50  D02D               	goto	l5651
  1582                           
  1583                           ; BSR set to: 0
  1584                           ;ff.c: 2721: clst = fp->sclust;
  1585  001D52  0100               	movlb	0	; () banked
  1586  001D54  EE20 F00E          	lfsr	2,14
  1587  001D58  516D               	movf	f_write@fp& (0+255),w,b
  1588  001D5A  26D9               	addwf	fsr2l,f,c
  1589  001D5C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1590  001D5E  22DA               	addwfc	fsr2h,f,c
  1591  001D60  CFDE F08F          	movff	postinc2,f_write@clst
  1592  001D64  CFDE F090          	movff	postinc2,f_write@clst+1
  1593  001D68  CFDE F091          	movff	postinc2,f_write@clst+2
  1594  001D6C  CFDE F092          	movff	postinc2,f_write@clst+3
  1595                           
  1596                           ; BSR set to: 0
  1597                           ;ff.c: 2722: if (clst == 0)
  1598  001D70  0100               	movlb	0	; () banked
  1599  001D72  518F               	movf	f_write@clst& (0+255),w,b
  1600  001D74  0100               	movlb	0	; () banked
  1601  001D76  1190               	iorwf	(f_write@clst+1)& (0+255),w,b
  1602  001D78  0100               	movlb	0	; () banked
  1603  001D7A  1191               	iorwf	(f_write@clst+2)& (0+255),w,b
  1604  001D7C  0100               	movlb	0	; () banked
  1605  001D7E  1192               	iorwf	(f_write@clst+3)& (0+255),w,b
  1606  001D80  A4D8               	btfss	status,2,c
  1607  001D82  D036               	goto	l5653
  1608                           
  1609                           ; BSR set to: 0
  1610                           ;ff.c: 2723: clst = create_chain(fp->fs, 0);
  1611  001D84  C06D  FFD9         	movff	f_write@fp,fsr2l
  1612  001D88  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1613  001D8C  CFDE F056          	movff	postinc2,create_chain@fs
  1614  001D90  CFDD F057          	movff	postdec2,create_chain@fs+1
  1615  001D94  0E00               	movlw	0
  1616  001D96  6E58               	movwf	create_chain@clst,c
  1617  001D98  0E00               	movlw	0
  1618  001D9A  6E59               	movwf	create_chain@clst+1,c
  1619  001D9C  0E00               	movlw	0
  1620  001D9E  6E5A               	movwf	create_chain@clst+2,c
  1621  001DA0  0E00               	movlw	0
  1622  001DA2  6E5B               	movwf	create_chain@clst+3,c
  1623  001DA4  EC45  F01F         	call	_create_chain	;wreg free
  1624  001DA8  D01A               	goto	L1
  1625                           
  1626                           ;ff.c: 2724: } else {
  1627  001DAA  D022               	goto	l5653
  1628  001DAC                     l5651:
  1629                           
  1630                           ;ff.c: 2730: clst = create_chain(fp->fs, fp->clust);
  1631  001DAC  C06D  FFD9         	movff	f_write@fp,fsr2l
  1632  001DB0  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1633  001DB4  CFDE F056          	movff	postinc2,create_chain@fs
  1634  001DB8  CFDD F057          	movff	postdec2,create_chain@fs+1
  1635  001DBC  0100               	movlb	0	; () banked
  1636  001DBE  EE20 F012          	lfsr	2,18
  1637  001DC2  516D               	movf	f_write@fp& (0+255),w,b
  1638  001DC4  26D9               	addwf	fsr2l,f,c
  1639  001DC6  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1640  001DC8  22DA               	addwfc	fsr2h,f,c
  1641  001DCA  CFDE F058          	movff	postinc2,create_chain@clst
  1642  001DCE  CFDE F059          	movff	postinc2,create_chain@clst+1
  1643  001DD2  CFDE F05A          	movff	postinc2,create_chain@clst+2
  1644  001DD6  CFDE F05B          	movff	postinc2,create_chain@clst+3
  1645  001DDA  EC45  F01F         	call	_create_chain	;wreg free
  1646  001DDE                     L1:
  1647  001DDE  C056  F08F         	movff	?_create_chain,f_write@clst
  1648  001DE2  C057  F090         	movff	?_create_chain+1,f_write@clst+1
  1649  001DE6  C058  F091         	movff	?_create_chain+2,f_write@clst+2
  1650  001DEA  C059  F092         	movff	?_create_chain+3,f_write@clst+3
  1651  001DEE  D000               	goto	l5653
  1652  001DF0                     l5653:
  1653                           
  1654                           ;ff.c: 2731: }
  1655                           ;ff.c: 2732: if (clst == 0) break;
  1656  001DF0  0100               	movlb	0	; () banked
  1657  001DF2  518F               	movf	f_write@clst& (0+255),w,b
  1658  001DF4  0100               	movlb	0	; () banked
  1659  001DF6  1190               	iorwf	(f_write@clst+1)& (0+255),w,b
  1660  001DF8  0100               	movlb	0	; () banked
  1661  001DFA  1191               	iorwf	(f_write@clst+2)& (0+255),w,b
  1662  001DFC  0100               	movlb	0	; () banked
  1663  001DFE  1192               	iorwf	(f_write@clst+3)& (0+255),w,b
  1664  001E00  B4D8               	btfsc	status,2,c
  1665  001E02  D335               	goto	l5747
  1666  001E04  D001               	goto	l5657
  1667                           
  1668                           ; BSR set to: 0
  1669  001E06  D333               	goto	l5747
  1670  001E08                     l5657:
  1671                           
  1672                           ; BSR set to: 0
  1673                           ;ff.c: 2733: if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  1674  001E08  0100               	movlb	0	; () banked
  1675  001E0A  058F               	decf	f_write@clst& (0+255),w,b
  1676  001E0C  0100               	movlb	0	; () banked
  1677  001E0E  1190               	iorwf	(f_write@clst+1)& (0+255),w,b
  1678  001E10  0100               	movlb	0	; () banked
  1679  001E12  1191               	iorwf	(f_write@clst+2)& (0+255),w,b
  1680  001E14  0100               	movlb	0	; () banked
  1681  001E16  1192               	iorwf	(f_write@clst+3)& (0+255),w,b
  1682  001E18  A4D8               	btfss	status,2,c
  1683  001E1A  D00A               	goto	l5663
  1684                           
  1685                           ; BSR set to: 0
  1686  001E1C  0100               	movlb	0	; () banked
  1687  001E1E  EE20 F005          	lfsr	2,5
  1688  001E22  516D               	movf	f_write@fp& (0+255),w,b
  1689  001E24  26D9               	addwf	fsr2l,f,c
  1690  001E26  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1691  001E28  22DA               	addwfc	fsr2h,f,c
  1692  001E2A  0E02               	movlw	2
  1693  001E2C  6EDF               	movwf	indf2,c
  1694                           
  1695                           ; BSR set to: 0
  1696                           ;	Return value of _f_write is never used
  1697  001E2E  0012               	return	
  1698  001E30                     l5663:
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;ff.c: 2734: if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR
      +                          ; };
  1702  001E30  0100               	movlb	0	; () banked
  1703  001E32  298F               	incf	f_write@clst& (0+255),w,b
  1704  001E34  E114               	bnz	l5669
  1705  001E36  0100               	movlb	0	; () banked
  1706  001E38  2990               	incf	(f_write@clst+1)& (0+255),w,b
  1707  001E3A  E111               	bnz	l5669
  1708  001E3C  0100               	movlb	0	; () banked
  1709  001E3E  2991               	incf	(f_write@clst+2)& (0+255),w,b
  1710  001E40  E10E               	bnz	l5669
  1711  001E42  0100               	movlb	0	; () banked
  1712  001E44  2992               	incf	(f_write@clst+3)& (0+255),w,b
  1713  001E46  A4D8               	btfss	status,2,c
  1714  001E48  D00A               	goto	l5669
  1715                           
  1716                           ; BSR set to: 0
  1717  001E4A  0100               	movlb	0	; () banked
  1718  001E4C  EE20 F005          	lfsr	2,5
  1719  001E50  516D               	movf	f_write@fp& (0+255),w,b
  1720  001E52  26D9               	addwf	fsr2l,f,c
  1721  001E54  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1722  001E56  22DA               	addwfc	fsr2h,f,c
  1723  001E58  0E01               	movlw	1
  1724  001E5A  6EDF               	movwf	indf2,c
  1725                           
  1726                           ; BSR set to: 0
  1727                           ;	Return value of _f_write is never used
  1728  001E5C  0012               	return	
  1729  001E5E                     l5669:
  1730                           
  1731                           ; BSR set to: 0
  1732                           ;ff.c: 2735: fp->clust = clst;
  1733  001E5E  0100               	movlb	0	; () banked
  1734  001E60  EE20 F012          	lfsr	2,18
  1735  001E64  516D               	movf	f_write@fp& (0+255),w,b
  1736  001E66  26D9               	addwf	fsr2l,f,c
  1737  001E68  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1738  001E6A  22DA               	addwfc	fsr2h,f,c
  1739  001E6C  C08F  FFDE         	movff	f_write@clst,postinc2
  1740  001E70  C090  FFDE         	movff	f_write@clst+1,postinc2
  1741  001E74  C091  FFDE         	movff	f_write@clst+2,postinc2
  1742  001E78  C092  FFDE         	movff	f_write@clst+3,postinc2
  1743                           
  1744                           ;ff.c: 2736: if (fp->sclust == 0) fp->sclust = clst;
  1745  001E7C  0100               	movlb	0	; () banked
  1746  001E7E  EE20 F00E          	lfsr	2,14
  1747  001E82  516D               	movf	f_write@fp& (0+255),w,b
  1748  001E84  26D9               	addwf	fsr2l,f,c
  1749  001E86  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1750  001E88  22DA               	addwfc	fsr2h,f,c
  1751  001E8A  50DE               	movf	postinc2,w,c
  1752  001E8C  10DE               	iorwf	postinc2,w,c
  1753  001E8E  10DE               	iorwf	postinc2,w,c
  1754  001E90  10DE               	iorwf	postinc2,w,c
  1755  001E92  A4D8               	btfss	status,2,c
  1756  001E94  D010               	goto	l5673
  1757                           
  1758                           ; BSR set to: 0
  1759  001E96  0100               	movlb	0	; () banked
  1760  001E98  EE20 F00E          	lfsr	2,14
  1761  001E9C  516D               	movf	f_write@fp& (0+255),w,b
  1762  001E9E  26D9               	addwf	fsr2l,f,c
  1763  001EA0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1764  001EA2  22DA               	addwfc	fsr2h,f,c
  1765  001EA4  C08F  FFDE         	movff	f_write@clst,postinc2
  1766  001EA8  C090  FFDE         	movff	f_write@clst+1,postinc2
  1767  001EAC  C091  FFDE         	movff	f_write@clst+2,postinc2
  1768  001EB0  C092  FFDE         	movff	f_write@clst+3,postinc2
  1769                           
  1770                           ; BSR set to: 0
  1771  001EB4  D000               	goto	l5673
  1772  001EB6                     l5673:
  1773                           
  1774                           ; BSR set to: 0
  1775                           ;ff.c: 2737: }
  1776                           ;ff.c: 2739: if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))
  1777  001EB6  0100               	movlb	0	; () banked
  1778  001EB8  EE20 F016          	lfsr	2,22
  1779  001EBC  516D               	movf	f_write@fp& (0+255),w,b
  1780  001EBE  26D9               	addwf	fsr2l,f,c
  1781  001EC0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1782  001EC2  22DA               	addwfc	fsr2h,f,c
  1783  001EC4  C06D  FFE1         	movff	f_write@fp,fsr1l
  1784  001EC8  C06E  FFE2         	movff	f_write@fp+1,fsr1h
  1785  001ECC  EE00 F02A          	lfsr	0,42
  1786  001ED0  50E6               	movf	postinc1,w,c
  1787  001ED2  26E9               	addwf	fsr0l,f,c
  1788  001ED4  50E5               	movf	postdec1,w,c
  1789  001ED6  22EA               	addwfc	fsr0h,f,c
  1790  001ED8  50DE               	movf	postinc2,w,c
  1791  001EDA  18EE               	xorwf	postinc0,w,c
  1792  001EDC  E121               	bnz	l5681
  1793  001EDE  50DE               	movf	postinc2,w,c
  1794  001EE0  18EE               	xorwf	postinc0,w,c
  1795  001EE2  E11E               	bnz	l5681
  1796  001EE4  50DE               	movf	postinc2,w,c
  1797  001EE6  18EE               	xorwf	postinc0,w,c
  1798  001EE8  E11B               	bnz	l5681
  1799  001EEA  50DE               	movf	postinc2,w,c
  1800  001EEC  18EE               	xorwf	postinc0,w,c
  1801  001EEE  A4D8               	btfss	status,2,c
  1802  001EF0  D017               	goto	l5681
  1803                           
  1804                           ; BSR set to: 0
  1805  001EF2  C06D  FFD9         	movff	f_write@fp,fsr2l
  1806  001EF6  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1807  001EFA  CFDE F01B          	movff	postinc2,sync_window@fs
  1808  001EFE  CFDD F01C          	movff	postdec2,sync_window@fs+1
  1809  001F02  EC58  F029         	call	_sync_window	;wreg free
  1810  001F06  0900               	iorlw	0
  1811  001F08  B4D8               	btfsc	status,2,c
  1812  001F0A  D00A               	goto	l5681
  1813                           
  1814                           ;ff.c: 2740: { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  1815  001F0C  0100               	movlb	0	; () banked
  1816  001F0E  EE20 F005          	lfsr	2,5
  1817  001F12  516D               	movf	f_write@fp& (0+255),w,b
  1818  001F14  26D9               	addwf	fsr2l,f,c
  1819  001F16  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1820  001F18  22DA               	addwfc	fsr2h,f,c
  1821  001F1A  0E01               	movlw	1
  1822  001F1C  6EDF               	movwf	indf2,c
  1823                           
  1824                           ; BSR set to: 0
  1825                           ;	Return value of _f_write is never used
  1826  001F1E  0012               	return	
  1827  001F20                     l5681:
  1828                           
  1829                           ;ff.c: 2748: sect = clust2sect(fp->fs, fp->clust);
  1830  001F20  C06D  FFD9         	movff	f_write@fp,fsr2l
  1831  001F24  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1832  001F28  CFDE F00D          	movff	postinc2,clust2sect@fs
  1833  001F2C  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  1834  001F30  0100               	movlb	0	; () banked
  1835  001F32  EE20 F012          	lfsr	2,18
  1836  001F36  516D               	movf	f_write@fp& (0+255),w,b
  1837  001F38  26D9               	addwf	fsr2l,f,c
  1838  001F3A  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1839  001F3C  22DA               	addwfc	fsr2h,f,c
  1840  001F3E  CFDE F00F          	movff	postinc2,clust2sect@clst
  1841  001F42  CFDE F010          	movff	postinc2,clust2sect@clst+1
  1842  001F46  CFDE F011          	movff	postinc2,clust2sect@clst+2
  1843  001F4A  CFDE F012          	movff	postinc2,clust2sect@clst+3
  1844  001F4E  EC30  F02F         	call	_clust2sect	;wreg free
  1845  001F52  C00D  F08B         	movff	?_clust2sect,f_write@sect
  1846  001F56  C00E  F08C         	movff	?_clust2sect+1,f_write@sect+1
  1847  001F5A  C00F  F08D         	movff	?_clust2sect+2,f_write@sect+2
  1848  001F5E  C010  F08E         	movff	?_clust2sect+3,f_write@sect+3
  1849                           
  1850                           ;ff.c: 2749: if (!sect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  1851  001F62  0100               	movlb	0	; () banked
  1852  001F64  518B               	movf	f_write@sect& (0+255),w,b
  1853  001F66  0100               	movlb	0	; () banked
  1854  001F68  118C               	iorwf	(f_write@sect+1)& (0+255),w,b
  1855  001F6A  0100               	movlb	0	; () banked
  1856  001F6C  118D               	iorwf	(f_write@sect+2)& (0+255),w,b
  1857  001F6E  0100               	movlb	0	; () banked
  1858  001F70  118E               	iorwf	(f_write@sect+3)& (0+255),w,b
  1859  001F72  A4D8               	btfss	status,2,c
  1860  001F74  D00A               	goto	l5689
  1861                           
  1862                           ; BSR set to: 0
  1863  001F76  0100               	movlb	0	; () banked
  1864  001F78  EE20 F005          	lfsr	2,5
  1865  001F7C  516D               	movf	f_write@fp& (0+255),w,b
  1866  001F7E  26D9               	addwf	fsr2l,f,c
  1867  001F80  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1868  001F82  22DA               	addwfc	fsr2h,f,c
  1869  001F84  0E02               	movlw	2
  1870  001F86  6EDF               	movwf	indf2,c
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;	Return value of _f_write is never used
  1874  001F88  0012               	return	
  1875  001F8A                     l5689:
  1876                           
  1877                           ; BSR set to: 0
  1878                           ;ff.c: 2750: sect += csect;
  1879  001F8A  0100               	movlb	0	; () banked
  1880  001F8C  5188               	movf	f_write@csect& (0+255),w,b
  1881  001F8E  0100               	movlb	0	; () banked
  1882  001F90  278B               	addwf	f_write@sect& (0+255),f,b
  1883  001F92  0E00               	movlw	0
  1884  001F94  238C               	addwfc	(f_write@sect+1)& (0+255),f,b
  1885  001F96  238D               	addwfc	(f_write@sect+2)& (0+255),f,b
  1886  001F98  238E               	addwfc	(f_write@sect+3)& (0+255),f,b
  1887                           
  1888                           ;ff.c: 2751: cc = btw / ((UINT)512);
  1889  001F9A  C071  F075         	movff	f_write@btw,??_f_write
  1890  001F9E  C072  F076         	movff	f_write@btw+1,??_f_write+1
  1891  001FA2  0E09               	movlw	9
  1892  001FA4  0100               	movlb	0	; () banked
  1893  001FA6  6F77               	movwf	(??_f_write+2)& (0+255),b
  1894  001FA8                     u8225:
  1895  001FA8  0100               	movlb	0	; () banked
  1896  001FAA  90D8               	bcf	status,0,c
  1897  001FAC  3376               	rrcf	(??_f_write+1)& (0+255),f,b
  1898  001FAE  3375               	rrcf	??_f_write& (0+255),f,b
  1899  001FB0  0100               	movlb	0	; () banked
  1900  001FB2  2F77               	decfsz	(??_f_write+2)& (0+255),f,b
  1901  001FB4  D7F9               	goto	u8225
  1902  001FB6  C075  F089         	movff	??_f_write,f_write@cc
  1903  001FBA  C076  F08A         	movff	??_f_write+1,f_write@cc+1
  1904                           
  1905                           ;ff.c: 2752: if (cc) {
  1906  001FBE  0100               	movlb	0	; () banked
  1907  001FC0  5189               	movf	f_write@cc& (0+255),w,b
  1908  001FC2  0100               	movlb	0	; () banked
  1909  001FC4  118A               	iorwf	(f_write@cc+1)& (0+255),w,b
  1910  001FC6  B4D8               	btfsc	status,2,c
  1911  001FC8  D12D               	goto	l5709
  1912                           
  1913                           ; BSR set to: 0
  1914                           ;ff.c: 2753: if (csect + cc > fp->fs->csize)
  1915  001FCA  0100               	movlb	0	; () banked
  1916  001FCC  5188               	movf	f_write@csect& (0+255),w,b
  1917  001FCE  0100               	movlb	0	; () banked
  1918  001FD0  2589               	addwf	f_write@cc& (0+255),w,b
  1919  001FD2  0100               	movlb	0	; () banked
  1920  001FD4  6F75               	movwf	??_f_write& (0+255),b
  1921  001FD6  0E00               	movlw	0
  1922  001FD8  0100               	movlb	0	; () banked
  1923  001FDA  218A               	addwfc	(f_write@cc+1)& (0+255),w,b
  1924  001FDC  0100               	movlb	0	; () banked
  1925  001FDE  6F76               	movwf	(??_f_write+1)& (0+255),b
  1926  001FE0  C06D  FFD9         	movff	f_write@fp,fsr2l
  1927  001FE4  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1928  001FE8  EE10 F002          	lfsr	1,2
  1929  001FEC  50DE               	movf	postinc2,w,c
  1930  001FEE  26E1               	addwf	fsr1l,f,c
  1931  001FF0  50DD               	movf	postdec2,w,c
  1932  001FF2  22E2               	addwfc	fsr1h,f,c
  1933  001FF4  50E7               	movf	indf1,w,c
  1934  001FF6  0100               	movlb	0	; () banked
  1935  001FF8  6F77               	movwf	(??_f_write+2)& (0+255),b
  1936  001FFA  6B78               	clrf	(??_f_write+3)& (0+255),b
  1937  001FFC  0100               	movlb	0	; () banked
  1938  001FFE  5175               	movf	??_f_write& (0+255),w,b
  1939  002000  0100               	movlb	0	; () banked
  1940  002002  5D77               	subwf	(??_f_write+2)& (0+255),w,b
  1941  002004  0100               	movlb	0	; () banked
  1942  002006  5176               	movf	(??_f_write+1)& (0+255),w,b
  1943  002008  0100               	movlb	0	; () banked
  1944  00200A  5978               	subwfb	(??_f_write+3)& (0+255),w,b
  1945  00200C  B0D8               	btfsc	status,0,c
  1946  00200E  D023               	goto	l5695
  1947                           
  1948                           ; BSR set to: 0
  1949                           ;ff.c: 2754: cc = fp->fs->csize - csect;
  1950  002010  0100               	movlb	0	; () banked
  1951  002012  5188               	movf	f_write@csect& (0+255),w,b
  1952  002014  0100               	movlb	0	; () banked
  1953  002016  6F75               	movwf	??_f_write& (0+255),b
  1954  002018  6B76               	clrf	(??_f_write+1)& (0+255),b
  1955  00201A  0100               	movlb	0	; () banked
  1956  00201C  1F75               	comf	??_f_write& (0+255),f,b
  1957  00201E  1F76               	comf	(??_f_write+1)& (0+255),f,b
  1958  002020  4B75               	infsnz	??_f_write& (0+255),f,b
  1959  002022  2B76               	incf	(??_f_write+1)& (0+255),f,b
  1960  002024  C06D  FFD9         	movff	f_write@fp,fsr2l
  1961  002028  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1962  00202C  EE10 F002          	lfsr	1,2
  1963  002030  50DE               	movf	postinc2,w,c
  1964  002032  26E1               	addwf	fsr1l,f,c
  1965  002034  50DD               	movf	postdec2,w,c
  1966  002036  22E2               	addwfc	fsr1h,f,c
  1967  002038  50E7               	movf	indf1,w,c
  1968  00203A  0100               	movlb	0	; () banked
  1969  00203C  6F77               	movwf	(??_f_write+2)& (0+255),b
  1970  00203E  0100               	movlb	0	; () banked
  1971  002040  5177               	movf	(??_f_write+2)& (0+255),w,b
  1972  002042  0100               	movlb	0	; () banked
  1973  002044  2575               	addwf	??_f_write& (0+255),w,b
  1974  002046  0100               	movlb	0	; () banked
  1975  002048  6F89               	movwf	f_write@cc& (0+255),b
  1976  00204A  0E00               	movlw	0
  1977  00204C  0100               	movlb	0	; () banked
  1978  00204E  2176               	addwfc	(??_f_write+1)& (0+255),w,b
  1979  002050  0100               	movlb	0	; () banked
  1980  002052  6F8A               	movwf	(f_write@cc+1)& (0+255),b
  1981  002054  D000               	goto	l5695
  1982  002056                     l5695:
  1983                           
  1984                           ; BSR set to: 0
  1985                           ;ff.c: 2755: if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
  1986  002056  C086  F011         	movff	f_write@wbuff,disk_write@buff
  1987  00205A  C087  F012         	movff	f_write@wbuff+1,disk_write@buff+1
  1988  00205E  C08B  F013         	movff	f_write@sect,disk_write@sector
  1989  002062  C08C  F014         	movff	f_write@sect+1,disk_write@sector+1
  1990  002066  C08D  F015         	movff	f_write@sect+2,disk_write@sector+2
  1991  00206A  C08E  F016         	movff	f_write@sect+3,disk_write@sector+3
  1992  00206E  C089  F017         	movff	f_write@cc,disk_write@count
  1993  002072  C08A  F018         	movff	f_write@cc+1,disk_write@count+1
  1994  002076  C06D  FFD9         	movff	f_write@fp,fsr2l
  1995  00207A  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1996  00207E  EE10 F001          	lfsr	1,1
  1997  002082  50DE               	movf	postinc2,w,c
  1998  002084  26E1               	addwf	fsr1l,f,c
  1999  002086  50DD               	movf	postdec2,w,c
  2000  002088  22E2               	addwfc	fsr1h,f,c
  2001  00208A  50E7               	movf	indf1,w,c
  2002  00208C  ECBD  F02A         	call	_disk_write
  2003  002090  0900               	iorlw	0
  2004  002092  B4D8               	btfsc	status,2,c
  2005  002094  D00A               	goto	l5701
  2006                           
  2007                           ;ff.c: 2756: { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2008  002096  0100               	movlb	0	; () banked
  2009  002098  EE20 F005          	lfsr	2,5
  2010  00209C  516D               	movf	f_write@fp& (0+255),w,b
  2011  00209E  26D9               	addwf	fsr2l,f,c
  2012  0020A0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2013  0020A2  22DA               	addwfc	fsr2h,f,c
  2014  0020A4  0E01               	movlw	1
  2015  0020A6  6EDF               	movwf	indf2,c
  2016                           
  2017                           ; BSR set to: 0
  2018                           ;	Return value of _f_write is never used
  2019  0020A8  0012               	return	
  2020  0020AA                     l5701:
  2021                           
  2022                           ;ff.c: 2759: if (fp->fs->winsect - sect < cc) {
  2023  0020AA  0100               	movlb	0	; () banked
  2024  0020AC  5189               	movf	f_write@cc& (0+255),w,b
  2025  0020AE  0100               	movlb	0	; () banked
  2026  0020B0  6F75               	movwf	??_f_write& (0+255),b
  2027  0020B2  0100               	movlb	0	; () banked
  2028  0020B4  518A               	movf	(f_write@cc+1)& (0+255),w,b
  2029  0020B6  0100               	movlb	0	; () banked
  2030  0020B8  6F76               	movwf	(??_f_write+1)& (0+255),b
  2031  0020BA  0100               	movlb	0	; () banked
  2032  0020BC  6B77               	clrf	(??_f_write+2)& (0+255),b
  2033  0020BE  0100               	movlb	0	; () banked
  2034  0020C0  6B78               	clrf	(??_f_write+3)& (0+255),b
  2035  0020C2  C06D  FFD9         	movff	f_write@fp,fsr2l
  2036  0020C6  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2037  0020CA  EE10 F02A          	lfsr	1,42
  2038  0020CE  50DE               	movf	postinc2,w,c
  2039  0020D0  26E1               	addwf	fsr1l,f,c
  2040  0020D2  50DD               	movf	postdec2,w,c
  2041  0020D4  22E2               	addwfc	fsr1h,f,c
  2042  0020D6  CFE6 F079          	movff	postinc1,??_f_write+4
  2043  0020DA  CFE6 F07A          	movff	postinc1,??_f_write+5
  2044  0020DE  CFE6 F07B          	movff	postinc1,??_f_write+6
  2045  0020E2  CFE6 F07C          	movff	postinc1,??_f_write+7
  2046  0020E6  C08B  F07D         	movff	f_write@sect,??_f_write+8
  2047  0020EA  C08C  F07E         	movff	f_write@sect+1,??_f_write+9
  2048  0020EE  C08D  F07F         	movff	f_write@sect+2,??_f_write+10
  2049  0020F2  C08E  F080         	movff	f_write@sect+3,??_f_write+11
  2050  0020F6  0100               	movlb	0	; () banked
  2051  0020F8  1F7D               	comf	(??_f_write+8)& (0+255),f,b
  2052  0020FA  1F7E               	comf	(??_f_write+9)& (0+255),f,b
  2053  0020FC  1F7F               	comf	(??_f_write+10)& (0+255),f,b
  2054  0020FE  1F80               	comf	(??_f_write+11)& (0+255),f,b
  2055  002100  2B7D               	incf	(??_f_write+8)& (0+255),f,b
  2056  002102  0E00               	movlw	0
  2057  002104  237E               	addwfc	(??_f_write+9)& (0+255),f,b
  2058  002106  237F               	addwfc	(??_f_write+10)& (0+255),f,b
  2059  002108  2380               	addwfc	(??_f_write+11)& (0+255),f,b
  2060  00210A  0100               	movlb	0	; () banked
  2061  00210C  5179               	movf	(??_f_write+4)& (0+255),w,b
  2062  00210E  0100               	movlb	0	; () banked
  2063  002110  257D               	addwf	(??_f_write+8)& (0+255),w,b
  2064  002112  0100               	movlb	0	; () banked
  2065  002114  6F81               	movwf	(??_f_write+12)& (0+255),b
  2066  002116  0100               	movlb	0	; () banked
  2067  002118  517A               	movf	(??_f_write+5)& (0+255),w,b
  2068  00211A  0100               	movlb	0	; () banked
  2069  00211C  217E               	addwfc	(??_f_write+9)& (0+255),w,b
  2070  00211E  0100               	movlb	0	; () banked
  2071  002120  6F82               	movwf	(??_f_write+13)& (0+255),b
  2072  002122  0100               	movlb	0	; () banked
  2073  002124  517B               	movf	(??_f_write+6)& (0+255),w,b
  2074  002126  0100               	movlb	0	; () banked
  2075  002128  217F               	addwfc	(??_f_write+10)& (0+255),w,b
  2076  00212A  0100               	movlb	0	; () banked
  2077  00212C  6F83               	movwf	(??_f_write+14)& (0+255),b
  2078  00212E  0100               	movlb	0	; () banked
  2079  002130  517C               	movf	(??_f_write+7)& (0+255),w,b
  2080  002132  0100               	movlb	0	; () banked
  2081  002134  2180               	addwfc	(??_f_write+11)& (0+255),w,b
  2082  002136  0100               	movlb	0	; () banked
  2083  002138  6F84               	movwf	(??_f_write+15)& (0+255),b
  2084  00213A  0100               	movlb	0	; () banked
  2085  00213C  5175               	movf	??_f_write& (0+255),w,b
  2086  00213E  0100               	movlb	0	; () banked
  2087  002140  5D81               	subwf	(??_f_write+12)& (0+255),w,b
  2088  002142  0100               	movlb	0	; () banked
  2089  002144  5176               	movf	(??_f_write+1)& (0+255),w,b
  2090  002146  0100               	movlb	0	; () banked
  2091  002148  5982               	subwfb	(??_f_write+13)& (0+255),w,b
  2092  00214A  0100               	movlb	0	; () banked
  2093  00214C  5177               	movf	(??_f_write+2)& (0+255),w,b
  2094  00214E  0100               	movlb	0	; () banked
  2095  002150  5983               	subwfb	(??_f_write+14)& (0+255),w,b
  2096  002152  0100               	movlb	0	; () banked
  2097  002154  5178               	movf	(??_f_write+3)& (0+255),w,b
  2098  002156  0100               	movlb	0	; () banked
  2099  002158  5984               	subwfb	(??_f_write+15)& (0+255),w,b
  2100  00215A  B0D8               	btfsc	status,0,c
  2101  00215C  D053               	goto	l5707
  2102                           
  2103                           ; BSR set to: 0
  2104                           ;ff.c: 2760: mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * ((UINT)512)), ((UI
      +                          NT)512));
  2105  00215E  C06D  FFD9         	movff	f_write@fp,fsr2l
  2106  002162  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2107  002166  CFDE F075          	movff	postinc2,??_f_write
  2108  00216A  CFDD F076          	movff	postdec2,??_f_write+1
  2109  00216E  0E2E               	movlw	46
  2110  002170  0100               	movlb	0	; () banked
  2111  002172  2575               	addwf	??_f_write& (0+255),w,b
  2112  002174  6E01               	movwf	mem_cpy@dst,c
  2113  002176  0E00               	movlw	0
  2114  002178  0100               	movlb	0	; () banked
  2115  00217A  2176               	addwfc	(??_f_write+1)& (0+255),w,b
  2116  00217C  6E02               	movwf	mem_cpy@dst+1,c
  2117  00217E  C06D  FFD9         	movff	f_write@fp,fsr2l
  2118  002182  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2119  002186  EE10 F02A          	lfsr	1,42
  2120  00218A  50DE               	movf	postinc2,w,c
  2121  00218C  26E1               	addwf	fsr1l,f,c
  2122  00218E  50DD               	movf	postdec2,w,c
  2123  002190  22E2               	addwfc	fsr1h,f,c
  2124  002192  CFE6 F077          	movff	postinc1,??_f_write+2
  2125  002196  CFE5 F078          	movff	postdec1,??_f_write+3
  2126  00219A  C08B  F079         	movff	f_write@sect,??_f_write+4
  2127  00219E  C08C  F07A         	movff	f_write@sect+1,??_f_write+5
  2128  0021A2  0100               	movlb	0	; () banked
  2129  0021A4  1F79               	comf	(??_f_write+4)& (0+255),f,b
  2130  0021A6  1F7A               	comf	(??_f_write+5)& (0+255),f,b
  2131  0021A8  4B79               	infsnz	(??_f_write+4)& (0+255),f,b
  2132  0021AA  2B7A               	incf	(??_f_write+5)& (0+255),f,b
  2133  0021AC  0100               	movlb	0	; () banked
  2134  0021AE  5177               	movf	(??_f_write+2)& (0+255),w,b
  2135  0021B0  0100               	movlb	0	; () banked
  2136  0021B2  2779               	addwf	(??_f_write+4)& (0+255),f,b
  2137  0021B4  0100               	movlb	0	; () banked
  2138  0021B6  5178               	movf	(??_f_write+3)& (0+255),w,b
  2139  0021B8  0100               	movlb	0	; () banked
  2140  0021BA  237A               	addwfc	(??_f_write+5)& (0+255),f,b
  2141  0021BC  0E09               	movlw	9
  2142  0021BE                     u8275:
  2143  0021BE  90D8               	bcf	status,0,c
  2144  0021C0  0100               	movlb	0	; () banked
  2145  0021C2  3779               	rlcf	(??_f_write+4)& (0+255),f,b
  2146  0021C4  377A               	rlcf	(??_f_write+5)& (0+255),f,b
  2147  0021C6  2EE8               	decfsz	wreg,f,c
  2148  0021C8  D7FA               	goto	u8275
  2149  0021CA  0100               	movlb	0	; () banked
  2150  0021CC  5179               	movf	(??_f_write+4)& (0+255),w,b
  2151  0021CE  0100               	movlb	0	; () banked
  2152  0021D0  2586               	addwf	f_write@wbuff& (0+255),w,b
  2153  0021D2  6E03               	movwf	mem_cpy@src,c
  2154  0021D4  0100               	movlb	0	; () banked
  2155  0021D6  517A               	movf	(??_f_write+5)& (0+255),w,b
  2156  0021D8  0100               	movlb	0	; () banked
  2157  0021DA  2187               	addwfc	(f_write@wbuff+1)& (0+255),w,b
  2158  0021DC  6E04               	movwf	mem_cpy@src+1,c
  2159  0021DE  0E02               	movlw	2
  2160  0021E0  6E06               	movwf	mem_cpy@cnt+1,c
  2161  0021E2  0E00               	movlw	0
  2162  0021E4  6E05               	movwf	mem_cpy@cnt,c
  2163  0021E6  ECCE  F02E         	call	_mem_cpy	;wreg free
  2164                           
  2165                           ;ff.c: 2761: fp->fs->wflag = 0;
  2166  0021EA  C06D  FFD9         	movff	f_write@fp,fsr2l
  2167  0021EE  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2168  0021F2  EE10 F004          	lfsr	1,4
  2169  0021F6  50DE               	movf	postinc2,w,c
  2170  0021F8  26E1               	addwf	fsr1l,f,c
  2171  0021FA  50DD               	movf	postdec2,w,c
  2172  0021FC  22E2               	addwfc	fsr1h,f,c
  2173  0021FE  0E00               	movlw	0
  2174  002200  6EE7               	movwf	indf1,c
  2175  002202  D000               	goto	l5707
  2176  002204                     l5707:
  2177                           
  2178                           ;ff.c: 2762: }
  2179                           ;ff.c: 2770: wcnt = ((UINT)512) * cc;
  2180  002204  C089  F075         	movff	f_write@cc,??_f_write
  2181  002208  C08A  F076         	movff	f_write@cc+1,??_f_write+1
  2182  00220C  0E09               	movlw	9
  2183  00220E                     u8285:
  2184  00220E  90D8               	bcf	status,0,c
  2185  002210  0100               	movlb	0	; () banked
  2186  002212  3775               	rlcf	??_f_write& (0+255),f,b
  2187  002214  3776               	rlcf	(??_f_write+1)& (0+255),f,b
  2188  002216  2EE8               	decfsz	wreg,f,c
  2189  002218  D7FA               	goto	u8285
  2190  00221A  C075  F093         	movff	??_f_write,f_write@wcnt
  2191  00221E  C076  F094         	movff	??_f_write+1,f_write@wcnt+1
  2192                           
  2193                           ;ff.c: 2771: continue;
  2194  002222  D0F6               	goto	l5737
  2195  002224                     l5709:
  2196                           
  2197                           ; BSR set to: 0
  2198                           ;ff.c: 2772: }
  2199                           ;ff.c: 2774: if (fp->fptr >= fp->fsize) {
  2200  002224  0100               	movlb	0	; () banked
  2201  002226  EE20 F00A          	lfsr	2,10
  2202  00222A  516D               	movf	f_write@fp& (0+255),w,b
  2203  00222C  26D9               	addwf	fsr2l,f,c
  2204  00222E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2205  002230  22DA               	addwfc	fsr2h,f,c
  2206  002232  0100               	movlb	0	; () banked
  2207  002234  EE10 F006          	lfsr	1,6
  2208  002238  516D               	movf	f_write@fp& (0+255),w,b
  2209  00223A  26E1               	addwf	fsr1l,f,c
  2210  00223C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2211  00223E  22E2               	addwfc	fsr1h,f,c
  2212  002240  50DE               	movf	postinc2,w,c
  2213  002242  5CE6               	subwf	postinc1,w,c
  2214  002244  50DE               	movf	postinc2,w,c
  2215  002246  58E6               	subwfb	postinc1,w,c
  2216  002248  50DE               	movf	postinc2,w,c
  2217  00224A  58E6               	subwfb	postinc1,w,c
  2218  00224C  50DE               	movf	postinc2,w,c
  2219  00224E  58E6               	subwfb	postinc1,w,c
  2220  002250  A0D8               	btfss	status,0,c
  2221  002252  D02A               	goto	l5719
  2222                           
  2223                           ; BSR set to: 0
  2224                           ;ff.c: 2775: if (sync_window(fp->fs)) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ER
      +                          R; };
  2225  002254  C06D  FFD9         	movff	f_write@fp,fsr2l
  2226  002258  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2227  00225C  CFDE F01B          	movff	postinc2,sync_window@fs
  2228  002260  CFDD F01C          	movff	postdec2,sync_window@fs+1
  2229  002264  EC58  F029         	call	_sync_window	;wreg free
  2230  002268  0900               	iorlw	0
  2231  00226A  B4D8               	btfsc	status,2,c
  2232  00226C  D00A               	goto	l5717
  2233  00226E  0100               	movlb	0	; () banked
  2234  002270  EE20 F005          	lfsr	2,5
  2235  002274  516D               	movf	f_write@fp& (0+255),w,b
  2236  002276  26D9               	addwf	fsr2l,f,c
  2237  002278  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2238  00227A  22DA               	addwfc	fsr2h,f,c
  2239  00227C  0E01               	movlw	1
  2240  00227E  6EDF               	movwf	indf2,c
  2241                           
  2242                           ; BSR set to: 0
  2243                           ;	Return value of _f_write is never used
  2244  002280  0012               	return	
  2245  002282                     l5717:
  2246                           
  2247                           ;ff.c: 2776: fp->fs->winsect = sect;
  2248  002282  C06D  FFD9         	movff	f_write@fp,fsr2l
  2249  002286  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2250  00228A  EE10 F02A          	lfsr	1,42
  2251  00228E  50DE               	movf	postinc2,w,c
  2252  002290  26E1               	addwf	fsr1l,f,c
  2253  002292  50DD               	movf	postdec2,w,c
  2254  002294  22E2               	addwfc	fsr1h,f,c
  2255  002296  C08B  FFE6         	movff	f_write@sect,postinc1
  2256  00229A  C08C  FFE6         	movff	f_write@sect+1,postinc1
  2257  00229E  C08D  FFE6         	movff	f_write@sect+2,postinc1
  2258  0022A2  C08E  FFE6         	movff	f_write@sect+3,postinc1
  2259  0022A6  D000               	goto	l5719
  2260  0022A8                     l5719:
  2261                           
  2262                           ;ff.c: 2777: }
  2263                           ;ff.c: 2785: fp->dsect = sect;
  2264  0022A8  0100               	movlb	0	; () banked
  2265  0022AA  EE20 F016          	lfsr	2,22
  2266  0022AE  516D               	movf	f_write@fp& (0+255),w,b
  2267  0022B0  26D9               	addwf	fsr2l,f,c
  2268  0022B2  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2269  0022B4  22DA               	addwfc	fsr2h,f,c
  2270  0022B6  C08B  FFDE         	movff	f_write@sect,postinc2
  2271  0022BA  C08C  FFDE         	movff	f_write@sect+1,postinc2
  2272  0022BE  C08D  FFDE         	movff	f_write@sect+2,postinc2
  2273  0022C2  C08E  FFDE         	movff	f_write@sect+3,postinc2
  2274  0022C6  D000               	goto	l5721
  2275  0022C8                     l5721:
  2276                           
  2277                           ; BSR set to: 0
  2278                           ;ff.c: 2786: }
  2279                           ;ff.c: 2787: wcnt = ((UINT)512) - ((UINT)fp->fptr % ((UINT)512));
  2280  0022C8  0EFF               	movlw	255
  2281  0022CA  0100               	movlb	0	; () banked
  2282  0022CC  6F75               	movwf	??_f_write& (0+255),b
  2283  0022CE  0E01               	movlw	1
  2284  0022D0  0100               	movlb	0	; () banked
  2285  0022D2  6F76               	movwf	(??_f_write+1)& (0+255),b
  2286  0022D4  0100               	movlb	0	; () banked
  2287  0022D6  EE20 F006          	lfsr	2,6
  2288  0022DA  516D               	movf	f_write@fp& (0+255),w,b
  2289  0022DC  26D9               	addwf	fsr2l,f,c
  2290  0022DE  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2291  0022E0  22DA               	addwfc	fsr2h,f,c
  2292  0022E2  CFDE F077          	movff	postinc2,??_f_write+2
  2293  0022E6  CFDD F078          	movff	postdec2,??_f_write+3
  2294  0022EA  0100               	movlb	0	; () banked
  2295  0022EC  5175               	movf	??_f_write& (0+255),w,b
  2296  0022EE  0100               	movlb	0	; () banked
  2297  0022F0  1777               	andwf	(??_f_write+2)& (0+255),f,b
  2298  0022F2  0100               	movlb	0	; () banked
  2299  0022F4  5176               	movf	(??_f_write+1)& (0+255),w,b
  2300  0022F6  0100               	movlb	0	; () banked
  2301  0022F8  1778               	andwf	(??_f_write+3)& (0+255),f,b
  2302  0022FA  0100               	movlb	0	; () banked
  2303  0022FC  1F77               	comf	(??_f_write+2)& (0+255),f,b
  2304  0022FE  1F78               	comf	(??_f_write+3)& (0+255),f,b
  2305  002300  4B77               	infsnz	(??_f_write+2)& (0+255),f,b
  2306  002302  2B78               	incf	(??_f_write+3)& (0+255),f,b
  2307  002304  0E00               	movlw	0
  2308  002306  0100               	movlb	0	; () banked
  2309  002308  2577               	addwf	(??_f_write+2)& (0+255),w,b
  2310  00230A  0100               	movlb	0	; () banked
  2311  00230C  6F93               	movwf	f_write@wcnt& (0+255),b
  2312  00230E  0E02               	movlw	2
  2313  002310  0100               	movlb	0	; () banked
  2314  002312  2178               	addwfc	(??_f_write+3)& (0+255),w,b
  2315  002314  0100               	movlb	0	; () banked
  2316  002316  6F94               	movwf	(f_write@wcnt+1)& (0+255),b
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;ff.c: 2788: if (wcnt > btw) wcnt = btw;
  2320  002318  0100               	movlb	0	; () banked
  2321  00231A  5193               	movf	f_write@wcnt& (0+255),w,b
  2322  00231C  0100               	movlb	0	; () banked
  2323  00231E  5D71               	subwf	f_write@btw& (0+255),w,b
  2324  002320  0100               	movlb	0	; () banked
  2325  002322  5194               	movf	(f_write@wcnt+1)& (0+255),w,b
  2326  002324  0100               	movlb	0	; () banked
  2327  002326  5972               	subwfb	(f_write@btw+1)& (0+255),w,b
  2328  002328  B0D8               	btfsc	status,0,c
  2329  00232A  D005               	goto	l5727
  2330                           
  2331                           ; BSR set to: 0
  2332  00232C  C071  F093         	movff	f_write@btw,f_write@wcnt
  2333  002330  C072  F094         	movff	f_write@btw+1,f_write@wcnt+1
  2334  002334  D000               	goto	l5727
  2335  002336                     l5727:
  2336                           
  2337                           ; BSR set to: 0
  2338                           ;ff.c: 2790: if (move_window(fp->fs, fp->dsect) != FR_OK)
  2339  002336  C06D  FFD9         	movff	f_write@fp,fsr2l
  2340  00233A  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2341  00233E  CFDE F030          	movff	postinc2,move_window@fs
  2342  002342  CFDD F031          	movff	postdec2,move_window@fs+1
  2343  002346  0100               	movlb	0	; () banked
  2344  002348  EE20 F016          	lfsr	2,22
  2345  00234C  516D               	movf	f_write@fp& (0+255),w,b
  2346  00234E  26D9               	addwf	fsr2l,f,c
  2347  002350  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2348  002352  22DA               	addwfc	fsr2h,f,c
  2349  002354  CFDE F032          	movff	postinc2,move_window@sector
  2350  002358  CFDE F033          	movff	postinc2,move_window@sector+1
  2351  00235C  CFDE F034          	movff	postinc2,move_window@sector+2
  2352  002360  CFDE F035          	movff	postinc2,move_window@sector+3
  2353  002364  ECE9  F02F         	call	_move_window	;wreg free
  2354  002368  0900               	iorlw	0
  2355  00236A  B4D8               	btfsc	status,2,c
  2356  00236C  D00A               	goto	l5733
  2357                           
  2358                           ;ff.c: 2791: { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2359  00236E  0100               	movlb	0	; () banked
  2360  002370  EE20 F005          	lfsr	2,5
  2361  002374  516D               	movf	f_write@fp& (0+255),w,b
  2362  002376  26D9               	addwf	fsr2l,f,c
  2363  002378  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2364  00237A  22DA               	addwfc	fsr2h,f,c
  2365  00237C  0E01               	movlw	1
  2366  00237E  6EDF               	movwf	indf2,c
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;	Return value of _f_write is never used
  2370  002380  0012               	return	
  2371  002382                     l5733:
  2372                           
  2373                           ;ff.c: 2792: mem_cpy(&fp->fs->win[fp->fptr % ((UINT)512)], wbuff, wcnt);
  2374  002382  0EFF               	movlw	255
  2375  002384  0100               	movlb	0	; () banked
  2376  002386  6F75               	movwf	??_f_write& (0+255),b
  2377  002388  0E01               	movlw	1
  2378  00238A  0100               	movlb	0	; () banked
  2379  00238C  6F76               	movwf	(??_f_write+1)& (0+255),b
  2380  00238E  0100               	movlb	0	; () banked
  2381  002390  EE20 F006          	lfsr	2,6
  2382  002394  516D               	movf	f_write@fp& (0+255),w,b
  2383  002396  26D9               	addwf	fsr2l,f,c
  2384  002398  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2385  00239A  22DA               	addwfc	fsr2h,f,c
  2386  00239C  CFDE F077          	movff	postinc2,??_f_write+2
  2387  0023A0  CFDD F078          	movff	postdec2,??_f_write+3
  2388  0023A4  0100               	movlb	0	; () banked
  2389  0023A6  5175               	movf	??_f_write& (0+255),w,b
  2390  0023A8  0100               	movlb	0	; () banked
  2391  0023AA  1777               	andwf	(??_f_write+2)& (0+255),f,b
  2392  0023AC  0100               	movlb	0	; () banked
  2393  0023AE  5176               	movf	(??_f_write+1)& (0+255),w,b
  2394  0023B0  0100               	movlb	0	; () banked
  2395  0023B2  1778               	andwf	(??_f_write+3)& (0+255),f,b
  2396  0023B4  0E2E               	movlw	46
  2397  0023B6  0100               	movlb	0	; () banked
  2398  0023B8  2777               	addwf	(??_f_write+2)& (0+255),f,b
  2399  0023BA  0E00               	movlw	0
  2400  0023BC  2378               	addwfc	(??_f_write+3)& (0+255),f,b
  2401  0023BE  C06D  FFD9         	movff	f_write@fp,fsr2l
  2402  0023C2  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2403  0023C6  CFDE F079          	movff	postinc2,??_f_write+4
  2404  0023CA  CFDD F07A          	movff	postdec2,??_f_write+5
  2405  0023CE  0100               	movlb	0	; () banked
  2406  0023D0  5177               	movf	(??_f_write+2)& (0+255),w,b
  2407  0023D2  0100               	movlb	0	; () banked
  2408  0023D4  2579               	addwf	(??_f_write+4)& (0+255),w,b
  2409  0023D6  6E01               	movwf	mem_cpy@dst,c
  2410  0023D8  0100               	movlb	0	; () banked
  2411  0023DA  5178               	movf	(??_f_write+3)& (0+255),w,b
  2412  0023DC  0100               	movlb	0	; () banked
  2413  0023DE  217A               	addwfc	(??_f_write+5)& (0+255),w,b
  2414  0023E0  6E02               	movwf	mem_cpy@dst+1,c
  2415  0023E2  C086  F003         	movff	f_write@wbuff,mem_cpy@src
  2416  0023E6  C087  F004         	movff	f_write@wbuff+1,mem_cpy@src+1
  2417  0023EA  C093  F005         	movff	f_write@wcnt,mem_cpy@cnt
  2418  0023EE  C094  F006         	movff	f_write@wcnt+1,mem_cpy@cnt+1
  2419  0023F2  ECCE  F02E         	call	_mem_cpy	;wreg free
  2420                           
  2421                           ;ff.c: 2793: fp->fs->wflag = 1;
  2422  0023F6  C06D  FFD9         	movff	f_write@fp,fsr2l
  2423  0023FA  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2424  0023FE  EE10 F004          	lfsr	1,4
  2425  002402  50DE               	movf	postinc2,w,c
  2426  002404  26E1               	addwf	fsr1l,f,c
  2427  002406  50DD               	movf	postdec2,w,c
  2428  002408  22E2               	addwfc	fsr1h,f,c
  2429  00240A  0E01               	movlw	1
  2430  00240C  6EE7               	movwf	indf1,c
  2431  00240E  D000               	goto	l5737
  2432  002410                     l5737:
  2433  002410  0100               	movlb	0	; () banked
  2434  002412  5193               	movf	f_write@wcnt& (0+255),w,b
  2435  002414  0100               	movlb	0	; () banked
  2436  002416  2786               	addwf	f_write@wbuff& (0+255),f,b
  2437  002418  0100               	movlb	0	; () banked
  2438  00241A  5194               	movf	(f_write@wcnt+1)& (0+255),w,b
  2439  00241C  0100               	movlb	0	; () banked
  2440  00241E  2387               	addwfc	(f_write@wbuff+1)& (0+255),f,b
  2441                           
  2442                           ; BSR set to: 0
  2443  002420  0100               	movlb	0	; () banked
  2444  002422  EE20 F006          	lfsr	2,6
  2445  002426  516D               	movf	f_write@fp& (0+255),w,b
  2446  002428  26D9               	addwf	fsr2l,f,c
  2447  00242A  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2448  00242C  22DA               	addwfc	fsr2h,f,c
  2449  00242E  0100               	movlb	0	; () banked
  2450  002430  5193               	movf	f_write@wcnt& (0+255),w,b
  2451  002432  26DE               	addwf	postinc2,f,c
  2452  002434  5194               	movf	(f_write@wcnt+1)& (0+255),w,b
  2453  002436  22DE               	addwfc	postinc2,f,c
  2454  002438  0E00               	movlw	0
  2455  00243A  22DE               	addwfc	postinc2,f,c
  2456  00243C  22DE               	addwfc	postinc2,f,c
  2457                           
  2458                           ; BSR set to: 0
  2459  00243E  C073  FFD9         	movff	f_write@bw,fsr2l
  2460  002442  C074  FFDA         	movff	f_write@bw+1,fsr2h
  2461  002446  0100               	movlb	0	; () banked
  2462  002448  5193               	movf	f_write@wcnt& (0+255),w,b
  2463  00244A  26DE               	addwf	postinc2,f,c
  2464  00244C  5194               	movf	(f_write@wcnt+1)& (0+255),w,b
  2465  00244E  22DD               	addwfc	postdec2,f,c
  2466                           
  2467                           ; BSR set to: 0
  2468  002450  0100               	movlb	0	; () banked
  2469  002452  5193               	movf	f_write@wcnt& (0+255),w,b
  2470  002454  0100               	movlb	0	; () banked
  2471  002456  5F71               	subwf	f_write@btw& (0+255),f,b
  2472  002458  0100               	movlb	0	; () banked
  2473  00245A  5194               	movf	(f_write@wcnt+1)& (0+255),w,b
  2474  00245C  0100               	movlb	0	; () banked
  2475  00245E  5B72               	subwfb	(f_write@btw+1)& (0+255),f,b
  2476  002460  D000               	goto	l5745
  2477  002462                     l5745:
  2478                           
  2479                           ; BSR set to: 0
  2480  002462  0100               	movlb	0	; () banked
  2481  002464  5171               	movf	f_write@btw& (0+255),w,b
  2482  002466  0100               	movlb	0	; () banked
  2483  002468  1172               	iorwf	(f_write@btw+1)& (0+255),w,b
  2484  00246A  A4D8               	btfss	status,2,c
  2485  00246C  D413               	goto	l5637
  2486  00246E                     l5747:
  2487                           
  2488                           ; BSR set to: 0
  2489                           ;ff.c: 2798: }
  2490                           ;ff.c: 2800: if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
  2491  00246E  0100               	movlb	0	; () banked
  2492  002470  EE20 F006          	lfsr	2,6
  2493  002474  516D               	movf	f_write@fp& (0+255),w,b
  2494  002476  26D9               	addwf	fsr2l,f,c
  2495  002478  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2496  00247A  22DA               	addwfc	fsr2h,f,c
  2497  00247C  0100               	movlb	0	; () banked
  2498  00247E  EE10 F00A          	lfsr	1,10
  2499  002482  516D               	movf	f_write@fp& (0+255),w,b
  2500  002484  26E1               	addwf	fsr1l,f,c
  2501  002486  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2502  002488  22E2               	addwfc	fsr1h,f,c
  2503  00248A  50DE               	movf	postinc2,w,c
  2504  00248C  5CE6               	subwf	postinc1,w,c
  2505  00248E  50DE               	movf	postinc2,w,c
  2506  002490  58E6               	subwfb	postinc1,w,c
  2507  002492  50DE               	movf	postinc2,w,c
  2508  002494  58E6               	subwfb	postinc1,w,c
  2509  002496  50DE               	movf	postinc2,w,c
  2510  002498  58E6               	subwfb	postinc1,w,c
  2511  00249A  B0D8               	btfsc	status,0,c
  2512  00249C  D017               	goto	l5751
  2513                           
  2514                           ; BSR set to: 0
  2515  00249E  0100               	movlb	0	; () banked
  2516  0024A0  EE20 F006          	lfsr	2,6
  2517  0024A4  516D               	movf	f_write@fp& (0+255),w,b
  2518  0024A6  26D9               	addwf	fsr2l,f,c
  2519  0024A8  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2520  0024AA  22DA               	addwfc	fsr2h,f,c
  2521  0024AC  0100               	movlb	0	; () banked
  2522  0024AE  EE10 F00A          	lfsr	1,10
  2523  0024B2  516D               	movf	f_write@fp& (0+255),w,b
  2524  0024B4  26E1               	addwf	fsr1l,f,c
  2525  0024B6  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2526  0024B8  22E2               	addwfc	fsr1h,f,c
  2527  0024BA  CFDE FFE6          	movff	postinc2,postinc1
  2528  0024BE  CFDE FFE6          	movff	postinc2,postinc1
  2529  0024C2  CFDE FFE6          	movff	postinc2,postinc1
  2530  0024C6  CFDE FFE6          	movff	postinc2,postinc1
  2531  0024CA  D000               	goto	l5751
  2532  0024CC                     l5751:
  2533                           
  2534                           ; BSR set to: 0
  2535                           ;ff.c: 2801: fp->flag |= 0x20;
  2536  0024CC  0100               	movlb	0	; () banked
  2537  0024CE  EE20 F004          	lfsr	2,4
  2538  0024D2  516D               	movf	f_write@fp& (0+255),w,b
  2539  0024D4  26D9               	addwf	fsr2l,f,c
  2540  0024D6  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2541  0024D8  22DA               	addwfc	fsr2h,f,c
  2542  0024DA  0E00               	movlw	0
  2543  0024DC  8ADB               	bsf	plusw2,5,c
  2544  0024DE  0012               	return	
  2545                           
  2546                           ; BSR set to: 0
  2547                           
  2548                           ; BSR set to: 0
  2549                           ;ff.c: 2803: return FR_OK;
  2550                           ;	Return value of _f_write is never used
  2551  0024E0  0012               	return		;funcret
  2552  0024E2                     __end_of_f_write:
  2553                           	opt stack 0
  2554                           tblptru	equ	0xFF8
  2555                           tblptrh	equ	0xFF7
  2556                           tblptrl	equ	0xFF6
  2557                           tablat	equ	0xFF5
  2558                           postinc0	equ	0xFEE
  2559                           fsr0h	equ	0xFEA
  2560                           fsr0l	equ	0xFE9
  2561                           wreg	equ	0xFE8
  2562                           indf1	equ	0xFE7
  2563                           postinc1	equ	0xFE6
  2564                           postdec1	equ	0xFE5
  2565                           fsr1h	equ	0xFE2
  2566                           fsr1l	equ	0xFE1
  2567                           indf2	equ	0xFDF
  2568                           postinc2	equ	0xFDE
  2569                           postdec2	equ	0xFDD
  2570                           plusw2	equ	0xFDB
  2571                           fsr2h	equ	0xFDA
  2572                           fsr2l	equ	0xFD9
  2573                           status	equ	0xFD8
  2574                           
  2575 ;; *************** function _f_open *****************
  2576 ;; Defined at:
  2577 ;;		line 2449 in file "ff.c"
  2578 ;; Parameters:    Size  Location     Type
  2579 ;;  fp              2   58[BANK0 ] PTR struct .
  2580 ;;		 -> Fil(32), 
  2581 ;;  path            2   60[BANK0 ] PTR const unsigned char 
  2582 ;;		 -> STR_3(10), STR_2(1), 
  2583 ;;  mode            1   62[BANK0 ] unsigned char 
  2584 ;; Auto vars:     Size  Location     Type
  2585 ;;  dj             22   90[BANK0 ] struct .
  2586 ;;  sfn            12   67[BANK0 ] unsigned char [12]
  2587 ;;  dw              4   83[BANK0 ] unsigned long 
  2588 ;;  cl              4   79[BANK0 ] unsigned long 
  2589 ;;  dir             2   88[BANK0 ] PTR unsigned char 
  2590 ;;		 -> FatFs(558), NULL(0), 
  2591 ;;  res             1   87[BANK0 ] enum E88
  2592 ;; Return value:  Size  Location     Type
  2593 ;;                  1    wreg      enum E88
  2594 ;; Registers used:
  2595 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2596 ;; Tracked objects:
  2597 ;;		On entry : 0/0
  2598 ;;		On exit  : 0/0
  2599 ;;		Unchanged: 0/0
  2600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2601 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2602 ;;      Locals:         0      45       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2603 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2604 ;;      Totals:         0      54       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2605 ;;Total ram usage:       54 bytes
  2606 ;; Hardware stack levels used:    1
  2607 ;; Hardware stack levels required when called:   13
  2608 ;; This function calls:
  2609 ;;		_dir_register
  2610 ;;		_find_volume
  2611 ;;		_follow_path
  2612 ;;		_ld_clust
  2613 ;;		_move_window
  2614 ;;		_remove_chain
  2615 ;;		_st_clust
  2616 ;; This function is called by:
  2617 ;;		_main
  2618 ;; This function uses a non-reentrant model
  2619 ;;
  2620                           
  2621                           	psect	text2
  2622  003622                     __ptext2:
  2623                           	opt stack 0
  2624  003622                     _f_open:
  2625                           	opt stack 17
  2626                           
  2627                           ;ff.c: 2455: FRESULT res;
  2628                           ;ff.c: 2456: DIR dj;
  2629                           ;ff.c: 2457: BYTE *dir;
  2630                           ;ff.c: 2458: BYTE sfn[12];
  2631                           ;ff.c: 2460: DWORD dw, cl;
  2632                           ;ff.c: 2464: if (!fp) return FR_INVALID_OBJECT;
  2633                           
  2634                           ; BSR set to: 0
  2635                           ;incstack = 0
  2636  003622  0100               	movlb	0	; () banked
  2637  003624  519A               	movf	f_open@fp& (0+255),w,b
  2638  003626  0100               	movlb	0	; () banked
  2639  003628  119B               	iorwf	(f_open@fp+1)& (0+255),w,b
  2640  00362A  A4D8               	btfss	status,2,c
  2641  00362C  D002               	goto	l5507
  2642                           
  2643                           ; BSR set to: 0
  2644  00362E  0E09               	movlw	9
  2645                           
  2646                           ; BSR set to: 0
  2647  003630  0012               	return	
  2648  003632                     l5507:
  2649                           
  2650                           ; BSR set to: 0
  2651                           ;ff.c: 2465: fp->fs = 0;
  2652  003632  C09A  FFD9         	movff	f_open@fp,fsr2l
  2653  003636  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  2654  00363A  0E00               	movlw	0
  2655  00363C  6EDE               	movwf	postinc2,c
  2656  00363E  0E00               	movlw	0
  2657  003640  6EDD               	movwf	postdec2,c
  2658                           
  2659                           ; BSR set to: 0
  2660                           ;ff.c: 2468: dj.fs = FatFs[0];
  2661  003642  C0D4  F0BA         	movff	ff@FatFs,f_open@dj
  2662  003646  C0D5  F0BB         	movff	ff@FatFs+1,f_open@dj+1
  2663                           
  2664                           ; BSR set to: 0
  2665                           ;ff.c: 2473: mode &= 0x01 | 0x02 | 0x08 | 0x10 | 0x04;
  2666  00364A  0E1F               	movlw	31
  2667  00364C  0100               	movlb	0	; () banked
  2668  00364E  179E               	andwf	f_open@mode& (0+255),f,b
  2669                           
  2670                           ; BSR set to: 0
  2671                           ;ff.c: 2474: res = find_volume(&dj.fs, &path, (BYTE)(mode & ~0x01));
  2672  003650  0EBA               	movlw	low f_open@dj
  2673  003652  6E45               	movwf	find_volume@rfs,c
  2674  003654  0E00               	movlw	high f_open@dj
  2675  003656  6E46               	movwf	find_volume@rfs+1,c
  2676  003658  0E9C               	movlw	low f_open@path
  2677  00365A  6E47               	movwf	find_volume@path,c
  2678  00365C  0E00               	movlw	high f_open@path
  2679  00365E  6E48               	movwf	find_volume@path+1,c
  2680  003660  0100               	movlb	0	; () banked
  2681  003662  519E               	movf	f_open@mode& (0+255),w,b
  2682  003664  0BFE               	andlw	254
  2683  003666  6E49               	movwf	find_volume@wmode,c
  2684  003668  EC15  F008         	call	_find_volume	;wreg free
  2685  00366C  0100               	movlb	0	; () banked
  2686  00366E  6FB7               	movwf	f_open@res& (0+255),b
  2687                           
  2688                           ; BSR set to: 0
  2689                           ;ff.c: 2479: if (res == FR_OK) {
  2690  003670  0100               	movlb	0	; () banked
  2691  003672  51B7               	movf	f_open@res& (0+255),w,b
  2692  003674  0100               	movlb	0	; () banked
  2693  003676  A4D8               	btfss	status,2,c
  2694  003678  D1F8               	goto	l5611
  2695                           
  2696                           ; BSR set to: 0
  2697                           ;ff.c: 2480: (dj).fn = sfn;
  2698  00367A  0EA3               	movlw	low f_open@sfn
  2699  00367C  0100               	movlb	0	; () banked
  2700  00367E  6FCE               	movwf	(f_open@dj+20)& (0+255),b
  2701  003680  0E00               	movlw	high f_open@sfn
  2702  003682  0100               	movlb	0	; () banked
  2703  003684  6FCF               	movwf	(f_open@dj+21)& (0+255),b
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;ff.c: 2481: res = follow_path(&dj, path);
  2707  003686  0EBA               	movlw	low f_open@dj
  2708  003688  0100               	movlb	0	; () banked
  2709  00368A  6F86               	movwf	follow_path@dp& (0+255),b
  2710  00368C  0E00               	movlw	high f_open@dj
  2711  00368E  0100               	movlb	0	; () banked
  2712  003690  6F87               	movwf	(follow_path@dp+1)& (0+255),b
  2713  003692  C09C  F088         	movff	f_open@path,follow_path@path
  2714  003696  C09D  F089         	movff	f_open@path+1,follow_path@path+1
  2715  00369A  ECBB  F027         	call	_follow_path	;wreg free
  2716  00369E  0100               	movlb	0	; () banked
  2717  0036A0  6FB7               	movwf	f_open@res& (0+255),b
  2718                           
  2719                           ; BSR set to: 0
  2720                           ;ff.c: 2482: dir = dj.dir;
  2721  0036A2  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  2722  0036A6  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  2723                           
  2724                           ; BSR set to: 0
  2725                           ;ff.c: 2484: if (res == FR_OK) {
  2726  0036AA  0100               	movlb	0	; () banked
  2727  0036AC  51B7               	movf	f_open@res& (0+255),w,b
  2728  0036AE  0100               	movlb	0	; () banked
  2729  0036B0  A4D8               	btfss	status,2,c
  2730  0036B2  D00A               	goto	l5529
  2731                           
  2732                           ; BSR set to: 0
  2733                           ;ff.c: 2485: if (!dir)
  2734  0036B4  0100               	movlb	0	; () banked
  2735  0036B6  51B8               	movf	f_open@dir& (0+255),w,b
  2736  0036B8  0100               	movlb	0	; () banked
  2737  0036BA  11B9               	iorwf	(f_open@dir+1)& (0+255),w,b
  2738  0036BC  A4D8               	btfss	status,2,c
  2739  0036BE  D004               	goto	l5529
  2740                           
  2741                           ; BSR set to: 0
  2742                           ;ff.c: 2486: res = FR_INVALID_NAME;
  2743  0036C0  0E06               	movlw	6
  2744  0036C2  0100               	movlb	0	; () banked
  2745  0036C4  6FB7               	movwf	f_open@res& (0+255),b
  2746                           
  2747                           ; BSR set to: 0
  2748  0036C6  D000               	goto	l5529
  2749  0036C8                     l5529:
  2750                           
  2751                           ; BSR set to: 0
  2752                           ;ff.c: 2491: }
  2753                           ;ff.c: 2493: if (mode & (0x08 | 0x10 | 0x04)) {
  2754  0036C8  C09E  F09F         	movff	f_open@mode,??_f_open
  2755  0036CC  0E1C               	movlw	28
  2756  0036CE  0100               	movlb	0	; () banked
  2757  0036D0  179F               	andwf	??_f_open& (0+255),f,b
  2758  0036D2  B4D8               	btfsc	status,2,c
  2759  0036D4  D101               	goto	l5577
  2760                           
  2761                           ; BSR set to: 0
  2762                           ;ff.c: 2494: if (res != FR_OK) {
  2763  0036D6  0100               	movlb	0	; () banked
  2764  0036D8  51B7               	movf	f_open@res& (0+255),w,b
  2765  0036DA  0100               	movlb	0	; () banked
  2766  0036DC  B4D8               	btfsc	status,2,c
  2767  0036DE  D017               	goto	l5541
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;ff.c: 2495: if (res == FR_NO_FILE)
  2771  0036E0  0E04               	movlw	4
  2772  0036E2  0100               	movlb	0	; () banked
  2773  0036E4  19B7               	xorwf	f_open@res& (0+255),w,b
  2774  0036E6  A4D8               	btfss	status,2,c
  2775  0036E8  D00B               	goto	l5537
  2776                           
  2777                           ; BSR set to: 0
  2778                           ;ff.c: 2499: res = dir_register(&dj);
  2779  0036EA  0EBA               	movlw	low f_open@dj
  2780  0036EC  0100               	movlb	0	; () banked
  2781  0036EE  6F8A               	movwf	dir_register@dp& (0+255),b
  2782  0036F0  0E00               	movlw	high f_open@dj
  2783  0036F2  0100               	movlb	0	; () banked
  2784  0036F4  6F8B               	movwf	(dir_register@dp+1)& (0+255),b
  2785  0036F6  EC85  F02D         	call	_dir_register	;wreg free
  2786  0036FA  0100               	movlb	0	; () banked
  2787  0036FC  6FB7               	movwf	f_open@res& (0+255),b
  2788  0036FE  D000               	goto	l5537
  2789  003700                     l5537:
  2790                           
  2791                           ; BSR set to: 0
  2792                           ;ff.c: 2501: mode |= 0x08;
  2793  003700  0100               	movlb	0	; () banked
  2794  003702  879E               	bsf	f_open@mode& (0+255),3,b
  2795                           
  2796                           ; BSR set to: 0
  2797                           ;ff.c: 2502: dir = dj.dir;
  2798  003704  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  2799  003708  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  2800                           
  2801                           ;ff.c: 2503: }
  2802  00370C  D018               	goto	l684
  2803  00370E                     l5541:
  2804                           
  2805                           ; BSR set to: 0
  2806                           ;ff.c: 2504: else {
  2807                           ;ff.c: 2505: if (dir[11] & (0x01 | 0x10)) {
  2808  00370E  0100               	movlb	0	; () banked
  2809  003710  EE20 F00B          	lfsr	2,11
  2810  003714  51B8               	movf	f_open@dir& (0+255),w,b
  2811  003716  26D9               	addwf	fsr2l,f,c
  2812  003718  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2813  00371A  22DA               	addwfc	fsr2h,f,c
  2814  00371C  50DF               	movf	indf2,w,c
  2815  00371E  0100               	movlb	0	; () banked
  2816  003720  6F9F               	movwf	??_f_open& (0+255),b
  2817  003722  0E11               	movlw	17
  2818  003724  0100               	movlb	0	; () banked
  2819  003726  179F               	andwf	??_f_open& (0+255),f,b
  2820  003728  B4D8               	btfsc	status,2,c
  2821  00372A  D002               	goto	l685
  2822                           
  2823                           ; BSR set to: 0
  2824                           ;ff.c: 2506: res = FR_DENIED;
  2825  00372C  0E07               	movlw	7
  2826  00372E  D004               	goto	L2
  2827  003730                     l685:
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;ff.c: 2508: if (mode & 0x04)
  2831  003730  0100               	movlb	0	; () banked
  2832  003732  A59E               	btfss	f_open@mode& (0+255),2,b
  2833  003734  D004               	goto	l684
  2834                           
  2835                           ; BSR set to: 0
  2836                           ;ff.c: 2509: res = FR_EXIST;
  2837  003736  0E08               	movlw	8
  2838  003738                     L2:
  2839  003738  0100               	movlb	0	; () banked
  2840  00373A  6FB7               	movwf	f_open@res& (0+255),b
  2841                           
  2842                           ; BSR set to: 0
  2843  00373C  D000               	goto	l684
  2844  00373E                     l684:
  2845                           
  2846                           ; BSR set to: 0
  2847                           ;ff.c: 2510: }
  2848                           ;ff.c: 2511: }
  2849                           ;ff.c: 2512: if (res == FR_OK && (mode & 0x08)) {
  2850  00373E  0100               	movlb	0	; () banked
  2851  003740  51B7               	movf	f_open@res& (0+255),w,b
  2852  003742  0100               	movlb	0	; () banked
  2853  003744  A4D8               	btfss	status,2,c
  2854  003746  D0EA               	goto	l691
  2855                           
  2856                           ; BSR set to: 0
  2857  003748  0100               	movlb	0	; () banked
  2858  00374A  A79E               	btfss	f_open@mode& (0+255),3,b
  2859  00374C  D0E7               	goto	l691
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;ff.c: 2513: dw = ((DWORD)(2015 - 1980) << 25 | (DWORD)1 << 21 | (DWORD)1 << 16);
  2863  00374E  0E00               	movlw	0
  2864  003750  0100               	movlb	0	; () banked
  2865  003752  6FB3               	movwf	f_open@dw& (0+255),b
  2866  003754  0E00               	movlw	0
  2867  003756  6FB4               	movwf	(f_open@dw+1)& (0+255),b
  2868  003758  0E21               	movlw	33
  2869  00375A  6FB5               	movwf	(f_open@dw+2)& (0+255),b
  2870  00375C  0E46               	movlw	70
  2871  00375E  6FB6               	movwf	(f_open@dw+3)& (0+255),b
  2872                           
  2873                           ; BSR set to: 0
  2874                           ;ff.c: 2514: *(DWORD*)(BYTE*)(dir + 14)=(DWORD)(dw);
  2875  003760  0100               	movlb	0	; () banked
  2876  003762  EE20 F00E          	lfsr	2,14
  2877  003766  51B8               	movf	f_open@dir& (0+255),w,b
  2878  003768  26D9               	addwf	fsr2l,f,c
  2879  00376A  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2880  00376C  22DA               	addwfc	fsr2h,f,c
  2881  00376E  C0B3  FFDE         	movff	f_open@dw,postinc2
  2882  003772  C0B4  FFDE         	movff	f_open@dw+1,postinc2
  2883  003776  C0B5  FFDE         	movff	f_open@dw+2,postinc2
  2884  00377A  C0B6  FFDE         	movff	f_open@dw+3,postinc2
  2885                           
  2886                           ; BSR set to: 0
  2887                           ;ff.c: 2515: *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(dw);
  2888  00377E  0100               	movlb	0	; () banked
  2889  003780  EE20 F016          	lfsr	2,22
  2890  003784  51B8               	movf	f_open@dir& (0+255),w,b
  2891  003786  26D9               	addwf	fsr2l,f,c
  2892  003788  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2893  00378A  22DA               	addwfc	fsr2h,f,c
  2894  00378C  C0B3  FFDE         	movff	f_open@dw,postinc2
  2895  003790  C0B4  FFDE         	movff	f_open@dw+1,postinc2
  2896  003794  C0B5  FFDE         	movff	f_open@dw+2,postinc2
  2897  003798  C0B6  FFDE         	movff	f_open@dw+3,postinc2
  2898                           
  2899                           ; BSR set to: 0
  2900                           ;ff.c: 2516: dir[11] = 0;
  2901  00379C  0100               	movlb	0	; () banked
  2902  00379E  EE20 F00B          	lfsr	2,11
  2903  0037A2  51B8               	movf	f_open@dir& (0+255),w,b
  2904  0037A4  26D9               	addwf	fsr2l,f,c
  2905  0037A6  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2906  0037A8  22DA               	addwfc	fsr2h,f,c
  2907  0037AA  0E00               	movlw	0
  2908  0037AC  6EDF               	movwf	indf2,c
  2909                           
  2910                           ; BSR set to: 0
  2911                           ;ff.c: 2517: *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(0);
  2912  0037AE  0100               	movlb	0	; () banked
  2913  0037B0  EE20 F01C          	lfsr	2,28
  2914  0037B4  51B8               	movf	f_open@dir& (0+255),w,b
  2915  0037B6  26D9               	addwf	fsr2l,f,c
  2916  0037B8  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2917  0037BA  22DA               	addwfc	fsr2h,f,c
  2918  0037BC  6ADE               	clrf	postinc2,c
  2919  0037BE  6ADE               	clrf	postinc2,c
  2920  0037C0  6ADE               	clrf	postinc2,c
  2921  0037C2  6ADD               	clrf	postdec2,c
  2922                           
  2923                           ; BSR set to: 0
  2924                           ;ff.c: 2518: cl = ld_clust(dj.fs, dir);
  2925  0037C4  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  2926  0037C8  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  2927  0037CC  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  2928  0037D0  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  2929  0037D4  EC5F  F031         	call	_ld_clust	;wreg free
  2930  0037D8  C001  F0AF         	movff	?_ld_clust,f_open@cl
  2931  0037DC  C002  F0B0         	movff	?_ld_clust+1,f_open@cl+1
  2932  0037E0  C003  F0B1         	movff	?_ld_clust+2,f_open@cl+2
  2933  0037E4  C004  F0B2         	movff	?_ld_clust+3,f_open@cl+3
  2934                           
  2935                           ;ff.c: 2519: st_clust(dir, 0);
  2936  0037E8  C0B8  F001         	movff	f_open@dir,st_clust@dir
  2937  0037EC  C0B9  F002         	movff	f_open@dir+1,st_clust@dir+1
  2938  0037F0  0E00               	movlw	0
  2939  0037F2  6E03               	movwf	st_clust@cl,c
  2940  0037F4  0E00               	movlw	0
  2941  0037F6  6E04               	movwf	st_clust@cl+1,c
  2942  0037F8  0E00               	movlw	0
  2943  0037FA  6E05               	movwf	st_clust@cl+2,c
  2944  0037FC  0E00               	movlw	0
  2945  0037FE  6E06               	movwf	st_clust@cl+3,c
  2946  003800  EC24  F033         	call	_st_clust	;wreg free
  2947                           
  2948                           ;ff.c: 2520: dj.fs->wflag = 1;
  2949  003804  0100               	movlb	0	; () banked
  2950  003806  EE20 F004          	lfsr	2,4
  2951  00380A  51BA               	movf	f_open@dj& (0+255),w,b
  2952  00380C  26D9               	addwf	fsr2l,f,c
  2953  00380E  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2954  003810  22DA               	addwfc	fsr2h,f,c
  2955  003812  0E01               	movlw	1
  2956  003814  6EDF               	movwf	indf2,c
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;ff.c: 2521: if (cl) {
  2960  003816  0100               	movlb	0	; () banked
  2961  003818  51AF               	movf	f_open@cl& (0+255),w,b
  2962  00381A  0100               	movlb	0	; () banked
  2963  00381C  11B0               	iorwf	(f_open@cl+1)& (0+255),w,b
  2964  00381E  0100               	movlb	0	; () banked
  2965  003820  11B1               	iorwf	(f_open@cl+2)& (0+255),w,b
  2966  003822  0100               	movlb	0	; () banked
  2967  003824  11B2               	iorwf	(f_open@cl+3)& (0+255),w,b
  2968  003826  B4D8               	btfsc	status,2,c
  2969  003828  D079               	goto	l691
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;ff.c: 2522: dw = dj.fs->winsect;
  2973  00382A  0100               	movlb	0	; () banked
  2974  00382C  EE20 F02A          	lfsr	2,42
  2975  003830  51BA               	movf	f_open@dj& (0+255),w,b
  2976  003832  26D9               	addwf	fsr2l,f,c
  2977  003834  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2978  003836  22DA               	addwfc	fsr2h,f,c
  2979  003838  CFDE F0B3          	movff	postinc2,f_open@dw
  2980  00383C  CFDE F0B4          	movff	postinc2,f_open@dw+1
  2981  003840  CFDE F0B5          	movff	postinc2,f_open@dw+2
  2982  003844  CFDE F0B6          	movff	postinc2,f_open@dw+3
  2983                           
  2984                           ; BSR set to: 0
  2985                           ;ff.c: 2523: res = remove_chain(dj.fs, cl);
  2986  003848  C0BA  F056         	movff	f_open@dj,remove_chain@fs
  2987  00384C  C0BB  F057         	movff	f_open@dj+1,remove_chain@fs+1
  2988  003850  C0AF  F058         	movff	f_open@cl,remove_chain@clst
  2989  003854  C0B0  F059         	movff	f_open@cl+1,remove_chain@clst+1
  2990  003858  C0B1  F05A         	movff	f_open@cl+2,remove_chain@clst+2
  2991  00385C  C0B2  F05B         	movff	f_open@cl+3,remove_chain@clst+3
  2992  003860  EC9D  F028         	call	_remove_chain	;wreg free
  2993  003864  0100               	movlb	0	; () banked
  2994  003866  6FB7               	movwf	f_open@res& (0+255),b
  2995                           
  2996                           ; BSR set to: 0
  2997                           ;ff.c: 2524: if (res == FR_OK) {
  2998  003868  0100               	movlb	0	; () banked
  2999  00386A  51B7               	movf	f_open@res& (0+255),w,b
  3000  00386C  0100               	movlb	0	; () banked
  3001  00386E  A4D8               	btfss	status,2,c
  3002  003870  D055               	goto	l691
  3003                           
  3004                           ; BSR set to: 0
  3005                           ;ff.c: 2525: dj.fs->last_clust = cl - 1;
  3006  003872  0EFF               	movlw	255
  3007  003874  0100               	movlb	0	; () banked
  3008  003876  25AF               	addwf	f_open@cl& (0+255),w,b
  3009  003878  0100               	movlb	0	; () banked
  3010  00387A  6F9F               	movwf	??_f_open& (0+255),b
  3011  00387C  0EFF               	movlw	255
  3012  00387E  0100               	movlb	0	; () banked
  3013  003880  21B0               	addwfc	(f_open@cl+1)& (0+255),w,b
  3014  003882  0100               	movlb	0	; () banked
  3015  003884  6FA0               	movwf	(??_f_open+1)& (0+255),b
  3016  003886  0EFF               	movlw	255
  3017  003888  0100               	movlb	0	; () banked
  3018  00388A  21B1               	addwfc	(f_open@cl+2)& (0+255),w,b
  3019  00388C  0100               	movlb	0	; () banked
  3020  00388E  6FA1               	movwf	(??_f_open+2)& (0+255),b
  3021  003890  0EFF               	movlw	255
  3022  003892  0100               	movlb	0	; () banked
  3023  003894  21B2               	addwfc	(f_open@cl+3)& (0+255),w,b
  3024  003896  0100               	movlb	0	; () banked
  3025  003898  6FA2               	movwf	(??_f_open+3)& (0+255),b
  3026  00389A  0100               	movlb	0	; () banked
  3027  00389C  EE20 F00A          	lfsr	2,10
  3028  0038A0  51BA               	movf	f_open@dj& (0+255),w,b
  3029  0038A2  26D9               	addwf	fsr2l,f,c
  3030  0038A4  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  3031  0038A6  22DA               	addwfc	fsr2h,f,c
  3032  0038A8  C09F  FFDE         	movff	??_f_open,postinc2
  3033  0038AC  C0A0  FFDE         	movff	??_f_open+1,postinc2
  3034  0038B0  C0A1  FFDE         	movff	??_f_open+2,postinc2
  3035  0038B4  C0A2  FFDE         	movff	??_f_open+3,postinc2
  3036                           
  3037                           ; BSR set to: 0
  3038                           ;ff.c: 2526: res = move_window(dj.fs, dw);
  3039  0038B8  C0BA  F030         	movff	f_open@dj,move_window@fs
  3040  0038BC  C0BB  F031         	movff	f_open@dj+1,move_window@fs+1
  3041  0038C0  C0B3  F032         	movff	f_open@dw,move_window@sector
  3042  0038C4  C0B4  F033         	movff	f_open@dw+1,move_window@sector+1
  3043  0038C8  C0B5  F034         	movff	f_open@dw+2,move_window@sector+2
  3044  0038CC  C0B6  F035         	movff	f_open@dw+3,move_window@sector+3
  3045  0038D0  ECE9  F02F         	call	_move_window	;wreg free
  3046  0038D4  D020               	goto	L4
  3047                           
  3048                           ; BSR set to: 0
  3049                           ;ff.c: 2527: }
  3050                           ;ff.c: 2528: }
  3051                           ;ff.c: 2529: }
  3052                           ;ff.c: 2530: }
  3053                           
  3054                           ; BSR set to: 0
  3055                           
  3056                           ; BSR set to: 0
  3057  0038D6  D022               	goto	l691
  3058  0038D8                     l5577:
  3059                           
  3060                           ; BSR set to: 0
  3061                           ;ff.c: 2531: else {
  3062                           ;ff.c: 2532: if (res == FR_OK) {
  3063  0038D8  0100               	movlb	0	; () banked
  3064  0038DA  51B7               	movf	f_open@res& (0+255),w,b
  3065  0038DC  0100               	movlb	0	; () banked
  3066  0038DE  A4D8               	btfss	status,2,c
  3067  0038E0  D01D               	goto	l691
  3068                           
  3069                           ; BSR set to: 0
  3070                           ;ff.c: 2533: if (dir[11] & 0x10) {
  3071  0038E2  0100               	movlb	0	; () banked
  3072  0038E4  EE20 F00B          	lfsr	2,11
  3073  0038E8  51B8               	movf	f_open@dir& (0+255),w,b
  3074  0038EA  26D9               	addwf	fsr2l,f,c
  3075  0038EC  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  3076  0038EE  22DA               	addwfc	fsr2h,f,c
  3077  0038F0  0100               	movlb	0	; () banked
  3078  0038F2  A8DF               	btfss	indf2,4,c
  3079  0038F4  D002               	goto	l693
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;ff.c: 2534: res = FR_NO_FILE;
  3083  0038F6  0E04               	movlw	4
  3084  0038F8  D00E               	goto	L4
  3085  0038FA                     l693:
  3086                           
  3087                           ; BSR set to: 0
  3088                           ;ff.c: 2536: if ((mode & 0x02) && (dir[11] & 0x01))
  3089  0038FA  0100               	movlb	0	; () banked
  3090  0038FC  A39E               	btfss	f_open@mode& (0+255),1,b
  3091  0038FE  D00E               	goto	l691
  3092                           
  3093                           ; BSR set to: 0
  3094  003900  0100               	movlb	0	; () banked
  3095  003902  EE20 F00B          	lfsr	2,11
  3096  003906  51B8               	movf	f_open@dir& (0+255),w,b
  3097  003908  26D9               	addwf	fsr2l,f,c
  3098  00390A  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  3099  00390C  22DA               	addwfc	fsr2h,f,c
  3100  00390E  0100               	movlb	0	; () banked
  3101  003910  A0DF               	btfss	indf2,0,c
  3102  003912  D004               	goto	l691
  3103                           
  3104                           ; BSR set to: 0
  3105                           ;ff.c: 2537: res = FR_DENIED;
  3106  003914  0E07               	movlw	7
  3107  003916                     L4:
  3108  003916  0100               	movlb	0	; () banked
  3109  003918  6FB7               	movwf	f_open@res& (0+255),b
  3110                           
  3111                           ; BSR set to: 0
  3112                           
  3113                           ; BSR set to: 0
  3114  00391A  D000               	goto	l691
  3115  00391C                     l691:
  3116                           
  3117                           ; BSR set to: 0
  3118                           ;ff.c: 2538: }
  3119                           ;ff.c: 2539: }
  3120                           ;ff.c: 2540: }
  3121                           ;ff.c: 2541: if (res == FR_OK) {
  3122  00391C  0100               	movlb	0	; () banked
  3123  00391E  51B7               	movf	f_open@res& (0+255),w,b
  3124  003920  0100               	movlb	0	; () banked
  3125  003922  A4D8               	btfss	status,2,c
  3126  003924  D028               	goto	l5595
  3127                           
  3128                           ; BSR set to: 0
  3129                           ;ff.c: 2542: if (mode & 0x08)
  3130  003926  0100               	movlb	0	; () banked
  3131  003928  A79E               	btfss	f_open@mode& (0+255),3,b
  3132  00392A  D003               	goto	l5591
  3133                           
  3134                           ; BSR set to: 0
  3135                           ;ff.c: 2543: mode |= 0x20;
  3136  00392C  0100               	movlb	0	; () banked
  3137  00392E  8B9E               	bsf	f_open@mode& (0+255),5,b
  3138  003930  D000               	goto	l5591
  3139  003932                     l5591:
  3140                           
  3141                           ; BSR set to: 0
  3142                           ;ff.c: 2544: fp->dir_sect = dj.fs->winsect;
  3143  003932  0100               	movlb	0	; () banked
  3144  003934  EE20 F02A          	lfsr	2,42
  3145  003938  51BA               	movf	f_open@dj& (0+255),w,b
  3146  00393A  26D9               	addwf	fsr2l,f,c
  3147  00393C  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  3148  00393E  22DA               	addwfc	fsr2h,f,c
  3149  003940  0100               	movlb	0	; () banked
  3150  003942  EE10 F01A          	lfsr	1,26
  3151  003946  519A               	movf	f_open@fp& (0+255),w,b
  3152  003948  26E1               	addwf	fsr1l,f,c
  3153  00394A  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3154  00394C  22E2               	addwfc	fsr1h,f,c
  3155  00394E  CFDE FFE6          	movff	postinc2,postinc1
  3156  003952  CFDE FFE6          	movff	postinc2,postinc1
  3157  003956  CFDE FFE6          	movff	postinc2,postinc1
  3158  00395A  CFDE FFE6          	movff	postinc2,postinc1
  3159                           
  3160                           ; BSR set to: 0
  3161                           ;ff.c: 2545: fp->dir_ptr = dir;
  3162  00395E  0100               	movlb	0	; () banked
  3163  003960  EE20 F01E          	lfsr	2,30
  3164  003964  519A               	movf	f_open@fp& (0+255),w,b
  3165  003966  26D9               	addwf	fsr2l,f,c
  3166  003968  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3167  00396A  22DA               	addwfc	fsr2h,f,c
  3168  00396C  C0B8  FFDE         	movff	f_open@dir,postinc2
  3169  003970  C0B9  FFDD         	movff	f_open@dir+1,postdec2
  3170  003974  D000               	goto	l5595
  3171  003976                     l5595:
  3172                           
  3173                           ; BSR set to: 0
  3174                           ;ff.c: 2550: }
  3175                           ;ff.c: 2563: ;
  3176                           ;ff.c: 2565: if (res == FR_OK) {
  3177  003976  0100               	movlb	0	; () banked
  3178  003978  51B7               	movf	f_open@res& (0+255),w,b
  3179  00397A  0100               	movlb	0	; () banked
  3180  00397C  A4D8               	btfss	status,2,c
  3181  00397E  D075               	goto	l5611
  3182                           
  3183                           ; BSR set to: 0
  3184                           ;ff.c: 2566: fp->flag = mode;
  3185  003980  0100               	movlb	0	; () banked
  3186  003982  EE20 F004          	lfsr	2,4
  3187  003986  519A               	movf	f_open@fp& (0+255),w,b
  3188  003988  26D9               	addwf	fsr2l,f,c
  3189  00398A  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3190  00398C  22DA               	addwfc	fsr2h,f,c
  3191  00398E  C09E  FFDF         	movff	f_open@mode,indf2
  3192                           
  3193                           ;ff.c: 2567: fp->err = 0;
  3194  003992  0100               	movlb	0	; () banked
  3195  003994  EE20 F005          	lfsr	2,5
  3196  003998  519A               	movf	f_open@fp& (0+255),w,b
  3197  00399A  26D9               	addwf	fsr2l,f,c
  3198  00399C  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3199  00399E  22DA               	addwfc	fsr2h,f,c
  3200  0039A0  0E00               	movlw	0
  3201  0039A2  6EDF               	movwf	indf2,c
  3202                           
  3203                           ; BSR set to: 0
  3204                           ;ff.c: 2568: fp->sclust = ld_clust(dj.fs, dir);
  3205  0039A4  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  3206  0039A8  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  3207  0039AC  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  3208  0039B0  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  3209  0039B4  EC5F  F031         	call	_ld_clust	;wreg free
  3210  0039B8  0100               	movlb	0	; () banked
  3211  0039BA  EE20 F00E          	lfsr	2,14
  3212  0039BE  519A               	movf	f_open@fp& (0+255),w,b
  3213  0039C0  26D9               	addwf	fsr2l,f,c
  3214  0039C2  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3215  0039C4  22DA               	addwfc	fsr2h,f,c
  3216  0039C6  C001  FFDE         	movff	?_ld_clust,postinc2
  3217  0039CA  C002  FFDE         	movff	?_ld_clust+1,postinc2
  3218  0039CE  C003  FFDE         	movff	?_ld_clust+2,postinc2
  3219  0039D2  C004  FFDE         	movff	?_ld_clust+3,postinc2
  3220                           
  3221                           ; BSR set to: 0
  3222                           ;ff.c: 2569: fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(dir + 28));
  3223  0039D6  0100               	movlb	0	; () banked
  3224  0039D8  EE20 F01C          	lfsr	2,28
  3225  0039DC  51B8               	movf	f_open@dir& (0+255),w,b
  3226  0039DE  26D9               	addwf	fsr2l,f,c
  3227  0039E0  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  3228  0039E2  22DA               	addwfc	fsr2h,f,c
  3229  0039E4  0100               	movlb	0	; () banked
  3230  0039E6  EE10 F00A          	lfsr	1,10
  3231  0039EA  519A               	movf	f_open@fp& (0+255),w,b
  3232  0039EC  26E1               	addwf	fsr1l,f,c
  3233  0039EE  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3234  0039F0  22E2               	addwfc	fsr1h,f,c
  3235  0039F2  CFDE FFE6          	movff	postinc2,postinc1
  3236  0039F6  CFDE FFE6          	movff	postinc2,postinc1
  3237  0039FA  CFDE FFE6          	movff	postinc2,postinc1
  3238  0039FE  CFDE FFE6          	movff	postinc2,postinc1
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;ff.c: 2570: fp->fptr = 0;
  3242  003A02  0100               	movlb	0	; () banked
  3243  003A04  EE20 F006          	lfsr	2,6
  3244  003A08  519A               	movf	f_open@fp& (0+255),w,b
  3245  003A0A  26D9               	addwf	fsr2l,f,c
  3246  003A0C  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3247  003A0E  22DA               	addwfc	fsr2h,f,c
  3248  003A10  6ADE               	clrf	postinc2,c
  3249  003A12  6ADE               	clrf	postinc2,c
  3250  003A14  6ADE               	clrf	postinc2,c
  3251  003A16  6ADD               	clrf	postdec2,c
  3252                           
  3253                           ; BSR set to: 0
  3254                           ;ff.c: 2571: fp->dsect = 0;
  3255  003A18  0100               	movlb	0	; () banked
  3256  003A1A  EE20 F016          	lfsr	2,22
  3257  003A1E  519A               	movf	f_open@fp& (0+255),w,b
  3258  003A20  26D9               	addwf	fsr2l,f,c
  3259  003A22  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3260  003A24  22DA               	addwfc	fsr2h,f,c
  3261  003A26  6ADE               	clrf	postinc2,c
  3262  003A28  6ADE               	clrf	postinc2,c
  3263  003A2A  6ADE               	clrf	postinc2,c
  3264  003A2C  6ADD               	clrf	postdec2,c
  3265                           
  3266                           ; BSR set to: 0
  3267                           ;ff.c: 2575: fp->fs = dj.fs;
  3268  003A2E  C09A  FFD9         	movff	f_open@fp,fsr2l
  3269  003A32  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  3270  003A36  C0BA  FFDE         	movff	f_open@dj,postinc2
  3271  003A3A  C0BB  FFDD         	movff	f_open@dj+1,postdec2
  3272                           
  3273                           ; BSR set to: 0
  3274                           ;ff.c: 2576: fp->id = fp->fs->id;
  3275  003A3E  C09A  FFD9         	movff	f_open@fp,fsr2l
  3276  003A42  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  3277  003A46  EE10 F006          	lfsr	1,6
  3278  003A4A  50DE               	movf	postinc2,w,c
  3279  003A4C  26E1               	addwf	fsr1l,f,c
  3280  003A4E  50DD               	movf	postdec2,w,c
  3281  003A50  22E2               	addwfc	fsr1h,f,c
  3282  003A52  0100               	movlb	0	; () banked
  3283  003A54  EE20 F002          	lfsr	2,2
  3284  003A58  519A               	movf	f_open@fp& (0+255),w,b
  3285  003A5A  26D9               	addwf	fsr2l,f,c
  3286  003A5C  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3287  003A5E  22DA               	addwfc	fsr2h,f,c
  3288  003A60  CFE6 FFDE          	movff	postinc1,postinc2
  3289  003A64  CFE5 FFDD          	movff	postdec1,postdec2
  3290                           
  3291                           ; BSR set to: 0
  3292  003A68  D000               	goto	l5611
  3293  003A6A                     l5611:
  3294                           
  3295                           ; BSR set to: 0
  3296                           ;ff.c: 2577: }
  3297                           ;ff.c: 2578: }
  3298                           ;ff.c: 2580: return res;
  3299  003A6A  0100               	movlb	0	; () banked
  3300  003A6C  51B7               	movf	f_open@res& (0+255),w,b
  3301  003A6E  0012               	return	
  3302                           
  3303                           ; BSR set to: 0
  3304                           
  3305                           ; BSR set to: 0
  3306  003A70  0012               	return		;funcret
  3307  003A72                     __end_of_f_open:
  3308                           	opt stack 0
  3309                           tblptru	equ	0xFF8
  3310                           tblptrh	equ	0xFF7
  3311                           tblptrl	equ	0xFF6
  3312                           tablat	equ	0xFF5
  3313                           postinc0	equ	0xFEE
  3314                           fsr0h	equ	0xFEA
  3315                           fsr0l	equ	0xFE9
  3316                           wreg	equ	0xFE8
  3317                           indf1	equ	0xFE7
  3318                           postinc1	equ	0xFE6
  3319                           postdec1	equ	0xFE5
  3320                           fsr1h	equ	0xFE2
  3321                           fsr1l	equ	0xFE1
  3322                           indf2	equ	0xFDF
  3323                           postinc2	equ	0xFDE
  3324                           postdec2	equ	0xFDD
  3325                           plusw2	equ	0xFDB
  3326                           fsr2h	equ	0xFDA
  3327                           fsr2l	equ	0xFD9
  3328                           status	equ	0xFD8
  3329                           
  3330 ;; *************** function _remove_chain *****************
  3331 ;; Defined at:
  3332 ;;		line 937 in file "ff.c"
  3333 ;; Parameters:    Size  Location     Type
  3334 ;;  fs              2   85[COMRAM] PTR struct .
  3335 ;;		 -> FatFs(558), NULL(0), 
  3336 ;;  clst            4   87[COMRAM] unsigned long 
  3337 ;; Auto vars:     Size  Location     Type
  3338 ;;  nxt             4    1[BANK0 ] unsigned long 
  3339 ;;  res             1    0[BANK0 ] enum E88
  3340 ;; Return value:  Size  Location     Type
  3341 ;;                  1    wreg      enum E88
  3342 ;; Registers used:
  3343 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3344 ;; Tracked objects:
  3345 ;;		On entry : 0/0
  3346 ;;		On exit  : 0/0
  3347 ;;		Unchanged: 0/0
  3348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3349 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3350 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3351 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3352 ;;      Totals:        10       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3353 ;;Total ram usage:       15 bytes
  3354 ;; Hardware stack levels used:    1
  3355 ;; Hardware stack levels required when called:    9
  3356 ;; This function calls:
  3357 ;;		_get_fat
  3358 ;;		_put_fat
  3359 ;; This function is called by:
  3360 ;;		_f_open
  3361 ;; This function uses a non-reentrant model
  3362 ;;
  3363                           
  3364                           	psect	text3
  3365  00513A                     __ptext3:
  3366                           	opt stack 0
  3367  00513A                     _remove_chain:
  3368                           	opt stack 20
  3369                           
  3370                           ;ff.c: 942: FRESULT res;
  3371                           ;ff.c: 943: DWORD nxt;
  3372                           ;ff.c: 948: if (clst < 2 || clst >= fs->n_fatent) {
  3373                           
  3374                           ; BSR set to: 0
  3375                           ;incstack = 0
  3376  00513A  505B               	movf	remove_chain@clst+3,w,c
  3377  00513C  105A               	iorwf	remove_chain@clst+2,w,c
  3378  00513E  1059               	iorwf	remove_chain@clst+1,w,c
  3379  005140  E104               	bnz	u7110
  3380  005142  0E02               	movlw	2
  3381  005144  5C58               	subwf	remove_chain@clst,w,c
  3382  005146  A0D8               	btfss	status,0,c
  3383  005148  D040               	goto	l5077
  3384  00514A                     u7110:
  3385  00514A  EE20 F012          	lfsr	2,18
  3386  00514E  5056               	movf	remove_chain@fs,w,c
  3387  005150  26D9               	addwf	fsr2l,f,c
  3388  005152  5057               	movf	remove_chain@fs+1,w,c
  3389  005154  22DA               	addwfc	fsr2h,f,c
  3390  005156  50DE               	movf	postinc2,w,c
  3391  005158  5C58               	subwf	remove_chain@clst,w,c
  3392  00515A  50DE               	movf	postinc2,w,c
  3393  00515C  5859               	subwfb	remove_chain@clst+1,w,c
  3394  00515E  50DE               	movf	postinc2,w,c
  3395  005160  585A               	subwfb	remove_chain@clst+2,w,c
  3396  005162  50DE               	movf	postinc2,w,c
  3397  005164  585B               	subwfb	remove_chain@clst+3,w,c
  3398  005166  B0D8               	btfsc	status,0,c
  3399  005168  D030               	goto	l5077
  3400                           
  3401                           ;ff.c: 952: res = FR_OK;
  3402                           
  3403                           ; BSR set to: 0
  3404                           
  3405                           ;ff.c: 951: } else {
  3406                           
  3407                           ;ff.c: 949: res = FR_INT_ERR;
  3408  00516A  0E00               	movlw	0
  3409  00516C  0100               	movlb	0	; () banked
  3410  00516E  6F60               	movwf	remove_chain@res& (0+255),b
  3411                           
  3412                           ;ff.c: 953: while (clst < fs->n_fatent) {
  3413  005170  D089               	goto	l405
  3414  005172                     l5069:
  3415                           
  3416                           ; BSR set to: 0
  3417                           ;ff.c: 954: nxt = get_fat(fs, clst);
  3418  005172  C056  F03B         	movff	remove_chain@fs,get_fat@fs
  3419  005176  C057  F03C         	movff	remove_chain@fs+1,get_fat@fs+1
  3420  00517A  C058  F03D         	movff	remove_chain@clst,get_fat@clst
  3421  00517E  C059  F03E         	movff	remove_chain@clst+1,get_fat@clst+1
  3422  005182  C05A  F03F         	movff	remove_chain@clst+2,get_fat@clst+2
  3423  005186  C05B  F040         	movff	remove_chain@clst+3,get_fat@clst+3
  3424  00518A  EC20  F021         	call	_get_fat	;wreg free
  3425  00518E  C03B  F061         	movff	?_get_fat,remove_chain@nxt
  3426  005192  C03C  F062         	movff	?_get_fat+1,remove_chain@nxt+1
  3427  005196  C03D  F063         	movff	?_get_fat+2,remove_chain@nxt+2
  3428  00519A  C03E  F064         	movff	?_get_fat+3,remove_chain@nxt+3
  3429                           
  3430                           ;ff.c: 955: if (nxt == 0) break;
  3431  00519E  0100               	movlb	0	; () banked
  3432  0051A0  5161               	movf	remove_chain@nxt& (0+255),w,b
  3433  0051A2  0100               	movlb	0	; () banked
  3434  0051A4  1162               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  3435  0051A6  0100               	movlb	0	; () banked
  3436  0051A8  1163               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  3437  0051AA  0100               	movlb	0	; () banked
  3438  0051AC  1164               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  3439  0051AE  B4D8               	btfsc	status,2,c
  3440  0051B0  D07B               	goto	l5095
  3441  0051B2  D001               	goto	l5075
  3442                           
  3443                           ; BSR set to: 0
  3444  0051B4  D079               	goto	l5095
  3445  0051B6                     l5075:
  3446                           
  3447                           ; BSR set to: 0
  3448                           ;ff.c: 956: if (nxt == 1) { res = FR_INT_ERR; break; }
  3449  0051B6  0100               	movlb	0	; () banked
  3450  0051B8  0561               	decf	remove_chain@nxt& (0+255),w,b
  3451  0051BA  0100               	movlb	0	; () banked
  3452  0051BC  1162               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  3453  0051BE  0100               	movlb	0	; () banked
  3454  0051C0  1163               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  3455  0051C2  0100               	movlb	0	; () banked
  3456  0051C4  1164               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  3457  0051C6  A4D8               	btfss	status,2,c
  3458  0051C8  D002               	goto	l5079
  3459  0051CA                     l5077:
  3460                           
  3461                           ; BSR set to: 0
  3462  0051CA  0E02               	movlw	2
  3463  0051CC  D00E               	goto	L5
  3464  0051CE                     l5079:
  3465                           
  3466                           ; BSR set to: 0
  3467                           ;ff.c: 957: if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
  3468  0051CE  0100               	movlb	0	; () banked
  3469  0051D0  2961               	incf	remove_chain@nxt& (0+255),w,b
  3470  0051D2  E10E               	bnz	l5083
  3471  0051D4  0100               	movlb	0	; () banked
  3472  0051D6  2962               	incf	(remove_chain@nxt+1)& (0+255),w,b
  3473  0051D8  E10B               	bnz	l5083
  3474  0051DA  0100               	movlb	0	; () banked
  3475  0051DC  2963               	incf	(remove_chain@nxt+2)& (0+255),w,b
  3476  0051DE  E108               	bnz	l5083
  3477  0051E0  0100               	movlb	0	; () banked
  3478  0051E2  2964               	incf	(remove_chain@nxt+3)& (0+255),w,b
  3479  0051E4  A4D8               	btfss	status,2,c
  3480  0051E6  D004               	goto	l5083
  3481                           
  3482                           ; BSR set to: 0
  3483  0051E8  0E01               	movlw	1
  3484  0051EA                     L5:
  3485  0051EA  0100               	movlb	0	; () banked
  3486  0051EC  6F60               	movwf	remove_chain@res& (0+255),b
  3487  0051EE  D05C               	goto	l5095
  3488  0051F0                     l5083:
  3489                           
  3490                           ; BSR set to: 0
  3491                           ;ff.c: 958: res = put_fat(fs, clst, 0);
  3492  0051F0  C056  F03B         	movff	remove_chain@fs,put_fat@fs
  3493  0051F4  C057  F03C         	movff	remove_chain@fs+1,put_fat@fs+1
  3494  0051F8  C058  F03D         	movff	remove_chain@clst,put_fat@clst
  3495  0051FC  C059  F03E         	movff	remove_chain@clst+1,put_fat@clst+1
  3496  005200  C05A  F03F         	movff	remove_chain@clst+2,put_fat@clst+2
  3497  005204  C05B  F040         	movff	remove_chain@clst+3,put_fat@clst+3
  3498  005208  0E00               	movlw	0
  3499  00520A  6E41               	movwf	put_fat@val,c
  3500  00520C  0E00               	movlw	0
  3501  00520E  6E42               	movwf	put_fat@val+1,c
  3502  005210  0E00               	movlw	0
  3503  005212  6E43               	movwf	put_fat@val+2,c
  3504  005214  0E00               	movlw	0
  3505  005216  6E44               	movwf	put_fat@val+3,c
  3506  005218  EC39  F01D         	call	_put_fat	;wreg free
  3507  00521C  0100               	movlb	0	; () banked
  3508  00521E  6F60               	movwf	remove_chain@res& (0+255),b
  3509                           
  3510                           ; BSR set to: 0
  3511                           ;ff.c: 959: if (res != FR_OK) break;
  3512  005220  0100               	movlb	0	; () banked
  3513  005222  5160               	movf	remove_chain@res& (0+255),w,b
  3514  005224  0100               	movlb	0	; () banked
  3515  005226  A4D8               	btfss	status,2,c
  3516  005228  D03F               	goto	l5095
  3517  00522A  D001               	goto	l5089
  3518                           
  3519                           ; BSR set to: 0
  3520  00522C  D03D               	goto	l5095
  3521  00522E                     l5089:
  3522                           
  3523                           ; BSR set to: 0
  3524                           ;ff.c: 960: if (fs->free_clust != 0xFFFFFFFF) {
  3525  00522E  EE20 F00E          	lfsr	2,14
  3526  005232  5056               	movf	remove_chain@fs,w,c
  3527  005234  26D9               	addwf	fsr2l,f,c
  3528  005236  5057               	movf	remove_chain@fs+1,w,c
  3529  005238  22DA               	addwfc	fsr2h,f,c
  3530  00523A  28DE               	incf	postinc2,w,c
  3531  00523C  E107               	bnz	u7170
  3532  00523E  28DE               	incf	postinc2,w,c
  3533  005240  E105               	bnz	u7170
  3534  005242  28DE               	incf	postinc2,w,c
  3535  005244  E103               	bnz	u7170
  3536  005246  28DE               	incf	postinc2,w,c
  3537  005248  B4D8               	btfsc	status,2,c
  3538  00524A  D014               	goto	l5093
  3539  00524C                     u7170:
  3540                           
  3541                           ; BSR set to: 0
  3542                           ;ff.c: 961: fs->free_clust++;
  3543  00524C  EE20 F00E          	lfsr	2,14
  3544  005250  5056               	movf	remove_chain@fs,w,c
  3545  005252  26D9               	addwf	fsr2l,f,c
  3546  005254  5057               	movf	remove_chain@fs+1,w,c
  3547  005256  22DA               	addwfc	fsr2h,f,c
  3548  005258  2ADE               	incf	postinc2,f,c
  3549  00525A  0E00               	movlw	0
  3550  00525C  22DE               	addwfc	postinc2,f,c
  3551  00525E  22DE               	addwfc	postinc2,f,c
  3552  005260  22DE               	addwfc	postinc2,f,c
  3553                           
  3554                           ;ff.c: 962: fs->fsi_flag |= 1;
  3555  005262  EE20 F005          	lfsr	2,5
  3556  005266  5056               	movf	remove_chain@fs,w,c
  3557  005268  26D9               	addwf	fsr2l,f,c
  3558  00526A  5057               	movf	remove_chain@fs+1,w,c
  3559  00526C  22DA               	addwfc	fsr2h,f,c
  3560  00526E  0E00               	movlw	0
  3561  005270  80DB               	bsf	plusw2,0,c
  3562  005272  D000               	goto	l5093
  3563  005274                     l5093:
  3564                           
  3565                           ; BSR set to: 0
  3566                           ;ff.c: 963: }
  3567                           ;ff.c: 974: clst = nxt;
  3568  005274  C061  F058         	movff	remove_chain@nxt,remove_chain@clst
  3569  005278  C062  F059         	movff	remove_chain@nxt+1,remove_chain@clst+1
  3570  00527C  C063  F05A         	movff	remove_chain@nxt+2,remove_chain@clst+2
  3571  005280  C064  F05B         	movff	remove_chain@nxt+3,remove_chain@clst+3
  3572  005284                     l405:
  3573                           
  3574                           ; BSR set to: 0
  3575  005284  EE20 F012          	lfsr	2,18
  3576  005288  5056               	movf	remove_chain@fs,w,c
  3577  00528A  26D9               	addwf	fsr2l,f,c
  3578  00528C  5057               	movf	remove_chain@fs+1,w,c
  3579  00528E  22DA               	addwfc	fsr2h,f,c
  3580  005290  50DE               	movf	postinc2,w,c
  3581  005292  5C58               	subwf	remove_chain@clst,w,c
  3582  005294  50DE               	movf	postinc2,w,c
  3583  005296  5859               	subwfb	remove_chain@clst+1,w,c
  3584  005298  50DE               	movf	postinc2,w,c
  3585  00529A  585A               	subwfb	remove_chain@clst+2,w,c
  3586  00529C  50DE               	movf	postinc2,w,c
  3587  00529E  585B               	subwfb	remove_chain@clst+3,w,c
  3588  0052A0  B0D8               	btfsc	status,0,c
  3589  0052A2  D002               	goto	l5095
  3590  0052A4  D766               	goto	l5069
  3591                           
  3592                           ; BSR set to: 0
  3593  0052A6  D000               	goto	l5095
  3594  0052A8                     l5095:
  3595                           
  3596                           ; BSR set to: 0
  3597                           ;ff.c: 975: }
  3598                           ;ff.c: 976: }
  3599                           ;ff.c: 978: return res;
  3600  0052A8  0100               	movlb	0	; () banked
  3601  0052AA  5160               	movf	remove_chain@res& (0+255),w,b
  3602  0052AC  0012               	return	
  3603                           
  3604                           ; BSR set to: 0
  3605                           
  3606                           ; BSR set to: 0
  3607  0052AE  0012               	return		;funcret
  3608  0052B0                     __end_of_remove_chain:
  3609                           	opt stack 0
  3610                           tblptru	equ	0xFF8
  3611                           tblptrh	equ	0xFF7
  3612                           tblptrl	equ	0xFF6
  3613                           tablat	equ	0xFF5
  3614                           postinc0	equ	0xFEE
  3615                           fsr0h	equ	0xFEA
  3616                           fsr0l	equ	0xFE9
  3617                           wreg	equ	0xFE8
  3618                           indf1	equ	0xFE7
  3619                           postinc1	equ	0xFE6
  3620                           postdec1	equ	0xFE5
  3621                           fsr1h	equ	0xFE2
  3622                           fsr1l	equ	0xFE1
  3623                           indf2	equ	0xFDF
  3624                           postinc2	equ	0xFDE
  3625                           postdec2	equ	0xFDD
  3626                           plusw2	equ	0xFDB
  3627                           fsr2h	equ	0xFDA
  3628                           fsr2l	equ	0xFD9
  3629                           status	equ	0xFD8
  3630                           
  3631 ;; *************** function _follow_path *****************
  3632 ;; Defined at:
  3633 ;;		line 2052 in file "ff.c"
  3634 ;; Parameters:    Size  Location     Type
  3635 ;;  dp              2   38[BANK0 ] PTR struct .
  3636 ;;		 -> f_open@dj(22), 
  3637 ;;  path            2   40[BANK0 ] PTR const unsigned char 
  3638 ;;		 -> STR_3(10), STR_2(1), 
  3639 ;; Auto vars:     Size  Location     Type
  3640 ;;  dir             2   42[BANK0 ] PTR unsigned char 
  3641 ;;		 -> FatFs(558), NULL(0), 
  3642 ;;  res             1   45[BANK0 ] enum E88
  3643 ;;  ns              1   44[BANK0 ] unsigned char 
  3644 ;; Return value:  Size  Location     Type
  3645 ;;                  1    wreg      enum E88
  3646 ;; Registers used:
  3647 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3648 ;; Tracked objects:
  3649 ;;		On entry : 0/0
  3650 ;;		On exit  : 0/0
  3651 ;;		Unchanged: 0/0
  3652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3653 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3654 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3656 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3657 ;;Total ram usage:        8 bytes
  3658 ;; Hardware stack levels used:    1
  3659 ;; Hardware stack levels required when called:   12
  3660 ;; This function calls:
  3661 ;;		_create_name
  3662 ;;		_dir_find
  3663 ;;		_dir_sdi
  3664 ;;		_ld_clust
  3665 ;; This function is called by:
  3666 ;;		_f_open
  3667 ;; This function uses a non-reentrant model
  3668 ;;
  3669                           
  3670                           	psect	text4
  3671  004F76                     __ptext4:
  3672                           	opt stack 0
  3673  004F76                     _follow_path:
  3674                           	opt stack 17
  3675                           
  3676                           ;ff.c: 2057: FRESULT res;
  3677                           ;ff.c: 2058: BYTE *dir, ns;
  3678                           ;ff.c: 2068: if (*path == '/' || *path == '\\')
  3679                           
  3680                           ; BSR set to: 0
  3681                           ;incstack = 0
  3682  004F76  C088  FFF6         	movff	follow_path@path,tblptrl
  3683  004F7A  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3684  004F7E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3685  004F7E  6AF8               	clrf	tblptru,c
  3686  004F80                     	endif
  3687  004F80                     	if	0	;tblptru may be non-zero
  3688  004F80                     	endif
  3689  004F80  0008               	tblrd		*
  3690  004F82  50F5               	movf	tablat,w,c
  3691  004F84  0A2F               	xorlw	47
  3692  004F86  B4D8               	btfsc	status,2,c
  3693  004F88  D00A               	goto	l5121
  3694  004F8A  C088  FFF6         	movff	follow_path@path,tblptrl
  3695  004F8E  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3696  004F92                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3697  004F92  6AF8               	clrf	tblptru,c
  3698  004F94                     	endif
  3699  004F94                     	if	0	;tblptru may be non-zero
  3700  004F94                     	endif
  3701  004F94  0008               	tblrd		*
  3702  004F96  50F5               	movf	tablat,w,c
  3703  004F98  0A5C               	xorlw	92
  3704  004F9A  A4D8               	btfss	status,2,c
  3705  004F9C  D004               	goto	l5123
  3706  004F9E                     l5121:
  3707                           
  3708                           ;ff.c: 2069: path++;
  3709  004F9E  0100               	movlb	0	; () banked
  3710  004FA0  4B88               	infsnz	follow_path@path& (0+255),f,b
  3711  004FA2  2B89               	incf	(follow_path@path+1)& (0+255),f,b
  3712  004FA4  D000               	goto	l5123
  3713  004FA6                     l5123:
  3714                           
  3715                           ;ff.c: 2070: dp->sclust = 0;
  3716  004FA6  0100               	movlb	0	; () banked
  3717  004FA8  EE20 F006          	lfsr	2,6
  3718  004FAC  5186               	movf	follow_path@dp& (0+255),w,b
  3719  004FAE  26D9               	addwf	fsr2l,f,c
  3720  004FB0  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3721  004FB2  22DA               	addwfc	fsr2h,f,c
  3722  004FB4  6ADE               	clrf	postinc2,c
  3723  004FB6  6ADE               	clrf	postinc2,c
  3724  004FB8  6ADE               	clrf	postinc2,c
  3725  004FBA  6ADD               	clrf	postdec2,c
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;ff.c: 2073: if ((UINT)*path < ' ') {
  3729  004FBC  C088  FFF6         	movff	follow_path@path,tblptrl
  3730  004FC0  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3731  004FC4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3732  004FC4  6AF8               	clrf	tblptru,c
  3733  004FC6                     	endif
  3734  004FC6                     	if	0	;tblptru may be non-zero
  3735  004FC6                     	endif
  3736  004FC6  0E20               	movlw	32
  3737  004FC8  0008               	tblrd		*
  3738  004FCA  60F5               	cpfslt	tablat,c
  3739  004FCC  D019               	goto	l5131
  3740                           
  3741                           ; BSR set to: 0
  3742                           ;ff.c: 2074: res = dir_sdi(dp, 0);
  3743  004FCE  C086  F055         	movff	follow_path@dp,dir_sdi@dp
  3744  004FD2  C087  F056         	movff	follow_path@dp+1,dir_sdi@dp+1
  3745  004FD6  0E00               	movlw	0
  3746  004FD8  6E58               	movwf	dir_sdi@idx+1,c
  3747  004FDA  0E00               	movlw	0
  3748  004FDC  6E57               	movwf	dir_sdi@idx,c
  3749  004FDE  ECE3  F022         	call	_dir_sdi	;wreg free
  3750  004FE2  0100               	movlb	0	; () banked
  3751  004FE4  6F8D               	movwf	follow_path@res& (0+255),b
  3752                           
  3753                           ; BSR set to: 0
  3754                           ;ff.c: 2075: dp->dir = 0;
  3755  004FE6  0100               	movlb	0	; () banked
  3756  004FE8  EE20 F012          	lfsr	2,18
  3757  004FEC  5186               	movf	follow_path@dp& (0+255),w,b
  3758  004FEE  26D9               	addwf	fsr2l,f,c
  3759  004FF0  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3760  004FF2  22DA               	addwfc	fsr2h,f,c
  3761  004FF4  0E00               	movlw	0
  3762  004FF6  6EDE               	movwf	postinc2,c
  3763  004FF8  0E00               	movlw	0
  3764  004FFA  6EDD               	movwf	postdec2,c
  3765                           
  3766                           ;ff.c: 2076: } else {
  3767  004FFC  D09A               	goto	l5167
  3768                           
  3769                           ; BSR set to: 0
  3770  004FFE  D000               	goto	l5131
  3771  005000                     l5131:
  3772                           
  3773                           ; BSR set to: 0
  3774                           ;ff.c: 2078: res = create_name(dp, &path);
  3775  005000  C086  F009         	movff	follow_path@dp,create_name@dp
  3776  005004  C087  F00A         	movff	follow_path@dp+1,create_name@dp+1
  3777  005008  0E88               	movlw	low follow_path@path
  3778  00500A  6E0B               	movwf	create_name@path,c
  3779  00500C  0E00               	movlw	high follow_path@path
  3780  00500E  6E0C               	movwf	create_name@path+1,c
  3781  005010  EC72  F024         	call	_create_name	;wreg free
  3782  005014  0100               	movlb	0	; () banked
  3783  005016  6F8D               	movwf	follow_path@res& (0+255),b
  3784                           
  3785                           ; BSR set to: 0
  3786                           ;ff.c: 2079: if (res != FR_OK) break;
  3787  005018  0100               	movlb	0	; () banked
  3788  00501A  518D               	movf	follow_path@res& (0+255),w,b
  3789  00501C  0100               	movlb	0	; () banked
  3790  00501E  A4D8               	btfss	status,2,c
  3791  005020  D088               	goto	l5167
  3792  005022  D001               	goto	l5137
  3793                           
  3794                           ; BSR set to: 0
  3795  005024  D086               	goto	l5167
  3796  005026                     l5137:
  3797                           
  3798                           ; BSR set to: 0
  3799                           ;ff.c: 2080: res = dir_find(dp);
  3800  005026  C086  F080         	movff	follow_path@dp,dir_find@dp
  3801  00502A  C087  F081         	movff	follow_path@dp+1,dir_find@dp+1
  3802  00502E  ECF3  F02B         	call	_dir_find	;wreg free
  3803  005032  0100               	movlb	0	; () banked
  3804  005034  6F8D               	movwf	follow_path@res& (0+255),b
  3805                           
  3806                           ; BSR set to: 0
  3807                           ;ff.c: 2081: ns = dp->fn[11];
  3808  005036  0100               	movlb	0	; () banked
  3809  005038  EE20 F014          	lfsr	2,20
  3810  00503C  5186               	movf	follow_path@dp& (0+255),w,b
  3811  00503E  26D9               	addwf	fsr2l,f,c
  3812  005040  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3813  005042  22DA               	addwfc	fsr2h,f,c
  3814  005044  EE10 F00B          	lfsr	1,11
  3815  005048  50DE               	movf	postinc2,w,c
  3816  00504A  26E1               	addwf	fsr1l,f,c
  3817  00504C  50DD               	movf	postdec2,w,c
  3818  00504E  22E2               	addwfc	fsr1h,f,c
  3819  005050  50E7               	movf	indf1,w,c
  3820  005052  0100               	movlb	0	; () banked
  3821  005054  6F8C               	movwf	follow_path@ns& (0+255),b
  3822                           
  3823                           ; BSR set to: 0
  3824                           ;ff.c: 2082: if (res != FR_OK) {
  3825  005056  0100               	movlb	0	; () banked
  3826  005058  518D               	movf	follow_path@res& (0+255),w,b
  3827  00505A  0100               	movlb	0	; () banked
  3828  00505C  B4D8               	btfsc	status,2,c
  3829  00505E  D02E               	goto	l572
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;ff.c: 2083: if (res == FR_NO_FILE) {
  3833  005060  0E04               	movlw	4
  3834  005062  0100               	movlb	0	; () banked
  3835  005064  198D               	xorwf	follow_path@res& (0+255),w,b
  3836  005066  B4D8               	btfsc	status,2,c
  3837  005068  D022               	goto	l574
  3838  00506A  D063               	goto	l5167
  3839                           
  3840                           ; BSR set to: 0
  3841                           ;ff.c: 2084: if (0 && (ns & 0x20)) {
  3842  00506C  D020               	goto	l574
  3843                           
  3844                           ; BSR set to: 0
  3845  00506E  0100               	movlb	0	; () banked
  3846  005070  AB8C               	btfss	follow_path@ns& (0+255),5,b
  3847  005072  D01D               	goto	l574
  3848                           
  3849                           ; BSR set to: 0
  3850                           ;ff.c: 2085: dp->sclust = 0; dp->dir = 0;
  3851  005074  0100               	movlb	0	; () banked
  3852  005076  EE20 F006          	lfsr	2,6
  3853  00507A  5186               	movf	follow_path@dp& (0+255),w,b
  3854  00507C  26D9               	addwf	fsr2l,f,c
  3855  00507E  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3856  005080  22DA               	addwfc	fsr2h,f,c
  3857  005082  6ADE               	clrf	postinc2,c
  3858  005084  6ADE               	clrf	postinc2,c
  3859  005086  6ADE               	clrf	postinc2,c
  3860  005088  6ADD               	clrf	postdec2,c
  3861  00508A  0100               	movlb	0	; () banked
  3862  00508C  EE20 F012          	lfsr	2,18
  3863  005090  5186               	movf	follow_path@dp& (0+255),w,b
  3864  005092  26D9               	addwf	fsr2l,f,c
  3865  005094  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3866  005096  22DA               	addwfc	fsr2h,f,c
  3867  005098  0E00               	movlw	0
  3868  00509A  6EDE               	movwf	postinc2,c
  3869  00509C  0E00               	movlw	0
  3870  00509E  6EDD               	movwf	postdec2,c
  3871                           
  3872                           ; BSR set to: 0
  3873                           ;ff.c: 2086: if (!(ns & 0x04)) continue;
  3874  0050A0  0100               	movlb	0	; () banked
  3875  0050A2  A58C               	btfss	follow_path@ns& (0+255),2,b
  3876  0050A4  D7AD               	goto	l5131
  3877  0050A6  D001               	goto	l5155
  3878                           
  3879                           ; BSR set to: 0
  3880  0050A8  D7AB               	goto	l5131
  3881  0050AA                     l5155:
  3882                           
  3883                           ; BSR set to: 0
  3884                           ;ff.c: 2087: res = FR_OK;
  3885  0050AA  0E00               	movlw	0
  3886  0050AC  D004               	goto	L6
  3887  0050AE                     l574:
  3888                           
  3889                           ; BSR set to: 0
  3890                           ;ff.c: 2089: if (!(ns & 0x04)) res = FR_NO_PATH;
  3891  0050AE  0100               	movlb	0	; () banked
  3892  0050B0  B58C               	btfsc	follow_path@ns& (0+255),2,b
  3893  0050B2  D03F               	goto	l5167
  3894  0050B4  D01D               	goto	l5163
  3895  0050B6                     L6:
  3896  0050B6  0100               	movlb	0	; () banked
  3897  0050B8  6F8D               	movwf	follow_path@res& (0+255),b
  3898                           
  3899                           ; BSR set to: 0
  3900                           ;ff.c: 2090: }
  3901                           ;ff.c: 2091: }
  3902                           ;ff.c: 2092: break;
  3903                           
  3904                           ; BSR set to: 0
  3905                           
  3906                           ; BSR set to: 0
  3907  0050BA  D03B               	goto	l5167
  3908  0050BC                     l572:
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;ff.c: 2093: }
  3912                           ;ff.c: 2094: if (ns & 0x04) break;
  3913  0050BC  0100               	movlb	0	; () banked
  3914  0050BE  B58C               	btfsc	follow_path@ns& (0+255),2,b
  3915  0050C0  D038               	goto	l5167
  3916  0050C2  D001               	goto	l5161
  3917                           
  3918                           ; BSR set to: 0
  3919  0050C4  D036               	goto	l5167
  3920  0050C6                     l5161:
  3921                           
  3922                           ; BSR set to: 0
  3923                           ;ff.c: 2095: dir = dp->dir;
  3924  0050C6  0100               	movlb	0	; () banked
  3925  0050C8  EE20 F012          	lfsr	2,18
  3926  0050CC  5186               	movf	follow_path@dp& (0+255),w,b
  3927  0050CE  26D9               	addwf	fsr2l,f,c
  3928  0050D0  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3929  0050D2  22DA               	addwfc	fsr2h,f,c
  3930  0050D4  CFDE F08A          	movff	postinc2,follow_path@dir
  3931  0050D8  CFDD F08B          	movff	postdec2,follow_path@dir+1
  3932                           
  3933                           ;ff.c: 2096: if (!(dir[11] & 0x10)) {
  3934  0050DC  0100               	movlb	0	; () banked
  3935  0050DE  EE20 F00B          	lfsr	2,11
  3936  0050E2  518A               	movf	follow_path@dir& (0+255),w,b
  3937  0050E4  26D9               	addwf	fsr2l,f,c
  3938  0050E6  518B               	movf	(follow_path@dir+1)& (0+255),w,b
  3939  0050E8  22DA               	addwfc	fsr2h,f,c
  3940  0050EA  0100               	movlb	0	; () banked
  3941  0050EC  B8DF               	btfsc	indf2,4,c
  3942  0050EE  D002               	goto	l5165
  3943  0050F0                     l5163:
  3944                           
  3945                           ; BSR set to: 0
  3946                           ;ff.c: 2097: res = FR_NO_PATH; break;
  3947  0050F0  0E05               	movlw	5
  3948  0050F2  D7E1               	goto	L6
  3949  0050F4                     l5165:
  3950                           
  3951                           ; BSR set to: 0
  3952                           ;ff.c: 2098: }
  3953                           ;ff.c: 2099: dp->sclust = ld_clust(dp->fs, dir);
  3954  0050F4  C086  FFD9         	movff	follow_path@dp,fsr2l
  3955  0050F8  C087  FFDA         	movff	follow_path@dp+1,fsr2h
  3956  0050FC  CFDE F001          	movff	postinc2,ld_clust@fs
  3957  005100  CFDD F002          	movff	postdec2,ld_clust@fs+1
  3958  005104  C08A  F003         	movff	follow_path@dir,ld_clust@dir
  3959  005108  C08B  F004         	movff	follow_path@dir+1,ld_clust@dir+1
  3960  00510C  EC5F  F031         	call	_ld_clust	;wreg free
  3961  005110  0100               	movlb	0	; () banked
  3962  005112  EE20 F006          	lfsr	2,6
  3963  005116  5186               	movf	follow_path@dp& (0+255),w,b
  3964  005118  26D9               	addwf	fsr2l,f,c
  3965  00511A  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3966  00511C  22DA               	addwfc	fsr2h,f,c
  3967  00511E  C001  FFDE         	movff	?_ld_clust,postinc2
  3968  005122  C002  FFDE         	movff	?_ld_clust+1,postinc2
  3969  005126  C003  FFDE         	movff	?_ld_clust+2,postinc2
  3970  00512A  C004  FFDE         	movff	?_ld_clust+3,postinc2
  3971                           
  3972                           ; BSR set to: 0
  3973                           ;ff.c: 2100: }
  3974  00512E  D768               	goto	l5131
  3975                           
  3976                           ; BSR set to: 0
  3977  005130  D000               	goto	l5167
  3978  005132                     l5167:
  3979                           
  3980                           ; BSR set to: 0
  3981                           ;ff.c: 2101: }
  3982                           ;ff.c: 2103: return res;
  3983  005132  0100               	movlb	0	; () banked
  3984  005134  518D               	movf	follow_path@res& (0+255),w,b
  3985  005136  0012               	return	
  3986                           
  3987                           ; BSR set to: 0
  3988                           
  3989                           ; BSR set to: 0
  3990  005138  0012               	return		;funcret
  3991  00513A                     __end_of_follow_path:
  3992                           	opt stack 0
  3993                           tblptru	equ	0xFF8
  3994                           tblptrh	equ	0xFF7
  3995                           tblptrl	equ	0xFF6
  3996                           tablat	equ	0xFF5
  3997                           postinc0	equ	0xFEE
  3998                           fsr0h	equ	0xFEA
  3999                           fsr0l	equ	0xFE9
  4000                           wreg	equ	0xFE8
  4001                           indf1	equ	0xFE7
  4002                           postinc1	equ	0xFE6
  4003                           postdec1	equ	0xFE5
  4004                           fsr1h	equ	0xFE2
  4005                           fsr1l	equ	0xFE1
  4006                           indf2	equ	0xFDF
  4007                           postinc2	equ	0xFDE
  4008                           postdec2	equ	0xFDD
  4009                           plusw2	equ	0xFDB
  4010                           fsr2h	equ	0xFDA
  4011                           fsr2l	equ	0xFD9
  4012                           status	equ	0xFD8
  4013                           
  4014 ;; *************** function _ld_clust *****************
  4015 ;; Defined at:
  4016 ;;		line 1235 in file "ff.c"
  4017 ;; Parameters:    Size  Location     Type
  4018 ;;  fs              2    0[COMRAM] PTR struct .
  4019 ;;		 -> FatFs(558), NULL(0), 
  4020 ;;  dir             2    2[COMRAM] PTR const unsigned char 
  4021 ;;		 -> FatFs(558), NULL(0), 
  4022 ;; Auto vars:     Size  Location     Type
  4023 ;;  cl              4   10[COMRAM] unsigned long 
  4024 ;; Return value:  Size  Location     Type
  4025 ;;                  4    0[COMRAM] unsigned long 
  4026 ;; Registers used:
  4027 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4028 ;; Tracked objects:
  4029 ;;		On entry : 0/0
  4030 ;;		On exit  : 0/0
  4031 ;;		Unchanged: 0/0
  4032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4033 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4034 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4035 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4036 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4037 ;;Total ram usage:       14 bytes
  4038 ;; Hardware stack levels used:    1
  4039 ;; This function calls:
  4040 ;;		Nothing
  4041 ;; This function is called by:
  4042 ;;		_follow_path
  4043 ;;		_f_open
  4044 ;; This function uses a non-reentrant model
  4045 ;;
  4046                           
  4047                           	psect	text5
  4048  0062BE                     __ptext5:
  4049                           	opt stack 0
  4050  0062BE                     _ld_clust:
  4051                           	opt stack 29
  4052                           
  4053                           ;ff.c: 1240: DWORD cl;
  4054                           ;ff.c: 1242: cl = (WORD)(*(WORD*)(BYTE*)(dir + 26));
  4055                           
  4056                           ; BSR set to: 0
  4057                           ;incstack = 0
  4058  0062BE  0E1A               	movlw	26
  4059  0062C0  2403               	addwf	ld_clust@dir,w,c
  4060  0062C2  6ED9               	movwf	fsr2l,c
  4061  0062C4  0E00               	movlw	0
  4062  0062C6  2004               	addwfc	ld_clust@dir+1,w,c
  4063  0062C8  6EDA               	movwf	fsr2h,c
  4064  0062CA  CFDE F005          	movff	postinc2,??_ld_clust
  4065  0062CE  CFDD F006          	movff	postdec2,??_ld_clust+1
  4066  0062D2  C005  F00B         	movff	??_ld_clust,ld_clust@cl
  4067  0062D6  C006  F00C         	movff	??_ld_clust+1,ld_clust@cl+1
  4068  0062DA  6A0D               	clrf	ld_clust@cl+2,c
  4069  0062DC  6A0E               	clrf	ld_clust@cl+3,c
  4070                           
  4071                           ;ff.c: 1243: if (fs->fs_type == 3)
  4072  0062DE  C001  FFD9         	movff	ld_clust@fs,fsr2l
  4073  0062E2  C002  FFDA         	movff	ld_clust@fs+1,fsr2h
  4074  0062E6  0E03               	movlw	3
  4075  0062E8  18DE               	xorwf	postinc2,w,c
  4076  0062EA  A4D8               	btfss	status,2,c
  4077  0062EC  D01F               	goto	l4757
  4078                           
  4079                           ;ff.c: 1244: cl |= (DWORD)(WORD)(*(WORD*)(BYTE*)(dir + 20)) << 16;
  4080  0062EE  0E14               	movlw	20
  4081  0062F0  2403               	addwf	ld_clust@dir,w,c
  4082  0062F2  6ED9               	movwf	fsr2l,c
  4083  0062F4  0E00               	movlw	0
  4084  0062F6  2004               	addwfc	ld_clust@dir+1,w,c
  4085  0062F8  6EDA               	movwf	fsr2h,c
  4086  0062FA  CFDE F005          	movff	postinc2,??_ld_clust
  4087  0062FE  CFDD F006          	movff	postdec2,??_ld_clust+1
  4088  006302  5005               	movf	??_ld_clust,w,c
  4089  006304  6E07               	movwf	(??_ld_clust+2)& (0+255),c
  4090  006306  5006               	movf	??_ld_clust+1,w,c
  4091  006308  6E08               	movwf	(??_ld_clust+3)& (0+255),c
  4092  00630A  6A09               	clrf	(??_ld_clust+4)& (0+255),c
  4093  00630C  6A0A               	clrf	(??_ld_clust+5)& (0+255),c
  4094  00630E  C008  F00A         	movff	??_ld_clust+3,??_ld_clust+5
  4095  006312  C007  F009         	movff	??_ld_clust+2,??_ld_clust+4
  4096  006316  6A08               	clrf	??_ld_clust+3,c
  4097  006318  6A07               	clrf	??_ld_clust+2,c
  4098  00631A  5007               	movf	??_ld_clust+2,w,c
  4099  00631C  120B               	iorwf	ld_clust@cl,f,c
  4100  00631E  5008               	movf	??_ld_clust+3,w,c
  4101  006320  120C               	iorwf	ld_clust@cl+1,f,c
  4102  006322  5009               	movf	??_ld_clust+4,w,c
  4103  006324  120D               	iorwf	ld_clust@cl+2,f,c
  4104  006326  500A               	movf	??_ld_clust+5,w,c
  4105  006328  120E               	iorwf	ld_clust@cl+3,f,c
  4106  00632A  D000               	goto	l4757
  4107  00632C                     l4757:
  4108                           
  4109                           ;ff.c: 1246: return cl;
  4110  00632C  C00B  F001         	movff	ld_clust@cl,?_ld_clust
  4111  006330  C00C  F002         	movff	ld_clust@cl+1,?_ld_clust+1
  4112  006334  C00D  F003         	movff	ld_clust@cl+2,?_ld_clust+2
  4113  006338  C00E  F004         	movff	ld_clust@cl+3,?_ld_clust+3
  4114  00633C  0012               	return	
  4115  00633E  0012               	return		;funcret
  4116  006340                     __end_of_ld_clust:
  4117                           	opt stack 0
  4118                           tblptru	equ	0xFF8
  4119                           tblptrh	equ	0xFF7
  4120                           tblptrl	equ	0xFF6
  4121                           tablat	equ	0xFF5
  4122                           postinc0	equ	0xFEE
  4123                           fsr0h	equ	0xFEA
  4124                           fsr0l	equ	0xFE9
  4125                           wreg	equ	0xFE8
  4126                           indf1	equ	0xFE7
  4127                           postinc1	equ	0xFE6
  4128                           postdec1	equ	0xFE5
  4129                           fsr1h	equ	0xFE2
  4130                           fsr1l	equ	0xFE1
  4131                           indf2	equ	0xFDF
  4132                           postinc2	equ	0xFDE
  4133                           postdec2	equ	0xFDD
  4134                           plusw2	equ	0xFDB
  4135                           fsr2h	equ	0xFDA
  4136                           fsr2l	equ	0xFD9
  4137                           status	equ	0xFD8
  4138                           
  4139 ;; *************** function _dir_find *****************
  4140 ;; Defined at:
  4141 ;;		line 1458 in file "ff.c"
  4142 ;; Parameters:    Size  Location     Type
  4143 ;;  dp              2   32[BANK0 ] PTR struct .
  4144 ;;		 -> f_open@dj(22), 
  4145 ;; Auto vars:     Size  Location     Type
  4146 ;;  dir             2   35[BANK0 ] PTR unsigned char 
  4147 ;;		 -> FatFs(558), NULL(0), 
  4148 ;;  res             1   37[BANK0 ] enum E88
  4149 ;;  c               1   34[BANK0 ] unsigned char 
  4150 ;; Return value:  Size  Location     Type
  4151 ;;                  1    wreg      enum E88
  4152 ;; Registers used:
  4153 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4154 ;; Tracked objects:
  4155 ;;		On entry : 0/0
  4156 ;;		On exit  : 0/0
  4157 ;;		Unchanged: 0/0
  4158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4159 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4160 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4162 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4163 ;;Total ram usage:        6 bytes
  4164 ;; Hardware stack levels used:    1
  4165 ;; Hardware stack levels required when called:   11
  4166 ;; This function calls:
  4167 ;;		_dir_next
  4168 ;;		_dir_sdi
  4169 ;;		_mem_cmp
  4170 ;;		_move_window
  4171 ;; This function is called by:
  4172 ;;		_follow_path
  4173 ;; This function uses a non-reentrant model
  4174 ;;
  4175                           
  4176                           	psect	text6
  4177  0057E6                     __ptext6:
  4178                           	opt stack 0
  4179  0057E6                     _dir_find:
  4180                           	opt stack 17
  4181                           
  4182                           ;ff.c: 1462: FRESULT res;
  4183                           ;ff.c: 1463: BYTE c, *dir;
  4184                           ;ff.c: 1468: res = dir_sdi(dp, 0);
  4185                           
  4186                           ;incstack = 0
  4187  0057E6  C080  F055         	movff	dir_find@dp,dir_sdi@dp
  4188  0057EA  C081  F056         	movff	dir_find@dp+1,dir_sdi@dp+1
  4189  0057EE  0E00               	movlw	0
  4190  0057F0  6E58               	movwf	dir_sdi@idx+1,c
  4191  0057F2  0E00               	movlw	0
  4192  0057F4  6E57               	movwf	dir_sdi@idx,c
  4193  0057F6  ECE3  F022         	call	_dir_sdi	;wreg free
  4194  0057FA  0100               	movlb	0	; () banked
  4195  0057FC  6F85               	movwf	dir_find@res& (0+255),b
  4196                           
  4197                           ; BSR set to: 0
  4198                           ;ff.c: 1469: if (res != FR_OK) return res;
  4199  0057FE  0100               	movlb	0	; () banked
  4200  005800  5185               	movf	dir_find@res& (0+255),w,b
  4201  005802  0100               	movlb	0	; () banked
  4202  005804  B4D8               	btfsc	status,2,c
  4203  005806  D004               	goto	l4771
  4204                           
  4205                           ; BSR set to: 0
  4206  005808  0100               	movlb	0	; () banked
  4207  00580A  5185               	movf	dir_find@res& (0+255),w,b
  4208                           
  4209                           ; BSR set to: 0
  4210  00580C  0012               	return	
  4211                           
  4212                           ; BSR set to: 0
  4213  00580E  D000               	goto	l4771
  4214  005810                     l4771:
  4215                           
  4216                           ; BSR set to: 0
  4217                           ;ff.c: 1475: res = move_window(dp->fs, dp->sect);
  4218  005810  C080  FFD9         	movff	dir_find@dp,fsr2l
  4219  005814  C081  FFDA         	movff	dir_find@dp+1,fsr2h
  4220  005818  CFDE F030          	movff	postinc2,move_window@fs
  4221  00581C  CFDD F031          	movff	postdec2,move_window@fs+1
  4222  005820  0100               	movlb	0	; () banked
  4223  005822  EE20 F00E          	lfsr	2,14
  4224  005826  5180               	movf	dir_find@dp& (0+255),w,b
  4225  005828  26D9               	addwf	fsr2l,f,c
  4226  00582A  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  4227  00582C  22DA               	addwfc	fsr2h,f,c
  4228  00582E  CFDE F032          	movff	postinc2,move_window@sector
  4229  005832  CFDE F033          	movff	postinc2,move_window@sector+1
  4230  005836  CFDE F034          	movff	postinc2,move_window@sector+2
  4231  00583A  CFDE F035          	movff	postinc2,move_window@sector+3
  4232  00583E  ECE9  F02F         	call	_move_window	;wreg free
  4233  005842  0100               	movlb	0	; () banked
  4234  005844  6F85               	movwf	dir_find@res& (0+255),b
  4235                           
  4236                           ; BSR set to: 0
  4237                           ;ff.c: 1476: if (res != FR_OK) break;
  4238  005846  0100               	movlb	0	; () banked
  4239  005848  5185               	movf	dir_find@res& (0+255),w,b
  4240  00584A  0100               	movlb	0	; () banked
  4241  00584C  A4D8               	btfss	status,2,c
  4242  00584E  D054               	goto	l4795
  4243  005850  D001               	goto	l4777
  4244                           
  4245                           ; BSR set to: 0
  4246  005852  D052               	goto	l4795
  4247  005854                     l4777:
  4248                           
  4249                           ; BSR set to: 0
  4250                           ;ff.c: 1477: dir = dp->dir;
  4251  005854  0100               	movlb	0	; () banked
  4252  005856  EE20 F012          	lfsr	2,18
  4253  00585A  5180               	movf	dir_find@dp& (0+255),w,b
  4254  00585C  26D9               	addwf	fsr2l,f,c
  4255  00585E  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  4256  005860  22DA               	addwfc	fsr2h,f,c
  4257  005862  CFDE F083          	movff	postinc2,dir_find@dir
  4258  005866  CFDD F084          	movff	postdec2,dir_find@dir+1
  4259                           
  4260                           ; BSR set to: 0
  4261                           ;ff.c: 1478: c = dir[0];
  4262  00586A  C083  FFD9         	movff	dir_find@dir,fsr2l
  4263  00586E  C084  FFDA         	movff	dir_find@dir+1,fsr2h
  4264  005872  50DF               	movf	indf2,w,c
  4265  005874  0100               	movlb	0	; () banked
  4266  005876  6F82               	movwf	dir_find@c& (0+255),b
  4267                           
  4268                           ; BSR set to: 0
  4269                           ;ff.c: 1479: if (c == 0) { res = FR_NO_FILE; break; }
  4270  005878  0100               	movlb	0	; () banked
  4271  00587A  5182               	movf	dir_find@c& (0+255),w,b
  4272  00587C  0100               	movlb	0	; () banked
  4273  00587E  A4D8               	btfss	status,2,c
  4274  005880  D004               	goto	l4785
  4275                           
  4276                           ; BSR set to: 0
  4277  005882  0E04               	movlw	4
  4278  005884  0100               	movlb	0	; () banked
  4279  005886  6F85               	movwf	dir_find@res& (0+255),b
  4280  005888  D037               	goto	l4795
  4281  00588A                     l4785:
  4282                           
  4283                           ; BSR set to: 0
  4284                           ;ff.c: 1502: if (!(dir[11] & 0x08) && !mem_cmp(dir, dp->fn, 11))
  4285  00588A  0100               	movlb	0	; () banked
  4286  00588C  EE20 F00B          	lfsr	2,11
  4287  005890  5183               	movf	dir_find@dir& (0+255),w,b
  4288  005892  26D9               	addwf	fsr2l,f,c
  4289  005894  5184               	movf	(dir_find@dir+1)& (0+255),w,b
  4290  005896  22DA               	addwfc	fsr2h,f,c
  4291  005898  0100               	movlb	0	; () banked
  4292  00589A  B6DF               	btfsc	indf2,3,c
  4293  00589C  D01B               	goto	l4791
  4294                           
  4295                           ; BSR set to: 0
  4296  00589E  C083  F001         	movff	dir_find@dir,mem_cmp@dst
  4297  0058A2  C084  F002         	movff	dir_find@dir+1,mem_cmp@dst+1
  4298  0058A6  0100               	movlb	0	; () banked
  4299  0058A8  EE20 F014          	lfsr	2,20
  4300  0058AC  5180               	movf	dir_find@dp& (0+255),w,b
  4301  0058AE  26D9               	addwf	fsr2l,f,c
  4302  0058B0  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  4303  0058B2  22DA               	addwfc	fsr2h,f,c
  4304  0058B4  CFDE F003          	movff	postinc2,mem_cmp@src
  4305  0058B8  CFDD F004          	movff	postdec2,mem_cmp@src+1
  4306  0058BC  0E00               	movlw	0
  4307  0058BE  6E06               	movwf	mem_cmp@cnt+1,c
  4308  0058C0  0E0B               	movlw	11
  4309  0058C2  6E05               	movwf	mem_cmp@cnt,c
  4310  0058C4  ECDA  F031         	call	_mem_cmp	;wreg free
  4311  0058C8  5001               	movf	?_mem_cmp,w,c
  4312  0058CA  1002               	iorwf	?_mem_cmp+1,w,c
  4313  0058CC  B4D8               	btfsc	status,2,c
  4314  0058CE  D014               	goto	l4795
  4315  0058D0  D001               	goto	l4791
  4316                           
  4317                           ;ff.c: 1503: break;
  4318  0058D2  D012               	goto	l4795
  4319  0058D4                     l4791:
  4320                           
  4321                           ;ff.c: 1505: res = dir_next(dp, 0);
  4322  0058D4  C080  F06D         	movff	dir_find@dp,dir_next@dp
  4323  0058D8  C081  F06E         	movff	dir_find@dp+1,dir_next@dp+1
  4324  0058DC  0E00               	movlw	0
  4325  0058DE  0100               	movlb	0	; () banked
  4326  0058E0  6F70               	movwf	(dir_next@stretch+1)& (0+255),b
  4327  0058E2  0E00               	movlw	0
  4328  0058E4  6F6F               	movwf	dir_next@stretch& (0+255),b
  4329  0058E6  EC4E  F016         	call	_dir_next	;wreg free
  4330  0058EA  0100               	movlb	0	; () banked
  4331  0058EC  6F85               	movwf	dir_find@res& (0+255),b
  4332                           
  4333                           ; BSR set to: 0
  4334                           ;ff.c: 1506: } while (res == FR_OK);
  4335  0058EE  0100               	movlb	0	; () banked
  4336  0058F0  5185               	movf	dir_find@res& (0+255),w,b
  4337  0058F2  0100               	movlb	0	; () banked
  4338  0058F4  B4D8               	btfsc	status,2,c
  4339  0058F6  D78C               	goto	l4771
  4340  0058F8                     l4795:
  4341                           
  4342                           ;ff.c: 1508: return res;
  4343  0058F8  0100               	movlb	0	; () banked
  4344  0058FA  5185               	movf	dir_find@res& (0+255),w,b
  4345  0058FC  0012               	return	
  4346                           
  4347                           ; BSR set to: 0
  4348                           
  4349                           ; BSR set to: 0
  4350  0058FE  0012               	return		;funcret
  4351  005900                     __end_of_dir_find:
  4352                           	opt stack 0
  4353                           tblptru	equ	0xFF8
  4354                           tblptrh	equ	0xFF7
  4355                           tblptrl	equ	0xFF6
  4356                           tablat	equ	0xFF5
  4357                           postinc0	equ	0xFEE
  4358                           fsr0h	equ	0xFEA
  4359                           fsr0l	equ	0xFE9
  4360                           wreg	equ	0xFE8
  4361                           indf1	equ	0xFE7
  4362                           postinc1	equ	0xFE6
  4363                           postdec1	equ	0xFE5
  4364                           fsr1h	equ	0xFE2
  4365                           fsr1l	equ	0xFE1
  4366                           indf2	equ	0xFDF
  4367                           postinc2	equ	0xFDE
  4368                           postdec2	equ	0xFDD
  4369                           plusw2	equ	0xFDB
  4370                           fsr2h	equ	0xFDA
  4371                           fsr2l	equ	0xFD9
  4372                           status	equ	0xFD8
  4373                           
  4374 ;; *************** function _mem_cmp *****************
  4375 ;; Defined at:
  4376 ;;		line 533 in file "ff.c"
  4377 ;; Parameters:    Size  Location     Type
  4378 ;;  dst             2    0[COMRAM] PTR const void 
  4379 ;;		 -> FatFs(558), NULL(0), 
  4380 ;;  src             2    2[COMRAM] PTR const void 
  4381 ;;		 -> f_open@sfn(12), 
  4382 ;;  cnt             2    4[COMRAM] unsigned int 
  4383 ;; Auto vars:     Size  Location     Type
  4384 ;;  r               2   13[COMRAM] int 
  4385 ;;  s               2   11[COMRAM] PTR const unsigned char 
  4386 ;;		 -> f_open@sfn(12), 
  4387 ;;  d               2    9[COMRAM] PTR const unsigned char 
  4388 ;;		 -> FatFs(558), NULL(0), 
  4389 ;; Return value:  Size  Location     Type
  4390 ;;                  2    0[COMRAM] int 
  4391 ;; Registers used:
  4392 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4393 ;; Tracked objects:
  4394 ;;		On entry : 0/0
  4395 ;;		On exit  : 0/0
  4396 ;;		Unchanged: 0/0
  4397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4398 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4399 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4400 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4401 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4402 ;;Total ram usage:       15 bytes
  4403 ;; Hardware stack levels used:    1
  4404 ;; This function calls:
  4405 ;;		Nothing
  4406 ;; This function is called by:
  4407 ;;		_dir_find
  4408 ;; This function uses a non-reentrant model
  4409 ;;
  4410                           
  4411                           	psect	text7
  4412  0063B4                     __ptext7:
  4413                           	opt stack 0
  4414  0063B4                     _mem_cmp:
  4415                           	opt stack 27
  4416                           
  4417                           ;ff.c: 534: const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
  4418                           
  4419                           ; BSR set to: 0
  4420                           ;incstack = 0
  4421  0063B4  C001  F00A         	movff	mem_cmp@dst,mem_cmp@d
  4422  0063B8  C002  F00B         	movff	mem_cmp@dst+1,mem_cmp@d+1
  4423  0063BC  C003  F00C         	movff	mem_cmp@src,mem_cmp@s
  4424  0063C0  C004  F00D         	movff	mem_cmp@src+1,mem_cmp@s+1
  4425                           
  4426                           ;ff.c: 535: int r = 0;
  4427  0063C4  0E00               	movlw	0
  4428  0063C6  6E0F               	movwf	mem_cmp@r+1,c
  4429  0063C8  0E00               	movlw	0
  4430  0063CA  6E0E               	movwf	mem_cmp@r,c
  4431                           
  4432                           ;ff.c: 537: while (cnt-- && (r = *d++ - *s++) == 0) ;
  4433  0063CC  D000               	goto	l4379
  4434  0063CE                     l4379:
  4435  0063CE  0605               	decf	mem_cmp@cnt,f,c
  4436  0063D0  A0D8               	btfss	status,0,c
  4437  0063D2  0606               	decf	mem_cmp@cnt+1,f,c
  4438  0063D4  2805               	incf	mem_cmp@cnt,w,c
  4439  0063D6  E103               	bnz	u5830
  4440  0063D8  2806               	incf	mem_cmp@cnt+1,w,c
  4441  0063DA  B4D8               	btfsc	status,2,c
  4442  0063DC  D01F               	goto	l318
  4443  0063DE                     u5830:
  4444  0063DE  C00C  FFD9         	movff	mem_cmp@s,fsr2l
  4445  0063E2  C00D  FFDA         	movff	mem_cmp@s+1,fsr2h
  4446  0063E6  4A0C               	infsnz	mem_cmp@s,f,c
  4447  0063E8  2A0D               	incf	mem_cmp@s+1,f,c
  4448  0063EA  50DF               	movf	indf2,w,c
  4449  0063EC  6E07               	movwf	??_mem_cmp& (0+255),c
  4450  0063EE  6A08               	clrf	(??_mem_cmp+1)& (0+255),c
  4451  0063F0  1E07               	comf	??_mem_cmp,f,c
  4452  0063F2  1E08               	comf	??_mem_cmp+1,f,c
  4453  0063F4  4A07               	infsnz	??_mem_cmp,f,c
  4454  0063F6  2A08               	incf	??_mem_cmp+1,f,c
  4455  0063F8  C00A  FFD9         	movff	mem_cmp@d,fsr2l
  4456  0063FC  C00B  FFDA         	movff	mem_cmp@d+1,fsr2h
  4457  006400  4A0A               	infsnz	mem_cmp@d,f,c
  4458  006402  2A0B               	incf	mem_cmp@d+1,f,c
  4459  006404  50DF               	movf	indf2,w,c
  4460  006406  6E09               	movwf	(??_mem_cmp+2)& (0+255),c
  4461  006408  5009               	movf	??_mem_cmp+2,w,c
  4462  00640A  2407               	addwf	??_mem_cmp,w,c
  4463  00640C  6E0E               	movwf	mem_cmp@r,c
  4464  00640E  0E00               	movlw	0
  4465  006410  2008               	addwfc	??_mem_cmp+1,w,c
  4466  006412  6E0F               	movwf	mem_cmp@r+1,c
  4467  006414  500E               	movf	mem_cmp@r,w,c
  4468  006416  100F               	iorwf	mem_cmp@r+1,w,c
  4469  006418  B4D8               	btfsc	status,2,c
  4470  00641A  D7D9               	goto	l4379
  4471  00641C                     l318:
  4472                           
  4473                           ;ff.c: 538: return r;
  4474  00641C  C00E  F001         	movff	mem_cmp@r,?_mem_cmp
  4475  006420  C00F  F002         	movff	mem_cmp@r+1,?_mem_cmp+1
  4476  006424  0012               	return		;funcret
  4477  006426                     __end_of_mem_cmp:
  4478                           	opt stack 0
  4479                           tblptru	equ	0xFF8
  4480                           tblptrh	equ	0xFF7
  4481                           tblptrl	equ	0xFF6
  4482                           tablat	equ	0xFF5
  4483                           postinc0	equ	0xFEE
  4484                           fsr0h	equ	0xFEA
  4485                           fsr0l	equ	0xFE9
  4486                           wreg	equ	0xFE8
  4487                           indf1	equ	0xFE7
  4488                           postinc1	equ	0xFE6
  4489                           postdec1	equ	0xFE5
  4490                           fsr1h	equ	0xFE2
  4491                           fsr1l	equ	0xFE1
  4492                           indf2	equ	0xFDF
  4493                           postinc2	equ	0xFDE
  4494                           postdec2	equ	0xFDD
  4495                           plusw2	equ	0xFDB
  4496                           fsr2h	equ	0xFDA
  4497                           fsr2l	equ	0xFD9
  4498                           status	equ	0xFD8
  4499                           
  4500 ;; *************** function _create_name *****************
  4501 ;; Defined at:
  4502 ;;		line 1843 in file "ff.c"
  4503 ;; Parameters:    Size  Location     Type
  4504 ;;  dp              2    8[COMRAM] PTR struct .
  4505 ;;		 -> f_open@dj(22), 
  4506 ;;  path            2   10[COMRAM] PTR PTR const unsigned c
  4507 ;;		 -> follow_path@path(2), 
  4508 ;; Auto vars:     Size  Location     Type
  4509 ;;  i               2   28[COMRAM] unsigned int 
  4510 ;;  sfn             2   26[COMRAM] PTR unsigned char 
  4511 ;;		 -> f_open@sfn(12), 
  4512 ;;  p               2   23[COMRAM] PTR const unsigned char 
  4513 ;;		 -> STR_3(10), STR_2(1), 
  4514 ;;  ni              2   21[COMRAM] unsigned int 
  4515 ;;  si              2   18[COMRAM] unsigned int 
  4516 ;;  c               1   30[COMRAM] unsigned char 
  4517 ;;  d               1   25[COMRAM] unsigned char 
  4518 ;;  b               1   20[COMRAM] unsigned char 
  4519 ;; Return value:  Size  Location     Type
  4520 ;;                  1    wreg      enum E88
  4521 ;; Registers used:
  4522 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4523 ;; Tracked objects:
  4524 ;;		On entry : 0/0
  4525 ;;		On exit  : 0/0
  4526 ;;		Unchanged: 0/0
  4527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4528 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4529 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4530 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4531 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4532 ;;Total ram usage:       23 bytes
  4533 ;; Hardware stack levels used:    1
  4534 ;; Hardware stack levels required when called:    1
  4535 ;; This function calls:
  4536 ;;		_chk_chr
  4537 ;;		_mem_set
  4538 ;; This function is called by:
  4539 ;;		_follow_path
  4540 ;; This function uses a non-reentrant model
  4541 ;;
  4542                           
  4543                           	psect	text8
  4544  0048E4                     __ptext8:
  4545                           	opt stack 0
  4546  0048E4                     _create_name:
  4547                           	opt stack 27
  4548                           
  4549                           ;ff.c: 1969: BYTE b, c, d, *sfn;
  4550                           ;ff.c: 1970: UINT ni, si, i;
  4551                           ;ff.c: 1971: const char *p;
  4552                           ;ff.c: 1974: for (p = *path; *p == '/' || *p == '\\'; p++) ;
  4553                           
  4554                           ;incstack = 0
  4555  0048E4  C00B  FFD9         	movff	create_name@path,fsr2l
  4556  0048E8  C00C  FFDA         	movff	create_name@path+1,fsr2h
  4557  0048EC  CFDE F018          	movff	postinc2,create_name@p
  4558  0048F0  CFDD F019          	movff	postdec2,create_name@p+1
  4559  0048F4  D003               	goto	l4803
  4560  0048F6                     l4801:
  4561  0048F6  4A18               	infsnz	create_name@p,f,c
  4562  0048F8  2A19               	incf	create_name@p+1,f,c
  4563  0048FA  D000               	goto	l4803
  4564  0048FC                     l4803:
  4565  0048FC  C018  FFF6         	movff	create_name@p,tblptrl
  4566  004900  C019  FFF7         	movff	create_name@p+1,tblptrh
  4567  004904                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4568  004904  6AF8               	clrf	tblptru,c
  4569  004906                     	endif
  4570  004906                     	if	0	;tblptru may be non-zero
  4571  004906                     	endif
  4572  004906  0008               	tblrd		*
  4573  004908  50F5               	movf	tablat,w,c
  4574  00490A  0A2F               	xorlw	47
  4575  00490C  B4D8               	btfsc	status,2,c
  4576  00490E  D7F3               	goto	l4801
  4577  004910  C018  FFF6         	movff	create_name@p,tblptrl
  4578  004914  C019  FFF7         	movff	create_name@p+1,tblptrh
  4579  004918                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4580  004918  6AF8               	clrf	tblptru,c
  4581  00491A                     	endif
  4582  00491A                     	if	0	;tblptru may be non-zero
  4583  00491A                     	endif
  4584  00491A  0008               	tblrd		*
  4585  00491C  50F5               	movf	tablat,w,c
  4586  00491E  0A5C               	xorlw	92
  4587  004920  B4D8               	btfsc	status,2,c
  4588  004922  D7E9               	goto	l4801
  4589                           
  4590                           ;ff.c: 1975: sfn = dp->fn;
  4591  004924  EE20 F014          	lfsr	2,20
  4592  004928  5009               	movf	create_name@dp,w,c
  4593  00492A  26D9               	addwf	fsr2l,f,c
  4594  00492C  500A               	movf	create_name@dp+1,w,c
  4595  00492E  22DA               	addwfc	fsr2h,f,c
  4596  004930  CFDE F01B          	movff	postinc2,create_name@sfn
  4597  004934  CFDD F01C          	movff	postdec2,create_name@sfn+1
  4598                           
  4599                           ;ff.c: 1976: mem_set(sfn, ' ', 11);
  4600  004938  C01B  F001         	movff	create_name@sfn,mem_set@dst
  4601  00493C  C01C  F002         	movff	create_name@sfn+1,mem_set@dst+1
  4602  004940  0E00               	movlw	0
  4603  004942  6E04               	movwf	mem_set@val+1,c
  4604  004944  0E20               	movlw	32
  4605  004946  6E03               	movwf	mem_set@val,c
  4606  004948  0E00               	movlw	0
  4607  00494A  6E06               	movwf	mem_set@cnt+1,c
  4608  00494C  0E0B               	movlw	11
  4609  00494E  6E05               	movwf	mem_set@cnt,c
  4610  004950  EC0D  F033         	call	_mem_set	;wreg free
  4611                           
  4612                           ;ff.c: 1977: si = i = b = 0; ni = 8;
  4613  004954  0E00               	movlw	0
  4614  004956  6E15               	movwf	create_name@b,c
  4615  004958  C015  F01D         	movff	create_name@b,create_name@i
  4616  00495C  6A1E               	clrf	create_name@i+1,c
  4617  00495E  C01D  F013         	movff	create_name@i,create_name@si
  4618  004962  C01E  F014         	movff	create_name@i+1,create_name@si+1
  4619  004966  0E00               	movlw	0
  4620  004968  6E17               	movwf	create_name@ni+1,c
  4621  00496A  0E08               	movlw	8
  4622  00496C  6E16               	movwf	create_name@ni,c
  4623  00496E  D000               	goto	l4815
  4624  004970                     l4815:
  4625                           
  4626                           ;ff.c: 1992: c = (BYTE)p[si++];
  4627  004970  5013               	movf	create_name@si,w,c
  4628  004972  2418               	addwf	create_name@p,w,c
  4629  004974  6E0D               	movwf	??_create_name& (0+255),c
  4630  004976  5014               	movf	create_name@si+1,w,c
  4631  004978  2019               	addwfc	create_name@p+1,w,c
  4632  00497A  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4633  00497C  C00D  FFF6         	movff	??_create_name,tblptrl
  4634  004980  C00E  FFF7         	movff	??_create_name+1,tblptrh
  4635  004984                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4636  004984  6AF8               	clrf	tblptru,c
  4637  004986                     	endif
  4638  004986                     	if	0	;tblptru may be non-zero
  4639  004986                     	endif
  4640  004986  0008               	tblrd		*
  4641  004988  CFF5 F01F          	movff	tablat,create_name@c
  4642  00498C  4A13               	infsnz	create_name@si,f,c
  4643  00498E  2A14               	incf	create_name@si+1,f,c
  4644                           
  4645                           ;ff.c: 1993: if (c <= ' ' || c == '/' || c == '\\') break;
  4646  004990  0E20               	movlw	32
  4647  004992  641F               	cpfsgt	create_name@c,c
  4648  004994  D0B0               	goto	l4899
  4649  004996  0E2F               	movlw	47
  4650  004998  181F               	xorwf	create_name@c,w,c
  4651  00499A  B4D8               	btfsc	status,2,c
  4652  00499C  D0AC               	goto	l4899
  4653  00499E  0E5C               	movlw	92
  4654  0049A0  181F               	xorwf	create_name@c,w,c
  4655  0049A2  B4D8               	btfsc	status,2,c
  4656  0049A4  D0A8               	goto	l4899
  4657  0049A6  D001               	goto	l4825
  4658  0049A8  D0A6               	goto	l4899
  4659  0049AA                     l4825:
  4660                           
  4661                           ;ff.c: 1994: if (c == '.' || i >= ni) {
  4662  0049AA  0E2E               	movlw	46
  4663  0049AC  181F               	xorwf	create_name@c,w,c
  4664  0049AE  B4D8               	btfsc	status,2,c
  4665  0049B0  D006               	goto	l4829
  4666  0049B2  5016               	movf	create_name@ni,w,c
  4667  0049B4  5C1D               	subwf	create_name@i,w,c
  4668  0049B6  5017               	movf	create_name@ni+1,w,c
  4669  0049B8  581E               	subwfb	create_name@i+1,w,c
  4670  0049BA  A0D8               	btfss	status,0,c
  4671  0049BC  D018               	goto	l4841
  4672  0049BE                     l4829:
  4673                           
  4674                           ;ff.c: 1995: if (ni != 8 || c != '.') return FR_INVALID_NAME;
  4675  0049BE  0E08               	movlw	8
  4676  0049C0  1816               	xorwf	create_name@ni,w,c
  4677  0049C2  1017               	iorwf	create_name@ni+1,w,c
  4678  0049C4  A4D8               	btfss	status,2,c
  4679  0049C6  D004               	goto	l4833
  4680  0049C8  0E2E               	movlw	46
  4681  0049CA  181F               	xorwf	create_name@c,w,c
  4682  0049CC  B4D8               	btfsc	status,2,c
  4683  0049CE  D002               	goto	l4837
  4684  0049D0                     l4833:
  4685  0049D0  0E06               	movlw	6
  4686  0049D2  0012               	return	
  4687  0049D4                     l4837:
  4688                           
  4689                           ;ff.c: 1996: i = 8; ni = 11;
  4690  0049D4  0E00               	movlw	0
  4691  0049D6  6E1E               	movwf	create_name@i+1,c
  4692  0049D8  0E08               	movlw	8
  4693  0049DA  6E1D               	movwf	create_name@i,c
  4694  0049DC  0E00               	movlw	0
  4695  0049DE  6E17               	movwf	create_name@ni+1,c
  4696  0049E0  0E0B               	movlw	11
  4697  0049E2  6E16               	movwf	create_name@ni,c
  4698                           
  4699                           ;ff.c: 1997: b <<= 2; continue;
  4700  0049E4  90D8               	bcf	status,0,c
  4701  0049E6  3615               	rlcf	create_name@b,f,c
  4702  0049E8  90D8               	bcf	status,0,c
  4703  0049EA  3615               	rlcf	create_name@b,f,c
  4704  0049EC  D7C1               	goto	l4815
  4705  0049EE                     l4841:
  4706                           
  4707                           ;ff.c: 1998: }
  4708                           ;ff.c: 1999: if (c >= 0x80) {
  4709  0049EE  0E7F               	movlw	127
  4710  0049F0  641F               	cpfsgt	create_name@c,c
  4711  0049F2  D002               	goto	l535
  4712                           
  4713                           ;ff.c: 2000: b |= 3;
  4714  0049F4  0E03               	movlw	3
  4715  0049F6  1215               	iorwf	create_name@b,f,c
  4716  0049F8                     l535:
  4717                           
  4718                           ;ff.c: 2008: }
  4719                           ;ff.c: 2009: if ((((BYTE)(c) >= 0x81 && (BYTE)(c) <= 0x9F) || ((BYTE)(c) >= 0xE0 && (BYT
      +                          E)(c) <= 0xFC))) {
  4720  0049F8  0E80               	movlw	128
  4721  0049FA  641F               	cpfsgt	create_name@c,c
  4722  0049FC  D004               	goto	l4847
  4723  0049FE  0E9F               	movlw	159
  4724  004A00  641F               	cpfsgt	create_name@c,c
  4725  004A02  D008               	goto	l4851
  4726  004A04  D000               	goto	l4847
  4727  004A06                     l4847:
  4728  004A06  0EDF               	movlw	223
  4729  004A08  641F               	cpfsgt	create_name@c,c
  4730  004A0A  D049               	goto	l4875
  4731  004A0C  0EFD               	movlw	253
  4732  004A0E  601F               	cpfslt	create_name@c,c
  4733  004A10  D046               	goto	l4875
  4734  004A12  D000               	goto	l4851
  4735  004A14                     l4851:
  4736                           
  4737                           ;ff.c: 2010: d = (BYTE)p[si++];
  4738  004A14  5013               	movf	create_name@si,w,c
  4739  004A16  2418               	addwf	create_name@p,w,c
  4740  004A18  6E0D               	movwf	??_create_name& (0+255),c
  4741  004A1A  5014               	movf	create_name@si+1,w,c
  4742  004A1C  2019               	addwfc	create_name@p+1,w,c
  4743  004A1E  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4744  004A20  C00D  FFF6         	movff	??_create_name,tblptrl
  4745  004A24  C00E  FFF7         	movff	??_create_name+1,tblptrh
  4746  004A28                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4747  004A28  6AF8               	clrf	tblptru,c
  4748  004A2A                     	endif
  4749  004A2A                     	if	0	;tblptru may be non-zero
  4750  004A2A                     	endif
  4751  004A2A  0008               	tblrd		*
  4752  004A2C  CFF5 F01A          	movff	tablat,create_name@d
  4753  004A30  4A13               	infsnz	create_name@si,f,c
  4754  004A32  2A14               	incf	create_name@si+1,f,c
  4755                           
  4756                           ;ff.c: 2011: if (!(((BYTE)(d) >= 0x40 && (BYTE)(d) <= 0x7E) || ((BYTE)(d) >= 0x80 && (BY
      +                          TE)(d) <= 0xFC)) || i >= ni - 1)
  4757  004A34  0E3F               	movlw	63
  4758  004A36  641A               	cpfsgt	create_name@d,c
  4759  004A38  D004               	goto	l4859
  4760  004A3A  0E7E               	movlw	126
  4761  004A3C  641A               	cpfsgt	create_name@d,c
  4762  004A3E  D008               	goto	l4863
  4763  004A40  D000               	goto	l4859
  4764  004A42                     l4859:
  4765  004A42  0E7F               	movlw	127
  4766  004A44  641A               	cpfsgt	create_name@d,c
  4767  004A46  D016               	goto	l4865
  4768  004A48  0EFD               	movlw	253
  4769  004A4A  601A               	cpfslt	create_name@d,c
  4770  004A4C  D013               	goto	l4865
  4771  004A4E  D000               	goto	l4863
  4772  004A50                     l4863:
  4773  004A50  0EFF               	movlw	255
  4774  004A52  6E0D               	movwf	??_create_name& (0+255),c
  4775  004A54  0EFF               	movlw	255
  4776  004A56  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4777  004A58  C016  F00F         	movff	create_name@ni,??_create_name+2
  4778  004A5C  C017  F010         	movff	create_name@ni+1,??_create_name+3
  4779  004A60  500D               	movf	??_create_name,w,c
  4780  004A62  260F               	addwf	??_create_name+2,f,c
  4781  004A64  500E               	movf	??_create_name+1,w,c
  4782  004A66  2210               	addwfc	??_create_name+3,f,c
  4783  004A68  500F               	movf	??_create_name+2,w,c
  4784  004A6A  5C1D               	subwf	create_name@i,w,c
  4785  004A6C  5010               	movf	??_create_name+3,w,c
  4786  004A6E  581E               	subwfb	create_name@i+1,w,c
  4787  004A70  A0D8               	btfss	status,0,c
  4788  004A72  D002               	goto	l4869
  4789  004A74                     l4865:
  4790                           
  4791                           ;ff.c: 2012: return FR_INVALID_NAME;
  4792  004A74  0E06               	movlw	6
  4793  004A76  0012               	return	
  4794  004A78                     l4869:
  4795                           
  4796                           ;ff.c: 2013: sfn[i++] = c;
  4797  004A78  501D               	movf	create_name@i,w,c
  4798  004A7A  241B               	addwf	create_name@sfn,w,c
  4799  004A7C  6ED9               	movwf	fsr2l,c
  4800  004A7E  501E               	movf	create_name@i+1,w,c
  4801  004A80  201C               	addwfc	create_name@sfn+1,w,c
  4802  004A82  6EDA               	movwf	fsr2h,c
  4803  004A84  C01F  FFDF         	movff	create_name@c,indf2
  4804  004A88  4A1D               	infsnz	create_name@i,f,c
  4805  004A8A  2A1E               	incf	create_name@i+1,f,c
  4806                           
  4807                           ;ff.c: 2014: sfn[i++] = d;
  4808  004A8C  501D               	movf	create_name@i,w,c
  4809  004A8E  241B               	addwf	create_name@sfn,w,c
  4810  004A90  6ED9               	movwf	fsr2l,c
  4811  004A92  501E               	movf	create_name@i+1,w,c
  4812  004A94  201C               	addwfc	create_name@sfn+1,w,c
  4813  004A96  6EDA               	movwf	fsr2h,c
  4814  004A98  C01A  FFDF         	movff	create_name@d,indf2
  4815  004A9C  D029               	goto	l4897
  4816  004A9E                     l4875:
  4817                           
  4818                           ;ff.c: 2016: if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))
  4819  004A9E  0E10               	movlw	low STR_1
  4820  004AA0  6E01               	movwf	chk_chr@str,c
  4821  004AA2  0E10               	movlw	high STR_1
  4822  004AA4  6E02               	movwf	chk_chr@str+1,c
  4823  004AA6  C01F  F003         	movff	create_name@c,chk_chr@chr
  4824  004AAA  6A04               	clrf	chk_chr@chr+1,c
  4825  004AAC  EC40  F032         	call	_chk_chr	;wreg free
  4826  004AB0  5001               	movf	?_chk_chr,w,c
  4827  004AB2  1002               	iorwf	?_chk_chr+1,w,c
  4828  004AB4  B4D8               	btfsc	status,2,c
  4829  004AB6  D002               	goto	l4881
  4830                           
  4831                           ;ff.c: 2017: return FR_INVALID_NAME;
  4832  004AB8  0E06               	movlw	6
  4833  004ABA  0012               	return	
  4834  004ABC                     l4881:
  4835                           
  4836                           ;ff.c: 2018: if ((((c)>='A')&&((c)<='Z'))) {
  4837  004ABC  0E40               	movlw	64
  4838  004ABE  641F               	cpfsgt	create_name@c,c
  4839  004AC0  D005               	goto	l4887
  4840  004AC2  0E5B               	movlw	91
  4841  004AC4  601F               	cpfslt	create_name@c,c
  4842  004AC6  D002               	goto	l4887
  4843                           
  4844                           ;ff.c: 2019: b |= 2;
  4845  004AC8  8215               	bsf	create_name@b,1,c
  4846                           
  4847                           ;ff.c: 2020: } else {
  4848  004ACA  D00A               	goto	l4895
  4849  004ACC                     l4887:
  4850                           
  4851                           ;ff.c: 2021: if ((((c)>='a')&&((c)<='z'))) {
  4852  004ACC  0E60               	movlw	96
  4853  004ACE  641F               	cpfsgt	create_name@c,c
  4854  004AD0  D007               	goto	l4895
  4855  004AD2  0E7B               	movlw	123
  4856  004AD4  601F               	cpfslt	create_name@c,c
  4857  004AD6  D004               	goto	l4895
  4858                           
  4859                           ;ff.c: 2022: b |= 1; c -= 0x20;
  4860  004AD8  8015               	bsf	create_name@b,0,c
  4861  004ADA  0E20               	movlw	32
  4862  004ADC  5E1F               	subwf	create_name@c,f,c
  4863  004ADE  D000               	goto	l4895
  4864  004AE0                     l4895:
  4865                           
  4866                           ;ff.c: 2023: }
  4867                           ;ff.c: 2024: }
  4868                           ;ff.c: 2025: sfn[i++] = c;
  4869  004AE0  501D               	movf	create_name@i,w,c
  4870  004AE2  241B               	addwf	create_name@sfn,w,c
  4871  004AE4  6ED9               	movwf	fsr2l,c
  4872  004AE6  501E               	movf	create_name@i+1,w,c
  4873  004AE8  201C               	addwfc	create_name@sfn+1,w,c
  4874  004AEA  6EDA               	movwf	fsr2h,c
  4875  004AEC  C01F  FFDF         	movff	create_name@c,indf2
  4876  004AF0                     l4897:
  4877  004AF0  4A1D               	infsnz	create_name@i,f,c
  4878  004AF2  2A1E               	incf	create_name@i+1,f,c
  4879                           
  4880                           ;ff.c: 2026: }
  4881                           ;ff.c: 2027: }
  4882  004AF4  D73D               	goto	l4815
  4883  004AF6                     l4899:
  4884                           
  4885                           ;ff.c: 2028: *path = &p[si];
  4886  004AF6  5013               	movf	create_name@si,w,c
  4887  004AF8  2418               	addwf	create_name@p,w,c
  4888  004AFA  6E0D               	movwf	??_create_name& (0+255),c
  4889  004AFC  5014               	movf	create_name@si+1,w,c
  4890  004AFE  2019               	addwfc	create_name@p+1,w,c
  4891  004B00  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4892  004B02  C00B  FFD9         	movff	create_name@path,fsr2l
  4893  004B06  C00C  FFDA         	movff	create_name@path+1,fsr2h
  4894  004B0A  C00D  FFDE         	movff	??_create_name,postinc2
  4895  004B0E  C00E  FFDD         	movff	??_create_name+1,postdec2
  4896                           
  4897                           ;ff.c: 2029: c = (c <= ' ') ? 0x04 : 0;
  4898  004B12  0E20               	movlw	32
  4899  004B14  641F               	cpfsgt	create_name@c,c
  4900  004B16  D004               	goto	l4905
  4901  004B18  0E00               	movlw	0
  4902  004B1A  6E12               	movwf	_create_name$991+1,c
  4903  004B1C  0E00               	movlw	0
  4904  004B1E  D003               	goto	L7
  4905  004B20                     l4905:
  4906  004B20  0E00               	movlw	0
  4907  004B22  6E12               	movwf	_create_name$991+1,c
  4908  004B24  0E04               	movlw	4
  4909  004B26                     L7:
  4910  004B26  6E11               	movwf	_create_name$991,c
  4911  004B28  D000               	goto	l4907
  4912  004B2A                     l4907:
  4913  004B2A  C011  F01F         	movff	_create_name$991,create_name@c
  4914                           
  4915                           ;ff.c: 2031: if (!i) return FR_INVALID_NAME;
  4916  004B2E  501D               	movf	create_name@i,w,c
  4917  004B30  101E               	iorwf	create_name@i+1,w,c
  4918  004B32  A4D8               	btfss	status,2,c
  4919  004B34  D002               	goto	l4915
  4920  004B36  0E06               	movlw	6
  4921  004B38  0012               	return	
  4922  004B3A                     l4915:
  4923                           
  4924                           ;ff.c: 2032: if (sfn[0] == 0xE5) sfn[0] = 0x05;
  4925  004B3A  C01B  FFD9         	movff	create_name@sfn,fsr2l
  4926  004B3E  C01C  FFDA         	movff	create_name@sfn+1,fsr2h
  4927  004B42  0EE5               	movlw	229
  4928  004B44  18DE               	xorwf	postinc2,w,c
  4929  004B46  A4D8               	btfss	status,2,c
  4930  004B48  D007               	goto	l4919
  4931  004B4A  C01B  FFD9         	movff	create_name@sfn,fsr2l
  4932  004B4E  C01C  FFDA         	movff	create_name@sfn+1,fsr2h
  4933  004B52  0E05               	movlw	5
  4934  004B54  6EDF               	movwf	indf2,c
  4935  004B56  D000               	goto	l4919
  4936  004B58                     l4919:
  4937                           
  4938                           ;ff.c: 2034: if (ni == 8) b <<= 2;
  4939  004B58  0E08               	movlw	8
  4940  004B5A  1816               	xorwf	create_name@ni,w,c
  4941  004B5C  1017               	iorwf	create_name@ni+1,w,c
  4942  004B5E  A4D8               	btfss	status,2,c
  4943  004B60  D004               	goto	l559
  4944  004B62  90D8               	bcf	status,0,c
  4945  004B64  3615               	rlcf	create_name@b,f,c
  4946  004B66  90D8               	bcf	status,0,c
  4947  004B68  3615               	rlcf	create_name@b,f,c
  4948  004B6A                     l559:
  4949                           
  4950                           ;ff.c: 2035: if ((b & 0x03) == 0x01) c |= 0x10;
  4951  004B6A  5015               	movf	create_name@b,w,c
  4952  004B6C  0B03               	andlw	3
  4953  004B6E  06E8               	decf	wreg,f,c
  4954  004B70  A4D8               	btfss	status,2,c
  4955  004B72  D002               	goto	l4925
  4956  004B74  881F               	bsf	create_name@c,4,c
  4957  004B76  D000               	goto	l4925
  4958  004B78                     l4925:
  4959                           
  4960                           ;ff.c: 2036: if ((b & 0x0C) == 0x04) c |= 0x08;
  4961  004B78  5015               	movf	create_name@b,w,c
  4962  004B7A  0B0C               	andlw	12
  4963  004B7C  0A04               	xorlw	4
  4964  004B7E  A4D8               	btfss	status,2,c
  4965  004B80  D002               	goto	l4929
  4966  004B82  861F               	bsf	create_name@c,3,c
  4967  004B84  D000               	goto	l4929
  4968  004B86                     l4929:
  4969                           
  4970                           ;ff.c: 2038: sfn[11] = c;
  4971  004B86  EE20 F00B          	lfsr	2,11
  4972  004B8A  501B               	movf	create_name@sfn,w,c
  4973  004B8C  26D9               	addwf	fsr2l,f,c
  4974  004B8E  501C               	movf	create_name@sfn+1,w,c
  4975  004B90  22DA               	addwfc	fsr2h,f,c
  4976  004B92  C01F  FFDF         	movff	create_name@c,indf2
  4977                           
  4978                           ;ff.c: 2040: return FR_OK;
  4979  004B96  0E00               	movlw	0
  4980  004B98  0012               	return	
  4981  004B9A  0012               	return		;funcret
  4982  004B9C                     __end_of_create_name:
  4983                           	opt stack 0
  4984                           tblptru	equ	0xFF8
  4985                           tblptrh	equ	0xFF7
  4986                           tblptrl	equ	0xFF6
  4987                           tablat	equ	0xFF5
  4988                           postinc0	equ	0xFEE
  4989                           fsr0h	equ	0xFEA
  4990                           fsr0l	equ	0xFE9
  4991                           wreg	equ	0xFE8
  4992                           indf1	equ	0xFE7
  4993                           postinc1	equ	0xFE6
  4994                           postdec1	equ	0xFE5
  4995                           fsr1h	equ	0xFE2
  4996                           fsr1l	equ	0xFE1
  4997                           indf2	equ	0xFDF
  4998                           postinc2	equ	0xFDE
  4999                           postdec2	equ	0xFDD
  5000                           plusw2	equ	0xFDB
  5001                           fsr2h	equ	0xFDA
  5002                           fsr2l	equ	0xFD9
  5003                           status	equ	0xFD8
  5004                           
  5005 ;; *************** function _chk_chr *****************
  5006 ;; Defined at:
  5007 ;;		line 543 in file "ff.c"
  5008 ;; Parameters:    Size  Location     Type
  5009 ;;  str             2    0[COMRAM] PTR const unsigned char 
  5010 ;;		 -> STR_1(15), 
  5011 ;;  chr             2    2[COMRAM] int 
  5012 ;; Auto vars:     Size  Location     Type
  5013 ;;		None
  5014 ;; Return value:  Size  Location     Type
  5015 ;;                  2    0[COMRAM] int 
  5016 ;; Registers used:
  5017 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  5018 ;; Tracked objects:
  5019 ;;		On entry : 0/0
  5020 ;;		On exit  : 0/0
  5021 ;;		Unchanged: 0/0
  5022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5023 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5025 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5026 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5027 ;;Total ram usage:        6 bytes
  5028 ;; Hardware stack levels used:    1
  5029 ;; This function calls:
  5030 ;;		Nothing
  5031 ;; This function is called by:
  5032 ;;		_create_name
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035                           
  5036                           	psect	text9
  5037  006480                     __ptext9:
  5038                           	opt stack 0
  5039  006480                     _chk_chr:
  5040                           	opt stack 27
  5041                           
  5042                           ;ff.c: 544: while (*str && *str != chr) str++;
  5043                           
  5044                           ;incstack = 0
  5045  006480  D003               	goto	l4387
  5046  006482                     l4385:
  5047  006482  4A01               	infsnz	chk_chr@str,f,c
  5048  006484  2A02               	incf	chk_chr@str+1,f,c
  5049  006486  D000               	goto	l4387
  5050  006488                     l4387:
  5051  006488  C001  FFF6         	movff	chk_chr@str,tblptrl
  5052  00648C  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  5053  006490                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5054  006490  6AF8               	clrf	tblptru,c
  5055  006492                     	endif
  5056  006492                     	if	0	;tblptru may be non-zero
  5057  006492                     	endif
  5058  006492  0008               	tblrd		*
  5059  006494  50F5               	movf	tablat,w,c
  5060  006496  0900               	iorlw	0
  5061  006498  B4D8               	btfsc	status,2,c
  5062  00649A  D012               	goto	l4391
  5063  00649C  C001  FFF6         	movff	chk_chr@str,tblptrl
  5064  0064A0  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  5065  0064A4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5066  0064A4  6AF8               	clrf	tblptru,c
  5067  0064A6                     	endif
  5068  0064A6                     	if	0	;tblptru may be non-zero
  5069  0064A6                     	endif
  5070  0064A6  0008               	tblrd		*
  5071  0064A8  50F5               	movf	tablat,w,c
  5072  0064AA  6E05               	movwf	??_chk_chr& (0+255),c
  5073  0064AC  6A06               	clrf	(??_chk_chr+1)& (0+255),c
  5074  0064AE  5003               	movf	chk_chr@chr,w,c
  5075  0064B0  1805               	xorwf	??_chk_chr,w,c
  5076  0064B2  E1E7               	bnz	l4385
  5077  0064B4  5004               	movf	chk_chr@chr+1,w,c
  5078  0064B6  1806               	xorwf	??_chk_chr+1,w,c
  5079  0064B8  B4D8               	btfsc	status,2,c
  5080  0064BA  D002               	goto	l4391
  5081  0064BC  D7E2               	goto	l4385
  5082  0064BE  D000               	goto	l4391
  5083  0064C0                     l4391:
  5084                           
  5085                           ;ff.c: 545: return *str;
  5086  0064C0  C001  FFF6         	movff	chk_chr@str,tblptrl
  5087  0064C4  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  5088  0064C8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5089  0064C8  6AF8               	clrf	tblptru,c
  5090  0064CA                     	endif
  5091  0064CA                     	if	0	;tblptru may be non-zero
  5092  0064CA                     	endif
  5093  0064CA  0008               	tblrd		*
  5094  0064CC  50F5               	movf	tablat,w,c
  5095  0064CE  6E01               	movwf	?_chk_chr,c
  5096  0064D0  6A02               	clrf	?_chk_chr+1,c
  5097  0064D2  0012               	return	
  5098  0064D4  0012               	return		;funcret
  5099  0064D6                     __end_of_chk_chr:
  5100                           	opt stack 0
  5101                           tblptru	equ	0xFF8
  5102                           tblptrh	equ	0xFF7
  5103                           tblptrl	equ	0xFF6
  5104                           tablat	equ	0xFF5
  5105                           postinc0	equ	0xFEE
  5106                           fsr0h	equ	0xFEA
  5107                           fsr0l	equ	0xFE9
  5108                           wreg	equ	0xFE8
  5109                           indf1	equ	0xFE7
  5110                           postinc1	equ	0xFE6
  5111                           postdec1	equ	0xFE5
  5112                           fsr1h	equ	0xFE2
  5113                           fsr1l	equ	0xFE1
  5114                           indf2	equ	0xFDF
  5115                           postinc2	equ	0xFDE
  5116                           postdec2	equ	0xFDD
  5117                           plusw2	equ	0xFDB
  5118                           fsr2h	equ	0xFDA
  5119                           fsr2l	equ	0xFD9
  5120                           status	equ	0xFD8
  5121                           
  5122 ;; *************** function _dir_register *****************
  5123 ;; Defined at:
  5124 ;;		line 1578 in file "ff.c"
  5125 ;; Parameters:    Size  Location     Type
  5126 ;;  dp              2   42[BANK0 ] PTR struct .
  5127 ;;		 -> f_open@dj(22), 
  5128 ;; Auto vars:     Size  Location     Type
  5129 ;;  res             1   44[BANK0 ] enum E88
  5130 ;; Return value:  Size  Location     Type
  5131 ;;                  1    wreg      enum E88
  5132 ;; Registers used:
  5133 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5134 ;; Tracked objects:
  5135 ;;		On entry : 0/0
  5136 ;;		On exit  : 0/0
  5137 ;;		Unchanged: 0/0
  5138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5139 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5140 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5142 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5143 ;;Total ram usage:        3 bytes
  5144 ;; Hardware stack levels used:    1
  5145 ;; Hardware stack levels required when called:   12
  5146 ;; This function calls:
  5147 ;;		_dir_alloc
  5148 ;;		_mem_cpy
  5149 ;;		_mem_set
  5150 ;;		_move_window
  5151 ;; This function is called by:
  5152 ;;		_f_open
  5153 ;; This function uses a non-reentrant model
  5154 ;;
  5155                           
  5156                           	psect	text10
  5157  005B0A                     __ptext10:
  5158                           	opt stack 0
  5159  005B0A                     _dir_register:
  5160                           	opt stack 17
  5161                           
  5162                           ;ff.c: 1582: FRESULT res;
  5163                           ;ff.c: 1629: res = dir_alloc(dp, 1);
  5164                           
  5165                           ;incstack = 0
  5166  005B0A  C08A  F080         	movff	dir_register@dp,dir_alloc@dp
  5167  005B0E  C08B  F081         	movff	dir_register@dp+1,dir_alloc@dp+1
  5168  005B12  0E00               	movlw	0
  5169  005B14  0100               	movlb	0	; () banked
  5170  005B16  6F83               	movwf	(dir_alloc@nent+1)& (0+255),b
  5171  005B18  0E01               	movlw	1
  5172  005B1A  6F82               	movwf	dir_alloc@nent& (0+255),b
  5173  005B1C  EC5E  F02B         	call	_dir_alloc	;wreg free
  5174  005B20  0100               	movlb	0	; () banked
  5175  005B22  6F8C               	movwf	dir_register@res& (0+255),b
  5176                           
  5177                           ; BSR set to: 0
  5178                           ;ff.c: 1632: if (res == FR_OK) {
  5179  005B24  0100               	movlb	0	; () banked
  5180  005B26  518C               	movf	dir_register@res& (0+255),w,b
  5181  005B28  0100               	movlb	0	; () banked
  5182  005B2A  A4D8               	btfss	status,2,c
  5183  005B2C  D05E               	goto	l5113
  5184                           
  5185                           ; BSR set to: 0
  5186                           ;ff.c: 1633: res = move_window(dp->fs, dp->sect);
  5187  005B2E  C08A  FFD9         	movff	dir_register@dp,fsr2l
  5188  005B32  C08B  FFDA         	movff	dir_register@dp+1,fsr2h
  5189  005B36  CFDE F030          	movff	postinc2,move_window@fs
  5190  005B3A  CFDD F031          	movff	postdec2,move_window@fs+1
  5191  005B3E  0100               	movlb	0	; () banked
  5192  005B40  EE20 F00E          	lfsr	2,14
  5193  005B44  518A               	movf	dir_register@dp& (0+255),w,b
  5194  005B46  26D9               	addwf	fsr2l,f,c
  5195  005B48  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  5196  005B4A  22DA               	addwfc	fsr2h,f,c
  5197  005B4C  CFDE F032          	movff	postinc2,move_window@sector
  5198  005B50  CFDE F033          	movff	postinc2,move_window@sector+1
  5199  005B54  CFDE F034          	movff	postinc2,move_window@sector+2
  5200  005B58  CFDE F035          	movff	postinc2,move_window@sector+3
  5201  005B5C  ECE9  F02F         	call	_move_window	;wreg free
  5202  005B60  0100               	movlb	0	; () banked
  5203  005B62  6F8C               	movwf	dir_register@res& (0+255),b
  5204                           
  5205                           ; BSR set to: 0
  5206                           ;ff.c: 1634: if (res == FR_OK) {
  5207  005B64  0100               	movlb	0	; () banked
  5208  005B66  518C               	movf	dir_register@res& (0+255),w,b
  5209  005B68  0100               	movlb	0	; () banked
  5210  005B6A  A4D8               	btfss	status,2,c
  5211  005B6C  D03E               	goto	l5113
  5212                           
  5213                           ; BSR set to: 0
  5214                           ;ff.c: 1635: mem_set(dp->dir, 0, 32);
  5215  005B6E  0100               	movlb	0	; () banked
  5216  005B70  EE20 F012          	lfsr	2,18
  5217  005B74  518A               	movf	dir_register@dp& (0+255),w,b
  5218  005B76  26D9               	addwf	fsr2l,f,c
  5219  005B78  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  5220  005B7A  22DA               	addwfc	fsr2h,f,c
  5221  005B7C  CFDE F001          	movff	postinc2,mem_set@dst
  5222  005B80  CFDD F002          	movff	postdec2,mem_set@dst+1
  5223  005B84  0E00               	movlw	0
  5224  005B86  6E04               	movwf	mem_set@val+1,c
  5225  005B88  0E00               	movlw	0
  5226  005B8A  6E03               	movwf	mem_set@val,c
  5227  005B8C  0E00               	movlw	0
  5228  005B8E  6E06               	movwf	mem_set@cnt+1,c
  5229  005B90  0E20               	movlw	32
  5230  005B92  6E05               	movwf	mem_set@cnt,c
  5231  005B94  EC0D  F033         	call	_mem_set	;wreg free
  5232                           
  5233                           ;ff.c: 1636: mem_cpy(dp->dir, dp->fn, 11);
  5234  005B98  0100               	movlb	0	; () banked
  5235  005B9A  EE20 F012          	lfsr	2,18
  5236  005B9E  518A               	movf	dir_register@dp& (0+255),w,b
  5237  005BA0  26D9               	addwf	fsr2l,f,c
  5238  005BA2  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  5239  005BA4  22DA               	addwfc	fsr2h,f,c
  5240  005BA6  CFDE F001          	movff	postinc2,mem_cpy@dst
  5241  005BAA  CFDD F002          	movff	postdec2,mem_cpy@dst+1
  5242  005BAE  0100               	movlb	0	; () banked
  5243  005BB0  EE20 F014          	lfsr	2,20
  5244  005BB4  518A               	movf	dir_register@dp& (0+255),w,b
  5245  005BB6  26D9               	addwf	fsr2l,f,c
  5246  005BB8  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  5247  005BBA  22DA               	addwfc	fsr2h,f,c
  5248  005BBC  CFDE F003          	movff	postinc2,mem_cpy@src
  5249  005BC0  CFDD F004          	movff	postdec2,mem_cpy@src+1
  5250  005BC4  0E00               	movlw	0
  5251  005BC6  6E06               	movwf	mem_cpy@cnt+1,c
  5252  005BC8  0E0B               	movlw	11
  5253  005BCA  6E05               	movwf	mem_cpy@cnt,c
  5254  005BCC  ECCE  F02E         	call	_mem_cpy	;wreg free
  5255                           
  5256                           ;ff.c: 1640: dp->fs->wflag = 1;
  5257  005BD0  C08A  FFD9         	movff	dir_register@dp,fsr2l
  5258  005BD4  C08B  FFDA         	movff	dir_register@dp+1,fsr2h
  5259  005BD8  EE10 F004          	lfsr	1,4
  5260  005BDC  50DE               	movf	postinc2,w,c
  5261  005BDE  26E1               	addwf	fsr1l,f,c
  5262  005BE0  50DD               	movf	postdec2,w,c
  5263  005BE2  22E2               	addwfc	fsr1h,f,c
  5264  005BE4  0E01               	movlw	1
  5265  005BE6  6EE7               	movwf	indf1,c
  5266  005BE8  D000               	goto	l5113
  5267  005BEA                     l5113:
  5268                           
  5269                           ;ff.c: 1641: }
  5270                           ;ff.c: 1642: }
  5271                           ;ff.c: 1644: return res;
  5272  005BEA  0100               	movlb	0	; () banked
  5273  005BEC  518C               	movf	dir_register@res& (0+255),w,b
  5274  005BEE  0012               	return	
  5275                           
  5276                           ; BSR set to: 0
  5277                           
  5278                           ; BSR set to: 0
  5279  005BF0  0012               	return		;funcret
  5280  005BF2                     __end_of_dir_register:
  5281                           	opt stack 0
  5282                           tblptru	equ	0xFF8
  5283                           tblptrh	equ	0xFF7
  5284                           tblptrl	equ	0xFF6
  5285                           tablat	equ	0xFF5
  5286                           postinc0	equ	0xFEE
  5287                           fsr0h	equ	0xFEA
  5288                           fsr0l	equ	0xFE9
  5289                           wreg	equ	0xFE8
  5290                           indf1	equ	0xFE7
  5291                           postinc1	equ	0xFE6
  5292                           postdec1	equ	0xFE5
  5293                           fsr1h	equ	0xFE2
  5294                           fsr1l	equ	0xFE1
  5295                           indf2	equ	0xFDF
  5296                           postinc2	equ	0xFDE
  5297                           postdec2	equ	0xFDD
  5298                           plusw2	equ	0xFDB
  5299                           fsr2h	equ	0xFDA
  5300                           fsr2l	equ	0xFD9
  5301                           status	equ	0xFD8
  5302                           
  5303 ;; *************** function _mem_cpy *****************
  5304 ;; Defined at:
  5305 ;;		line 507 in file "ff.c"
  5306 ;; Parameters:    Size  Location     Type
  5307 ;;  dst             2    0[COMRAM] PTR void 
  5308 ;;		 -> FatFs.win(512), FatFs(558), NULL(0), 
  5309 ;;  src             2    2[COMRAM] PTR const void 
  5310 ;;		 -> f_open@dj.win(512), STR_4(15), FatFs(558), f_open@sfn(12), 
  5311 ;;		 -> NULL(0), 
  5312 ;;  cnt             2    4[COMRAM] unsigned int 
  5313 ;; Auto vars:     Size  Location     Type
  5314 ;;  s               2   10[COMRAM] PTR const unsigned char 
  5315 ;;		 -> f_open@dj.win(512), STR_4(15), FatFs(558), f_open@sfn(12), 
  5316 ;;		 -> NULL(0), 
  5317 ;;  d               2    8[COMRAM] PTR unsigned char 
  5318 ;;		 -> FatFs.win(512), FatFs(558), NULL(0), 
  5319 ;; Return value:  Size  Location     Type
  5320 ;;		None               void
  5321 ;; Registers used:
  5322 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5323 ;; Tracked objects:
  5324 ;;		On entry : 0/0
  5325 ;;		On exit  : 0/0
  5326 ;;		Unchanged: 0/0
  5327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5328 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5329 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5330 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5331 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5332 ;;Total ram usage:       12 bytes
  5333 ;; Hardware stack levels used:    1
  5334 ;; This function calls:
  5335 ;;		Nothing
  5336 ;; This function is called by:
  5337 ;;		_dir_register
  5338 ;;		_f_write
  5339 ;;		_f_read
  5340 ;; This function uses a non-reentrant model
  5341 ;;
  5342                           
  5343                           	psect	text11
  5344  005D9C                     __ptext11:
  5345                           	opt stack 0
  5346  005D9C                     _mem_cpy:
  5347                           	opt stack 29
  5348                           
  5349                           ;ff.c: 508: BYTE *d = (BYTE*)dst;
  5350                           
  5351                           ; BSR set to: 0
  5352                           ;incstack = 0
  5353  005D9C  C001  F009         	movff	mem_cpy@dst,mem_cpy@d
  5354  005DA0  C002  F00A         	movff	mem_cpy@dst+1,mem_cpy@d+1
  5355                           
  5356                           ;ff.c: 509: const BYTE *s = (const BYTE*)src;
  5357  005DA4  C003  F00B         	movff	mem_cpy@src,mem_cpy@s
  5358  005DA8  C004  F00C         	movff	mem_cpy@src+1,mem_cpy@s+1
  5359                           
  5360                           ;ff.c: 512: while (cnt >= sizeof (int)) {
  5361  005DAC  D02D               	goto	l4679
  5362  005DAE                     l4671:
  5363                           
  5364                           ;ff.c: 513: *(int*)d = *(int*)s;
  5365  005DAE  C00B  FFF6         	movff	mem_cpy@s,tblptrl
  5366  005DB2  C00C  FFF7         	movff	mem_cpy@s+1,tblptrh
  5367  005DB6  0E00               	movlw	low (__smallconst shr (0+16))
  5368  005DB8  6EF8               	movwf	tblptru,c
  5369  005DBA  0E0F               	movlw	(high __ramtop+-1)
  5370  005DBC  64F7               	cpfsgt	tblptrh,c
  5371  005DBE  D007               	bra	u6407
  5372  005DC0  0009               	tblrd		*+
  5373  005DC2  CFF5 F007          	movff	tablat,??_mem_cpy
  5374  005DC6  0009               	tblrd		*+
  5375  005DC8  CFF5 F008          	movff	tablat,??_mem_cpy+1
  5376  005DCC  D008               	bra	u6400
  5377  005DCE                     u6407:
  5378  005DCE  CFF6 FFE9          	movff	tblptrl,fsr0l
  5379  005DD2  CFF7 FFEA          	movff	tblptrh,fsr0h
  5380  005DD6  CFEE F007          	movff	postinc0,??_mem_cpy
  5381  005DDA  CFEE F008          	movff	postinc0,??_mem_cpy+1
  5382  005DDE                     u6400:
  5383  005DDE  C009  FFD9         	movff	mem_cpy@d,fsr2l
  5384  005DE2  C00A  FFDA         	movff	mem_cpy@d+1,fsr2h
  5385  005DE6  C007  FFDE         	movff	??_mem_cpy,postinc2
  5386  005DEA  C008  FFDD         	movff	??_mem_cpy+1,postdec2
  5387                           
  5388                           ;ff.c: 514: d += sizeof (int); s += sizeof (int);
  5389  005DEE  0E02               	movlw	2
  5390  005DF0  2609               	addwf	mem_cpy@d,f,c
  5391  005DF2  0E00               	movlw	0
  5392  005DF4  220A               	addwfc	mem_cpy@d+1,f,c
  5393  005DF6  0E02               	movlw	2
  5394  005DF8  260B               	addwf	mem_cpy@s,f,c
  5395  005DFA  0E00               	movlw	0
  5396  005DFC  220C               	addwfc	mem_cpy@s+1,f,c
  5397                           
  5398                           ;ff.c: 515: cnt -= sizeof (int);
  5399  005DFE  0E02               	movlw	2
  5400  005E00  5E05               	subwf	mem_cpy@cnt,f,c
  5401  005E02  0E00               	movlw	0
  5402  005E04  5A06               	subwfb	mem_cpy@cnt+1,f,c
  5403  005E06  D000               	goto	l4679
  5404  005E08                     l4679:
  5405  005E08  5006               	movf	mem_cpy@cnt+1,w,c
  5406  005E0A  E1D1               	bnz	l4671
  5407  005E0C  0E02               	movlw	2
  5408  005E0E  5C05               	subwf	mem_cpy@cnt,w,c
  5409  005E10  A0D8               	btfss	status,0,c
  5410  005E12  D01D               	goto	l4687
  5411  005E14  D7CC               	goto	l4671
  5412                           
  5413                           ;ff.c: 516: }
  5414                           ;ff.c: 518: while (cnt--)
  5415  005E16  D01B               	goto	l4687
  5416  005E18                     l4681:
  5417                           
  5418                           ;ff.c: 519: *d++ = *s++;
  5419  005E18  C00B  FFF6         	movff	mem_cpy@s,tblptrl
  5420  005E1C  C00C  FFF7         	movff	mem_cpy@s+1,tblptrh
  5421  005E20  0E00               	movlw	low (__smallconst shr (0+16))
  5422  005E22  6EF8               	movwf	tblptru,c
  5423  005E24  C009  FFD9         	movff	mem_cpy@d,fsr2l
  5424  005E28  C00A  FFDA         	movff	mem_cpy@d+1,fsr2h
  5425  005E2C  0E0F               	movlw	(high __ramtop+-1)
  5426  005E2E  64F7               	cpfsgt	tblptrh,c
  5427  005E30  D003               	bra	u6427
  5428  005E32  0008               	tblrd		*
  5429  005E34  50F5               	movf	tablat,w,c
  5430  005E36  D005               	bra	u6420
  5431  005E38                     u6427:
  5432  005E38  CFF6 FFE9          	movff	tblptrl,fsr0l
  5433  005E3C  CFF7 FFEA          	movff	tblptrh,fsr0h
  5434  005E40  50EF               	movf	indf0,w,c
  5435  005E42                     u6420:
  5436  005E42  6EDF               	movwf	indf2,c
  5437  005E44  4A0B               	infsnz	mem_cpy@s,f,c
  5438  005E46  2A0C               	incf	mem_cpy@s+1,f,c
  5439  005E48  4A09               	infsnz	mem_cpy@d,f,c
  5440  005E4A  2A0A               	incf	mem_cpy@d+1,f,c
  5441  005E4C  D000               	goto	l4687
  5442  005E4E                     l4687:
  5443  005E4E  0605               	decf	mem_cpy@cnt,f,c
  5444  005E50  A0D8               	btfss	status,0,c
  5445  005E52  0606               	decf	mem_cpy@cnt+1,f,c
  5446  005E54  2805               	incf	mem_cpy@cnt,w,c
  5447  005E56  E1E0               	bnz	l4681
  5448  005E58  2806               	incf	mem_cpy@cnt+1,w,c
  5449  005E5A  A4D8               	btfss	status,2,c
  5450  005E5C  D7DD               	goto	l4681
  5451  005E5E  0012               	return		;funcret
  5452  005E60                     __end_of_mem_cpy:
  5453                           	opt stack 0
  5454                           tblptru	equ	0xFF8
  5455                           tblptrh	equ	0xFF7
  5456                           tblptrl	equ	0xFF6
  5457                           tablat	equ	0xFF5
  5458                           indf0	equ	0xFEF
  5459                           postinc0	equ	0xFEE
  5460                           fsr0h	equ	0xFEA
  5461                           fsr0l	equ	0xFE9
  5462                           wreg	equ	0xFE8
  5463                           indf1	equ	0xFE7
  5464                           postinc1	equ	0xFE6
  5465                           postdec1	equ	0xFE5
  5466                           fsr1h	equ	0xFE2
  5467                           fsr1l	equ	0xFE1
  5468                           indf2	equ	0xFDF
  5469                           postinc2	equ	0xFDE
  5470                           postdec2	equ	0xFDD
  5471                           plusw2	equ	0xFDB
  5472                           fsr2h	equ	0xFDA
  5473                           fsr2l	equ	0xFD9
  5474                           status	equ	0xFD8
  5475                           
  5476 ;; *************** function _dir_alloc *****************
  5477 ;; Defined at:
  5478 ;;		line 1199 in file "ff.c"
  5479 ;; Parameters:    Size  Location     Type
  5480 ;;  dp              2   32[BANK0 ] PTR struct .
  5481 ;;		 -> f_open@dj(22), 
  5482 ;;  nent            2   34[BANK0 ] unsigned int 
  5483 ;; Auto vars:     Size  Location     Type
  5484 ;;  n               2   39[BANK0 ] unsigned int 
  5485 ;;  res             1   41[BANK0 ] enum E88
  5486 ;; Return value:  Size  Location     Type
  5487 ;;                  1    wreg      enum E88
  5488 ;; Registers used:
  5489 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5490 ;; Tracked objects:
  5491 ;;		On entry : 0/0
  5492 ;;		On exit  : 0/0
  5493 ;;		Unchanged: 0/0
  5494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5495 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5496 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5497 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5498 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5499 ;;Total ram usage:       10 bytes
  5500 ;; Hardware stack levels used:    1
  5501 ;; Hardware stack levels required when called:   11
  5502 ;; This function calls:
  5503 ;;		_dir_next
  5504 ;;		_dir_sdi
  5505 ;;		_move_window
  5506 ;; This function is called by:
  5507 ;;		_dir_register
  5508 ;; This function uses a non-reentrant model
  5509 ;;
  5510                           
  5511                           	psect	text12
  5512  0056BC                     __ptext12:
  5513                           	opt stack 0
  5514  0056BC                     _dir_alloc:
  5515                           	opt stack 17
  5516                           
  5517                           ;ff.c: 1204: FRESULT res;
  5518                           ;ff.c: 1205: UINT n;
  5519                           ;ff.c: 1208: res = dir_sdi(dp, 0);
  5520                           
  5521                           ;incstack = 0
  5522  0056BC  C080  F055         	movff	dir_alloc@dp,dir_sdi@dp
  5523  0056C0  C081  F056         	movff	dir_alloc@dp+1,dir_sdi@dp+1
  5524  0056C4  0E00               	movlw	0
  5525  0056C6  6E58               	movwf	dir_sdi@idx+1,c
  5526  0056C8  0E00               	movlw	0
  5527  0056CA  6E57               	movwf	dir_sdi@idx,c
  5528  0056CC  ECE3  F022         	call	_dir_sdi	;wreg free
  5529  0056D0  0100               	movlb	0	; () banked
  5530  0056D2  6F89               	movwf	dir_alloc@res& (0+255),b
  5531                           
  5532                           ; BSR set to: 0
  5533                           ;ff.c: 1209: if (res == FR_OK) {
  5534  0056D4  0100               	movlb	0	; () banked
  5535  0056D6  5189               	movf	dir_alloc@res& (0+255),w,b
  5536  0056D8  0100               	movlb	0	; () banked
  5537  0056DA  A4D8               	btfss	status,2,c
  5538  0056DC  D078               	goto	l4747
  5539                           
  5540                           ; BSR set to: 0
  5541                           ;ff.c: 1210: n = 0;
  5542  0056DE  0E00               	movlw	0
  5543  0056E0  0100               	movlb	0	; () banked
  5544  0056E2  6F88               	movwf	(dir_alloc@n+1)& (0+255),b
  5545  0056E4  0E00               	movlw	0
  5546  0056E6  6F87               	movwf	dir_alloc@n& (0+255),b
  5547  0056E8  D000               	goto	l4727
  5548  0056EA                     l4727:
  5549                           
  5550                           ; BSR set to: 0
  5551                           ;ff.c: 1212: res = move_window(dp->fs, dp->sect);
  5552  0056EA  C080  FFD9         	movff	dir_alloc@dp,fsr2l
  5553  0056EE  C081  FFDA         	movff	dir_alloc@dp+1,fsr2h
  5554  0056F2  CFDE F030          	movff	postinc2,move_window@fs
  5555  0056F6  CFDD F031          	movff	postdec2,move_window@fs+1
  5556  0056FA  0100               	movlb	0	; () banked
  5557  0056FC  EE20 F00E          	lfsr	2,14
  5558  005700  5180               	movf	dir_alloc@dp& (0+255),w,b
  5559  005702  26D9               	addwf	fsr2l,f,c
  5560  005704  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  5561  005706  22DA               	addwfc	fsr2h,f,c
  5562  005708  CFDE F032          	movff	postinc2,move_window@sector
  5563  00570C  CFDE F033          	movff	postinc2,move_window@sector+1
  5564  005710  CFDE F034          	movff	postinc2,move_window@sector+2
  5565  005714  CFDE F035          	movff	postinc2,move_window@sector+3
  5566  005718  ECE9  F02F         	call	_move_window	;wreg free
  5567  00571C  0100               	movlb	0	; () banked
  5568  00571E  6F89               	movwf	dir_alloc@res& (0+255),b
  5569                           
  5570                           ; BSR set to: 0
  5571                           ;ff.c: 1213: if (res != FR_OK) break;
  5572  005720  0100               	movlb	0	; () banked
  5573  005722  5189               	movf	dir_alloc@res& (0+255),w,b
  5574  005724  0100               	movlb	0	; () banked
  5575  005726  A4D8               	btfss	status,2,c
  5576  005728  D052               	goto	l4747
  5577  00572A  D001               	goto	l4733
  5578                           
  5579                           ; BSR set to: 0
  5580  00572C  D050               	goto	l4747
  5581  00572E                     l4733:
  5582                           
  5583                           ; BSR set to: 0
  5584                           ;ff.c: 1214: if (dp->dir[0] == 0xE5 || dp->dir[0] == 0) {
  5585  00572E  0100               	movlb	0	; () banked
  5586  005730  EE20 F012          	lfsr	2,18
  5587  005734  5180               	movf	dir_alloc@dp& (0+255),w,b
  5588  005736  26D9               	addwf	fsr2l,f,c
  5589  005738  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  5590  00573A  22DA               	addwfc	fsr2h,f,c
  5591  00573C  CFDE F084          	movff	postinc2,??_dir_alloc
  5592  005740  CFDD F085          	movff	postdec2,??_dir_alloc+1
  5593  005744  C084  FFD9         	movff	??_dir_alloc,fsr2l
  5594  005748  C085  FFDA         	movff	??_dir_alloc+1,fsr2h
  5595  00574C  0EE5               	movlw	229
  5596  00574E  18DE               	xorwf	postinc2,w,c
  5597  005750  B4D8               	btfsc	status,2,c
  5598  005752  D012               	goto	l4737
  5599                           
  5600                           ; BSR set to: 0
  5601  005754  0100               	movlb	0	; () banked
  5602  005756  EE20 F012          	lfsr	2,18
  5603  00575A  5180               	movf	dir_alloc@dp& (0+255),w,b
  5604  00575C  26D9               	addwf	fsr2l,f,c
  5605  00575E  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  5606  005760  22DA               	addwfc	fsr2h,f,c
  5607  005762  CFDE F084          	movff	postinc2,??_dir_alloc
  5608  005766  CFDD F085          	movff	postdec2,??_dir_alloc+1
  5609  00576A  C084  FFD9         	movff	??_dir_alloc,fsr2l
  5610  00576E  C085  FFDA         	movff	??_dir_alloc+1,fsr2h
  5611  005772  50DF               	movf	indf2,w,c
  5612  005774  A4D8               	btfss	status,2,c
  5613  005776  D011               	goto	l4741
  5614  005778                     l4737:
  5615                           
  5616                           ; BSR set to: 0
  5617                           ;ff.c: 1215: if (++n == nent) break;
  5618  005778  0100               	movlb	0	; () banked
  5619  00577A  4B87               	infsnz	dir_alloc@n& (0+255),f,b
  5620  00577C  2B88               	incf	(dir_alloc@n+1)& (0+255),f,b
  5621  00577E  0100               	movlb	0	; () banked
  5622  005780  5182               	movf	dir_alloc@nent& (0+255),w,b
  5623  005782  0100               	movlb	0	; () banked
  5624  005784  1987               	xorwf	dir_alloc@n& (0+255),w,b
  5625  005786  E10F               	bnz	l4743
  5626  005788  0100               	movlb	0	; () banked
  5627  00578A  5183               	movf	(dir_alloc@nent+1)& (0+255),w,b
  5628  00578C  0100               	movlb	0	; () banked
  5629  00578E  1988               	xorwf	(dir_alloc@n+1)& (0+255),w,b
  5630  005790  B4D8               	btfsc	status,2,c
  5631  005792  D01D               	goto	l4747
  5632  005794  D008               	goto	l4743
  5633                           
  5634                           ; BSR set to: 0
  5635  005796  D01B               	goto	l4747
  5636                           
  5637                           ; BSR set to: 0
  5638                           ;ff.c: 1216: } else {
  5639  005798  D006               	goto	l4743
  5640  00579A                     l4741:
  5641                           
  5642                           ; BSR set to: 0
  5643                           ;ff.c: 1217: n = 0;
  5644  00579A  0E00               	movlw	0
  5645  00579C  0100               	movlb	0	; () banked
  5646  00579E  6F88               	movwf	(dir_alloc@n+1)& (0+255),b
  5647  0057A0  0E00               	movlw	0
  5648  0057A2  6F87               	movwf	dir_alloc@n& (0+255),b
  5649  0057A4  D000               	goto	l4743
  5650  0057A6                     l4743:
  5651                           
  5652                           ; BSR set to: 0
  5653                           ;ff.c: 1218: }
  5654                           ;ff.c: 1219: res = dir_next(dp, 1);
  5655  0057A6  C080  F06D         	movff	dir_alloc@dp,dir_next@dp
  5656  0057AA  C081  F06E         	movff	dir_alloc@dp+1,dir_next@dp+1
  5657  0057AE  0E00               	movlw	0
  5658  0057B0  0100               	movlb	0	; () banked
  5659  0057B2  6F70               	movwf	(dir_next@stretch+1)& (0+255),b
  5660  0057B4  0E01               	movlw	1
  5661  0057B6  6F6F               	movwf	dir_next@stretch& (0+255),b
  5662  0057B8  EC4E  F016         	call	_dir_next	;wreg free
  5663  0057BC  0100               	movlb	0	; () banked
  5664  0057BE  6F89               	movwf	dir_alloc@res& (0+255),b
  5665                           
  5666                           ; BSR set to: 0
  5667                           ;ff.c: 1220: } while (res == FR_OK);
  5668  0057C0  0100               	movlb	0	; () banked
  5669  0057C2  5189               	movf	dir_alloc@res& (0+255),w,b
  5670  0057C4  0100               	movlb	0	; () banked
  5671  0057C6  A4D8               	btfss	status,2,c
  5672  0057C8  D002               	goto	l4747
  5673  0057CA  D78F               	goto	l4727
  5674                           
  5675                           ; BSR set to: 0
  5676  0057CC  D000               	goto	l4747
  5677  0057CE                     l4747:
  5678                           
  5679                           ; BSR set to: 0
  5680                           ;ff.c: 1221: }
  5681                           ;ff.c: 1222: if (res == FR_NO_FILE) res = FR_DENIED;
  5682  0057CE  0E04               	movlw	4
  5683  0057D0  0100               	movlb	0	; () banked
  5684  0057D2  1989               	xorwf	dir_alloc@res& (0+255),w,b
  5685  0057D4  A4D8               	btfss	status,2,c
  5686  0057D6  D003               	goto	l494
  5687                           
  5688                           ; BSR set to: 0
  5689  0057D8  0E07               	movlw	7
  5690  0057DA  0100               	movlb	0	; () banked
  5691  0057DC  6F89               	movwf	dir_alloc@res& (0+255),b
  5692  0057DE                     l494:
  5693                           
  5694                           ; BSR set to: 0
  5695                           ;ff.c: 1223: return res;
  5696  0057DE  0100               	movlb	0	; () banked
  5697  0057E0  5189               	movf	dir_alloc@res& (0+255),w,b
  5698  0057E2  0012               	return	
  5699                           
  5700                           ; BSR set to: 0
  5701                           
  5702                           ; BSR set to: 0
  5703  0057E4  0012               	return		;funcret
  5704  0057E6                     __end_of_dir_alloc:
  5705                           	opt stack 0
  5706                           tblptru	equ	0xFF8
  5707                           tblptrh	equ	0xFF7
  5708                           tblptrl	equ	0xFF6
  5709                           tablat	equ	0xFF5
  5710                           indf0	equ	0xFEF
  5711                           postinc0	equ	0xFEE
  5712                           fsr0h	equ	0xFEA
  5713                           fsr0l	equ	0xFE9
  5714                           wreg	equ	0xFE8
  5715                           indf1	equ	0xFE7
  5716                           postinc1	equ	0xFE6
  5717                           postdec1	equ	0xFE5
  5718                           fsr1h	equ	0xFE2
  5719                           fsr1l	equ	0xFE1
  5720                           indf2	equ	0xFDF
  5721                           postinc2	equ	0xFDE
  5722                           postdec2	equ	0xFDD
  5723                           plusw2	equ	0xFDB
  5724                           fsr2h	equ	0xFDA
  5725                           fsr2l	equ	0xFD9
  5726                           status	equ	0xFD8
  5727                           
  5728 ;; *************** function _dir_sdi *****************
  5729 ;; Defined at:
  5730 ;;		line 1080 in file "ff.c"
  5731 ;; Parameters:    Size  Location     Type
  5732 ;;  dp              2   84[COMRAM] PTR struct .
  5733 ;;		 -> f_open@dj(22), 
  5734 ;;  idx             2   86[COMRAM] unsigned int 
  5735 ;; Auto vars:     Size  Location     Type
  5736 ;;  clst            4    6[BANK0 ] unsigned long 
  5737 ;;  sect            4    2[BANK0 ] unsigned long 
  5738 ;;  ic              2    0[BANK0 ] unsigned int 
  5739 ;; Return value:  Size  Location     Type
  5740 ;;                  1    wreg      enum E88
  5741 ;; Registers used:
  5742 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5743 ;; Tracked objects:
  5744 ;;		On entry : 0/0
  5745 ;;		On exit  : 0/0
  5746 ;;		Unchanged: 0/0
  5747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5748 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5749 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5750 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5751 ;;      Totals:        11      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5752 ;;Total ram usage:       21 bytes
  5753 ;; Hardware stack levels used:    1
  5754 ;; Hardware stack levels required when called:    9
  5755 ;; This function calls:
  5756 ;;		_clust2sect
  5757 ;;		_get_fat
  5758 ;; This function is called by:
  5759 ;;		_dir_alloc
  5760 ;;		_dir_find
  5761 ;;		_follow_path
  5762 ;; This function uses a non-reentrant model
  5763 ;;
  5764                           
  5765                           	psect	text13
  5766  0045C6                     __ptext13:
  5767                           	opt stack 0
  5768  0045C6                     _dir_sdi:
  5769                           	opt stack 19
  5770                           
  5771                           ;ff.c: 1085: DWORD clst, sect;
  5772                           ;ff.c: 1086: UINT ic;
  5773                           ;ff.c: 1089: dp->index = (WORD)idx;
  5774                           
  5775                           ; BSR set to: 0
  5776                           ;incstack = 0
  5777  0045C6  EE20 F004          	lfsr	2,4
  5778  0045CA  5055               	movf	dir_sdi@dp,w,c
  5779  0045CC  26D9               	addwf	fsr2l,f,c
  5780  0045CE  5056               	movf	dir_sdi@dp+1,w,c
  5781  0045D0  22DA               	addwfc	fsr2h,f,c
  5782  0045D2  C057  FFDE         	movff	dir_sdi@idx,postinc2
  5783  0045D6  C058  FFDD         	movff	dir_sdi@idx+1,postdec2
  5784                           
  5785                           ;ff.c: 1090: clst = dp->sclust;
  5786  0045DA  EE20 F006          	lfsr	2,6
  5787  0045DE  5055               	movf	dir_sdi@dp,w,c
  5788  0045E0  26D9               	addwf	fsr2l,f,c
  5789  0045E2  5056               	movf	dir_sdi@dp+1,w,c
  5790  0045E4  22DA               	addwfc	fsr2h,f,c
  5791  0045E6  CFDE F066          	movff	postinc2,dir_sdi@clst
  5792  0045EA  CFDE F067          	movff	postinc2,dir_sdi@clst+1
  5793  0045EE  CFDE F068          	movff	postinc2,dir_sdi@clst+2
  5794  0045F2  CFDE F069          	movff	postinc2,dir_sdi@clst+3
  5795                           
  5796                           ;ff.c: 1091: if (clst == 1 || clst >= dp->fs->n_fatent)
  5797  0045F6  0100               	movlb	0	; () banked
  5798  0045F8  0566               	decf	dir_sdi@clst& (0+255),w,b
  5799  0045FA  0100               	movlb	0	; () banked
  5800  0045FC  1167               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5801  0045FE  0100               	movlb	0	; () banked
  5802  004600  1168               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5803  004602  0100               	movlb	0	; () banked
  5804  004604  1169               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  5805  004606  B4D8               	btfsc	status,2,c
  5806  004608  D018               	goto	l4401
  5807                           
  5808                           ; BSR set to: 0
  5809  00460A  C055  FFD9         	movff	dir_sdi@dp,fsr2l
  5810  00460E  C056  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5811  004612  EE10 F012          	lfsr	1,18
  5812  004616  50DE               	movf	postinc2,w,c
  5813  004618  26E1               	addwf	fsr1l,f,c
  5814  00461A  50DD               	movf	postdec2,w,c
  5815  00461C  22E2               	addwfc	fsr1h,f,c
  5816  00461E  50E6               	movf	postinc1,w,c
  5817  004620  0100               	movlb	0	; () banked
  5818  004622  5D66               	subwf	dir_sdi@clst& (0+255),w,b
  5819  004624  50E6               	movf	postinc1,w,c
  5820  004626  0100               	movlb	0	; () banked
  5821  004628  5967               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  5822  00462A  50E6               	movf	postinc1,w,c
  5823  00462C  0100               	movlb	0	; () banked
  5824  00462E  5968               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  5825  004630  50E6               	movf	postinc1,w,c
  5826  004632  0100               	movlb	0	; () banked
  5827  004634  5969               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  5828  004636  A0D8               	btfss	status,0,c
  5829  004638  D002               	goto	l4405
  5830  00463A                     l4401:
  5831                           
  5832                           ; BSR set to: 0
  5833                           ;ff.c: 1092: return FR_INT_ERR;
  5834  00463A  0E02               	movlw	2
  5835                           
  5836                           ; BSR set to: 0
  5837  00463C  0012               	return	
  5838  00463E                     l4405:
  5839                           
  5840                           ; BSR set to: 0
  5841                           ;ff.c: 1093: if (!clst && dp->fs->fs_type == 3)
  5842  00463E  0100               	movlb	0	; () banked
  5843  004640  5166               	movf	dir_sdi@clst& (0+255),w,b
  5844  004642  0100               	movlb	0	; () banked
  5845  004644  1167               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5846  004646  0100               	movlb	0	; () banked
  5847  004648  1168               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5848  00464A  0100               	movlb	0	; () banked
  5849  00464C  1169               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  5850  00464E  A4D8               	btfss	status,2,c
  5851  004650  D023               	goto	l4411
  5852                           
  5853                           ; BSR set to: 0
  5854  004652  C055  FFD9         	movff	dir_sdi@dp,fsr2l
  5855  004656  C056  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5856  00465A  CFDE F059          	movff	postinc2,??_dir_sdi
  5857  00465E  CFDD F05A          	movff	postdec2,??_dir_sdi+1
  5858  004662  C059  FFD9         	movff	??_dir_sdi,fsr2l
  5859  004666  C05A  FFDA         	movff	??_dir_sdi+1,fsr2h
  5860  00466A  0E03               	movlw	3
  5861  00466C  18DE               	xorwf	postinc2,w,c
  5862  00466E  A4D8               	btfss	status,2,c
  5863  004670  D013               	goto	l4411
  5864                           
  5865                           ; BSR set to: 0
  5866                           ;ff.c: 1094: clst = dp->fs->dirbase;
  5867  004672  C055  FFD9         	movff	dir_sdi@dp,fsr2l
  5868  004676  C056  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5869  00467A  EE10 F022          	lfsr	1,34
  5870  00467E  50DE               	movf	postinc2,w,c
  5871  004680  26E1               	addwf	fsr1l,f,c
  5872  004682  50DD               	movf	postdec2,w,c
  5873  004684  22E2               	addwfc	fsr1h,f,c
  5874  004686  CFE6 F066          	movff	postinc1,dir_sdi@clst
  5875  00468A  CFE6 F067          	movff	postinc1,dir_sdi@clst+1
  5876  00468E  CFE6 F068          	movff	postinc1,dir_sdi@clst+2
  5877  004692  CFE6 F069          	movff	postinc1,dir_sdi@clst+3
  5878  004696  D000               	goto	l4411
  5879  004698                     l4411:
  5880                           
  5881                           ; BSR set to: 0
  5882                           ;ff.c: 1096: if (clst == 0) {
  5883  004698  0100               	movlb	0	; () banked
  5884  00469A  5166               	movf	dir_sdi@clst& (0+255),w,b
  5885  00469C  0100               	movlb	0	; () banked
  5886  00469E  1167               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5887  0046A0  0100               	movlb	0	; () banked
  5888  0046A2  1168               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5889  0046A4  0100               	movlb	0	; () banked
  5890  0046A6  1169               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  5891  0046A8  A4D8               	btfss	status,2,c
  5892  0046AA  D025               	goto	l4421
  5893                           
  5894                           ; BSR set to: 0
  5895                           ;ff.c: 1097: if (idx >= dp->fs->n_rootdir)
  5896  0046AC  C055  FFD9         	movff	dir_sdi@dp,fsr2l
  5897  0046B0  C056  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5898  0046B4  EE10 F008          	lfsr	1,8
  5899  0046B8  50DE               	movf	postinc2,w,c
  5900  0046BA  26E1               	addwf	fsr1l,f,c
  5901  0046BC  50DD               	movf	postdec2,w,c
  5902  0046BE  22E2               	addwfc	fsr1h,f,c
  5903  0046C0  50E6               	movf	postinc1,w,c
  5904  0046C2  5C57               	subwf	dir_sdi@idx,w,c
  5905  0046C4  50E6               	movf	postinc1,w,c
  5906  0046C6  5858               	subwfb	dir_sdi@idx+1,w,c
  5907  0046C8  A0D8               	btfss	status,0,c
  5908  0046CA  D002               	goto	l4419
  5909                           
  5910                           ; BSR set to: 0
  5911                           ;ff.c: 1098: return FR_INT_ERR;
  5912  0046CC  0E02               	movlw	2
  5913                           
  5914                           ; BSR set to: 0
  5915  0046CE  0012               	return	
  5916  0046D0                     l4419:
  5917                           
  5918                           ; BSR set to: 0
  5919                           ;ff.c: 1099: sect = dp->fs->dirbase;
  5920  0046D0  C055  FFD9         	movff	dir_sdi@dp,fsr2l
  5921  0046D4  C056  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5922  0046D8  EE10 F022          	lfsr	1,34
  5923  0046DC  50DE               	movf	postinc2,w,c
  5924  0046DE  26E1               	addwf	fsr1l,f,c
  5925  0046E0  50DD               	movf	postdec2,w,c
  5926  0046E2  22E2               	addwfc	fsr1h,f,c
  5927  0046E4  CFE6 F062          	movff	postinc1,dir_sdi@sect
  5928  0046E8  CFE6 F063          	movff	postinc1,dir_sdi@sect+1
  5929  0046EC  CFE6 F064          	movff	postinc1,dir_sdi@sect+2
  5930  0046F0  CFE6 F065          	movff	postinc1,dir_sdi@sect+3
  5931                           
  5932                           ;ff.c: 1100: }
  5933  0046F4  D08B               	goto	l4443
  5934  0046F6                     l4421:
  5935                           
  5936                           ; BSR set to: 0
  5937                           ;ff.c: 1101: else {
  5938                           ;ff.c: 1102: ic = ((UINT)512) / 32 * dp->fs->csize;
  5939  0046F6  C055  FFD9         	movff	dir_sdi@dp,fsr2l
  5940  0046FA  C056  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5941  0046FE  EE10 F002          	lfsr	1,2
  5942  004702  50DE               	movf	postinc2,w,c
  5943  004704  26E1               	addwf	fsr1l,f,c
  5944  004706  50DD               	movf	postdec2,w,c
  5945  004708  22E2               	addwfc	fsr1h,f,c
  5946  00470A  50E7               	movf	indf1,w,c
  5947  00470C  6E59               	movwf	??_dir_sdi& (0+255),c
  5948  00470E  5059               	movf	??_dir_sdi,w,c
  5949  004710  0D10               	mullw	16
  5950  004712  CFF3 F060          	movff	prodl,dir_sdi@ic
  5951  004716  CFF4 F061          	movff	prodh,dir_sdi@ic+1
  5952                           
  5953                           ;ff.c: 1103: while (idx >= ic) {
  5954  00471A  D055               	goto	l452
  5955  00471C                     l4423:
  5956                           
  5957                           ; BSR set to: 0
  5958                           ;ff.c: 1104: clst = get_fat(dp->fs, clst);
  5959  00471C  C055  FFD9         	movff	dir_sdi@dp,fsr2l
  5960  004720  C056  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5961  004724  CFDE F03B          	movff	postinc2,get_fat@fs
  5962  004728  CFDD F03C          	movff	postdec2,get_fat@fs+1
  5963  00472C  C066  F03D         	movff	dir_sdi@clst,get_fat@clst
  5964  004730  C067  F03E         	movff	dir_sdi@clst+1,get_fat@clst+1
  5965  004734  C068  F03F         	movff	dir_sdi@clst+2,get_fat@clst+2
  5966  004738  C069  F040         	movff	dir_sdi@clst+3,get_fat@clst+3
  5967  00473C  EC20  F021         	call	_get_fat	;wreg free
  5968  004740  C03B  F066         	movff	?_get_fat,dir_sdi@clst
  5969  004744  C03C  F067         	movff	?_get_fat+1,dir_sdi@clst+1
  5970  004748  C03D  F068         	movff	?_get_fat+2,dir_sdi@clst+2
  5971  00474C  C03E  F069         	movff	?_get_fat+3,dir_sdi@clst+3
  5972                           
  5973                           ;ff.c: 1105: if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5974  004750  0100               	movlb	0	; () banked
  5975  004752  2966               	incf	dir_sdi@clst& (0+255),w,b
  5976  004754  E10C               	bnz	l4431
  5977  004756  0100               	movlb	0	; () banked
  5978  004758  2967               	incf	(dir_sdi@clst+1)& (0+255),w,b
  5979  00475A  E109               	bnz	l4431
  5980  00475C  0100               	movlb	0	; () banked
  5981  00475E  2968               	incf	(dir_sdi@clst+2)& (0+255),w,b
  5982  004760  E106               	bnz	l4431
  5983  004762  0100               	movlb	0	; () banked
  5984  004764  2969               	incf	(dir_sdi@clst+3)& (0+255),w,b
  5985  004766  A4D8               	btfss	status,2,c
  5986  004768  D002               	goto	l4431
  5987                           
  5988                           ; BSR set to: 0
  5989  00476A  0E01               	movlw	1
  5990                           
  5991                           ; BSR set to: 0
  5992  00476C  0012               	return	
  5993  00476E                     l4431:
  5994                           
  5995                           ; BSR set to: 0
  5996                           ;ff.c: 1106: if (clst < 2 || clst >= dp->fs->n_fatent)
  5997  00476E  0100               	movlb	0	; () banked
  5998  004770  5169               	movf	(dir_sdi@clst+3)& (0+255),w,b
  5999  004772  0100               	movlb	0	; () banked
  6000  004774  1168               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  6001  004776  0100               	movlb	0	; () banked
  6002  004778  1167               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  6003  00477A  E105               	bnz	u5940
  6004  00477C  0E02               	movlw	2
  6005  00477E  0100               	movlb	0	; () banked
  6006  004780  5D66               	subwf	dir_sdi@clst& (0+255),w,b
  6007  004782  A0D8               	btfss	status,0,c
  6008  004784  D018               	goto	l4435
  6009  004786                     u5940:
  6010                           
  6011                           ; BSR set to: 0
  6012  004786  C055  FFD9         	movff	dir_sdi@dp,fsr2l
  6013  00478A  C056  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6014  00478E  EE10 F012          	lfsr	1,18
  6015  004792  50DE               	movf	postinc2,w,c
  6016  004794  26E1               	addwf	fsr1l,f,c
  6017  004796  50DD               	movf	postdec2,w,c
  6018  004798  22E2               	addwfc	fsr1h,f,c
  6019  00479A  50E6               	movf	postinc1,w,c
  6020  00479C  0100               	movlb	0	; () banked
  6021  00479E  5D66               	subwf	dir_sdi@clst& (0+255),w,b
  6022  0047A0  50E6               	movf	postinc1,w,c
  6023  0047A2  0100               	movlb	0	; () banked
  6024  0047A4  5967               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  6025  0047A6  50E6               	movf	postinc1,w,c
  6026  0047A8  0100               	movlb	0	; () banked
  6027  0047AA  5968               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  6028  0047AC  50E6               	movf	postinc1,w,c
  6029  0047AE  0100               	movlb	0	; () banked
  6030  0047B0  5969               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  6031  0047B2  A0D8               	btfss	status,0,c
  6032  0047B4  D002               	goto	l4439
  6033  0047B6                     l4435:
  6034                           
  6035                           ; BSR set to: 0
  6036                           ;ff.c: 1107: return FR_INT_ERR;
  6037  0047B6  0E02               	movlw	2
  6038                           
  6039                           ; BSR set to: 0
  6040  0047B8  0012               	return	
  6041  0047BA                     l4439:
  6042                           
  6043                           ; BSR set to: 0
  6044                           ;ff.c: 1108: idx -= ic;
  6045  0047BA  0100               	movlb	0	; () banked
  6046  0047BC  5160               	movf	dir_sdi@ic& (0+255),w,b
  6047  0047BE  5E57               	subwf	dir_sdi@idx,f,c
  6048  0047C0  0100               	movlb	0	; () banked
  6049  0047C2  5161               	movf	(dir_sdi@ic+1)& (0+255),w,b
  6050  0047C4  5A58               	subwfb	dir_sdi@idx+1,f,c
  6051  0047C6                     l452:
  6052                           
  6053                           ; BSR set to: 0
  6054  0047C6  0100               	movlb	0	; () banked
  6055  0047C8  5160               	movf	dir_sdi@ic& (0+255),w,b
  6056  0047CA  5C57               	subwf	dir_sdi@idx,w,c
  6057  0047CC  0100               	movlb	0	; () banked
  6058  0047CE  5161               	movf	(dir_sdi@ic+1)& (0+255),w,b
  6059  0047D0  5858               	subwfb	dir_sdi@idx+1,w,c
  6060  0047D2  B0D8               	btfsc	status,0,c
  6061  0047D4  D7A3               	goto	l4423
  6062                           
  6063                           ; BSR set to: 0
  6064                           ;ff.c: 1109: }
  6065                           ;ff.c: 1110: sect = clust2sect(dp->fs, clst);
  6066                           
  6067                           ; BSR set to: 0
  6068  0047D6  C055  FFD9         	movff	dir_sdi@dp,fsr2l
  6069  0047DA  C056  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6070  0047DE  CFDE F00D          	movff	postinc2,clust2sect@fs
  6071  0047E2  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  6072  0047E6  C066  F00F         	movff	dir_sdi@clst,clust2sect@clst
  6073  0047EA  C067  F010         	movff	dir_sdi@clst+1,clust2sect@clst+1
  6074  0047EE  C068  F011         	movff	dir_sdi@clst+2,clust2sect@clst+2
  6075  0047F2  C069  F012         	movff	dir_sdi@clst+3,clust2sect@clst+3
  6076  0047F6  EC30  F02F         	call	_clust2sect	;wreg free
  6077  0047FA  C00D  F062         	movff	?_clust2sect,dir_sdi@sect
  6078  0047FE  C00E  F063         	movff	?_clust2sect+1,dir_sdi@sect+1
  6079  004802  C00F  F064         	movff	?_clust2sect+2,dir_sdi@sect+2
  6080  004806  C010  F065         	movff	?_clust2sect+3,dir_sdi@sect+3
  6081  00480A  D000               	goto	l4443
  6082  00480C                     l4443:
  6083                           
  6084                           ;ff.c: 1111: }
  6085                           ;ff.c: 1112: dp->clust = clst;
  6086  00480C  EE20 F00A          	lfsr	2,10
  6087  004810  5055               	movf	dir_sdi@dp,w,c
  6088  004812  26D9               	addwf	fsr2l,f,c
  6089  004814  5056               	movf	dir_sdi@dp+1,w,c
  6090  004816  22DA               	addwfc	fsr2h,f,c
  6091  004818  C066  FFDE         	movff	dir_sdi@clst,postinc2
  6092  00481C  C067  FFDE         	movff	dir_sdi@clst+1,postinc2
  6093  004820  C068  FFDE         	movff	dir_sdi@clst+2,postinc2
  6094  004824  C069  FFDE         	movff	dir_sdi@clst+3,postinc2
  6095                           
  6096                           ;ff.c: 1113: if (!sect) return FR_INT_ERR;
  6097  004828  0100               	movlb	0	; () banked
  6098  00482A  5162               	movf	dir_sdi@sect& (0+255),w,b
  6099  00482C  0100               	movlb	0	; () banked
  6100  00482E  1163               	iorwf	(dir_sdi@sect+1)& (0+255),w,b
  6101  004830  0100               	movlb	0	; () banked
  6102  004832  1164               	iorwf	(dir_sdi@sect+2)& (0+255),w,b
  6103  004834  0100               	movlb	0	; () banked
  6104  004836  1165               	iorwf	(dir_sdi@sect+3)& (0+255),w,b
  6105  004838  A4D8               	btfss	status,2,c
  6106  00483A  D002               	goto	l4451
  6107                           
  6108                           ; BSR set to: 0
  6109  00483C  0E02               	movlw	2
  6110                           
  6111                           ; BSR set to: 0
  6112  00483E  0012               	return	
  6113  004840                     l4451:
  6114                           
  6115                           ; BSR set to: 0
  6116                           ;ff.c: 1114: dp->sect = sect + idx / (((UINT)512) / 32);
  6117  004840  C057  F059         	movff	dir_sdi@idx,??_dir_sdi
  6118  004844  C058  F05A         	movff	dir_sdi@idx+1,??_dir_sdi+1
  6119  004848  0E04               	movlw	4
  6120  00484A  6E5B               	movwf	(??_dir_sdi+2)& (0+255),c
  6121  00484C                     u5985:
  6122  00484C  90D8               	bcf	status,0,c
  6123  00484E  325A               	rrcf	??_dir_sdi+1,f,c
  6124  004850  3259               	rrcf	??_dir_sdi,f,c
  6125  004852  2E5B               	decfsz	(??_dir_sdi+2)& (0+255),f,c
  6126  004854  D7FB               	goto	u5985
  6127  004856  5059               	movf	??_dir_sdi,w,c
  6128  004858  0100               	movlb	0	; () banked
  6129  00485A  2562               	addwf	dir_sdi@sect& (0+255),w,b
  6130  00485C  6E5C               	movwf	(??_dir_sdi+3)& (0+255),c
  6131  00485E  505A               	movf	??_dir_sdi+1,w,c
  6132  004860  0100               	movlb	0	; () banked
  6133  004862  2163               	addwfc	(dir_sdi@sect+1)& (0+255),w,b
  6134  004864  6E5D               	movwf	(??_dir_sdi+4)& (0+255),c
  6135  004866  0E00               	movlw	0
  6136  004868  0100               	movlb	0	; () banked
  6137  00486A  2164               	addwfc	(dir_sdi@sect+2)& (0+255),w,b
  6138  00486C  6E5E               	movwf	(??_dir_sdi+5)& (0+255),c
  6139  00486E  0E00               	movlw	0
  6140  004870  0100               	movlb	0	; () banked
  6141  004872  2165               	addwfc	(dir_sdi@sect+3)& (0+255),w,b
  6142  004874  6E5F               	movwf	(??_dir_sdi+6)& (0+255),c
  6143  004876  EE20 F00E          	lfsr	2,14
  6144  00487A  5055               	movf	dir_sdi@dp,w,c
  6145  00487C  26D9               	addwf	fsr2l,f,c
  6146  00487E  5056               	movf	dir_sdi@dp+1,w,c
  6147  004880  22DA               	addwfc	fsr2h,f,c
  6148  004882  C05C  FFDE         	movff	??_dir_sdi+3,postinc2
  6149  004886  C05D  FFDE         	movff	??_dir_sdi+4,postinc2
  6150  00488A  C05E  FFDE         	movff	??_dir_sdi+5,postinc2
  6151  00488E  C05F  FFDE         	movff	??_dir_sdi+6,postinc2
  6152                           
  6153                           ;ff.c: 1115: dp->dir = dp->fs->win + (idx % (((UINT)512) / 32)) * 32;
  6154  004892  0E0F               	movlw	15
  6155  004894  1457               	andwf	dir_sdi@idx,w,c
  6156  004896  6E59               	movwf	??_dir_sdi& (0+255),c
  6157  004898  0E00               	movlw	0
  6158  00489A  1458               	andwf	dir_sdi@idx+1,w,c
  6159  00489C  6E5A               	movwf	(??_dir_sdi+1)& (0+255),c
  6160  00489E  0E05               	movlw	5
  6161  0048A0                     u5995:
  6162  0048A0  90D8               	bcf	status,0,c
  6163  0048A2  3659               	rlcf	??_dir_sdi,f,c
  6164  0048A4  365A               	rlcf	??_dir_sdi+1,f,c
  6165  0048A6  2EE8               	decfsz	wreg,f,c
  6166  0048A8  D7FB               	goto	u5995
  6167  0048AA  0E2E               	movlw	46
  6168  0048AC  2659               	addwf	??_dir_sdi,f,c
  6169  0048AE  0E00               	movlw	0
  6170  0048B0  225A               	addwfc	??_dir_sdi+1,f,c
  6171  0048B2  C055  FFD9         	movff	dir_sdi@dp,fsr2l
  6172  0048B6  C056  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6173  0048BA  CFDE F05B          	movff	postinc2,??_dir_sdi+2
  6174  0048BE  CFDD F05C          	movff	postdec2,??_dir_sdi+3
  6175  0048C2  5059               	movf	??_dir_sdi,w,c
  6176  0048C4  265B               	addwf	??_dir_sdi+2,f,c
  6177  0048C6  505A               	movf	??_dir_sdi+1,w,c
  6178  0048C8  225C               	addwfc	??_dir_sdi+3,f,c
  6179  0048CA  EE20 F012          	lfsr	2,18
  6180  0048CE  5055               	movf	dir_sdi@dp,w,c
  6181  0048D0  26D9               	addwf	fsr2l,f,c
  6182  0048D2  5056               	movf	dir_sdi@dp+1,w,c
  6183  0048D4  22DA               	addwfc	fsr2h,f,c
  6184  0048D6  C05B  FFDE         	movff	??_dir_sdi+2,postinc2
  6185  0048DA  C05C  FFDD         	movff	??_dir_sdi+3,postdec2
  6186                           
  6187                           ; BSR set to: 0
  6188                           ;ff.c: 1117: return FR_OK;
  6189  0048DE  0E00               	movlw	0
  6190  0048E0  0012               	return	
  6191                           
  6192                           ; BSR set to: 0
  6193                           
  6194                           ; BSR set to: 0
  6195  0048E2  0012               	return		;funcret
  6196  0048E4                     __end_of_dir_sdi:
  6197                           	opt stack 0
  6198                           tblptru	equ	0xFF8
  6199                           tblptrh	equ	0xFF7
  6200                           tblptrl	equ	0xFF6
  6201                           tablat	equ	0xFF5
  6202                           prodh	equ	0xFF4
  6203                           prodl	equ	0xFF3
  6204                           indf0	equ	0xFEF
  6205                           postinc0	equ	0xFEE
  6206                           fsr0h	equ	0xFEA
  6207                           fsr0l	equ	0xFE9
  6208                           wreg	equ	0xFE8
  6209                           indf1	equ	0xFE7
  6210                           postinc1	equ	0xFE6
  6211                           postdec1	equ	0xFE5
  6212                           fsr1h	equ	0xFE2
  6213                           fsr1l	equ	0xFE1
  6214                           indf2	equ	0xFDF
  6215                           postinc2	equ	0xFDE
  6216                           postdec2	equ	0xFDD
  6217                           plusw2	equ	0xFDB
  6218                           fsr2h	equ	0xFDA
  6219                           fsr2l	equ	0xFD9
  6220                           status	equ	0xFD8
  6221                           
  6222 ;; *************** function _dir_next *****************
  6223 ;; Defined at:
  6224 ;;		line 1128 in file "ff.c"
  6225 ;; Parameters:    Size  Location     Type
  6226 ;;  dp              2   13[BANK0 ] PTR struct .
  6227 ;;		 -> f_open@dj(22), 
  6228 ;;  stretch         2   15[BANK0 ] int 
  6229 ;; Auto vars:     Size  Location     Type
  6230 ;;  clst            4   28[BANK0 ] unsigned long 
  6231 ;;  i               2   26[BANK0 ] unsigned int 
  6232 ;;  c               2   24[BANK0 ] unsigned int 
  6233 ;; Return value:  Size  Location     Type
  6234 ;;                  1    wreg      enum E88
  6235 ;; Registers used:
  6236 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6237 ;; Tracked objects:
  6238 ;;		On entry : 0/0
  6239 ;;		On exit  : 0/0
  6240 ;;		Unchanged: 0/0
  6241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6242 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6243 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6244 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6245 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6246 ;;Total ram usage:       19 bytes
  6247 ;; Hardware stack levels used:    1
  6248 ;; Hardware stack levels required when called:   10
  6249 ;; This function calls:
  6250 ;;		_clust2sect
  6251 ;;		_create_chain
  6252 ;;		_get_fat
  6253 ;;		_mem_set
  6254 ;;		_sync_window
  6255 ;; This function is called by:
  6256 ;;		_dir_alloc
  6257 ;;		_dir_find
  6258 ;; This function uses a non-reentrant model
  6259 ;;
  6260                           
  6261                           	psect	text14
  6262  002C9C                     __ptext14:
  6263                           	opt stack 0
  6264  002C9C                     _dir_next:
  6265                           	opt stack 17
  6266                           
  6267                           ;ff.c: 1133: DWORD clst;
  6268                           ;ff.c: 1134: UINT i;
  6269                           ;ff.c: 1136: UINT c;
  6270                           ;ff.c: 1140: i = dp->index + 1;
  6271                           
  6272                           ; BSR set to: 0
  6273                           ;incstack = 0
  6274  002C9C  0100               	movlb	0	; () banked
  6275  002C9E  EE20 F004          	lfsr	2,4
  6276  002CA2  516D               	movf	dir_next@dp& (0+255),w,b
  6277  002CA4  26D9               	addwf	fsr2l,f,c
  6278  002CA6  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6279  002CA8  22DA               	addwfc	fsr2h,f,c
  6280  002CAA  CFDE F071          	movff	postinc2,??_dir_next
  6281  002CAE  CFDD F072          	movff	postdec2,??_dir_next+1
  6282  002CB2  0E01               	movlw	1
  6283  002CB4  0100               	movlb	0	; () banked
  6284  002CB6  2571               	addwf	??_dir_next& (0+255),w,b
  6285  002CB8  0100               	movlb	0	; () banked
  6286  002CBA  6F7A               	movwf	dir_next@i& (0+255),b
  6287  002CBC  0E00               	movlw	0
  6288  002CBE  0100               	movlb	0	; () banked
  6289  002CC0  2172               	addwfc	(??_dir_next+1)& (0+255),w,b
  6290  002CC2  0100               	movlb	0	; () banked
  6291  002CC4  6F7B               	movwf	(dir_next@i+1)& (0+255),b
  6292                           
  6293                           ; BSR set to: 0
  6294                           ;ff.c: 1141: if (!(i & 0xFFFF) || !dp->sect)
  6295  002CC6  0100               	movlb	0	; () banked
  6296  002CC8  517A               	movf	dir_next@i& (0+255),w,b
  6297  002CCA  0100               	movlb	0	; () banked
  6298  002CCC  117B               	iorwf	(dir_next@i+1)& (0+255),w,b
  6299  002CCE  B4D8               	btfsc	status,2,c
  6300  002CD0  D00D               	goto	l4463
  6301                           
  6302                           ; BSR set to: 0
  6303  002CD2  0100               	movlb	0	; () banked
  6304  002CD4  EE20 F00E          	lfsr	2,14
  6305  002CD8  516D               	movf	dir_next@dp& (0+255),w,b
  6306  002CDA  26D9               	addwf	fsr2l,f,c
  6307  002CDC  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6308  002CDE  22DA               	addwfc	fsr2h,f,c
  6309  002CE0  50DE               	movf	postinc2,w,c
  6310  002CE2  10DE               	iorwf	postinc2,w,c
  6311  002CE4  10DE               	iorwf	postinc2,w,c
  6312  002CE6  10DE               	iorwf	postinc2,w,c
  6313  002CE8  A4D8               	btfss	status,2,c
  6314  002CEA  D002               	goto	l4467
  6315  002CEC                     l4463:
  6316                           
  6317                           ; BSR set to: 0
  6318                           ;ff.c: 1142: return FR_NO_FILE;
  6319  002CEC  0E04               	movlw	4
  6320                           
  6321                           ; BSR set to: 0
  6322  002CEE  0012               	return	
  6323  002CF0                     l4467:
  6324                           
  6325                           ; BSR set to: 0
  6326                           ;ff.c: 1144: if (!(i % (((UINT)512) / 32))) {
  6327  002CF0  0E0F               	movlw	15
  6328  002CF2  0100               	movlb	0	; () banked
  6329  002CF4  157A               	andwf	dir_next@i& (0+255),w,b
  6330  002CF6  0100               	movlb	0	; () banked
  6331  002CF8  6F71               	movwf	??_dir_next& (0+255),b
  6332  002CFA  0E00               	movlw	0
  6333  002CFC  0100               	movlb	0	; () banked
  6334  002CFE  157B               	andwf	(dir_next@i+1)& (0+255),w,b
  6335  002D00  0100               	movlb	0	; () banked
  6336  002D02  6F72               	movwf	(??_dir_next+1)& (0+255),b
  6337  002D04  0100               	movlb	0	; () banked
  6338  002D06  5171               	movf	??_dir_next& (0+255),w,b
  6339  002D08  0100               	movlb	0	; () banked
  6340  002D0A  1172               	iorwf	(??_dir_next+1)& (0+255),w,b
  6341  002D0C  A4D8               	btfss	status,2,c
  6342  002D0E  D1E9               	goto	l4553
  6343                           
  6344                           ; BSR set to: 0
  6345                           ;ff.c: 1145: dp->sect++;
  6346  002D10  0100               	movlb	0	; () banked
  6347  002D12  EE20 F00E          	lfsr	2,14
  6348  002D16  516D               	movf	dir_next@dp& (0+255),w,b
  6349  002D18  26D9               	addwf	fsr2l,f,c
  6350  002D1A  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6351  002D1C  22DA               	addwfc	fsr2h,f,c
  6352  002D1E  2ADE               	incf	postinc2,f,c
  6353  002D20  0E00               	movlw	0
  6354  002D22  22DE               	addwfc	postinc2,f,c
  6355  002D24  22DE               	addwfc	postinc2,f,c
  6356  002D26  22DE               	addwfc	postinc2,f,c
  6357                           
  6358                           ;ff.c: 1147: if (!dp->clust) {
  6359  002D28  0100               	movlb	0	; () banked
  6360  002D2A  EE20 F00A          	lfsr	2,10
  6361  002D2E  516D               	movf	dir_next@dp& (0+255),w,b
  6362  002D30  26D9               	addwf	fsr2l,f,c
  6363  002D32  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6364  002D34  22DA               	addwfc	fsr2h,f,c
  6365  002D36  50DE               	movf	postinc2,w,c
  6366  002D38  10DE               	iorwf	postinc2,w,c
  6367  002D3A  10DE               	iorwf	postinc2,w,c
  6368  002D3C  10DE               	iorwf	postinc2,w,c
  6369  002D3E  A4D8               	btfss	status,2,c
  6370  002D40  D015               	goto	l4477
  6371                           
  6372                           ; BSR set to: 0
  6373                           ;ff.c: 1148: if (i >= dp->fs->n_rootdir)
  6374  002D42  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6375  002D46  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6376  002D4A  EE10 F008          	lfsr	1,8
  6377  002D4E  50DE               	movf	postinc2,w,c
  6378  002D50  26E1               	addwf	fsr1l,f,c
  6379  002D52  50DD               	movf	postdec2,w,c
  6380  002D54  22E2               	addwfc	fsr1h,f,c
  6381  002D56  50E6               	movf	postinc1,w,c
  6382  002D58  0100               	movlb	0	; () banked
  6383  002D5A  5D7A               	subwf	dir_next@i& (0+255),w,b
  6384  002D5C  50E6               	movf	postinc1,w,c
  6385  002D5E  0100               	movlb	0	; () banked
  6386  002D60  597B               	subwfb	(dir_next@i+1)& (0+255),w,b
  6387  002D62  A0D8               	btfss	status,0,c
  6388  002D64  D1BE               	goto	l4553
  6389                           
  6390                           ; BSR set to: 0
  6391                           ;ff.c: 1149: return FR_NO_FILE;
  6392  002D66  0E04               	movlw	4
  6393                           
  6394                           ; BSR set to: 0
  6395  002D68  0012               	return	
  6396                           
  6397                           ; BSR set to: 0
  6398                           ;ff.c: 1150: }
  6399  002D6A  D1BB               	goto	l4553
  6400  002D6C                     l4477:
  6401                           
  6402                           ; BSR set to: 0
  6403                           ;ff.c: 1151: else {
  6404                           ;ff.c: 1152: if (((i / (((UINT)512) / 32)) & (dp->fs->csize - 1)) == 0) {
  6405  002D6C  C07A  F071         	movff	dir_next@i,??_dir_next
  6406  002D70  C07B  F072         	movff	dir_next@i+1,??_dir_next+1
  6407  002D74  0E04               	movlw	4
  6408  002D76  0100               	movlb	0	; () banked
  6409  002D78  6F73               	movwf	(??_dir_next+2)& (0+255),b
  6410  002D7A                     u6055:
  6411  002D7A  0100               	movlb	0	; () banked
  6412  002D7C  90D8               	bcf	status,0,c
  6413  002D7E  3372               	rrcf	(??_dir_next+1)& (0+255),f,b
  6414  002D80  3371               	rrcf	??_dir_next& (0+255),f,b
  6415  002D82  0100               	movlb	0	; () banked
  6416  002D84  2F73               	decfsz	(??_dir_next+2)& (0+255),f,b
  6417  002D86  D7F9               	goto	u6055
  6418  002D88  0EFF               	movlw	255
  6419  002D8A  0100               	movlb	0	; () banked
  6420  002D8C  6F74               	movwf	(??_dir_next+3)& (0+255),b
  6421  002D8E  0EFF               	movlw	255
  6422  002D90  0100               	movlb	0	; () banked
  6423  002D92  6F75               	movwf	(??_dir_next+4)& (0+255),b
  6424  002D94  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6425  002D98  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6426  002D9C  EE10 F002          	lfsr	1,2
  6427  002DA0  50DE               	movf	postinc2,w,c
  6428  002DA2  26E1               	addwf	fsr1l,f,c
  6429  002DA4  50DD               	movf	postdec2,w,c
  6430  002DA6  22E2               	addwfc	fsr1h,f,c
  6431  002DA8  50E7               	movf	indf1,w,c
  6432  002DAA  0100               	movlb	0	; () banked
  6433  002DAC  6F76               	movwf	(??_dir_next+5)& (0+255),b
  6434  002DAE  6B77               	clrf	(??_dir_next+6)& (0+255),b
  6435  002DB0  0100               	movlb	0	; () banked
  6436  002DB2  5174               	movf	(??_dir_next+3)& (0+255),w,b
  6437  002DB4  0100               	movlb	0	; () banked
  6438  002DB6  2776               	addwf	(??_dir_next+5)& (0+255),f,b
  6439  002DB8  0100               	movlb	0	; () banked
  6440  002DBA  5175               	movf	(??_dir_next+4)& (0+255),w,b
  6441  002DBC  0100               	movlb	0	; () banked
  6442  002DBE  2377               	addwfc	(??_dir_next+6)& (0+255),f,b
  6443  002DC0  0100               	movlb	0	; () banked
  6444  002DC2  5171               	movf	??_dir_next& (0+255),w,b
  6445  002DC4  0100               	movlb	0	; () banked
  6446  002DC6  1776               	andwf	(??_dir_next+5)& (0+255),f,b
  6447  002DC8  0100               	movlb	0	; () banked
  6448  002DCA  5172               	movf	(??_dir_next+1)& (0+255),w,b
  6449  002DCC  0100               	movlb	0	; () banked
  6450  002DCE  1777               	andwf	(??_dir_next+6)& (0+255),f,b
  6451  002DD0  0100               	movlb	0	; () banked
  6452  002DD2  5176               	movf	(??_dir_next+5)& (0+255),w,b
  6453  002DD4  0100               	movlb	0	; () banked
  6454  002DD6  1177               	iorwf	(??_dir_next+6)& (0+255),w,b
  6455  002DD8  A4D8               	btfss	status,2,c
  6456  002DDA  D183               	goto	l4553
  6457                           
  6458                           ; BSR set to: 0
  6459                           ;ff.c: 1153: clst = get_fat(dp->fs, dp->clust);
  6460  002DDC  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6461  002DE0  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6462  002DE4  CFDE F03B          	movff	postinc2,get_fat@fs
  6463  002DE8  CFDD F03C          	movff	postdec2,get_fat@fs+1
  6464  002DEC  0100               	movlb	0	; () banked
  6465  002DEE  EE20 F00A          	lfsr	2,10
  6466  002DF2  516D               	movf	dir_next@dp& (0+255),w,b
  6467  002DF4  26D9               	addwf	fsr2l,f,c
  6468  002DF6  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6469  002DF8  22DA               	addwfc	fsr2h,f,c
  6470  002DFA  CFDE F03D          	movff	postinc2,get_fat@clst
  6471  002DFE  CFDE F03E          	movff	postinc2,get_fat@clst+1
  6472  002E02  CFDE F03F          	movff	postinc2,get_fat@clst+2
  6473  002E06  CFDE F040          	movff	postinc2,get_fat@clst+3
  6474  002E0A  EC20  F021         	call	_get_fat	;wreg free
  6475  002E0E  C03B  F07C         	movff	?_get_fat,dir_next@clst
  6476  002E12  C03C  F07D         	movff	?_get_fat+1,dir_next@clst+1
  6477  002E16  C03D  F07E         	movff	?_get_fat+2,dir_next@clst+2
  6478  002E1A  C03E  F07F         	movff	?_get_fat+3,dir_next@clst+3
  6479                           
  6480                           ;ff.c: 1154: if (clst <= 1) return FR_INT_ERR;
  6481  002E1E  0100               	movlb	0	; () banked
  6482  002E20  517F               	movf	(dir_next@clst+3)& (0+255),w,b
  6483  002E22  0100               	movlb	0	; () banked
  6484  002E24  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  6485  002E26  0100               	movlb	0	; () banked
  6486  002E28  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  6487  002E2A  E107               	bnz	l4487
  6488  002E2C  0E02               	movlw	2
  6489  002E2E  0100               	movlb	0	; () banked
  6490  002E30  5D7C               	subwf	dir_next@clst& (0+255),w,b
  6491  002E32  B0D8               	btfsc	status,0,c
  6492  002E34  D002               	goto	l4487
  6493                           
  6494                           ; BSR set to: 0
  6495  002E36  0E02               	movlw	2
  6496                           
  6497                           ; BSR set to: 0
  6498  002E38  0012               	return	
  6499  002E3A                     l4487:
  6500                           
  6501                           ; BSR set to: 0
  6502                           ;ff.c: 1155: if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  6503  002E3A  0100               	movlb	0	; () banked
  6504  002E3C  297C               	incf	dir_next@clst& (0+255),w,b
  6505  002E3E  E10C               	bnz	l4493
  6506  002E40  0100               	movlb	0	; () banked
  6507  002E42  297D               	incf	(dir_next@clst+1)& (0+255),w,b
  6508  002E44  E109               	bnz	l4493
  6509  002E46  0100               	movlb	0	; () banked
  6510  002E48  297E               	incf	(dir_next@clst+2)& (0+255),w,b
  6511  002E4A  E106               	bnz	l4493
  6512  002E4C  0100               	movlb	0	; () banked
  6513  002E4E  297F               	incf	(dir_next@clst+3)& (0+255),w,b
  6514  002E50  A4D8               	btfss	status,2,c
  6515  002E52  D002               	goto	l4493
  6516                           
  6517                           ; BSR set to: 0
  6518  002E54  0E01               	movlw	1
  6519                           
  6520                           ; BSR set to: 0
  6521  002E56  0012               	return	
  6522  002E58                     l4493:
  6523                           
  6524                           ; BSR set to: 0
  6525                           ;ff.c: 1156: if (clst >= dp->fs->n_fatent) {
  6526  002E58  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6527  002E5C  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6528  002E60  EE10 F012          	lfsr	1,18
  6529  002E64  50DE               	movf	postinc2,w,c
  6530  002E66  26E1               	addwf	fsr1l,f,c
  6531  002E68  50DD               	movf	postdec2,w,c
  6532  002E6A  22E2               	addwfc	fsr1h,f,c
  6533  002E6C  50E6               	movf	postinc1,w,c
  6534  002E6E  0100               	movlb	0	; () banked
  6535  002E70  5D7C               	subwf	dir_next@clst& (0+255),w,b
  6536  002E72  50E6               	movf	postinc1,w,c
  6537  002E74  0100               	movlb	0	; () banked
  6538  002E76  597D               	subwfb	(dir_next@clst+1)& (0+255),w,b
  6539  002E78  50E6               	movf	postinc1,w,c
  6540  002E7A  0100               	movlb	0	; () banked
  6541  002E7C  597E               	subwfb	(dir_next@clst+2)& (0+255),w,b
  6542  002E7E  50E6               	movf	postinc1,w,c
  6543  002E80  0100               	movlb	0	; () banked
  6544  002E82  597F               	subwfb	(dir_next@clst+3)& (0+255),w,b
  6545  002E84  A0D8               	btfss	status,0,c
  6546  002E86  D0FC               	goto	l4549
  6547                           
  6548                           ; BSR set to: 0
  6549                           ;ff.c: 1158: if (!stretch) return FR_NO_FILE;
  6550  002E88  0100               	movlb	0	; () banked
  6551  002E8A  516F               	movf	dir_next@stretch& (0+255),w,b
  6552  002E8C  0100               	movlb	0	; () banked
  6553  002E8E  1170               	iorwf	(dir_next@stretch+1)& (0+255),w,b
  6554  002E90  A4D8               	btfss	status,2,c
  6555  002E92  D002               	goto	l4501
  6556                           
  6557                           ; BSR set to: 0
  6558  002E94  0E04               	movlw	4
  6559                           
  6560                           ; BSR set to: 0
  6561  002E96  0012               	return	
  6562  002E98                     l4501:
  6563                           
  6564                           ; BSR set to: 0
  6565                           ;ff.c: 1159: clst = create_chain(dp->fs, dp->clust);
  6566  002E98  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6567  002E9C  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6568  002EA0  CFDE F056          	movff	postinc2,create_chain@fs
  6569  002EA4  CFDD F057          	movff	postdec2,create_chain@fs+1
  6570  002EA8  0100               	movlb	0	; () banked
  6571  002EAA  EE20 F00A          	lfsr	2,10
  6572  002EAE  516D               	movf	dir_next@dp& (0+255),w,b
  6573  002EB0  26D9               	addwf	fsr2l,f,c
  6574  002EB2  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6575  002EB4  22DA               	addwfc	fsr2h,f,c
  6576  002EB6  CFDE F058          	movff	postinc2,create_chain@clst
  6577  002EBA  CFDE F059          	movff	postinc2,create_chain@clst+1
  6578  002EBE  CFDE F05A          	movff	postinc2,create_chain@clst+2
  6579  002EC2  CFDE F05B          	movff	postinc2,create_chain@clst+3
  6580  002EC6  EC45  F01F         	call	_create_chain	;wreg free
  6581  002ECA  C056  F07C         	movff	?_create_chain,dir_next@clst
  6582  002ECE  C057  F07D         	movff	?_create_chain+1,dir_next@clst+1
  6583  002ED2  C058  F07E         	movff	?_create_chain+2,dir_next@clst+2
  6584  002ED6  C059  F07F         	movff	?_create_chain+3,dir_next@clst+3
  6585                           
  6586                           ;ff.c: 1160: if (clst == 0) return FR_DENIED;
  6587  002EDA  0100               	movlb	0	; () banked
  6588  002EDC  517C               	movf	dir_next@clst& (0+255),w,b
  6589  002EDE  0100               	movlb	0	; () banked
  6590  002EE0  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  6591  002EE2  0100               	movlb	0	; () banked
  6592  002EE4  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  6593  002EE6  0100               	movlb	0	; () banked
  6594  002EE8  117F               	iorwf	(dir_next@clst+3)& (0+255),w,b
  6595  002EEA  A4D8               	btfss	status,2,c
  6596  002EEC  D002               	goto	l4509
  6597                           
  6598                           ; BSR set to: 0
  6599  002EEE  0E07               	movlw	7
  6600                           
  6601                           ; BSR set to: 0
  6602  002EF0  0012               	return	
  6603  002EF2                     l4509:
  6604                           
  6605                           ; BSR set to: 0
  6606                           ;ff.c: 1161: if (clst == 1) return FR_INT_ERR;
  6607  002EF2  0100               	movlb	0	; () banked
  6608  002EF4  057C               	decf	dir_next@clst& (0+255),w,b
  6609  002EF6  0100               	movlb	0	; () banked
  6610  002EF8  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  6611  002EFA  0100               	movlb	0	; () banked
  6612  002EFC  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  6613  002EFE  0100               	movlb	0	; () banked
  6614  002F00  117F               	iorwf	(dir_next@clst+3)& (0+255),w,b
  6615  002F02  A4D8               	btfss	status,2,c
  6616  002F04  D002               	goto	l4515
  6617                           
  6618                           ; BSR set to: 0
  6619  002F06  0E02               	movlw	2
  6620                           
  6621                           ; BSR set to: 0
  6622  002F08  0012               	return	
  6623  002F0A                     l4515:
  6624                           
  6625                           ; BSR set to: 0
  6626                           ;ff.c: 1162: if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  6627  002F0A  0100               	movlb	0	; () banked
  6628  002F0C  297C               	incf	dir_next@clst& (0+255),w,b
  6629  002F0E  E10C               	bnz	l4521
  6630  002F10  0100               	movlb	0	; () banked
  6631  002F12  297D               	incf	(dir_next@clst+1)& (0+255),w,b
  6632  002F14  E109               	bnz	l4521
  6633  002F16  0100               	movlb	0	; () banked
  6634  002F18  297E               	incf	(dir_next@clst+2)& (0+255),w,b
  6635  002F1A  E106               	bnz	l4521
  6636  002F1C  0100               	movlb	0	; () banked
  6637  002F1E  297F               	incf	(dir_next@clst+3)& (0+255),w,b
  6638  002F20  A4D8               	btfss	status,2,c
  6639  002F22  D002               	goto	l4521
  6640                           
  6641                           ; BSR set to: 0
  6642  002F24  0E01               	movlw	1
  6643                           
  6644                           ; BSR set to: 0
  6645  002F26  0012               	return	
  6646  002F28                     l4521:
  6647                           
  6648                           ; BSR set to: 0
  6649                           ;ff.c: 1164: if (sync_window(dp->fs)) return FR_DISK_ERR;
  6650  002F28  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6651  002F2C  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6652  002F30  CFDE F01B          	movff	postinc2,sync_window@fs
  6653  002F34  CFDD F01C          	movff	postdec2,sync_window@fs+1
  6654  002F38  EC58  F029         	call	_sync_window	;wreg free
  6655  002F3C  0900               	iorlw	0
  6656  002F3E  B4D8               	btfsc	status,2,c
  6657  002F40  D002               	goto	l4527
  6658  002F42  0E01               	movlw	1
  6659  002F44  0012               	return	
  6660  002F46                     l4527:
  6661                           
  6662                           ;ff.c: 1165: mem_set(dp->fs->win, 0, ((UINT)512));
  6663  002F46  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6664  002F4A  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6665  002F4E  CFDE F071          	movff	postinc2,??_dir_next
  6666  002F52  CFDD F072          	movff	postdec2,??_dir_next+1
  6667  002F56  0E2E               	movlw	46
  6668  002F58  0100               	movlb	0	; () banked
  6669  002F5A  2571               	addwf	??_dir_next& (0+255),w,b
  6670  002F5C  6E01               	movwf	mem_set@dst,c
  6671  002F5E  0E00               	movlw	0
  6672  002F60  0100               	movlb	0	; () banked
  6673  002F62  2172               	addwfc	(??_dir_next+1)& (0+255),w,b
  6674  002F64  6E02               	movwf	mem_set@dst+1,c
  6675  002F66  0E00               	movlw	0
  6676  002F68  6E04               	movwf	mem_set@val+1,c
  6677  002F6A  0E00               	movlw	0
  6678  002F6C  6E03               	movwf	mem_set@val,c
  6679  002F6E  0E02               	movlw	2
  6680  002F70  6E06               	movwf	mem_set@cnt+1,c
  6681  002F72  0E00               	movlw	0
  6682  002F74  6E05               	movwf	mem_set@cnt,c
  6683  002F76  EC0D  F033         	call	_mem_set	;wreg free
  6684                           
  6685                           ;ff.c: 1166: dp->fs->winsect = clust2sect(dp->fs, clst);
  6686  002F7A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6687  002F7E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6688  002F82  CFDE F00D          	movff	postinc2,clust2sect@fs
  6689  002F86  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  6690  002F8A  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  6691  002F8E  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  6692  002F92  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  6693  002F96  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  6694  002F9A  EC30  F02F         	call	_clust2sect	;wreg free
  6695  002F9E  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6696  002FA2  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6697  002FA6  EE10 F02A          	lfsr	1,42
  6698  002FAA  50DE               	movf	postinc2,w,c
  6699  002FAC  26E1               	addwf	fsr1l,f,c
  6700  002FAE  50DD               	movf	postdec2,w,c
  6701  002FB0  22E2               	addwfc	fsr1h,f,c
  6702  002FB2  C00D  FFE6         	movff	?_clust2sect,postinc1
  6703  002FB6  C00E  FFE6         	movff	?_clust2sect+1,postinc1
  6704  002FBA  C00F  FFE6         	movff	?_clust2sect+2,postinc1
  6705  002FBE  C010  FFE6         	movff	?_clust2sect+3,postinc1
  6706                           
  6707                           ;ff.c: 1167: for (c = 0; c < dp->fs->csize; c++) {
  6708  002FC2  0E00               	movlw	0
  6709  002FC4  0100               	movlb	0	; () banked
  6710  002FC6  6F79               	movwf	(dir_next@c+1)& (0+255),b
  6711  002FC8  0E00               	movlw	0
  6712  002FCA  6F78               	movwf	dir_next@c& (0+255),b
  6713  002FCC  D02E               	goto	l4545
  6714  002FCE                     l4533:
  6715                           
  6716                           ; BSR set to: 0
  6717                           ;ff.c: 1168: dp->fs->wflag = 1;
  6718  002FCE  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6719  002FD2  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6720  002FD6  EE10 F004          	lfsr	1,4
  6721  002FDA  50DE               	movf	postinc2,w,c
  6722  002FDC  26E1               	addwf	fsr1l,f,c
  6723  002FDE  50DD               	movf	postdec2,w,c
  6724  002FE0  22E2               	addwfc	fsr1h,f,c
  6725  002FE2  0E01               	movlw	1
  6726  002FE4  6EE7               	movwf	indf1,c
  6727                           
  6728                           ; BSR set to: 0
  6729                           ;ff.c: 1169: if (sync_window(dp->fs)) return FR_DISK_ERR;
  6730  002FE6  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6731  002FEA  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6732  002FEE  CFDE F01B          	movff	postinc2,sync_window@fs
  6733  002FF2  CFDD F01C          	movff	postdec2,sync_window@fs+1
  6734  002FF6  EC58  F029         	call	_sync_window	;wreg free
  6735  002FFA  0900               	iorlw	0
  6736  002FFC  B4D8               	btfsc	status,2,c
  6737  002FFE  D002               	goto	l4541
  6738  003000  0E01               	movlw	1
  6739  003002  0012               	return	
  6740  003004                     l4541:
  6741                           
  6742                           ;ff.c: 1170: dp->fs->winsect++;
  6743  003004  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6744  003008  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6745  00300C  EE10 F02A          	lfsr	1,42
  6746  003010  50DE               	movf	postinc2,w,c
  6747  003012  26E1               	addwf	fsr1l,f,c
  6748  003014  50DD               	movf	postdec2,w,c
  6749  003016  22E2               	addwfc	fsr1h,f,c
  6750  003018  2AE6               	incf	postinc1,f,c
  6751  00301A  0E00               	movlw	0
  6752  00301C  22E6               	addwfc	postinc1,f,c
  6753  00301E  22E6               	addwfc	postinc1,f,c
  6754  003020  22E6               	addwfc	postinc1,f,c
  6755  003022  0100               	movlb	0	; () banked
  6756  003024  4B78               	infsnz	dir_next@c& (0+255),f,b
  6757  003026  2B79               	incf	(dir_next@c+1)& (0+255),f,b
  6758  003028  D000               	goto	l4545
  6759  00302A                     l4545:
  6760                           
  6761                           ; BSR set to: 0
  6762  00302A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6763  00302E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6764  003032  EE10 F002          	lfsr	1,2
  6765  003036  50DE               	movf	postinc2,w,c
  6766  003038  26E1               	addwf	fsr1l,f,c
  6767  00303A  50DD               	movf	postdec2,w,c
  6768  00303C  22E2               	addwfc	fsr1h,f,c
  6769  00303E  50E7               	movf	indf1,w,c
  6770  003040  0100               	movlb	0	; () banked
  6771  003042  6F71               	movwf	??_dir_next& (0+255),b
  6772  003044  6B72               	clrf	(??_dir_next+1)& (0+255),b
  6773  003046  0100               	movlb	0	; () banked
  6774  003048  5171               	movf	??_dir_next& (0+255),w,b
  6775  00304A  0100               	movlb	0	; () banked
  6776  00304C  5D78               	subwf	dir_next@c& (0+255),w,b
  6777  00304E  0100               	movlb	0	; () banked
  6778  003050  5172               	movf	(??_dir_next+1)& (0+255),w,b
  6779  003052  0100               	movlb	0	; () banked
  6780  003054  5979               	subwfb	(dir_next@c+1)& (0+255),w,b
  6781  003056  A0D8               	btfss	status,0,c
  6782  003058  D7BA               	goto	l4533
  6783                           
  6784                           ; BSR set to: 0
  6785                           ;ff.c: 1171: }
  6786                           ;ff.c: 1172: dp->fs->winsect -= c;
  6787                           
  6788                           ; BSR set to: 0
  6789  00305A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6790  00305E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6791  003062  EE10 F02A          	lfsr	1,42
  6792  003066  50DE               	movf	postinc2,w,c
  6793  003068  26E1               	addwf	fsr1l,f,c
  6794  00306A  50DD               	movf	postdec2,w,c
  6795  00306C  22E2               	addwfc	fsr1h,f,c
  6796  00306E  0100               	movlb	0	; () banked
  6797  003070  5178               	movf	dir_next@c& (0+255),w,b
  6798  003072  5EE6               	subwf	postinc1,f,c
  6799  003074  5179               	movf	(dir_next@c+1)& (0+255),w,b
  6800  003076  5AE6               	subwfb	postinc1,f,c
  6801  003078  0E00               	movlw	0
  6802  00307A  5AE6               	subwfb	postinc1,f,c
  6803  00307C  5AE6               	subwfb	postinc1,f,c
  6804  00307E  D000               	goto	l4549
  6805  003080                     l4549:
  6806                           
  6807                           ; BSR set to: 0
  6808                           ;ff.c: 1177: }
  6809                           ;ff.c: 1178: dp->clust = clst;
  6810  003080  0100               	movlb	0	; () banked
  6811  003082  EE20 F00A          	lfsr	2,10
  6812  003086  516D               	movf	dir_next@dp& (0+255),w,b
  6813  003088  26D9               	addwf	fsr2l,f,c
  6814  00308A  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6815  00308C  22DA               	addwfc	fsr2h,f,c
  6816  00308E  C07C  FFDE         	movff	dir_next@clst,postinc2
  6817  003092  C07D  FFDE         	movff	dir_next@clst+1,postinc2
  6818  003096  C07E  FFDE         	movff	dir_next@clst+2,postinc2
  6819  00309A  C07F  FFDE         	movff	dir_next@clst+3,postinc2
  6820                           
  6821                           ; BSR set to: 0
  6822                           ;ff.c: 1179: dp->sect = clust2sect(dp->fs, clst);
  6823  00309E  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6824  0030A2  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6825  0030A6  CFDE F00D          	movff	postinc2,clust2sect@fs
  6826  0030AA  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  6827  0030AE  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  6828  0030B2  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  6829  0030B6  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  6830  0030BA  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  6831  0030BE  EC30  F02F         	call	_clust2sect	;wreg free
  6832  0030C2  0100               	movlb	0	; () banked
  6833  0030C4  EE20 F00E          	lfsr	2,14
  6834  0030C8  516D               	movf	dir_next@dp& (0+255),w,b
  6835  0030CA  26D9               	addwf	fsr2l,f,c
  6836  0030CC  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6837  0030CE  22DA               	addwfc	fsr2h,f,c
  6838  0030D0  C00D  FFDE         	movff	?_clust2sect,postinc2
  6839  0030D4  C00E  FFDE         	movff	?_clust2sect+1,postinc2
  6840  0030D8  C00F  FFDE         	movff	?_clust2sect+2,postinc2
  6841  0030DC  C010  FFDE         	movff	?_clust2sect+3,postinc2
  6842                           
  6843                           ; BSR set to: 0
  6844                           
  6845                           ; BSR set to: 0
  6846  0030E0  D000               	goto	l4553
  6847  0030E2                     l4553:
  6848                           
  6849                           ; BSR set to: 0
  6850                           ;ff.c: 1180: }
  6851                           ;ff.c: 1181: }
  6852                           ;ff.c: 1182: }
  6853                           ;ff.c: 1184: dp->index = (WORD)i;
  6854  0030E2  0100               	movlb	0	; () banked
  6855  0030E4  EE20 F004          	lfsr	2,4
  6856  0030E8  516D               	movf	dir_next@dp& (0+255),w,b
  6857  0030EA  26D9               	addwf	fsr2l,f,c
  6858  0030EC  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6859  0030EE  22DA               	addwfc	fsr2h,f,c
  6860  0030F0  C07A  FFDE         	movff	dir_next@i,postinc2
  6861  0030F4  C07B  FFDD         	movff	dir_next@i+1,postdec2
  6862                           
  6863                           ; BSR set to: 0
  6864                           ;ff.c: 1185: dp->dir = dp->fs->win + (i % (((UINT)512) / 32)) * 32;
  6865  0030F8  0E0F               	movlw	15
  6866  0030FA  0100               	movlb	0	; () banked
  6867  0030FC  157A               	andwf	dir_next@i& (0+255),w,b
  6868  0030FE  0100               	movlb	0	; () banked
  6869  003100  6F71               	movwf	??_dir_next& (0+255),b
  6870  003102  0E00               	movlw	0
  6871  003104  0100               	movlb	0	; () banked
  6872  003106  157B               	andwf	(dir_next@i+1)& (0+255),w,b
  6873  003108  0100               	movlb	0	; () banked
  6874  00310A  6F72               	movwf	(??_dir_next+1)& (0+255),b
  6875  00310C  0E05               	movlw	5
  6876  00310E                     u6175:
  6877  00310E  90D8               	bcf	status,0,c
  6878  003110  0100               	movlb	0	; () banked
  6879  003112  3771               	rlcf	??_dir_next& (0+255),f,b
  6880  003114  3772               	rlcf	(??_dir_next+1)& (0+255),f,b
  6881  003116  2EE8               	decfsz	wreg,f,c
  6882  003118  D7FA               	goto	u6175
  6883  00311A  0E2E               	movlw	46
  6884  00311C  0100               	movlb	0	; () banked
  6885  00311E  2771               	addwf	??_dir_next& (0+255),f,b
  6886  003120  0E00               	movlw	0
  6887  003122  2372               	addwfc	(??_dir_next+1)& (0+255),f,b
  6888  003124  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6889  003128  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6890  00312C  CFDE F073          	movff	postinc2,??_dir_next+2
  6891  003130  CFDD F074          	movff	postdec2,??_dir_next+3
  6892  003134  0100               	movlb	0	; () banked
  6893  003136  5171               	movf	??_dir_next& (0+255),w,b
  6894  003138  0100               	movlb	0	; () banked
  6895  00313A  2773               	addwf	(??_dir_next+2)& (0+255),f,b
  6896  00313C  0100               	movlb	0	; () banked
  6897  00313E  5172               	movf	(??_dir_next+1)& (0+255),w,b
  6898  003140  0100               	movlb	0	; () banked
  6899  003142  2374               	addwfc	(??_dir_next+3)& (0+255),f,b
  6900  003144  0100               	movlb	0	; () banked
  6901  003146  EE20 F012          	lfsr	2,18
  6902  00314A  516D               	movf	dir_next@dp& (0+255),w,b
  6903  00314C  26D9               	addwf	fsr2l,f,c
  6904  00314E  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6905  003150  22DA               	addwfc	fsr2h,f,c
  6906  003152  C073  FFDE         	movff	??_dir_next+2,postinc2
  6907  003156  C074  FFDD         	movff	??_dir_next+3,postdec2
  6908                           
  6909                           ; BSR set to: 0
  6910                           ;ff.c: 1187: return FR_OK;
  6911  00315A  0E00               	movlw	0
  6912  00315C  0012               	return	
  6913                           
  6914                           ; BSR set to: 0
  6915  00315E  0012               	return		;funcret
  6916  003160                     __end_of_dir_next:
  6917                           	opt stack 0
  6918                           tblptru	equ	0xFF8
  6919                           tblptrh	equ	0xFF7
  6920                           tblptrl	equ	0xFF6
  6921                           tablat	equ	0xFF5
  6922                           prodh	equ	0xFF4
  6923                           prodl	equ	0xFF3
  6924                           indf0	equ	0xFEF
  6925                           postinc0	equ	0xFEE
  6926                           fsr0h	equ	0xFEA
  6927                           fsr0l	equ	0xFE9
  6928                           wreg	equ	0xFE8
  6929                           indf1	equ	0xFE7
  6930                           postinc1	equ	0xFE6
  6931                           postdec1	equ	0xFE5
  6932                           fsr1h	equ	0xFE2
  6933                           fsr1l	equ	0xFE1
  6934                           indf2	equ	0xFDF
  6935                           postinc2	equ	0xFDE
  6936                           postdec2	equ	0xFDD
  6937                           plusw2	equ	0xFDB
  6938                           fsr2h	equ	0xFDA
  6939                           fsr2l	equ	0xFD9
  6940                           status	equ	0xFD8
  6941                           
  6942 ;; *************** function _f_mount *****************
  6943 ;; Defined at:
  6944 ;;		line 2402 in file "ff.c"
  6945 ;; Parameters:    Size  Location     Type
  6946 ;;  fs              2   81[COMRAM] PTR struct .
  6947 ;;		 -> FatFs(558), NULL(0), 
  6948 ;;  path            2   83[COMRAM] PTR const unsigned char 
  6949 ;;		 -> STR_3(10), STR_2(1), 
  6950 ;;  opt             1   85[COMRAM] unsigned char 
  6951 ;; Auto vars:     Size  Location     Type
  6952 ;;  vol             2   91[COMRAM] int 
  6953 ;;  rp              2   89[COMRAM] PTR const unsigned char 
  6954 ;;		 -> STR_3(10), STR_2(1), 
  6955 ;;  cfs             2   87[COMRAM] PTR struct .
  6956 ;;		 -> FatFs(558), NULL(0), 
  6957 ;;  res             1   86[COMRAM] enum E88
  6958 ;; Return value:  Size  Location     Type
  6959 ;;                  1    wreg      enum E88
  6960 ;; Registers used:
  6961 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6962 ;; Tracked objects:
  6963 ;;		On entry : 0/0
  6964 ;;		On exit  : 0/0
  6965 ;;		Unchanged: 0/0
  6966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6967 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6968 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6970 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6971 ;;Total ram usage:       12 bytes
  6972 ;; Hardware stack levels used:    1
  6973 ;; Hardware stack levels required when called:   10
  6974 ;; This function calls:
  6975 ;;		_find_volume
  6976 ;;		_get_ldnumber
  6977 ;; This function is called by:
  6978 ;;		_main
  6979 ;; This function uses a non-reentrant model
  6980 ;;
  6981                           
  6982                           	psect	text15
  6983  005F1C                     __ptext15:
  6984                           	opt stack 0
  6985  005F1C                     _f_mount:
  6986                           	opt stack 20
  6987                           
  6988                           ;ff.c: 2408: FATFS *cfs;
  6989                           ;ff.c: 2409: int vol;
  6990                           ;ff.c: 2410: FRESULT res;
  6991                           ;ff.c: 2411: const TCHAR *rp = path;
  6992                           
  6993                           ;incstack = 0
  6994  005F1C  C054  F05A         	movff	f_mount@path,f_mount@rp
  6995  005F20  C055  F05B         	movff	f_mount@path+1,f_mount@rp+1
  6996                           
  6997                           ;ff.c: 2414: vol = get_ldnumber(&rp);
  6998  005F24  0E5A               	movlw	low f_mount@rp
  6999  005F26  6E01               	movwf	get_ldnumber@path,c
  7000  005F28  0E00               	movlw	high f_mount@rp
  7001  005F2A  6E02               	movwf	get_ldnumber@path+1,c
  7002  005F2C  EC80  F02C         	call	_get_ldnumber	;wreg free
  7003  005F30  C001  F05C         	movff	?_get_ldnumber,f_mount@vol
  7004  005F34  C002  F05D         	movff	?_get_ldnumber+1,f_mount@vol+1
  7005                           
  7006                           ;ff.c: 2415: if (vol < 0) return FR_INVALID_DRIVE;
  7007  005F38  AE5D               	btfss	f_mount@vol+1,7,c
  7008  005F3A  D002               	goto	l5477
  7009  005F3C  0E0B               	movlw	11
  7010  005F3E  0012               	return	
  7011  005F40                     l5477:
  7012                           
  7013                           ;ff.c: 2416: cfs = FatFs[vol];
  7014  005F40  90D8               	bcf	status,0,c
  7015  005F42  345C               	rlcf	f_mount@vol,w,c
  7016  005F44  6ED9               	movwf	fsr2l,c
  7017  005F46  345D               	rlcf	f_mount@vol+1,w,c
  7018  005F48  6EDA               	movwf	fsr2h,c
  7019  005F4A  0ED4               	movlw	low ff@FatFs
  7020  005F4C  26D9               	addwf	fsr2l,f,c
  7021  005F4E  0E00               	movlw	high ff@FatFs
  7022  005F50  22DA               	addwfc	fsr2h,f,c
  7023  005F52  CFDE F058          	movff	postinc2,f_mount@cfs
  7024  005F56  CFDD F059          	movff	postdec2,f_mount@cfs+1
  7025                           
  7026                           ;ff.c: 2418: if (cfs) {
  7027  005F5A  5058               	movf	f_mount@cfs,w,c
  7028  005F5C  1059               	iorwf	f_mount@cfs+1,w,c
  7029  005F5E  B4D8               	btfsc	status,2,c
  7030  005F60  D007               	goto	l5483
  7031                           
  7032                           ;ff.c: 2425: cfs->fs_type = 0;
  7033  005F62  C058  FFD9         	movff	f_mount@cfs,fsr2l
  7034  005F66  C059  FFDA         	movff	f_mount@cfs+1,fsr2h
  7035  005F6A  0E00               	movlw	0
  7036  005F6C  6EDF               	movwf	indf2,c
  7037  005F6E  D000               	goto	l5483
  7038  005F70                     l5483:
  7039                           
  7040                           ;ff.c: 2426: }
  7041                           ;ff.c: 2428: if (fs) {
  7042  005F70  5052               	movf	f_mount@fs,w,c
  7043  005F72  1053               	iorwf	f_mount@fs+1,w,c
  7044  005F74  B4D8               	btfsc	status,2,c
  7045  005F76  D007               	goto	l5487
  7046                           
  7047                           ;ff.c: 2429: fs->fs_type = 0;
  7048  005F78  C052  FFD9         	movff	f_mount@fs,fsr2l
  7049  005F7C  C053  FFDA         	movff	f_mount@fs+1,fsr2h
  7050  005F80  0E00               	movlw	0
  7051  005F82  6EDF               	movwf	indf2,c
  7052  005F84  D000               	goto	l5487
  7053  005F86                     l5487:
  7054                           
  7055                           ;ff.c: 2433: }
  7056                           ;ff.c: 2434: FatFs[vol] = fs;
  7057  005F86  90D8               	bcf	status,0,c
  7058  005F88  345C               	rlcf	f_mount@vol,w,c
  7059  005F8A  6ED9               	movwf	fsr2l,c
  7060  005F8C  345D               	rlcf	f_mount@vol+1,w,c
  7061  005F8E  6EDA               	movwf	fsr2h,c
  7062  005F90  0ED4               	movlw	low ff@FatFs
  7063  005F92  26D9               	addwf	fsr2l,f,c
  7064  005F94  0E00               	movlw	high ff@FatFs
  7065  005F96  22DA               	addwfc	fsr2h,f,c
  7066  005F98  C052  FFDE         	movff	f_mount@fs,postinc2
  7067  005F9C  C053  FFDD         	movff	f_mount@fs+1,postdec2
  7068                           
  7069                           ;ff.c: 2436: if (!fs || opt != 1) return FR_OK;
  7070  005FA0  5052               	movf	f_mount@fs,w,c
  7071  005FA2  1053               	iorwf	f_mount@fs+1,w,c
  7072  005FA4  B4D8               	btfsc	status,2,c
  7073  005FA6  D003               	goto	l5491
  7074  005FA8  0456               	decf	f_mount@opt,w,c
  7075  005FAA  B4D8               	btfsc	status,2,c
  7076  005FAC  D002               	goto	l5495
  7077  005FAE                     l5491:
  7078  005FAE  0E00               	movlw	0
  7079  005FB0  0012               	return	
  7080  005FB2                     l5495:
  7081                           
  7082                           ;ff.c: 2438: res = find_volume(&fs, &path, 0);
  7083  005FB2  0E52               	movlw	low f_mount@fs
  7084  005FB4  6E45               	movwf	find_volume@rfs,c
  7085  005FB6  0E00               	movlw	high f_mount@fs
  7086  005FB8  6E46               	movwf	find_volume@rfs+1,c
  7087  005FBA  0E54               	movlw	low f_mount@path
  7088  005FBC  6E47               	movwf	find_volume@path,c
  7089  005FBE  0E00               	movlw	high f_mount@path
  7090  005FC0  6E48               	movwf	find_volume@path+1,c
  7091  005FC2  0E00               	movlw	0
  7092  005FC4  6E49               	movwf	find_volume@wmode,c
  7093  005FC6  EC15  F008         	call	_find_volume	;wreg free
  7094  005FCA  6E57               	movwf	f_mount@res,c
  7095                           
  7096                           ;ff.c: 2439: return res;
  7097  005FCC  5057               	movf	f_mount@res,w,c
  7098  005FCE  0012               	return	
  7099  005FD0  0012               	return		;funcret
  7100  005FD2                     __end_of_f_mount:
  7101                           	opt stack 0
  7102                           tblptru	equ	0xFF8
  7103                           tblptrh	equ	0xFF7
  7104                           tblptrl	equ	0xFF6
  7105                           tablat	equ	0xFF5
  7106                           prodh	equ	0xFF4
  7107                           prodl	equ	0xFF3
  7108                           indf0	equ	0xFEF
  7109                           postinc0	equ	0xFEE
  7110                           fsr0h	equ	0xFEA
  7111                           fsr0l	equ	0xFE9
  7112                           wreg	equ	0xFE8
  7113                           indf1	equ	0xFE7
  7114                           postinc1	equ	0xFE6
  7115                           postdec1	equ	0xFE5
  7116                           fsr1h	equ	0xFE2
  7117                           fsr1l	equ	0xFE1
  7118                           indf2	equ	0xFDF
  7119                           postinc2	equ	0xFDE
  7120                           postdec2	equ	0xFDD
  7121                           plusw2	equ	0xFDB
  7122                           fsr2h	equ	0xFDA
  7123                           fsr2l	equ	0xFD9
  7124                           status	equ	0xFD8
  7125                           
  7126 ;; *************** function _find_volume *****************
  7127 ;; Defined at:
  7128 ;;		line 2203 in file "ff.c"
  7129 ;; Parameters:    Size  Location     Type
  7130 ;;  rfs             2   68[COMRAM] PTR PTR struct .
  7131 ;;		 -> f_open@dj(22), f_mount@fs(2), 
  7132 ;;  path            2   70[COMRAM] PTR PTR const unsigned c
  7133 ;;		 -> f_open@path(2), f_mount@path(2), 
  7134 ;;  wmode           1   72[COMRAM] unsigned char 
  7135 ;; Auto vars:     Size  Location     Type
  7136 ;;  br             16    0[BANK0 ] unsigned long [4]
  7137 ;;  bsect           4   49[BANK0 ] unsigned long 
  7138 ;;  fasize          4   45[BANK0 ] unsigned long 
  7139 ;;  nclst           4   40[BANK0 ] unsigned long 
  7140 ;;  tsect           4   36[BANK0 ] unsigned long 
  7141 ;;  sysect          4   28[BANK0 ] unsigned long 
  7142 ;;  szbfat          4   22[BANK0 ] unsigned long 
  7143 ;;  fs              2   56[BANK0 ] PTR struct .
  7144 ;;		 -> FatFs(558), NULL(0), 
  7145 ;;  i               2   53[BANK0 ] unsigned int 
  7146 ;;  nrsv            2   34[BANK0 ] unsigned int 
  7147 ;;  vol             2   32[BANK0 ] int 
  7148 ;;  pt              2   26[BANK0 ] PTR unsigned char 
  7149 ;;		 -> FatFs.win(512), FatFs(558), NULL(0), 
  7150 ;;  fmt             1   55[BANK0 ] unsigned char 
  7151 ;;  stat            1   44[BANK0 ] unsigned char 
  7152 ;; Return value:  Size  Location     Type
  7153 ;;                  1    wreg      enum E88
  7154 ;; Registers used:
  7155 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7156 ;; Tracked objects:
  7157 ;;		On entry : 0/0
  7158 ;;		On exit  : 0/0
  7159 ;;		Unchanged: 0/0
  7160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7161 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7162 ;;      Locals:         0      58       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7163 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7164 ;;      Totals:        13      58       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7165 ;;Total ram usage:       71 bytes
  7166 ;; Hardware stack levels used:    1
  7167 ;; Hardware stack levels required when called:    9
  7168 ;; This function calls:
  7169 ;;		___lldiv
  7170 ;;		___lmul
  7171 ;;		_check_fs
  7172 ;;		_disk_initialize
  7173 ;;		_disk_status
  7174 ;;		_get_ldnumber
  7175 ;;		_move_window
  7176 ;; This function is called by:
  7177 ;;		_f_mount
  7178 ;;		_f_open
  7179 ;; This function uses a non-reentrant model
  7180 ;;
  7181                           
  7182                           	psect	text16
  7183  00102A                     __ptext16:
  7184                           	opt stack 0
  7185  00102A                     _find_volume:
  7186                           	opt stack 20
  7187                           
  7188                           ;ff.c: 2209: BYTE fmt, *pt;
  7189                           ;ff.c: 2210: int vol;
  7190                           ;ff.c: 2211: DSTATUS stat;
  7191                           ;ff.c: 2212: DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];
  7192                           ;ff.c: 2213: WORD nrsv;
  7193                           ;ff.c: 2214: FATFS *fs;
  7194                           ;ff.c: 2215: UINT i;
  7195                           ;ff.c: 2219: *rfs = 0;
  7196                           
  7197                           ;incstack = 0
  7198  00102A  C045  FFD9         	movff	find_volume@rfs,fsr2l
  7199  00102E  C046  FFDA         	movff	find_volume@rfs+1,fsr2h
  7200  001032  0E00               	movlw	0
  7201  001034  6EDE               	movwf	postinc2,c
  7202  001036  0E00               	movlw	0
  7203  001038  6EDD               	movwf	postdec2,c
  7204                           
  7205                           ;ff.c: 2220: vol = get_ldnumber(path);
  7206  00103A  C047  F001         	movff	find_volume@path,get_ldnumber@path
  7207  00103E  C048  F002         	movff	find_volume@path+1,get_ldnumber@path+1
  7208  001042  EC80  F02C         	call	_get_ldnumber	;wreg free
  7209  001046  C001  F080         	movff	?_get_ldnumber,find_volume@vol
  7210  00104A  C002  F081         	movff	?_get_ldnumber+1,find_volume@vol+1
  7211                           
  7212                           ;ff.c: 2221: if (vol < 0) return FR_INVALID_DRIVE;
  7213  00104E  0100               	movlb	0	; () banked
  7214  001050  AF81               	btfss	(find_volume@vol+1)& (0+255),7,b
  7215  001052  D002               	goto	l5181
  7216                           
  7217                           ; BSR set to: 0
  7218  001054  0E0B               	movlw	11
  7219                           
  7220                           ; BSR set to: 0
  7221  001056  0012               	return	
  7222  001058                     l5181:
  7223                           
  7224                           ; BSR set to: 0
  7225                           ;ff.c: 2224: fs = FatFs[vol];
  7226  001058  90D8               	bcf	status,0,c
  7227  00105A  0100               	movlb	0	; () banked
  7228  00105C  3580               	rlcf	find_volume@vol& (0+255),w,b
  7229  00105E  6ED9               	movwf	fsr2l,c
  7230  001060  0100               	movlb	0	; () banked
  7231  001062  3581               	rlcf	(find_volume@vol+1)& (0+255),w,b
  7232  001064  6EDA               	movwf	fsr2h,c
  7233  001066  0ED4               	movlw	low ff@FatFs
  7234  001068  26D9               	addwf	fsr2l,f,c
  7235  00106A  0E00               	movlw	high ff@FatFs
  7236  00106C  22DA               	addwfc	fsr2h,f,c
  7237  00106E  CFDE F098          	movff	postinc2,find_volume@fs
  7238  001072  CFDD F099          	movff	postdec2,find_volume@fs+1
  7239                           
  7240                           ; BSR set to: 0
  7241                           ;ff.c: 2225: if (!fs) return FR_NOT_ENABLED;
  7242  001076  0100               	movlb	0	; () banked
  7243  001078  5198               	movf	find_volume@fs& (0+255),w,b
  7244  00107A  0100               	movlb	0	; () banked
  7245  00107C  1199               	iorwf	(find_volume@fs+1)& (0+255),w,b
  7246  00107E  A4D8               	btfss	status,2,c
  7247  001080  D002               	goto	l5189
  7248                           
  7249                           ; BSR set to: 0
  7250  001082  0E0C               	movlw	12
  7251                           
  7252                           ; BSR set to: 0
  7253  001084  0012               	return	
  7254  001086                     l5189:
  7255                           
  7256                           ; BSR set to: 0
  7257                           ;ff.c: 2227: ;
  7258                           ;ff.c: 2228: *rfs = fs;
  7259  001086  C045  FFD9         	movff	find_volume@rfs,fsr2l
  7260  00108A  C046  FFDA         	movff	find_volume@rfs+1,fsr2h
  7261  00108E  C098  FFDE         	movff	find_volume@fs,postinc2
  7262  001092  C099  FFDD         	movff	find_volume@fs+1,postdec2
  7263                           
  7264                           ; BSR set to: 0
  7265                           ;ff.c: 2230: if (fs->fs_type) {
  7266  001096  C098  FFD9         	movff	find_volume@fs,fsr2l
  7267  00109A  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  7268  00109E  50DF               	movf	indf2,w,c
  7269  0010A0  B4D8               	btfsc	status,2,c
  7270  0010A2  D01A               	goto	l5209
  7271                           
  7272                           ; BSR set to: 0
  7273                           ;ff.c: 2231: stat = disk_status(fs->drv);
  7274  0010A4  0100               	movlb	0	; () banked
  7275  0010A6  EE20 F001          	lfsr	2,1
  7276  0010AA  5198               	movf	find_volume@fs& (0+255),w,b
  7277  0010AC  26D9               	addwf	fsr2l,f,c
  7278  0010AE  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7279  0010B0  22DA               	addwfc	fsr2h,f,c
  7280  0010B2  50DF               	movf	indf2,w,c
  7281  0010B4  EC5E  F033         	call	_disk_status
  7282  0010B8  0100               	movlb	0	; () banked
  7283  0010BA  6F8C               	movwf	find_volume@stat& (0+255),b
  7284                           
  7285                           ; BSR set to: 0
  7286                           ;ff.c: 2233: if (!0 && wmode && (stat & 0x04))
  7287  0010BC  0100               	movlb	0	; () banked
  7288  0010BE  B18C               	btfsc	find_volume@stat& (0+255),0,b
  7289  0010C0  D00B               	goto	l5209
  7290                           
  7291                           ; BSR set to: 0
  7292  0010C2  5049               	movf	find_volume@wmode,w,c
  7293  0010C4  B4D8               	btfsc	status,2,c
  7294  0010C6  D005               	goto	l5205
  7295                           
  7296                           ; BSR set to: 0
  7297  0010C8  0100               	movlb	0	; () banked
  7298  0010CA  A58C               	btfss	find_volume@stat& (0+255),2,b
  7299  0010CC  D002               	goto	l5205
  7300                           
  7301                           ; BSR set to: 0
  7302                           ;ff.c: 2234: return FR_WRITE_PROTECTED;
  7303  0010CE  0E0A               	movlw	10
  7304                           
  7305                           ; BSR set to: 0
  7306  0010D0  0012               	return	
  7307  0010D2                     l5205:
  7308                           
  7309                           ; BSR set to: 0
  7310                           ;ff.c: 2235: return FR_OK;
  7311  0010D2  0E00               	movlw	0
  7312                           
  7313                           ; BSR set to: 0
  7314  0010D4  0012               	return	
  7315                           
  7316                           ; BSR set to: 0
  7317  0010D6  D000               	goto	l5209
  7318  0010D8                     l5209:
  7319                           
  7320                           ; BSR set to: 0
  7321                           ;ff.c: 2236: }
  7322                           ;ff.c: 2237: }
  7323                           ;ff.c: 2242: fs->fs_type = 0;
  7324  0010D8  C098  FFD9         	movff	find_volume@fs,fsr2l
  7325  0010DC  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  7326  0010E0  0E00               	movlw	0
  7327  0010E2  6EDF               	movwf	indf2,c
  7328                           
  7329                           ; BSR set to: 0
  7330                           ;ff.c: 2243: fs->drv = (BYTE)(vol);
  7331  0010E4  0100               	movlb	0	; () banked
  7332  0010E6  EE20 F001          	lfsr	2,1
  7333  0010EA  5198               	movf	find_volume@fs& (0+255),w,b
  7334  0010EC  26D9               	addwf	fsr2l,f,c
  7335  0010EE  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7336  0010F0  22DA               	addwfc	fsr2h,f,c
  7337  0010F2  C080  FFDF         	movff	find_volume@vol,indf2
  7338                           
  7339                           ; BSR set to: 0
  7340                           ;ff.c: 2244: stat = disk_initialize(fs->drv);
  7341  0010F6  0100               	movlb	0	; () banked
  7342  0010F8  EE20 F001          	lfsr	2,1
  7343  0010FC  5198               	movf	find_volume@fs& (0+255),w,b
  7344  0010FE  26D9               	addwf	fsr2l,f,c
  7345  001100  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7346  001102  22DA               	addwfc	fsr2h,f,c
  7347  001104  50DF               	movf	indf2,w,c
  7348  001106  ECCE  F025         	call	_disk_initialize
  7349  00110A  0100               	movlb	0	; () banked
  7350  00110C  6F8C               	movwf	find_volume@stat& (0+255),b
  7351                           
  7352                           ; BSR set to: 0
  7353                           ;ff.c: 2245: if (stat & 0x01)
  7354  00110E  0100               	movlb	0	; () banked
  7355  001110  A18C               	btfss	find_volume@stat& (0+255),0,b
  7356  001112  D002               	goto	l5221
  7357                           
  7358                           ; BSR set to: 0
  7359                           ;ff.c: 2246: return FR_NOT_READY;
  7360  001114  0E03               	movlw	3
  7361                           
  7362                           ; BSR set to: 0
  7363  001116  0012               	return	
  7364  001118                     l5221:
  7365                           
  7366                           ; BSR set to: 0
  7367  001118  5049               	movf	find_volume@wmode,w,c
  7368  00111A  B4D8               	btfsc	status,2,c
  7369  00111C  D005               	goto	l5229
  7370                           
  7371                           ; BSR set to: 0
  7372  00111E  0100               	movlb	0	; () banked
  7373  001120  A58C               	btfss	find_volume@stat& (0+255),2,b
  7374  001122  D002               	goto	l5229
  7375                           
  7376                           ; BSR set to: 0
  7377                           ;ff.c: 2248: return FR_WRITE_PROTECTED;
  7378  001124  0E0A               	movlw	10
  7379                           
  7380                           ; BSR set to: 0
  7381  001126  0012               	return	
  7382  001128                     l5229:
  7383                           
  7384                           ; BSR set to: 0
  7385                           ;ff.c: 2254: bsect = 0;
  7386  001128  0E00               	movlw	0
  7387  00112A  0100               	movlb	0	; () banked
  7388  00112C  6F91               	movwf	find_volume@bsect& (0+255),b
  7389  00112E  0E00               	movlw	0
  7390  001130  6F92               	movwf	(find_volume@bsect+1)& (0+255),b
  7391  001132  0E00               	movlw	0
  7392  001134  6F93               	movwf	(find_volume@bsect+2)& (0+255),b
  7393  001136  0E00               	movlw	0
  7394  001138  6F94               	movwf	(find_volume@bsect+3)& (0+255),b
  7395                           
  7396                           ; BSR set to: 0
  7397                           ;ff.c: 2255: fmt = check_fs(fs, bsect);
  7398  00113A  C098  F03B         	movff	find_volume@fs,check_fs@fs
  7399  00113E  C099  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  7400  001142  C091  F03D         	movff	find_volume@bsect,check_fs@sect
  7401  001146  C092  F03E         	movff	find_volume@bsect+1,check_fs@sect+1
  7402  00114A  C093  F03F         	movff	find_volume@bsect+2,check_fs@sect+2
  7403  00114E  C094  F040         	movff	find_volume@bsect+3,check_fs@sect+3
  7404  001152  EC0C  F02D         	call	_check_fs	;wreg free
  7405  001156  0100               	movlb	0	; () banked
  7406  001158  6F97               	movwf	find_volume@fmt& (0+255),b
  7407                           
  7408                           ; BSR set to: 0
  7409                           ;ff.c: 2256: if (fmt == 1 || (!fmt && (0))) {
  7410  00115A  0100               	movlb	0	; () banked
  7411  00115C  0597               	decf	find_volume@fmt& (0+255),w,b
  7412  00115E  A4D8               	btfss	status,2,c
  7413  001160  D0D4               	goto	l5277
  7414  001162  D001               	goto	l5239
  7415                           
  7416                           ; BSR set to: 0
  7417                           
  7418                           ; BSR set to: 0
  7419  001164  D0D2               	goto	l5277
  7420  001166                     l5239:
  7421                           
  7422                           ; BSR set to: 0
  7423                           ;ff.c: 2257: for (i = 0; i < 4; i++) {
  7424  001166  0E00               	movlw	0
  7425  001168  0100               	movlb	0	; () banked
  7426  00116A  6F96               	movwf	(find_volume@i+1)& (0+255),b
  7427  00116C  0E00               	movlw	0
  7428  00116E  6F95               	movwf	find_volume@i& (0+255),b
  7429  001170                     l5241:
  7430                           
  7431                           ; BSR set to: 0
  7432  001170  0100               	movlb	0	; () banked
  7433  001172  5196               	movf	(find_volume@i+1)& (0+255),w,b
  7434  001174  E168               	bnz	l5257
  7435  001176  0E04               	movlw	4
  7436  001178  0100               	movlb	0	; () banked
  7437  00117A  5D95               	subwf	find_volume@i& (0+255),w,b
  7438  00117C  B0D8               	btfsc	status,0,c
  7439  00117E  D063               	goto	l5257
  7440  001180  D001               	goto	l5245
  7441                           
  7442                           ; BSR set to: 0
  7443  001182  D061               	goto	l5257
  7444  001184                     l5245:
  7445                           
  7446                           ; BSR set to: 0
  7447                           ;ff.c: 2258: pt = fs->win + 446 + i * 16;
  7448  001184  0EEC               	movlw	236
  7449  001186  6E4A               	movwf	??_find_volume& (0+255),c
  7450  001188  0E01               	movlw	1
  7451  00118A  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  7452  00118C  C095  F04C         	movff	find_volume@i,??_find_volume+2
  7453  001190  C096  F04D         	movff	find_volume@i+1,??_find_volume+3
  7454  001194  3A4C               	swapf	??_find_volume+2,f,c
  7455  001196  3A4D               	swapf	??_find_volume+3,f,c
  7456  001198  0EF0               	movlw	240
  7457  00119A  164D               	andwf	??_find_volume+3,f,c
  7458  00119C  504C               	movf	??_find_volume+2,w,c
  7459  00119E  0B0F               	andlw	15
  7460  0011A0  124D               	iorwf	??_find_volume+3,f,c
  7461  0011A2  0EF0               	movlw	240
  7462  0011A4  164C               	andwf	??_find_volume+2,f,c
  7463  0011A6  504A               	movf	??_find_volume,w,c
  7464  0011A8  264C               	addwf	??_find_volume+2,f,c
  7465  0011AA  504B               	movf	??_find_volume+1,w,c
  7466  0011AC  224D               	addwfc	??_find_volume+3,f,c
  7467  0011AE  504C               	movf	??_find_volume+2,w,c
  7468  0011B0  0100               	movlb	0	; () banked
  7469  0011B2  2598               	addwf	find_volume@fs& (0+255),w,b
  7470  0011B4  0100               	movlb	0	; () banked
  7471  0011B6  6F7A               	movwf	find_volume@pt& (0+255),b
  7472  0011B8  504D               	movf	??_find_volume+3,w,c
  7473  0011BA  0100               	movlb	0	; () banked
  7474  0011BC  2199               	addwfc	(find_volume@fs+1)& (0+255),w,b
  7475  0011BE  0100               	movlb	0	; () banked
  7476  0011C0  6F7B               	movwf	(find_volume@pt+1)& (0+255),b
  7477                           
  7478                           ; BSR set to: 0
  7479                           ;ff.c: 2259: br[i] = pt[4] ? (DWORD)(*(DWORD*)(BYTE*)(&pt[8])) : 0;
  7480  0011C2  0100               	movlb	0	; () banked
  7481  0011C4  EE20 F004          	lfsr	2,4
  7482  0011C8  517A               	movf	find_volume@pt& (0+255),w,b
  7483  0011CA  26D9               	addwf	fsr2l,f,c
  7484  0011CC  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  7485  0011CE  22DA               	addwfc	fsr2h,f,c
  7486  0011D0  50DF               	movf	indf2,w,c
  7487  0011D2  A4D8               	btfss	status,2,c
  7488  0011D4  D00A               	goto	l5251
  7489                           
  7490                           ; BSR set to: 0
  7491  0011D6  0E00               	movlw	0
  7492  0011D8  0100               	movlb	0	; () banked
  7493  0011DA  6F70               	movwf	_find_volume$1095& (0+255),b
  7494  0011DC  0E00               	movlw	0
  7495  0011DE  6F71               	movwf	(_find_volume$1095+1)& (0+255),b
  7496  0011E0  0E00               	movlw	0
  7497  0011E2  6F72               	movwf	(_find_volume$1095+2)& (0+255),b
  7498  0011E4  0E00               	movlw	0
  7499  0011E6  6F73               	movwf	(_find_volume$1095+3)& (0+255),b
  7500  0011E8  D00F               	goto	l623
  7501  0011EA                     l5251:
  7502                           
  7503                           ; BSR set to: 0
  7504  0011EA  0100               	movlb	0	; () banked
  7505  0011EC  EE20 F008          	lfsr	2,8
  7506  0011F0  517A               	movf	find_volume@pt& (0+255),w,b
  7507  0011F2  26D9               	addwf	fsr2l,f,c
  7508  0011F4  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  7509  0011F6  22DA               	addwfc	fsr2h,f,c
  7510  0011F8  CFDE F070          	movff	postinc2,_find_volume$1095
  7511  0011FC  CFDE F071          	movff	postinc2,_find_volume$1095+1
  7512  001200  CFDE F072          	movff	postinc2,_find_volume$1095+2
  7513  001204  CFDE F073          	movff	postinc2,_find_volume$1095+3
  7514  001208                     l623:
  7515                           
  7516                           ; BSR set to: 0
  7517  001208  0E60               	movlw	low find_volume@br
  7518  00120A  6E4A               	movwf	??_find_volume& (0+255),c
  7519  00120C  0E00               	movlw	high find_volume@br
  7520  00120E  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  7521  001210  90D8               	bcf	status,0,c
  7522  001212  0100               	movlb	0	; () banked
  7523  001214  3595               	rlcf	find_volume@i& (0+255),w,b
  7524  001216  6ED9               	movwf	fsr2l,c
  7525  001218  0100               	movlb	0	; () banked
  7526  00121A  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  7527  00121C  6EDA               	movwf	fsr2h,c
  7528  00121E  90D8               	bcf	status,0,c
  7529  001220  36D9               	rlcf	fsr2l,f,c
  7530  001222  36DA               	rlcf	fsr2h,f,c
  7531  001224  504A               	movf	??_find_volume,w,c
  7532  001226  26D9               	addwf	fsr2l,f,c
  7533  001228  504B               	movf	??_find_volume+1,w,c
  7534  00122A  22DA               	addwfc	fsr2h,f,c
  7535  00122C  C070  FFDE         	movff	_find_volume$1095,postinc2
  7536  001230  C071  FFDE         	movff	_find_volume$1095+1,postinc2
  7537  001234  C072  FFDE         	movff	_find_volume$1095+2,postinc2
  7538  001238  C073  FFDE         	movff	_find_volume$1095+3,postinc2
  7539                           
  7540                           ; BSR set to: 0
  7541  00123C  0100               	movlb	0	; () banked
  7542  00123E  4B95               	infsnz	find_volume@i& (0+255),f,b
  7543  001240  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  7544  001242  D796               	goto	l5241
  7545                           
  7546                           ; BSR set to: 0
  7547  001244  D000               	goto	l5257
  7548  001246                     l5257:
  7549                           
  7550                           ; BSR set to: 0
  7551                           ;ff.c: 2260: }
  7552                           ;ff.c: 2261: i = 0;
  7553  001246  0E00               	movlw	0
  7554  001248  0100               	movlb	0	; () banked
  7555  00124A  6F96               	movwf	(find_volume@i+1)& (0+255),b
  7556  00124C  0E00               	movlw	0
  7557  00124E  6F95               	movwf	find_volume@i& (0+255),b
  7558                           
  7559                           ; BSR set to: 0
  7560                           ;ff.c: 2262: if (i) i--;
  7561  001250  0100               	movlb	0	; () banked
  7562  001252  5195               	movf	find_volume@i& (0+255),w,b
  7563  001254  0100               	movlb	0	; () banked
  7564  001256  1196               	iorwf	(find_volume@i+1)& (0+255),w,b
  7565  001258  B4D8               	btfsc	status,2,c
  7566  00125A  D005               	goto	l5263
  7567                           
  7568                           ; BSR set to: 0
  7569  00125C  0100               	movlb	0	; () banked
  7570  00125E  0795               	decf	find_volume@i& (0+255),f,b
  7571  001260  A0D8               	btfss	status,0,c
  7572  001262  0796               	decf	(find_volume@i+1)& (0+255),f,b
  7573                           
  7574                           ; BSR set to: 0
  7575  001264  D000               	goto	l5263
  7576  001266                     l5263:
  7577                           
  7578                           ; BSR set to: 0
  7579                           ;ff.c: 2264: bsect = br[i];
  7580  001266  0E60               	movlw	low find_volume@br
  7581  001268  6E4A               	movwf	??_find_volume& (0+255),c
  7582  00126A  0E00               	movlw	high find_volume@br
  7583  00126C  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  7584  00126E  90D8               	bcf	status,0,c
  7585  001270  0100               	movlb	0	; () banked
  7586  001272  3595               	rlcf	find_volume@i& (0+255),w,b
  7587  001274  6ED9               	movwf	fsr2l,c
  7588  001276  0100               	movlb	0	; () banked
  7589  001278  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  7590  00127A  6EDA               	movwf	fsr2h,c
  7591  00127C  90D8               	bcf	status,0,c
  7592  00127E  36D9               	rlcf	fsr2l,f,c
  7593  001280  36DA               	rlcf	fsr2h,f,c
  7594  001282  504A               	movf	??_find_volume,w,c
  7595  001284  26D9               	addwf	fsr2l,f,c
  7596  001286  504B               	movf	??_find_volume+1,w,c
  7597  001288  22DA               	addwfc	fsr2h,f,c
  7598  00128A  CFDE F091          	movff	postinc2,find_volume@bsect
  7599  00128E  CFDE F092          	movff	postinc2,find_volume@bsect+1
  7600  001292  CFDE F093          	movff	postinc2,find_volume@bsect+2
  7601  001296  CFDE F094          	movff	postinc2,find_volume@bsect+3
  7602                           
  7603                           ; BSR set to: 0
  7604                           ;ff.c: 2265: fmt = bsect ? check_fs(fs, bsect) : 2;
  7605  00129A  0100               	movlb	0	; () banked
  7606  00129C  5191               	movf	find_volume@bsect& (0+255),w,b
  7607  00129E  0100               	movlb	0	; () banked
  7608  0012A0  1192               	iorwf	(find_volume@bsect+1)& (0+255),w,b
  7609  0012A2  0100               	movlb	0	; () banked
  7610  0012A4  1193               	iorwf	(find_volume@bsect+2)& (0+255),w,b
  7611  0012A6  0100               	movlb	0	; () banked
  7612  0012A8  1194               	iorwf	(find_volume@bsect+3)& (0+255),w,b
  7613  0012AA  A4D8               	btfss	status,2,c
  7614  0012AC  D006               	goto	l5269
  7615                           
  7616                           ; BSR set to: 0
  7617  0012AE  0E00               	movlw	0
  7618  0012B0  0100               	movlb	0	; () banked
  7619  0012B2  6F75               	movwf	(_find_volume$1096+1)& (0+255),b
  7620  0012B4  0E02               	movlw	2
  7621  0012B6  6F74               	movwf	_find_volume$1096& (0+255),b
  7622  0012B8  D014               	goto	l5271
  7623  0012BA                     l5269:
  7624                           
  7625                           ; BSR set to: 0
  7626  0012BA  C098  F03B         	movff	find_volume@fs,check_fs@fs
  7627  0012BE  C099  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  7628  0012C2  C091  F03D         	movff	find_volume@bsect,check_fs@sect
  7629  0012C6  C092  F03E         	movff	find_volume@bsect+1,check_fs@sect+1
  7630  0012CA  C093  F03F         	movff	find_volume@bsect+2,check_fs@sect+2
  7631  0012CE  C094  F040         	movff	find_volume@bsect+3,check_fs@sect+3
  7632  0012D2  EC0C  F02D         	call	_check_fs	;wreg free
  7633  0012D6  6E4A               	movwf	??_find_volume& (0+255),c
  7634  0012D8  504A               	movf	??_find_volume,w,c
  7635  0012DA  0100               	movlb	0	; () banked
  7636  0012DC  6F74               	movwf	_find_volume$1096& (0+255),b
  7637  0012DE  6B75               	clrf	(_find_volume$1096+1)& (0+255),b
  7638  0012E0  D000               	goto	l5271
  7639  0012E2                     l5271:
  7640                           
  7641                           ; BSR set to: 0
  7642                           ;ff.c: 2266: } while (!0 && fmt && ++i < 4);
  7643  0012E2  C074  F097         	movff	_find_volume$1096,find_volume@fmt
  7644                           
  7645                           ; BSR set to: 0
  7646  0012E6  0100               	movlb	0	; () banked
  7647  0012E8  5197               	movf	find_volume@fmt& (0+255),w,b
  7648  0012EA  0100               	movlb	0	; () banked
  7649  0012EC  B4D8               	btfsc	status,2,c
  7650  0012EE  D00D               	goto	l5277
  7651                           
  7652                           ; BSR set to: 0
  7653  0012F0  0100               	movlb	0	; () banked
  7654  0012F2  4B95               	infsnz	find_volume@i& (0+255),f,b
  7655  0012F4  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  7656  0012F6  0100               	movlb	0	; () banked
  7657  0012F8  5196               	movf	(find_volume@i+1)& (0+255),w,b
  7658  0012FA  E107               	bnz	l5277
  7659  0012FC  0E04               	movlw	4
  7660  0012FE  0100               	movlb	0	; () banked
  7661  001300  5D95               	subwf	find_volume@i& (0+255),w,b
  7662  001302  B0D8               	btfsc	status,0,c
  7663  001304  D002               	goto	l5277
  7664  001306  D7AF               	goto	l5263
  7665                           
  7666                           ; BSR set to: 0
  7667                           
  7668                           ; BSR set to: 0
  7669  001308  D000               	goto	l5277
  7670  00130A                     l5277:
  7671                           
  7672                           ; BSR set to: 0
  7673                           ;ff.c: 2267: }
  7674                           ;ff.c: 2268: if (fmt == 3) return FR_DISK_ERR;
  7675  00130A  0E03               	movlw	3
  7676  00130C  0100               	movlb	0	; () banked
  7677  00130E  1997               	xorwf	find_volume@fmt& (0+255),w,b
  7678  001310  A4D8               	btfss	status,2,c
  7679  001312  D002               	goto	l5283
  7680                           
  7681                           ; BSR set to: 0
  7682  001314  0E01               	movlw	1
  7683                           
  7684                           ; BSR set to: 0
  7685  001316  0012               	return	
  7686  001318                     l5283:
  7687                           
  7688                           ; BSR set to: 0
  7689                           ;ff.c: 2269: if (fmt) return FR_NO_FILESYSTEM;
  7690  001318  0100               	movlb	0	; () banked
  7691  00131A  5197               	movf	find_volume@fmt& (0+255),w,b
  7692  00131C  0100               	movlb	0	; () banked
  7693  00131E  B4D8               	btfsc	status,2,c
  7694  001320  D002               	goto	l5289
  7695                           
  7696                           ; BSR set to: 0
  7697  001322  0E0D               	movlw	13
  7698                           
  7699                           ; BSR set to: 0
  7700  001324  0012               	return	
  7701  001326                     l5289:
  7702                           
  7703                           ; BSR set to: 0
  7704                           ;ff.c: 2273: if ((WORD)(*(WORD*)(BYTE*)(fs->win + 11)) != ((UINT)512))
  7705  001326  0100               	movlb	0	; () banked
  7706  001328  EE20 F039          	lfsr	2,57
  7707  00132C  5198               	movf	find_volume@fs& (0+255),w,b
  7708  00132E  26D9               	addwf	fsr2l,f,c
  7709  001330  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7710  001332  22DA               	addwfc	fsr2h,f,c
  7711  001334  50DE               	movf	postinc2,w,c
  7712  001336  E104               	bnz	u7510
  7713  001338  0E02               	movlw	2
  7714  00133A  18DE               	xorwf	postinc2,w,c
  7715  00133C  B4D8               	btfsc	status,2,c
  7716  00133E  D002               	goto	l5295
  7717  001340                     u7510:
  7718                           
  7719                           ; BSR set to: 0
  7720                           ;ff.c: 2274: return FR_NO_FILESYSTEM;
  7721  001340  0E0D               	movlw	13
  7722                           
  7723                           ; BSR set to: 0
  7724  001342  0012               	return	
  7725  001344                     l5295:
  7726                           
  7727                           ; BSR set to: 0
  7728                           ;ff.c: 2276: fasize = (WORD)(*(WORD*)(BYTE*)(fs->win + 22));
  7729  001344  0100               	movlb	0	; () banked
  7730  001346  EE20 F044          	lfsr	2,68
  7731  00134A  5198               	movf	find_volume@fs& (0+255),w,b
  7732  00134C  26D9               	addwf	fsr2l,f,c
  7733  00134E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7734  001350  22DA               	addwfc	fsr2h,f,c
  7735  001352  CFDE F04A          	movff	postinc2,??_find_volume
  7736  001356  CFDD F04B          	movff	postdec2,??_find_volume+1
  7737  00135A  C04A  F08D         	movff	??_find_volume,find_volume@fasize
  7738  00135E  C04B  F08E         	movff	??_find_volume+1,find_volume@fasize+1
  7739  001362  0100               	movlb	0	; () banked
  7740  001364  6B8F               	clrf	(find_volume@fasize+2)& (0+255),b
  7741  001366  6B90               	clrf	(find_volume@fasize+3)& (0+255),b
  7742                           
  7743                           ; BSR set to: 0
  7744                           ;ff.c: 2277: if (!fasize) fasize = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 36));
  7745  001368  0100               	movlb	0	; () banked
  7746  00136A  518D               	movf	find_volume@fasize& (0+255),w,b
  7747  00136C  0100               	movlb	0	; () banked
  7748  00136E  118E               	iorwf	(find_volume@fasize+1)& (0+255),w,b
  7749  001370  0100               	movlb	0	; () banked
  7750  001372  118F               	iorwf	(find_volume@fasize+2)& (0+255),w,b
  7751  001374  0100               	movlb	0	; () banked
  7752  001376  1190               	iorwf	(find_volume@fasize+3)& (0+255),w,b
  7753  001378  A4D8               	btfss	status,2,c
  7754  00137A  D00F               	goto	l636
  7755                           
  7756                           ; BSR set to: 0
  7757  00137C  0100               	movlb	0	; () banked
  7758  00137E  EE20 F052          	lfsr	2,82
  7759  001382  5198               	movf	find_volume@fs& (0+255),w,b
  7760  001384  26D9               	addwf	fsr2l,f,c
  7761  001386  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7762  001388  22DA               	addwfc	fsr2h,f,c
  7763  00138A  CFDE F08D          	movff	postinc2,find_volume@fasize
  7764  00138E  CFDE F08E          	movff	postinc2,find_volume@fasize+1
  7765  001392  CFDE F08F          	movff	postinc2,find_volume@fasize+2
  7766  001396  CFDE F090          	movff	postinc2,find_volume@fasize+3
  7767  00139A                     l636:
  7768                           
  7769                           ; BSR set to: 0
  7770                           ;ff.c: 2278: fs->fsize = fasize;
  7771  00139A  0100               	movlb	0	; () banked
  7772  00139C  EE20 F016          	lfsr	2,22
  7773  0013A0  5198               	movf	find_volume@fs& (0+255),w,b
  7774  0013A2  26D9               	addwf	fsr2l,f,c
  7775  0013A4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7776  0013A6  22DA               	addwfc	fsr2h,f,c
  7777  0013A8  C08D  FFDE         	movff	find_volume@fasize,postinc2
  7778  0013AC  C08E  FFDE         	movff	find_volume@fasize+1,postinc2
  7779  0013B0  C08F  FFDE         	movff	find_volume@fasize+2,postinc2
  7780  0013B4  C090  FFDE         	movff	find_volume@fasize+3,postinc2
  7781                           
  7782                           ; BSR set to: 0
  7783                           ;ff.c: 2280: fs->n_fats = fs->win[16];
  7784  0013B8  0100               	movlb	0	; () banked
  7785  0013BA  EE20 F03E          	lfsr	2,62
  7786  0013BE  5198               	movf	find_volume@fs& (0+255),w,b
  7787  0013C0  26D9               	addwf	fsr2l,f,c
  7788  0013C2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7789  0013C4  22DA               	addwfc	fsr2h,f,c
  7790  0013C6  0100               	movlb	0	; () banked
  7791  0013C8  EE10 F003          	lfsr	1,3
  7792  0013CC  5198               	movf	find_volume@fs& (0+255),w,b
  7793  0013CE  26E1               	addwf	fsr1l,f,c
  7794  0013D0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7795  0013D2  22E2               	addwfc	fsr1h,f,c
  7796  0013D4  CFDF FFE7          	movff	indf2,indf1
  7797                           
  7798                           ; BSR set to: 0
  7799                           ;ff.c: 2281: if (fs->n_fats != 1 && fs->n_fats != 2)
  7800  0013D8  0100               	movlb	0	; () banked
  7801  0013DA  EE20 F003          	lfsr	2,3
  7802  0013DE  5198               	movf	find_volume@fs& (0+255),w,b
  7803  0013E0  26D9               	addwf	fsr2l,f,c
  7804  0013E2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7805  0013E4  22DA               	addwfc	fsr2h,f,c
  7806  0013E6  04DE               	decf	postinc2,w,c
  7807  0013E8  B4D8               	btfsc	status,2,c
  7808  0013EA  D00D               	goto	l5311
  7809                           
  7810                           ; BSR set to: 0
  7811  0013EC  0100               	movlb	0	; () banked
  7812  0013EE  EE20 F003          	lfsr	2,3
  7813  0013F2  5198               	movf	find_volume@fs& (0+255),w,b
  7814  0013F4  26D9               	addwf	fsr2l,f,c
  7815  0013F6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7816  0013F8  22DA               	addwfc	fsr2h,f,c
  7817  0013FA  0E02               	movlw	2
  7818  0013FC  18DE               	xorwf	postinc2,w,c
  7819  0013FE  B4D8               	btfsc	status,2,c
  7820  001400  D002               	goto	l5311
  7821                           
  7822                           ; BSR set to: 0
  7823                           ;ff.c: 2282: return FR_NO_FILESYSTEM;
  7824  001402  0E0D               	movlw	13
  7825                           
  7826                           ; BSR set to: 0
  7827  001404  0012               	return	
  7828  001406                     l5311:
  7829                           
  7830                           ; BSR set to: 0
  7831                           ;ff.c: 2283: fasize *= fs->n_fats;
  7832  001406  C08D  F001         	movff	find_volume@fasize,___lmul@multiplier
  7833  00140A  C08E  F002         	movff	find_volume@fasize+1,___lmul@multiplier+1
  7834  00140E  C08F  F003         	movff	find_volume@fasize+2,___lmul@multiplier+2
  7835  001412  C090  F004         	movff	find_volume@fasize+3,___lmul@multiplier+3
  7836  001416  0100               	movlb	0	; () banked
  7837  001418  EE20 F003          	lfsr	2,3
  7838  00141C  5198               	movf	find_volume@fs& (0+255),w,b
  7839  00141E  26D9               	addwf	fsr2l,f,c
  7840  001420  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7841  001422  22DA               	addwfc	fsr2h,f,c
  7842  001424  50DF               	movf	indf2,w,c
  7843  001426  6E4A               	movwf	??_find_volume& (0+255),c
  7844  001428  504A               	movf	??_find_volume,w,c
  7845  00142A  6E05               	movwf	___lmul@multiplicand,c
  7846  00142C  6A06               	clrf	___lmul@multiplicand+1,c
  7847  00142E  6A07               	clrf	___lmul@multiplicand+2,c
  7848  001430  6A08               	clrf	___lmul@multiplicand+3,c
  7849  001432  EC13  F032         	call	___lmul	;wreg free
  7850  001436  C001  F08D         	movff	?___lmul,find_volume@fasize
  7851  00143A  C002  F08E         	movff	?___lmul+1,find_volume@fasize+1
  7852  00143E  C003  F08F         	movff	?___lmul+2,find_volume@fasize+2
  7853  001442  C004  F090         	movff	?___lmul+3,find_volume@fasize+3
  7854                           
  7855                           ;ff.c: 2285: fs->csize = fs->win[13];
  7856  001446  0100               	movlb	0	; () banked
  7857  001448  EE20 F03B          	lfsr	2,59
  7858  00144C  5198               	movf	find_volume@fs& (0+255),w,b
  7859  00144E  26D9               	addwf	fsr2l,f,c
  7860  001450  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7861  001452  22DA               	addwfc	fsr2h,f,c
  7862  001454  0100               	movlb	0	; () banked
  7863  001456  EE10 F002          	lfsr	1,2
  7864  00145A  5198               	movf	find_volume@fs& (0+255),w,b
  7865  00145C  26E1               	addwf	fsr1l,f,c
  7866  00145E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7867  001460  22E2               	addwfc	fsr1h,f,c
  7868  001462  CFDF FFE7          	movff	indf2,indf1
  7869                           
  7870                           ; BSR set to: 0
  7871                           ;ff.c: 2286: if (!fs->csize || (fs->csize & (fs->csize - 1)))
  7872  001466  0100               	movlb	0	; () banked
  7873  001468  EE20 F002          	lfsr	2,2
  7874  00146C  5198               	movf	find_volume@fs& (0+255),w,b
  7875  00146E  26D9               	addwf	fsr2l,f,c
  7876  001470  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7877  001472  22DA               	addwfc	fsr2h,f,c
  7878  001474  50DF               	movf	indf2,w,c
  7879  001476  B4D8               	btfsc	status,2,c
  7880  001478  D023               	goto	l5319
  7881                           
  7882                           ; BSR set to: 0
  7883  00147A  0EFF               	movlw	255
  7884  00147C  6E4A               	movwf	??_find_volume& (0+255),c
  7885  00147E  0EFF               	movlw	255
  7886  001480  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  7887  001482  0100               	movlb	0	; () banked
  7888  001484  EE20 F002          	lfsr	2,2
  7889  001488  5198               	movf	find_volume@fs& (0+255),w,b
  7890  00148A  26D9               	addwf	fsr2l,f,c
  7891  00148C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7892  00148E  22DA               	addwfc	fsr2h,f,c
  7893  001490  50DF               	movf	indf2,w,c
  7894  001492  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  7895  001494  6A4D               	clrf	(??_find_volume+3)& (0+255),c
  7896  001496  504A               	movf	??_find_volume,w,c
  7897  001498  264C               	addwf	??_find_volume+2,f,c
  7898  00149A  504B               	movf	??_find_volume+1,w,c
  7899  00149C  224D               	addwfc	??_find_volume+3,f,c
  7900  00149E  0100               	movlb	0	; () banked
  7901  0014A0  EE20 F002          	lfsr	2,2
  7902  0014A4  5198               	movf	find_volume@fs& (0+255),w,b
  7903  0014A6  26D9               	addwf	fsr2l,f,c
  7904  0014A8  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7905  0014AA  22DA               	addwfc	fsr2h,f,c
  7906  0014AC  50DF               	movf	indf2,w,c
  7907  0014AE  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  7908  0014B0  504E               	movf	??_find_volume+4,w,c
  7909  0014B2  164C               	andwf	??_find_volume+2,f,c
  7910  0014B4  0E00               	movlw	0
  7911  0014B6  164D               	andwf	??_find_volume+3,f,c
  7912  0014B8  504C               	movf	??_find_volume+2,w,c
  7913  0014BA  104D               	iorwf	??_find_volume+3,w,c
  7914  0014BC  B4D8               	btfsc	status,2,c
  7915  0014BE  D002               	goto	l5323
  7916  0014C0                     l5319:
  7917                           
  7918                           ; BSR set to: 0
  7919                           ;ff.c: 2287: return FR_NO_FILESYSTEM;
  7920  0014C0  0E0D               	movlw	13
  7921                           
  7922                           ; BSR set to: 0
  7923  0014C2  0012               	return	
  7924  0014C4                     l5323:
  7925                           
  7926                           ; BSR set to: 0
  7927                           ;ff.c: 2289: fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(fs->win + 17));
  7928  0014C4  0100               	movlb	0	; () banked
  7929  0014C6  EE20 F03F          	lfsr	2,63
  7930  0014CA  5198               	movf	find_volume@fs& (0+255),w,b
  7931  0014CC  26D9               	addwf	fsr2l,f,c
  7932  0014CE  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7933  0014D0  22DA               	addwfc	fsr2h,f,c
  7934  0014D2  0100               	movlb	0	; () banked
  7935  0014D4  EE10 F008          	lfsr	1,8
  7936  0014D8  5198               	movf	find_volume@fs& (0+255),w,b
  7937  0014DA  26E1               	addwf	fsr1l,f,c
  7938  0014DC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7939  0014DE  22E2               	addwfc	fsr1h,f,c
  7940  0014E0  CFDE FFE6          	movff	postinc2,postinc1
  7941  0014E4  CFDD FFE5          	movff	postdec2,postdec1
  7942                           
  7943                           ; BSR set to: 0
  7944                           ;ff.c: 2290: if (fs->n_rootdir % (((UINT)512) / 32))
  7945  0014E8  0100               	movlb	0	; () banked
  7946  0014EA  EE20 F008          	lfsr	2,8
  7947  0014EE  5198               	movf	find_volume@fs& (0+255),w,b
  7948  0014F0  26D9               	addwf	fsr2l,f,c
  7949  0014F2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7950  0014F4  22DA               	addwfc	fsr2h,f,c
  7951  0014F6  CFDE F04A          	movff	postinc2,??_find_volume
  7952  0014FA  CFDD F04B          	movff	postdec2,??_find_volume+1
  7953  0014FE  0E0F               	movlw	15
  7954  001500  164A               	andwf	??_find_volume,f,c
  7955  001502  0E00               	movlw	0
  7956  001504  164B               	andwf	??_find_volume+1,f,c
  7957  001506  504A               	movf	??_find_volume,w,c
  7958  001508  104B               	iorwf	??_find_volume+1,w,c
  7959  00150A  B4D8               	btfsc	status,2,c
  7960  00150C  D002               	goto	l5331
  7961                           
  7962                           ; BSR set to: 0
  7963                           ;ff.c: 2291: return FR_NO_FILESYSTEM;
  7964  00150E  0E0D               	movlw	13
  7965                           
  7966                           ; BSR set to: 0
  7967  001510  0012               	return	
  7968  001512                     l5331:
  7969                           
  7970                           ; BSR set to: 0
  7971                           ;ff.c: 2293: tsect = (WORD)(*(WORD*)(BYTE*)(fs->win + 19));
  7972  001512  0100               	movlb	0	; () banked
  7973  001514  EE20 F041          	lfsr	2,65
  7974  001518  5198               	movf	find_volume@fs& (0+255),w,b
  7975  00151A  26D9               	addwf	fsr2l,f,c
  7976  00151C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7977  00151E  22DA               	addwfc	fsr2h,f,c
  7978  001520  CFDE F04A          	movff	postinc2,??_find_volume
  7979  001524  CFDD F04B          	movff	postdec2,??_find_volume+1
  7980  001528  C04A  F084         	movff	??_find_volume,find_volume@tsect
  7981  00152C  C04B  F085         	movff	??_find_volume+1,find_volume@tsect+1
  7982  001530  0100               	movlb	0	; () banked
  7983  001532  6B86               	clrf	(find_volume@tsect+2)& (0+255),b
  7984  001534  6B87               	clrf	(find_volume@tsect+3)& (0+255),b
  7985                           
  7986                           ; BSR set to: 0
  7987                           ;ff.c: 2294: if (!tsect) tsect = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 32));
  7988  001536  0100               	movlb	0	; () banked
  7989  001538  5184               	movf	find_volume@tsect& (0+255),w,b
  7990  00153A  0100               	movlb	0	; () banked
  7991  00153C  1185               	iorwf	(find_volume@tsect+1)& (0+255),w,b
  7992  00153E  0100               	movlb	0	; () banked
  7993  001540  1186               	iorwf	(find_volume@tsect+2)& (0+255),w,b
  7994  001542  0100               	movlb	0	; () banked
  7995  001544  1187               	iorwf	(find_volume@tsect+3)& (0+255),w,b
  7996  001546  A4D8               	btfss	status,2,c
  7997  001548  D00F               	goto	l642
  7998                           
  7999                           ; BSR set to: 0
  8000  00154A  0100               	movlb	0	; () banked
  8001  00154C  EE20 F04E          	lfsr	2,78
  8002  001550  5198               	movf	find_volume@fs& (0+255),w,b
  8003  001552  26D9               	addwf	fsr2l,f,c
  8004  001554  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8005  001556  22DA               	addwfc	fsr2h,f,c
  8006  001558  CFDE F084          	movff	postinc2,find_volume@tsect
  8007  00155C  CFDE F085          	movff	postinc2,find_volume@tsect+1
  8008  001560  CFDE F086          	movff	postinc2,find_volume@tsect+2
  8009  001564  CFDE F087          	movff	postinc2,find_volume@tsect+3
  8010  001568                     l642:
  8011                           
  8012                           ; BSR set to: 0
  8013                           ;ff.c: 2296: nrsv = (WORD)(*(WORD*)(BYTE*)(fs->win + 14));
  8014  001568  0100               	movlb	0	; () banked
  8015  00156A  EE20 F03C          	lfsr	2,60
  8016  00156E  5198               	movf	find_volume@fs& (0+255),w,b
  8017  001570  26D9               	addwf	fsr2l,f,c
  8018  001572  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8019  001574  22DA               	addwfc	fsr2h,f,c
  8020  001576  CFDE F082          	movff	postinc2,find_volume@nrsv
  8021  00157A  CFDD F083          	movff	postdec2,find_volume@nrsv+1
  8022                           
  8023                           ; BSR set to: 0
  8024                           ;ff.c: 2297: if (!nrsv) return FR_NO_FILESYSTEM;
  8025  00157E  0100               	movlb	0	; () banked
  8026  001580  5182               	movf	find_volume@nrsv& (0+255),w,b
  8027  001582  0100               	movlb	0	; () banked
  8028  001584  1183               	iorwf	(find_volume@nrsv+1)& (0+255),w,b
  8029  001586  A4D8               	btfss	status,2,c
  8030  001588  D002               	goto	l5343
  8031                           
  8032                           ; BSR set to: 0
  8033  00158A  0E0D               	movlw	13
  8034                           
  8035                           ; BSR set to: 0
  8036  00158C  0012               	return	
  8037  00158E                     l5343:
  8038                           
  8039                           ; BSR set to: 0
  8040                           ;ff.c: 2300: sysect = nrsv + fasize + fs->n_rootdir / (((UINT)512) / 32);
  8041  00158E  0100               	movlb	0	; () banked
  8042  001590  EE20 F008          	lfsr	2,8
  8043  001594  5198               	movf	find_volume@fs& (0+255),w,b
  8044  001596  26D9               	addwf	fsr2l,f,c
  8045  001598  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8046  00159A  22DA               	addwfc	fsr2h,f,c
  8047  00159C  CFDE F04A          	movff	postinc2,??_find_volume
  8048  0015A0  CFDD F04B          	movff	postdec2,??_find_volume+1
  8049  0015A4  0E04               	movlw	4
  8050  0015A6  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  8051  0015A8                     u7605:
  8052  0015A8  90D8               	bcf	status,0,c
  8053  0015AA  324B               	rrcf	??_find_volume+1,f,c
  8054  0015AC  324A               	rrcf	??_find_volume,f,c
  8055  0015AE  2E4C               	decfsz	(??_find_volume+2)& (0+255),f,c
  8056  0015B0  D7FB               	goto	u7605
  8057  0015B2  0100               	movlb	0	; () banked
  8058  0015B4  5182               	movf	find_volume@nrsv& (0+255),w,b
  8059  0015B6  244A               	addwf	??_find_volume,w,c
  8060  0015B8  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  8061  0015BA  0100               	movlb	0	; () banked
  8062  0015BC  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  8063  0015BE  204B               	addwfc	??_find_volume+1,w,c
  8064  0015C0  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  8065  0015C2  6A4F               	clrf	(??_find_volume+5)& (0+255),c
  8066  0015C4  B0D8               	btfsc	status,0,c
  8067  0015C6  2A4F               	incf	(??_find_volume+5)& (0+255),f,c
  8068  0015C8  6A50               	clrf	(??_find_volume+6)& (0+255),c
  8069  0015CA  0100               	movlb	0	; () banked
  8070  0015CC  518D               	movf	find_volume@fasize& (0+255),w,b
  8071  0015CE  244D               	addwf	??_find_volume+3,w,c
  8072  0015D0  0100               	movlb	0	; () banked
  8073  0015D2  6F7C               	movwf	find_volume@sysect& (0+255),b
  8074  0015D4  0100               	movlb	0	; () banked
  8075  0015D6  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  8076  0015D8  204E               	addwfc	??_find_volume+4,w,c
  8077  0015DA  0100               	movlb	0	; () banked
  8078  0015DC  6F7D               	movwf	(find_volume@sysect+1)& (0+255),b
  8079  0015DE  0100               	movlb	0	; () banked
  8080  0015E0  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  8081  0015E2  204F               	addwfc	??_find_volume+5,w,c
  8082  0015E4  0100               	movlb	0	; () banked
  8083  0015E6  6F7E               	movwf	(find_volume@sysect+2)& (0+255),b
  8084  0015E8  0100               	movlb	0	; () banked
  8085  0015EA  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  8086  0015EC  2050               	addwfc	??_find_volume+6,w,c
  8087  0015EE  0100               	movlb	0	; () banked
  8088  0015F0  6F7F               	movwf	(find_volume@sysect+3)& (0+255),b
  8089                           
  8090                           ; BSR set to: 0
  8091                           ;ff.c: 2301: if (tsect < sysect) return FR_NO_FILESYSTEM;
  8092  0015F2  0100               	movlb	0	; () banked
  8093  0015F4  517C               	movf	find_volume@sysect& (0+255),w,b
  8094  0015F6  0100               	movlb	0	; () banked
  8095  0015F8  5D84               	subwf	find_volume@tsect& (0+255),w,b
  8096  0015FA  0100               	movlb	0	; () banked
  8097  0015FC  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  8098  0015FE  0100               	movlb	0	; () banked
  8099  001600  5985               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  8100  001602  0100               	movlb	0	; () banked
  8101  001604  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  8102  001606  0100               	movlb	0	; () banked
  8103  001608  5986               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  8104  00160A  0100               	movlb	0	; () banked
  8105  00160C  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  8106  00160E  0100               	movlb	0	; () banked
  8107  001610  5987               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  8108  001612  B0D8               	btfsc	status,0,c
  8109  001614  D002               	goto	l5351
  8110                           
  8111                           ; BSR set to: 0
  8112  001616  0E0D               	movlw	13
  8113                           
  8114                           ; BSR set to: 0
  8115  001618  0012               	return	
  8116  00161A                     l5351:
  8117                           
  8118                           ; BSR set to: 0
  8119                           ;ff.c: 2302: nclst = (tsect - sysect) / fs->csize;
  8120  00161A  C07C  F04A         	movff	find_volume@sysect,??_find_volume
  8121  00161E  C07D  F04B         	movff	find_volume@sysect+1,??_find_volume+1
  8122  001622  C07E  F04C         	movff	find_volume@sysect+2,??_find_volume+2
  8123  001626  C07F  F04D         	movff	find_volume@sysect+3,??_find_volume+3
  8124  00162A  1E4A               	comf	??_find_volume,f,c
  8125  00162C  1E4B               	comf	??_find_volume+1,f,c
  8126  00162E  1E4C               	comf	??_find_volume+2,f,c
  8127  001630  1E4D               	comf	??_find_volume+3,f,c
  8128  001632  2A4A               	incf	??_find_volume,f,c
  8129  001634  0E00               	movlw	0
  8130  001636  224B               	addwfc	??_find_volume+1,f,c
  8131  001638  224C               	addwfc	??_find_volume+2,f,c
  8132  00163A  224D               	addwfc	??_find_volume+3,f,c
  8133  00163C  0100               	movlb	0	; () banked
  8134  00163E  5184               	movf	find_volume@tsect& (0+255),w,b
  8135  001640  244A               	addwf	??_find_volume,w,c
  8136  001642  6E01               	movwf	___lldiv@dividend,c
  8137  001644  0100               	movlb	0	; () banked
  8138  001646  5185               	movf	(find_volume@tsect+1)& (0+255),w,b
  8139  001648  204B               	addwfc	??_find_volume+1,w,c
  8140  00164A  6E02               	movwf	___lldiv@dividend+1,c
  8141  00164C  0100               	movlb	0	; () banked
  8142  00164E  5186               	movf	(find_volume@tsect+2)& (0+255),w,b
  8143  001650  204C               	addwfc	??_find_volume+2,w,c
  8144  001652  6E03               	movwf	___lldiv@dividend+2,c
  8145  001654  0100               	movlb	0	; () banked
  8146  001656  5187               	movf	(find_volume@tsect+3)& (0+255),w,b
  8147  001658  204D               	addwfc	??_find_volume+3,w,c
  8148  00165A  6E04               	movwf	___lldiv@dividend+3,c
  8149  00165C  0100               	movlb	0	; () banked
  8150  00165E  EE20 F002          	lfsr	2,2
  8151  001662  5198               	movf	find_volume@fs& (0+255),w,b
  8152  001664  26D9               	addwf	fsr2l,f,c
  8153  001666  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8154  001668  22DA               	addwfc	fsr2h,f,c
  8155  00166A  50DF               	movf	indf2,w,c
  8156  00166C  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  8157  00166E  504E               	movf	??_find_volume+4,w,c
  8158  001670  6E05               	movwf	___lldiv@divisor,c
  8159  001672  6A06               	clrf	___lldiv@divisor+1,c
  8160  001674  6A07               	clrf	___lldiv@divisor+2,c
  8161  001676  6A08               	clrf	___lldiv@divisor+3,c
  8162  001678  EC19  F031         	call	___lldiv	;wreg free
  8163  00167C  C001  F088         	movff	?___lldiv,find_volume@nclst
  8164  001680  C002  F089         	movff	?___lldiv+1,find_volume@nclst+1
  8165  001684  C003  F08A         	movff	?___lldiv+2,find_volume@nclst+2
  8166  001688  C004  F08B         	movff	?___lldiv+3,find_volume@nclst+3
  8167                           
  8168                           ;ff.c: 2303: if (!nclst) return FR_NO_FILESYSTEM;
  8169  00168C  0100               	movlb	0	; () banked
  8170  00168E  5188               	movf	find_volume@nclst& (0+255),w,b
  8171  001690  0100               	movlb	0	; () banked
  8172  001692  1189               	iorwf	(find_volume@nclst+1)& (0+255),w,b
  8173  001694  0100               	movlb	0	; () banked
  8174  001696  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  8175  001698  0100               	movlb	0	; () banked
  8176  00169A  118B               	iorwf	(find_volume@nclst+3)& (0+255),w,b
  8177  00169C  A4D8               	btfss	status,2,c
  8178  00169E  D002               	goto	l5359
  8179                           
  8180                           ; BSR set to: 0
  8181  0016A0  0E0D               	movlw	13
  8182                           
  8183                           ; BSR set to: 0
  8184  0016A2  0012               	return	
  8185  0016A4                     l5359:
  8186                           
  8187                           ; BSR set to: 0
  8188                           ;ff.c: 2304: fmt = 1;
  8189  0016A4  0E01               	movlw	1
  8190  0016A6  0100               	movlb	0	; () banked
  8191  0016A8  6F97               	movwf	find_volume@fmt& (0+255),b
  8192                           
  8193                           ; BSR set to: 0
  8194                           ;ff.c: 2305: if (nclst >= 4086U) fmt = 2;
  8195  0016AA  0100               	movlb	0	; () banked
  8196  0016AC  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  8197  0016AE  0100               	movlb	0	; () banked
  8198  0016B0  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  8199  0016B2  E108               	bnz	u7630
  8200  0016B4  0EF6               	movlw	246
  8201  0016B6  0100               	movlb	0	; () banked
  8202  0016B8  5D88               	subwf	find_volume@nclst& (0+255),w,b
  8203  0016BA  0E0F               	movlw	15
  8204  0016BC  0100               	movlb	0	; () banked
  8205  0016BE  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  8206  0016C0  A0D8               	btfss	status,0,c
  8207  0016C2  D004               	goto	l5365
  8208  0016C4                     u7630:
  8209                           
  8210                           ; BSR set to: 0
  8211  0016C4  0E02               	movlw	2
  8212  0016C6  0100               	movlb	0	; () banked
  8213  0016C8  6F97               	movwf	find_volume@fmt& (0+255),b
  8214  0016CA  D000               	goto	l5365
  8215  0016CC                     l5365:
  8216                           
  8217                           ; BSR set to: 0
  8218                           ;ff.c: 2306: if (nclst >= 65526U) fmt = 3;
  8219  0016CC  0100               	movlb	0	; () banked
  8220  0016CE  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  8221  0016D0  0100               	movlb	0	; () banked
  8222  0016D2  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  8223  0016D4  E108               	bnz	u7640
  8224  0016D6  0EF6               	movlw	246
  8225  0016D8  0100               	movlb	0	; () banked
  8226  0016DA  5D88               	subwf	find_volume@nclst& (0+255),w,b
  8227  0016DC  0EFF               	movlw	255
  8228  0016DE  0100               	movlb	0	; () banked
  8229  0016E0  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  8230  0016E2  A0D8               	btfss	status,0,c
  8231  0016E4  D004               	goto	l5369
  8232  0016E6                     u7640:
  8233                           
  8234                           ; BSR set to: 0
  8235  0016E6  0E03               	movlw	3
  8236  0016E8  0100               	movlb	0	; () banked
  8237  0016EA  6F97               	movwf	find_volume@fmt& (0+255),b
  8238  0016EC  D000               	goto	l5369
  8239  0016EE                     l5369:
  8240                           
  8241                           ; BSR set to: 0
  8242                           ;ff.c: 2309: fs->n_fatent = nclst + 2;
  8243  0016EE  0E02               	movlw	2
  8244  0016F0  0100               	movlb	0	; () banked
  8245  0016F2  2588               	addwf	find_volume@nclst& (0+255),w,b
  8246  0016F4  6E4A               	movwf	??_find_volume& (0+255),c
  8247  0016F6  0E00               	movlw	0
  8248  0016F8  0100               	movlb	0	; () banked
  8249  0016FA  2189               	addwfc	(find_volume@nclst+1)& (0+255),w,b
  8250  0016FC  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  8251  0016FE  0E00               	movlw	0
  8252  001700  0100               	movlb	0	; () banked
  8253  001702  218A               	addwfc	(find_volume@nclst+2)& (0+255),w,b
  8254  001704  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  8255  001706  0E00               	movlw	0
  8256  001708  0100               	movlb	0	; () banked
  8257  00170A  218B               	addwfc	(find_volume@nclst+3)& (0+255),w,b
  8258  00170C  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  8259  00170E  0100               	movlb	0	; () banked
  8260  001710  EE20 F012          	lfsr	2,18
  8261  001714  5198               	movf	find_volume@fs& (0+255),w,b
  8262  001716  26D9               	addwf	fsr2l,f,c
  8263  001718  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8264  00171A  22DA               	addwfc	fsr2h,f,c
  8265  00171C  C04A  FFDE         	movff	??_find_volume,postinc2
  8266  001720  C04B  FFDE         	movff	??_find_volume+1,postinc2
  8267  001724  C04C  FFDE         	movff	??_find_volume+2,postinc2
  8268  001728  C04D  FFDE         	movff	??_find_volume+3,postinc2
  8269                           
  8270                           ; BSR set to: 0
  8271                           ;ff.c: 2310: fs->volbase = bsect;
  8272  00172C  0100               	movlb	0	; () banked
  8273  00172E  EE20 F01A          	lfsr	2,26
  8274  001732  5198               	movf	find_volume@fs& (0+255),w,b
  8275  001734  26D9               	addwf	fsr2l,f,c
  8276  001736  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8277  001738  22DA               	addwfc	fsr2h,f,c
  8278  00173A  C091  FFDE         	movff	find_volume@bsect,postinc2
  8279  00173E  C092  FFDE         	movff	find_volume@bsect+1,postinc2
  8280  001742  C093  FFDE         	movff	find_volume@bsect+2,postinc2
  8281  001746  C094  FFDE         	movff	find_volume@bsect+3,postinc2
  8282                           
  8283                           ; BSR set to: 0
  8284                           ;ff.c: 2311: fs->fatbase = bsect + nrsv;
  8285  00174A  0100               	movlb	0	; () banked
  8286  00174C  5182               	movf	find_volume@nrsv& (0+255),w,b
  8287  00174E  0100               	movlb	0	; () banked
  8288  001750  2591               	addwf	find_volume@bsect& (0+255),w,b
  8289  001752  6E4A               	movwf	??_find_volume& (0+255),c
  8290  001754  0100               	movlb	0	; () banked
  8291  001756  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  8292  001758  0100               	movlb	0	; () banked
  8293  00175A  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  8294  00175C  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  8295  00175E  0E00               	movlw	0
  8296  001760  0100               	movlb	0	; () banked
  8297  001762  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  8298  001764  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  8299  001766  0E00               	movlw	0
  8300  001768  0100               	movlb	0	; () banked
  8301  00176A  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  8302  00176C  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  8303  00176E  0100               	movlb	0	; () banked
  8304  001770  EE20 F01E          	lfsr	2,30
  8305  001774  5198               	movf	find_volume@fs& (0+255),w,b
  8306  001776  26D9               	addwf	fsr2l,f,c
  8307  001778  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8308  00177A  22DA               	addwfc	fsr2h,f,c
  8309  00177C  C04A  FFDE         	movff	??_find_volume,postinc2
  8310  001780  C04B  FFDE         	movff	??_find_volume+1,postinc2
  8311  001784  C04C  FFDE         	movff	??_find_volume+2,postinc2
  8312  001788  C04D  FFDE         	movff	??_find_volume+3,postinc2
  8313                           
  8314                           ; BSR set to: 0
  8315                           ;ff.c: 2312: fs->database = bsect + sysect;
  8316  00178C  0100               	movlb	0	; () banked
  8317  00178E  517C               	movf	find_volume@sysect& (0+255),w,b
  8318  001790  0100               	movlb	0	; () banked
  8319  001792  2591               	addwf	find_volume@bsect& (0+255),w,b
  8320  001794  6E4A               	movwf	??_find_volume& (0+255),c
  8321  001796  0100               	movlb	0	; () banked
  8322  001798  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  8323  00179A  0100               	movlb	0	; () banked
  8324  00179C  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  8325  00179E  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  8326  0017A0  0100               	movlb	0	; () banked
  8327  0017A2  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  8328  0017A4  0100               	movlb	0	; () banked
  8329  0017A6  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  8330  0017A8  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  8331  0017AA  0100               	movlb	0	; () banked
  8332  0017AC  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  8333  0017AE  0100               	movlb	0	; () banked
  8334  0017B0  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  8335  0017B2  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  8336  0017B4  0100               	movlb	0	; () banked
  8337  0017B6  EE20 F026          	lfsr	2,38
  8338  0017BA  5198               	movf	find_volume@fs& (0+255),w,b
  8339  0017BC  26D9               	addwf	fsr2l,f,c
  8340  0017BE  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8341  0017C0  22DA               	addwfc	fsr2h,f,c
  8342  0017C2  C04A  FFDE         	movff	??_find_volume,postinc2
  8343  0017C6  C04B  FFDE         	movff	??_find_volume+1,postinc2
  8344  0017CA  C04C  FFDE         	movff	??_find_volume+2,postinc2
  8345  0017CE  C04D  FFDE         	movff	??_find_volume+3,postinc2
  8346                           
  8347                           ; BSR set to: 0
  8348                           ;ff.c: 2313: if (fmt == 3) {
  8349  0017D2  0E03               	movlw	3
  8350  0017D4  0100               	movlb	0	; () banked
  8351  0017D6  1997               	xorwf	find_volume@fmt& (0+255),w,b
  8352  0017D8  A4D8               	btfss	status,2,c
  8353  0017DA  D043               	goto	l5389
  8354                           
  8355                           ; BSR set to: 0
  8356                           ;ff.c: 2314: if (fs->n_rootdir) return FR_NO_FILESYSTEM;
  8357  0017DC  0100               	movlb	0	; () banked
  8358  0017DE  EE20 F008          	lfsr	2,8
  8359  0017E2  5198               	movf	find_volume@fs& (0+255),w,b
  8360  0017E4  26D9               	addwf	fsr2l,f,c
  8361  0017E6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8362  0017E8  22DA               	addwfc	fsr2h,f,c
  8363  0017EA  50DE               	movf	postinc2,w,c
  8364  0017EC  10DE               	iorwf	postinc2,w,c
  8365  0017EE  B4D8               	btfsc	status,2,c
  8366  0017F0  D002               	goto	l5385
  8367                           
  8368                           ; BSR set to: 0
  8369  0017F2  0E0D               	movlw	13
  8370                           
  8371                           ; BSR set to: 0
  8372  0017F4  0012               	return	
  8373  0017F6                     l5385:
  8374                           
  8375                           ; BSR set to: 0
  8376                           ;ff.c: 2315: fs->dirbase = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 44));
  8377  0017F6  0100               	movlb	0	; () banked
  8378  0017F8  EE20 F05A          	lfsr	2,90
  8379  0017FC  5198               	movf	find_volume@fs& (0+255),w,b
  8380  0017FE  26D9               	addwf	fsr2l,f,c
  8381  001800  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8382  001802  22DA               	addwfc	fsr2h,f,c
  8383  001804  0100               	movlb	0	; () banked
  8384  001806  EE10 F022          	lfsr	1,34
  8385  00180A  5198               	movf	find_volume@fs& (0+255),w,b
  8386  00180C  26E1               	addwf	fsr1l,f,c
  8387  00180E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8388  001810  22E2               	addwfc	fsr1h,f,c
  8389  001812  CFDE FFE6          	movff	postinc2,postinc1
  8390  001816  CFDE FFE6          	movff	postinc2,postinc1
  8391  00181A  CFDE FFE6          	movff	postinc2,postinc1
  8392  00181E  CFDE FFE6          	movff	postinc2,postinc1
  8393                           
  8394                           ; BSR set to: 0
  8395                           ;ff.c: 2316: szbfat = fs->n_fatent * 4;
  8396  001822  0100               	movlb	0	; () banked
  8397  001824  EE20 F012          	lfsr	2,18
  8398  001828  5198               	movf	find_volume@fs& (0+255),w,b
  8399  00182A  26D9               	addwf	fsr2l,f,c
  8400  00182C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8401  00182E  22DA               	addwfc	fsr2h,f,c
  8402  001830  CFDE F04A          	movff	postinc2,??_find_volume
  8403  001834  CFDE F04B          	movff	postinc2,??_find_volume+1
  8404  001838  CFDE F04C          	movff	postinc2,??_find_volume+2
  8405  00183C  CFDE F04D          	movff	postinc2,??_find_volume+3
  8406  001840  0E02               	movlw	2
  8407  001842                     u7675:
  8408  001842  90D8               	bcf	status,0,c
  8409  001844  364A               	rlcf	??_find_volume,f,c
  8410  001846  364B               	rlcf	??_find_volume+1,f,c
  8411  001848  364C               	rlcf	??_find_volume+2,f,c
  8412  00184A  364D               	rlcf	??_find_volume+3,f,c
  8413  00184C  2EE8               	decfsz	wreg,f,c
  8414  00184E  D7F9               	goto	u7675
  8415  001850  C04A  F076         	movff	??_find_volume,find_volume@szbfat
  8416  001854  C04B  F077         	movff	??_find_volume+1,find_volume@szbfat+1
  8417  001858  C04C  F078         	movff	??_find_volume+2,find_volume@szbfat+2
  8418  00185C  C04D  F079         	movff	??_find_volume+3,find_volume@szbfat+3
  8419                           
  8420                           ;ff.c: 2317: } else {
  8421  001860  D0A5               	goto	l650
  8422  001862                     l5389:
  8423                           
  8424                           ; BSR set to: 0
  8425                           ;ff.c: 2318: if (!fs->n_rootdir) return FR_NO_FILESYSTEM;
  8426  001862  0100               	movlb	0	; () banked
  8427  001864  EE20 F008          	lfsr	2,8
  8428  001868  5198               	movf	find_volume@fs& (0+255),w,b
  8429  00186A  26D9               	addwf	fsr2l,f,c
  8430  00186C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8431  00186E  22DA               	addwfc	fsr2h,f,c
  8432  001870  50DE               	movf	postinc2,w,c
  8433  001872  10DE               	iorwf	postinc2,w,c
  8434  001874  A4D8               	btfss	status,2,c
  8435  001876  D002               	goto	l5395
  8436                           
  8437                           ; BSR set to: 0
  8438  001878  0E0D               	movlw	13
  8439                           
  8440                           ; BSR set to: 0
  8441  00187A  0012               	return	
  8442  00187C                     l5395:
  8443                           
  8444                           ; BSR set to: 0
  8445                           ;ff.c: 2319: fs->dirbase = fs->fatbase + fasize;
  8446  00187C  0100               	movlb	0	; () banked
  8447  00187E  EE20 F01E          	lfsr	2,30
  8448  001882  5198               	movf	find_volume@fs& (0+255),w,b
  8449  001884  26D9               	addwf	fsr2l,f,c
  8450  001886  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8451  001888  22DA               	addwfc	fsr2h,f,c
  8452  00188A  CFDE F04A          	movff	postinc2,??_find_volume
  8453  00188E  CFDE F04B          	movff	postinc2,??_find_volume+1
  8454  001892  CFDE F04C          	movff	postinc2,??_find_volume+2
  8455  001896  CFDE F04D          	movff	postinc2,??_find_volume+3
  8456  00189A  0100               	movlb	0	; () banked
  8457  00189C  518D               	movf	find_volume@fasize& (0+255),w,b
  8458  00189E  244A               	addwf	??_find_volume,w,c
  8459  0018A0  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  8460  0018A2  0100               	movlb	0	; () banked
  8461  0018A4  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  8462  0018A6  204B               	addwfc	??_find_volume+1,w,c
  8463  0018A8  6E4F               	movwf	(??_find_volume+5)& (0+255),c
  8464  0018AA  0100               	movlb	0	; () banked
  8465  0018AC  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  8466  0018AE  204C               	addwfc	??_find_volume+2,w,c
  8467  0018B0  6E50               	movwf	(??_find_volume+6)& (0+255),c
  8468  0018B2  0100               	movlb	0	; () banked
  8469  0018B4  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  8470  0018B6  204D               	addwfc	??_find_volume+3,w,c
  8471  0018B8  6E51               	movwf	(??_find_volume+7)& (0+255),c
  8472  0018BA  0100               	movlb	0	; () banked
  8473  0018BC  EE20 F022          	lfsr	2,34
  8474  0018C0  5198               	movf	find_volume@fs& (0+255),w,b
  8475  0018C2  26D9               	addwf	fsr2l,f,c
  8476  0018C4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8477  0018C6  22DA               	addwfc	fsr2h,f,c
  8478  0018C8  C04E  FFDE         	movff	??_find_volume+4,postinc2
  8479  0018CC  C04F  FFDE         	movff	??_find_volume+5,postinc2
  8480  0018D0  C050  FFDE         	movff	??_find_volume+6,postinc2
  8481  0018D4  C051  FFDE         	movff	??_find_volume+7,postinc2
  8482                           
  8483                           ; BSR set to: 0
  8484                           ;ff.c: 2320: szbfat = (fmt == 2) ?
  8485                           ;ff.c: 2321: fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  8486  0018D8  0E02               	movlw	2
  8487  0018DA  0100               	movlb	0	; () banked
  8488  0018DC  1997               	xorwf	find_volume@fmt& (0+255),w,b
  8489  0018DE  B4D8               	btfsc	status,2,c
  8490  0018E0  D048               	goto	l5401
  8491                           
  8492                           ; BSR set to: 0
  8493  0018E2  0100               	movlb	0	; () banked
  8494  0018E4  EE20 F012          	lfsr	2,18
  8495  0018E8  5198               	movf	find_volume@fs& (0+255),w,b
  8496  0018EA  26D9               	addwf	fsr2l,f,c
  8497  0018EC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8498  0018EE  22DA               	addwfc	fsr2h,f,c
  8499  0018F0  CFDE F04A          	movff	postinc2,??_find_volume
  8500  0018F4  CFDE F04B          	movff	postinc2,??_find_volume+1
  8501  0018F8  CFDE F04C          	movff	postinc2,??_find_volume+2
  8502  0018FC  CFDE F04D          	movff	postinc2,??_find_volume+3
  8503  001900  0E01               	movlw	1
  8504  001902  144A               	andwf	??_find_volume,w,c
  8505  001904  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  8506  001906  0E00               	movlw	0
  8507  001908  144B               	andwf	??_find_volume+1,w,c
  8508  00190A  6E4F               	movwf	(??_find_volume+5)& (0+255),c
  8509  00190C  0E00               	movlw	0
  8510  00190E  144C               	andwf	??_find_volume+2,w,c
  8511  001910  6E50               	movwf	(??_find_volume+6)& (0+255),c
  8512  001912  0E00               	movlw	0
  8513  001914  144D               	andwf	??_find_volume+3,w,c
  8514  001916  6E51               	movwf	(??_find_volume+7)& (0+255),c
  8515  001918  0100               	movlb	0	; () banked
  8516  00191A  EE20 F012          	lfsr	2,18
  8517  00191E  5198               	movf	find_volume@fs& (0+255),w,b
  8518  001920  26D9               	addwf	fsr2l,f,c
  8519  001922  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8520  001924  22DA               	addwfc	fsr2h,f,c
  8521  001926  CFDE F001          	movff	postinc2,___lmul@multiplier
  8522  00192A  CFDE F002          	movff	postinc2,___lmul@multiplier+1
  8523  00192E  CFDE F003          	movff	postinc2,___lmul@multiplier+2
  8524  001932  CFDE F004          	movff	postinc2,___lmul@multiplier+3
  8525  001936  0E03               	movlw	3
  8526  001938  6E05               	movwf	___lmul@multiplicand,c
  8527  00193A  0E00               	movlw	0
  8528  00193C  6E06               	movwf	___lmul@multiplicand+1,c
  8529  00193E  0E00               	movlw	0
  8530  001940  6E07               	movwf	___lmul@multiplicand+2,c
  8531  001942  0E00               	movlw	0
  8532  001944  6E08               	movwf	___lmul@multiplicand+3,c
  8533  001946  EC13  F032         	call	___lmul	;wreg free
  8534  00194A  90D8               	bcf	status,0,c
  8535  00194C  3204               	rrcf	?___lmul+3,f,c
  8536  00194E  3203               	rrcf	?___lmul+2,f,c
  8537  001950  3202               	rrcf	?___lmul+1,f,c
  8538  001952  3201               	rrcf	?___lmul,f,c
  8539  001954  504E               	movf	??_find_volume+4,w,c
  8540  001956  2401               	addwf	?___lmul,w,c
  8541  001958  0100               	movlb	0	; () banked
  8542  00195A  6F76               	movwf	find_volume@szbfat& (0+255),b
  8543  00195C  504F               	movf	??_find_volume+5,w,c
  8544  00195E  2002               	addwfc	?___lmul+1,w,c
  8545  001960  0100               	movlb	0	; () banked
  8546  001962  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  8547  001964  5050               	movf	??_find_volume+6,w,c
  8548  001966  2003               	addwfc	?___lmul+2,w,c
  8549  001968  0100               	movlb	0	; () banked
  8550  00196A  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  8551  00196C  5051               	movf	??_find_volume+7,w,c
  8552  00196E  2004               	addwfc	?___lmul+3,w,c
  8553  001970  D01A               	goto	L8
  8554  001972                     l5401:
  8555                           
  8556                           ; BSR set to: 0
  8557  001972  0100               	movlb	0	; () banked
  8558  001974  EE20 F012          	lfsr	2,18
  8559  001978  5198               	movf	find_volume@fs& (0+255),w,b
  8560  00197A  26D9               	addwf	fsr2l,f,c
  8561  00197C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8562  00197E  22DA               	addwfc	fsr2h,f,c
  8563  001980  CFDE F04A          	movff	postinc2,??_find_volume
  8564  001984  CFDE F04B          	movff	postinc2,??_find_volume+1
  8565  001988  CFDE F04C          	movff	postinc2,??_find_volume+2
  8566  00198C  CFDE F04D          	movff	postinc2,??_find_volume+3
  8567  001990  90D8               	bcf	status,0,c
  8568  001992  344A               	rlcf	??_find_volume,w,c
  8569  001994  0100               	movlb	0	; () banked
  8570  001996  6F76               	movwf	find_volume@szbfat& (0+255),b
  8571  001998  344B               	rlcf	??_find_volume+1,w,c
  8572  00199A  0100               	movlb	0	; () banked
  8573  00199C  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  8574  00199E  344C               	rlcf	??_find_volume+2,w,c
  8575  0019A0  0100               	movlb	0	; () banked
  8576  0019A2  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  8577  0019A4  344D               	rlcf	??_find_volume+3,w,c
  8578  0019A6                     L8:
  8579  0019A6  0100               	movlb	0	; () banked
  8580  0019A8  6F79               	movwf	(find_volume@szbfat+3)& (0+255),b
  8581  0019AA  D000               	goto	l650
  8582  0019AC                     l650:
  8583                           
  8584                           ; BSR set to: 0
  8585                           ;ff.c: 2322: }
  8586                           ;ff.c: 2323: if (fs->fsize < (szbfat + (((UINT)512) - 1)) / ((UINT)512))
  8587  0019AC  0EFF               	movlw	255
  8588  0019AE  0100               	movlb	0	; () banked
  8589  0019B0  2576               	addwf	find_volume@szbfat& (0+255),w,b
  8590  0019B2  6E4A               	movwf	??_find_volume& (0+255),c
  8591  0019B4  0E01               	movlw	1
  8592  0019B6  0100               	movlb	0	; () banked
  8593  0019B8  2177               	addwfc	(find_volume@szbfat+1)& (0+255),w,b
  8594  0019BA  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  8595  0019BC  0E00               	movlw	0
  8596  0019BE  0100               	movlb	0	; () banked
  8597  0019C0  2178               	addwfc	(find_volume@szbfat+2)& (0+255),w,b
  8598  0019C2  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  8599  0019C4  0E00               	movlw	0
  8600  0019C6  0100               	movlb	0	; () banked
  8601  0019C8  2179               	addwfc	(find_volume@szbfat+3)& (0+255),w,b
  8602  0019CA  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  8603  0019CC  0E0A               	movlw	10
  8604  0019CE  D005               	goto	u7700
  8605  0019D0                     u7705:
  8606  0019D0  90D8               	bcf	status,0,c
  8607  0019D2  324D               	rrcf	??_find_volume+3,f,c
  8608  0019D4  324C               	rrcf	??_find_volume+2,f,c
  8609  0019D6  324B               	rrcf	??_find_volume+1,f,c
  8610  0019D8  324A               	rrcf	??_find_volume,f,c
  8611  0019DA                     u7700:
  8612  0019DA  2EE8               	decfsz	wreg,f,c
  8613  0019DC  D7F9               	goto	u7705
  8614  0019DE  0100               	movlb	0	; () banked
  8615  0019E0  EE20 F016          	lfsr	2,22
  8616  0019E4  5198               	movf	find_volume@fs& (0+255),w,b
  8617  0019E6  26D9               	addwf	fsr2l,f,c
  8618  0019E8  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8619  0019EA  22DA               	addwfc	fsr2h,f,c
  8620  0019EC  504A               	movf	??_find_volume,w,c
  8621  0019EE  5CDE               	subwf	postinc2,w,c
  8622  0019F0  504B               	movf	??_find_volume+1,w,c
  8623  0019F2  58DE               	subwfb	postinc2,w,c
  8624  0019F4  504C               	movf	??_find_volume+2,w,c
  8625  0019F6  58DE               	subwfb	postinc2,w,c
  8626  0019F8  504D               	movf	??_find_volume+3,w,c
  8627  0019FA  58DE               	subwfb	postinc2,w,c
  8628  0019FC  B0D8               	btfsc	status,0,c
  8629  0019FE  D002               	goto	l5407
  8630                           
  8631                           ; BSR set to: 0
  8632                           ;ff.c: 2324: return FR_NO_FILESYSTEM;
  8633  001A00  0E0D               	movlw	13
  8634                           
  8635                           ; BSR set to: 0
  8636  001A02  0012               	return	
  8637  001A04                     l5407:
  8638                           
  8639                           ; BSR set to: 0
  8640                           ;ff.c: 2328: fs->last_clust = fs->free_clust = 0xFFFFFFFF;
  8641  001A04  0100               	movlb	0	; () banked
  8642  001A06  EE20 F00E          	lfsr	2,14
  8643  001A0A  5198               	movf	find_volume@fs& (0+255),w,b
  8644  001A0C  26D9               	addwf	fsr2l,f,c
  8645  001A0E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8646  001A10  22DA               	addwfc	fsr2h,f,c
  8647  001A12  0EFF               	movlw	255
  8648  001A14  6EDE               	movwf	postinc2,c
  8649  001A16  0EFF               	movlw	255
  8650  001A18  6EDE               	movwf	postinc2,c
  8651  001A1A  0EFF               	movlw	255
  8652  001A1C  6EDE               	movwf	postinc2,c
  8653  001A1E  0EFF               	movlw	255
  8654  001A20  6EDD               	movwf	postdec2,c
  8655  001A22  52DD               	movf	postdec2,f,c
  8656  001A24  52DD               	movf	postdec2,f,c
  8657  001A26  0100               	movlb	0	; () banked
  8658  001A28  EE10 F00A          	lfsr	1,10
  8659  001A2C  5198               	movf	find_volume@fs& (0+255),w,b
  8660  001A2E  26E1               	addwf	fsr1l,f,c
  8661  001A30  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8662  001A32  22E2               	addwfc	fsr1h,f,c
  8663  001A34  CFDE FFE6          	movff	postinc2,postinc1
  8664  001A38  CFDE FFE6          	movff	postinc2,postinc1
  8665  001A3C  CFDE FFE6          	movff	postinc2,postinc1
  8666  001A40  CFDE FFE6          	movff	postinc2,postinc1
  8667                           
  8668                           ; BSR set to: 0
  8669                           ;ff.c: 2331: fs->fsi_flag = 0x80;
  8670  001A44  0100               	movlb	0	; () banked
  8671  001A46  EE20 F005          	lfsr	2,5
  8672  001A4A  5198               	movf	find_volume@fs& (0+255),w,b
  8673  001A4C  26D9               	addwf	fsr2l,f,c
  8674  001A4E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8675  001A50  22DA               	addwfc	fsr2h,f,c
  8676  001A52  0E80               	movlw	128
  8677  001A54  6EDF               	movwf	indf2,c
  8678                           
  8679                           ; BSR set to: 0
  8680                           ;ff.c: 2333: if (fmt == 3
  8681                           ;ff.c: 2334: && (WORD)(*(WORD*)(BYTE*)(fs->win + 48)) == 1
  8682                           ;ff.c: 2335: && move_window(fs, bsect + 1) == FR_OK)
  8683  001A56  0E03               	movlw	3
  8684  001A58  0100               	movlb	0	; () banked
  8685  001A5A  1997               	xorwf	find_volume@fmt& (0+255),w,b
  8686  001A5C  A4D8               	btfss	status,2,c
  8687  001A5E  D090               	goto	l5425
  8688                           
  8689                           ; BSR set to: 0
  8690  001A60  0100               	movlb	0	; () banked
  8691  001A62  EE20 F05E          	lfsr	2,94
  8692  001A66  5198               	movf	find_volume@fs& (0+255),w,b
  8693  001A68  26D9               	addwf	fsr2l,f,c
  8694  001A6A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8695  001A6C  22DA               	addwfc	fsr2h,f,c
  8696  001A6E  04DE               	decf	postinc2,w,c
  8697  001A70  10DE               	iorwf	postinc2,w,c
  8698  001A72  A4D8               	btfss	status,2,c
  8699  001A74  D085               	goto	l5425
  8700                           
  8701                           ; BSR set to: 0
  8702  001A76  C098  F030         	movff	find_volume@fs,move_window@fs
  8703  001A7A  C099  F031         	movff	find_volume@fs+1,move_window@fs+1
  8704  001A7E  0E01               	movlw	1
  8705  001A80  0100               	movlb	0	; () banked
  8706  001A82  2591               	addwf	find_volume@bsect& (0+255),w,b
  8707  001A84  6E32               	movwf	move_window@sector,c
  8708  001A86  0E00               	movlw	0
  8709  001A88  0100               	movlb	0	; () banked
  8710  001A8A  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  8711  001A8C  6E33               	movwf	move_window@sector+1,c
  8712  001A8E  0E00               	movlw	0
  8713  001A90  0100               	movlb	0	; () banked
  8714  001A92  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  8715  001A94  6E34               	movwf	move_window@sector+2,c
  8716  001A96  0E00               	movlw	0
  8717  001A98  0100               	movlb	0	; () banked
  8718  001A9A  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  8719  001A9C  6E35               	movwf	move_window@sector+3,c
  8720  001A9E  ECE9  F02F         	call	_move_window	;wreg free
  8721  001AA2  0900               	iorlw	0
  8722  001AA4  A4D8               	btfss	status,2,c
  8723  001AA6  D06C               	goto	l5425
  8724                           
  8725                           ;ff.c: 2336: {
  8726                           ;ff.c: 2337: fs->fsi_flag = 0;
  8727  001AA8  0100               	movlb	0	; () banked
  8728  001AAA  EE20 F005          	lfsr	2,5
  8729  001AAE  5198               	movf	find_volume@fs& (0+255),w,b
  8730  001AB0  26D9               	addwf	fsr2l,f,c
  8731  001AB2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8732  001AB4  22DA               	addwfc	fsr2h,f,c
  8733  001AB6  0E00               	movlw	0
  8734  001AB8  6EDF               	movwf	indf2,c
  8735                           
  8736                           ;ff.c: 2338: if ((WORD)(*(WORD*)(BYTE*)(fs->win + 510)) == 0xAA55
  8737                           ;ff.c: 2339: && (DWORD)(*(DWORD*)(BYTE*)(fs->win + 0)) == 0x41615252
  8738                           ;ff.c: 2340: && (DWORD)(*(DWORD*)(BYTE*)(fs->win + 484)) == 0x61417272)
  8739  001ABA  0100               	movlb	0	; () banked
  8740  001ABC  EE22 F02C          	lfsr	2,556
  8741  001AC0  5198               	movf	find_volume@fs& (0+255),w,b
  8742  001AC2  26D9               	addwf	fsr2l,f,c
  8743  001AC4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8744  001AC6  22DA               	addwfc	fsr2h,f,c
  8745  001AC8  0E55               	movlw	85
  8746  001ACA  18DE               	xorwf	postinc2,w,c
  8747  001ACC  E159               	bnz	l5425
  8748  001ACE  0EAA               	movlw	170
  8749  001AD0  18DE               	xorwf	postinc2,w,c
  8750  001AD2  A4D8               	btfss	status,2,c
  8751  001AD4  D055               	goto	l5425
  8752                           
  8753                           ; BSR set to: 0
  8754  001AD6  0100               	movlb	0	; () banked
  8755  001AD8  EE20 F02E          	lfsr	2,46
  8756  001ADC  5198               	movf	find_volume@fs& (0+255),w,b
  8757  001ADE  26D9               	addwf	fsr2l,f,c
  8758  001AE0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8759  001AE2  22DA               	addwfc	fsr2h,f,c
  8760  001AE4  0E52               	movlw	82
  8761  001AE6  18DE               	xorwf	postinc2,w,c
  8762  001AE8  E14B               	bnz	l5425
  8763  001AEA  0E52               	movlw	82
  8764  001AEC  18DE               	xorwf	postinc2,w,c
  8765  001AEE  E148               	bnz	l5425
  8766  001AF0  0E61               	movlw	97
  8767  001AF2  18DE               	xorwf	postinc2,w,c
  8768  001AF4  E145               	bnz	l5425
  8769  001AF6  0E41               	movlw	65
  8770  001AF8  18DE               	xorwf	postinc2,w,c
  8771  001AFA  A4D8               	btfss	status,2,c
  8772  001AFC  D041               	goto	l5425
  8773                           
  8774                           ; BSR set to: 0
  8775  001AFE  0100               	movlb	0	; () banked
  8776  001B00  EE22 F012          	lfsr	2,530
  8777  001B04  5198               	movf	find_volume@fs& (0+255),w,b
  8778  001B06  26D9               	addwf	fsr2l,f,c
  8779  001B08  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8780  001B0A  22DA               	addwfc	fsr2h,f,c
  8781  001B0C  0E72               	movlw	114
  8782  001B0E  18DE               	xorwf	postinc2,w,c
  8783  001B10  E137               	bnz	l5425
  8784  001B12  0E72               	movlw	114
  8785  001B14  18DE               	xorwf	postinc2,w,c
  8786  001B16  E134               	bnz	l5425
  8787  001B18  0E41               	movlw	65
  8788  001B1A  18DE               	xorwf	postinc2,w,c
  8789  001B1C  E131               	bnz	l5425
  8790  001B1E  0E61               	movlw	97
  8791  001B20  18DE               	xorwf	postinc2,w,c
  8792  001B22  A4D8               	btfss	status,2,c
  8793  001B24  D02D               	goto	l5425
  8794                           
  8795                           ; BSR set to: 0
  8796                           ;ff.c: 2341: {
  8797                           ;ff.c: 2343: fs->free_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 488));
  8798  001B26  0100               	movlb	0	; () banked
  8799  001B28  EE22 F016          	lfsr	2,534
  8800  001B2C  5198               	movf	find_volume@fs& (0+255),w,b
  8801  001B2E  26D9               	addwf	fsr2l,f,c
  8802  001B30  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8803  001B32  22DA               	addwfc	fsr2h,f,c
  8804  001B34  0100               	movlb	0	; () banked
  8805  001B36  EE10 F00E          	lfsr	1,14
  8806  001B3A  5198               	movf	find_volume@fs& (0+255),w,b
  8807  001B3C  26E1               	addwf	fsr1l,f,c
  8808  001B3E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8809  001B40  22E2               	addwfc	fsr1h,f,c
  8810  001B42  CFDE FFE6          	movff	postinc2,postinc1
  8811  001B46  CFDE FFE6          	movff	postinc2,postinc1
  8812  001B4A  CFDE FFE6          	movff	postinc2,postinc1
  8813  001B4E  CFDE FFE6          	movff	postinc2,postinc1
  8814                           
  8815                           ;ff.c: 2346: fs->last_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 492));
  8816  001B52  0100               	movlb	0	; () banked
  8817  001B54  EE22 F01A          	lfsr	2,538
  8818  001B58  5198               	movf	find_volume@fs& (0+255),w,b
  8819  001B5A  26D9               	addwf	fsr2l,f,c
  8820  001B5C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8821  001B5E  22DA               	addwfc	fsr2h,f,c
  8822  001B60  0100               	movlb	0	; () banked
  8823  001B62  EE10 F00A          	lfsr	1,10
  8824  001B66  5198               	movf	find_volume@fs& (0+255),w,b
  8825  001B68  26E1               	addwf	fsr1l,f,c
  8826  001B6A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8827  001B6C  22E2               	addwfc	fsr1h,f,c
  8828  001B6E  CFDE FFE6          	movff	postinc2,postinc1
  8829  001B72  CFDE FFE6          	movff	postinc2,postinc1
  8830  001B76  CFDE FFE6          	movff	postinc2,postinc1
  8831  001B7A  CFDE FFE6          	movff	postinc2,postinc1
  8832                           
  8833                           ; BSR set to: 0
  8834  001B7E  D000               	goto	l5425
  8835  001B80                     l5425:
  8836                           
  8837                           ;ff.c: 2348: }
  8838                           ;ff.c: 2349: }
  8839                           ;ff.c: 2352: fs->fs_type = fmt;
  8840  001B80  C098  FFD9         	movff	find_volume@fs,fsr2l
  8841  001B84  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  8842  001B88  C097  FFDF         	movff	find_volume@fmt,indf2
  8843                           
  8844                           ;ff.c: 2353: fs->id = ++Fsid;
  8845  001B8C  0100               	movlb	0	; () banked
  8846  001B8E  4BD2               	infsnz	_Fsid& (0+255),f,b
  8847  001B90  2BD3               	incf	(_Fsid+1)& (0+255),f,b
  8848  001B92  0100               	movlb	0	; () banked
  8849  001B94  EE20 F006          	lfsr	2,6
  8850  001B98  5198               	movf	find_volume@fs& (0+255),w,b
  8851  001B9A  26D9               	addwf	fsr2l,f,c
  8852  001B9C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8853  001B9E  22DA               	addwfc	fsr2h,f,c
  8854  001BA0  C0D2  FFDE         	movff	_Fsid,postinc2
  8855  001BA4  C0D3  FFDD         	movff	_Fsid+1,postdec2
  8856                           
  8857                           ; BSR set to: 0
  8858                           ;ff.c: 2361: return FR_OK;
  8859  001BA8  0E00               	movlw	0
  8860  001BAA  0012               	return	
  8861                           
  8862                           ; BSR set to: 0
  8863                           
  8864                           ; BSR set to: 0
  8865  001BAC  0012               	return		;funcret
  8866  001BAE                     __end_of_find_volume:
  8867                           	opt stack 0
  8868                           tblptru	equ	0xFF8
  8869                           tblptrh	equ	0xFF7
  8870                           tblptrl	equ	0xFF6
  8871                           tablat	equ	0xFF5
  8872                           prodh	equ	0xFF4
  8873                           prodl	equ	0xFF3
  8874                           indf0	equ	0xFEF
  8875                           postinc0	equ	0xFEE
  8876                           fsr0h	equ	0xFEA
  8877                           fsr0l	equ	0xFE9
  8878                           wreg	equ	0xFE8
  8879                           indf1	equ	0xFE7
  8880                           postinc1	equ	0xFE6
  8881                           postdec1	equ	0xFE5
  8882                           fsr1h	equ	0xFE2
  8883                           fsr1l	equ	0xFE1
  8884                           indf2	equ	0xFDF
  8885                           postinc2	equ	0xFDE
  8886                           postdec2	equ	0xFDD
  8887                           plusw2	equ	0xFDB
  8888                           fsr2h	equ	0xFDA
  8889                           fsr2l	equ	0xFD9
  8890                           status	equ	0xFD8
  8891                           
  8892 ;; *************** function _get_ldnumber *****************
  8893 ;; Defined at:
  8894 ;;		line 2114 in file "ff.c"
  8895 ;; Parameters:    Size  Location     Type
  8896 ;;  path            2    0[COMRAM] PTR PTR const unsigned c
  8897 ;;		 -> f_open@path(2), f_mount@path(2), f_mount@rp(2), 
  8898 ;; Auto vars:     Size  Location     Type
  8899 ;;  tt              2   12[COMRAM] PTR const unsigned char 
  8900 ;;		 -> STR_3(10), STR_2(1), 
  8901 ;;  i               2   10[COMRAM] unsigned int 
  8902 ;;  vol             2    8[COMRAM] int 
  8903 ;;  tp              2    6[COMRAM] PTR const unsigned char 
  8904 ;;		 -> STR_3(10), STR_2(1), 
  8905 ;; Return value:  Size  Location     Type
  8906 ;;                  2    0[COMRAM] int 
  8907 ;; Registers used:
  8908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8909 ;; Tracked objects:
  8910 ;;		On entry : 0/0
  8911 ;;		On exit  : 0/0
  8912 ;;		Unchanged: 0/0
  8913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8914 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8915 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8916 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8917 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8918 ;;Total ram usage:       14 bytes
  8919 ;; Hardware stack levels used:    1
  8920 ;; This function calls:
  8921 ;;		Nothing
  8922 ;; This function is called by:
  8923 ;;		_find_volume
  8924 ;;		_f_mount
  8925 ;; This function uses a non-reentrant model
  8926 ;;
  8927                           
  8928                           	psect	text17
  8929  005900                     __ptext17:
  8930                           	opt stack 0
  8931  005900                     _get_ldnumber:
  8932                           	opt stack 28
  8933                           
  8934                           ;ff.c: 2118: const TCHAR *tp, *tt;
  8935                           ;ff.c: 2119: UINT i;
  8936                           ;ff.c: 2120: int vol = -1;
  8937                           
  8938                           ; BSR set to: 0
  8939                           ;incstack = 0
  8940  005900  6809               	setf	get_ldnumber@vol,c
  8941  005902  680A               	setf	get_ldnumber@vol+1,c
  8942                           
  8943                           ;ff.c: 2129: if (*path) {
  8944  005904  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  8945  005908  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  8946  00590C  50DE               	movf	postinc2,w,c
  8947  00590E  10DE               	iorwf	postinc2,w,c
  8948  005910  B4D8               	btfsc	status,2,c
  8949  005912  D07C               	goto	l4975
  8950                           
  8951                           ;ff.c: 2130: for (tt = *path; (UINT)*tt >= (0 ? ' ' : '!') && *tt != ':'; tt++) ;
  8952  005914  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  8953  005918  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  8954  00591C  CFDE F00D          	movff	postinc2,get_ldnumber@tt
  8955  005920  CFDD F00E          	movff	postdec2,get_ldnumber@tt+1
  8956  005924  D003               	goto	l4943
  8957  005926                     l4941:
  8958  005926  4A0D               	infsnz	get_ldnumber@tt,f,c
  8959  005928  2A0E               	incf	get_ldnumber@tt+1,f,c
  8960  00592A  D000               	goto	l4943
  8961  00592C                     l4943:
  8962  00592C  0E00               	movlw	0
  8963  00592E  6E06               	movwf	_get_ldnumber$1015+1,c
  8964  005930  0E21               	movlw	33
  8965  005932  D003               	goto	L9
  8966  005934  0E00               	movlw	0
  8967  005936  6E06               	movwf	_get_ldnumber$1015+1,c
  8968  005938  0E20               	movlw	32
  8969  00593A                     L9:
  8970  00593A  6E05               	movwf	_get_ldnumber$1015,c
  8971  00593C  D000               	goto	l4947
  8972  00593E                     l4947:
  8973  00593E  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  8974  005942  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  8975  005946                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8976  005946  6AF8               	clrf	tblptru,c
  8977  005948                     	endif
  8978  005948                     	if	0	;tblptru may be non-zero
  8979  005948                     	endif
  8980  005948  0008               	tblrd		*
  8981  00594A  50F5               	movf	tablat,w,c
  8982  00594C  6E03               	movwf	??_get_ldnumber& (0+255),c
  8983  00594E  6A04               	clrf	(??_get_ldnumber+1)& (0+255),c
  8984  005950  5005               	movf	_get_ldnumber$1015,w,c
  8985  005952  5C03               	subwf	??_get_ldnumber,w,c
  8986  005954  5006               	movf	_get_ldnumber$1015+1,w,c
  8987  005956  5804               	subwfb	??_get_ldnumber+1,w,c
  8988  005958  A0D8               	btfss	status,0,c
  8989  00595A  D00C               	goto	l4951
  8990  00595C  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  8991  005960  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  8992  005964                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8993  005964  6AF8               	clrf	tblptru,c
  8994  005966                     	endif
  8995  005966                     	if	0	;tblptru may be non-zero
  8996  005966                     	endif
  8997  005966  0008               	tblrd		*
  8998  005968  50F5               	movf	tablat,w,c
  8999  00596A  0A3A               	xorlw	58
  9000  00596C  B4D8               	btfsc	status,2,c
  9001  00596E  D002               	goto	l4951
  9002  005970  D7DA               	goto	l4941
  9003  005972  D000               	goto	l4951
  9004  005974                     l4951:
  9005                           
  9006                           ;ff.c: 2131: if (*tt == ':') {
  9007  005974  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  9008  005978  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  9009  00597C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9010  00597C  6AF8               	clrf	tblptru,c
  9011  00597E                     	endif
  9012  00597E                     	if	0	;tblptru may be non-zero
  9013  00597E                     	endif
  9014  00597E  0008               	tblrd		*
  9015  005980  50F5               	movf	tablat,w,c
  9016  005982  0A3A               	xorlw	58
  9017  005984  A4D8               	btfss	status,2,c
  9018  005986  D03D               	goto	l4973
  9019                           
  9020                           ;ff.c: 2132: tp = *path;
  9021  005988  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  9022  00598C  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  9023  005990  CFDE F007          	movff	postinc2,get_ldnumber@tp
  9024  005994  CFDD F008          	movff	postdec2,get_ldnumber@tp+1
  9025                           
  9026                           ;ff.c: 2133: i = *tp++ - '0';
  9027  005998  C007  FFF6         	movff	get_ldnumber@tp,tblptrl
  9028  00599C  C008  FFF7         	movff	get_ldnumber@tp+1,tblptrh
  9029  0059A0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9030  0059A0  6AF8               	clrf	tblptru,c
  9031  0059A2                     	endif
  9032  0059A2                     	if	0	;tblptru may be non-zero
  9033  0059A2                     	endif
  9034  0059A2  0008               	tblrd		*
  9035  0059A4  CFF5 F003          	movff	tablat,??_get_ldnumber
  9036  0059A8  0ED0               	movlw	208
  9037  0059AA  2403               	addwf	??_get_ldnumber,w,c
  9038  0059AC  6E0B               	movwf	get_ldnumber@i,c
  9039  0059AE  6A0C               	clrf	get_ldnumber@i+1,c
  9040  0059B0  0EFF               	movlw	255
  9041  0059B2  220C               	addwfc	get_ldnumber@i+1,f,c
  9042  0059B4  4A07               	infsnz	get_ldnumber@tp,f,c
  9043  0059B6  2A08               	incf	get_ldnumber@tp+1,f,c
  9044                           
  9045                           ;ff.c: 2134: if (i < 10 && tp == tt) {
  9046  0059B8  500C               	movf	get_ldnumber@i+1,w,c
  9047  0059BA  E11E               	bnz	l4969
  9048  0059BC  0E0A               	movlw	10
  9049  0059BE  5C0B               	subwf	get_ldnumber@i,w,c
  9050  0059C0  B0D8               	btfsc	status,0,c
  9051  0059C2  D01A               	goto	l4969
  9052  0059C4  500D               	movf	get_ldnumber@tt,w,c
  9053  0059C6  1807               	xorwf	get_ldnumber@tp,w,c
  9054  0059C8  E117               	bnz	l4969
  9055  0059CA  500E               	movf	get_ldnumber@tt+1,w,c
  9056  0059CC  1808               	xorwf	get_ldnumber@tp+1,w,c
  9057  0059CE  A4D8               	btfss	status,2,c
  9058  0059D0  D013               	goto	l4969
  9059                           
  9060                           ;ff.c: 2135: if (i < 1) {
  9061  0059D2  500B               	movf	get_ldnumber@i,w,c
  9062  0059D4  100C               	iorwf	get_ldnumber@i+1,w,c
  9063  0059D6  A4D8               	btfss	status,2,c
  9064  0059D8  D00F               	goto	l4969
  9065                           
  9066                           ;ff.c: 2136: vol = (int)i;
  9067  0059DA  C00B  F009         	movff	get_ldnumber@i,get_ldnumber@vol
  9068  0059DE  C00C  F00A         	movff	get_ldnumber@i+1,get_ldnumber@vol+1
  9069                           
  9070                           ;ff.c: 2137: *path = ++tt;
  9071  0059E2  4A0D               	infsnz	get_ldnumber@tt,f,c
  9072  0059E4  2A0E               	incf	get_ldnumber@tt+1,f,c
  9073  0059E6  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  9074  0059EA  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  9075  0059EE  C00D  FFDE         	movff	get_ldnumber@tt,postinc2
  9076  0059F2  C00E  FFDD         	movff	get_ldnumber@tt+1,postdec2
  9077  0059F6  D000               	goto	l4969
  9078  0059F8                     l4969:
  9079                           
  9080                           ;ff.c: 2138: }
  9081                           ;ff.c: 2139: }
  9082                           ;ff.c: 2156: return vol;
  9083  0059F8  C009  F001         	movff	get_ldnumber@vol,?_get_ldnumber
  9084  0059FC  C00A  F002         	movff	get_ldnumber@vol+1,?_get_ldnumber+1
  9085  005A00  0012               	return	
  9086  005A02                     l4973:
  9087                           
  9088                           ;ff.c: 2157: }
  9089                           ;ff.c: 2161: vol = 0;
  9090  005A02  0E00               	movlw	0
  9091  005A04  6E0A               	movwf	get_ldnumber@vol+1,c
  9092  005A06  0E00               	movlw	0
  9093  005A08  6E09               	movwf	get_ldnumber@vol,c
  9094  005A0A  D000               	goto	l4975
  9095  005A0C                     l4975:
  9096                           
  9097                           ;ff.c: 2163: }
  9098                           ;ff.c: 2164: return vol;
  9099  005A0C  C009  F001         	movff	get_ldnumber@vol,?_get_ldnumber
  9100  005A10  C00A  F002         	movff	get_ldnumber@vol+1,?_get_ldnumber+1
  9101  005A14  0012               	return	
  9102  005A16  0012               	return		;funcret
  9103  005A18                     __end_of_get_ldnumber:
  9104                           	opt stack 0
  9105                           tblptru	equ	0xFF8
  9106                           tblptrh	equ	0xFF7
  9107                           tblptrl	equ	0xFF6
  9108                           tablat	equ	0xFF5
  9109                           prodh	equ	0xFF4
  9110                           prodl	equ	0xFF3
  9111                           indf0	equ	0xFEF
  9112                           postinc0	equ	0xFEE
  9113                           fsr0h	equ	0xFEA
  9114                           fsr0l	equ	0xFE9
  9115                           wreg	equ	0xFE8
  9116                           indf1	equ	0xFE7
  9117                           postinc1	equ	0xFE6
  9118                           postdec1	equ	0xFE5
  9119                           fsr1h	equ	0xFE2
  9120                           fsr1l	equ	0xFE1
  9121                           indf2	equ	0xFDF
  9122                           postinc2	equ	0xFDE
  9123                           postdec2	equ	0xFDD
  9124                           plusw2	equ	0xFDB
  9125                           fsr2h	equ	0xFDA
  9126                           fsr2l	equ	0xFD9
  9127                           status	equ	0xFD8
  9128                           
  9129 ;; *************** function _disk_initialize *****************
  9130 ;; Defined at:
  9131 ;;		line 306 in file "diskio.c"
  9132 ;; Parameters:    Size  Location     Type
  9133 ;;  pdrv            1    wreg     unsigned char 
  9134 ;; Auto vars:     Size  Location     Type
  9135 ;;  pdrv            1   17[COMRAM] unsigned char 
  9136 ;;  ocr             4   18[COMRAM] unsigned char [4]
  9137 ;;  tmr             2   26[COMRAM] unsigned int 
  9138 ;;  n               1   28[COMRAM] unsigned char 
  9139 ;;  ty              1   25[COMRAM] unsigned char 
  9140 ;;  cmd             1   24[COMRAM] unsigned char 
  9141 ;; Return value:  Size  Location     Type
  9142 ;;                  1    wreg      unsigned char 
  9143 ;; Registers used:
  9144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9145 ;; Tracked objects:
  9146 ;;		On entry : 0/0
  9147 ;;		On exit  : 0/0
  9148 ;;		Unchanged: 0/0
  9149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9151 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9152 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9153 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9154 ;;Total ram usage:       13 bytes
  9155 ;; Hardware stack levels used:    1
  9156 ;; Hardware stack levels required when called:    5
  9157 ;; This function calls:
  9158 ;;		_SPI1_Exchange8bit
  9159 ;;		_SPI1_Initialize
  9160 ;;		_SPI1_Open
  9161 ;;		_deselect
  9162 ;;		_send_cmd
  9163 ;; This function is called by:
  9164 ;;		_find_volume
  9165 ;; This function uses a non-reentrant model
  9166 ;;
  9167                           
  9168                           	psect	text18
  9169  004B9C                     __ptext18:
  9170                           	opt stack 0
  9171  004B9C                     _disk_initialize:
  9172                           	opt stack 23
  9173                           
  9174                           ;incstack = 0
  9175                           ;disk_initialize@pdrv stored from wreg
  9176  004B9C  6E12               	movwf	disk_initialize@pdrv,c
  9177                           
  9178                           ;diskio.c: 310: BYTE n, cmd, ty, ocr[4];
  9179                           ;diskio.c: 311: UINT tmr;
  9180                           ;diskio.c: 314: if (pdrv) return 0x01;
  9181  004B9E  5012               	movf	disk_initialize@pdrv,w,c
  9182  004BA0  B4D8               	btfsc	status,2,c
  9183  004BA2  D002               	goto	l173
  9184  004BA4  0E01               	movlw	1
  9185  004BA6  0012               	return	
  9186  004BA8                     l173:
  9187                           
  9188                           ;diskio.c: 316: if (Stat & 0x02) return Stat;
  9189  004BA8  0100               	movlb	0	; () banked
  9190  004BAA  A3F7               	btfss	_Stat& (0+255),1,b
  9191  004BAC  D003               	goto	l4571
  9192                           
  9193                           ; BSR set to: 0
  9194  004BAE  0100               	movlb	0	; () banked
  9195  004BB0  51F7               	movf	_Stat& (0+255),w,b
  9196                           
  9197                           ; BSR set to: 0
  9198  004BB2  0012               	return	
  9199  004BB4                     l4571:
  9200                           
  9201                           ; BSR set to: 0
  9202                           ;diskio.c: 318: SPI1_Initialize();
  9203  004BB4  EC7F  F033         	call	_SPI1_Initialize	;wreg free
  9204                           
  9205                           ;diskio.c: 319: for (n = 10; n; n--) SPI1_Exchange8bit(0xFF);
  9206  004BB8  0E0A               	movlw	10
  9207  004BBA  6E1D               	movwf	disk_initialize@n,c
  9208  004BBC  D005               	goto	l4579
  9209  004BBE                     l4575:
  9210  004BBE  0EFF               	movlw	255
  9211  004BC0  EC68  F033         	call	_SPI1_Exchange8bit
  9212  004BC4  061D               	decf	disk_initialize@n,f,c
  9213  004BC6  D000               	goto	l4579
  9214  004BC8                     l4579:
  9215  004BC8  501D               	movf	disk_initialize@n,w,c
  9216  004BCA  A4D8               	btfss	status,2,c
  9217  004BCC  D7F8               	goto	l4575
  9218                           
  9219                           ;diskio.c: 321: ty = 0;
  9220  004BCE  0E00               	movlw	0
  9221  004BD0  6E1A               	movwf	disk_initialize@ty,c
  9222                           
  9223                           ;diskio.c: 322: if (send_cmd((0), 0) == 1) {
  9224  004BD2  0E00               	movlw	0
  9225  004BD4  6E0B               	movwf	send_cmd@arg,c
  9226  004BD6  0E00               	movlw	0
  9227  004BD8  6E0C               	movwf	send_cmd@arg+1,c
  9228  004BDA  0E00               	movlw	0
  9229  004BDC  6E0D               	movwf	send_cmd@arg+2,c
  9230  004BDE  0E00               	movlw	0
  9231  004BE0  6E0E               	movwf	send_cmd@arg+3,c
  9232  004BE2  0E00               	movlw	0
  9233  004BE4  EC8F  F032         	call	_send_cmd
  9234  004BE8  06E8               	decf	wreg,f,c
  9235  004BEA  A4D8               	btfss	status,2,c
  9236  004BEC  D0D1               	goto	l4655
  9237                           
  9238                           ;diskio.c: 323: if (send_cmd((8), 0x1AA) == 1) {
  9239  004BEE  0EAA               	movlw	170
  9240  004BF0  6E0B               	movwf	send_cmd@arg,c
  9241  004BF2  0E01               	movlw	1
  9242  004BF4  6E0C               	movwf	send_cmd@arg+1,c
  9243  004BF6  0E00               	movlw	0
  9244  004BF8  6E0D               	movwf	send_cmd@arg+2,c
  9245  004BFA  0E00               	movlw	0
  9246  004BFC  6E0E               	movwf	send_cmd@arg+3,c
  9247  004BFE  0E08               	movlw	8
  9248  004C00  EC8F  F032         	call	_send_cmd
  9249  004C04  06E8               	decf	wreg,f,c
  9250  004C06  A4D8               	btfss	status,2,c
  9251  004C08  D073               	goto	l4635
  9252                           
  9253                           ;diskio.c: 324: for (n = 0; n < 4; n++) ocr[n] = SPI1_Exchange8bit(0xFF);
  9254  004C0A  0E00               	movlw	0
  9255  004C0C  6E1D               	movwf	disk_initialize@n,c
  9256  004C0E                     l4589:
  9257  004C0E  0E03               	movlw	3
  9258  004C10  641D               	cpfsgt	disk_initialize@n,c
  9259  004C12  D001               	goto	l4593
  9260  004C14  D00E               	goto	l4599
  9261  004C16                     l4593:
  9262  004C16  501D               	movf	disk_initialize@n,w,c
  9263  004C18  0D01               	mullw	1
  9264  004C1A  0E13               	movlw	low disk_initialize@ocr
  9265  004C1C  24F3               	addwf	prodl,w,c
  9266  004C1E  6ED9               	movwf	fsr2l,c
  9267  004C20  0E00               	movlw	high disk_initialize@ocr
  9268  004C22  20F4               	addwfc	prodh,w,c
  9269  004C24  6EDA               	movwf	fsr2h,c
  9270  004C26  0EFF               	movlw	255
  9271  004C28  EC68  F033         	call	_SPI1_Exchange8bit
  9272  004C2C  6EDF               	movwf	indf2,c
  9273  004C2E  2A1D               	incf	disk_initialize@n,f,c
  9274  004C30  D7EE               	goto	l4589
  9275  004C32                     l4599:
  9276                           
  9277                           ;diskio.c: 325: if (ocr[2] == 0x01 && ocr[3] == 0xAA) {
  9278  004C32  0415               	decf	disk_initialize@ocr+2,w,c
  9279  004C34  A4D8               	btfss	status,2,c
  9280  004C36  D0AC               	goto	l4655
  9281  004C38  0EAA               	movlw	170
  9282  004C3A  1816               	xorwf	disk_initialize@ocr+3,w,c
  9283  004C3C  A4D8               	btfss	status,2,c
  9284  004C3E  D0A8               	goto	l4655
  9285                           
  9286                           ;diskio.c: 326: for (tmr = 1000; tmr; tmr--) {
  9287  004C40  0E03               	movlw	3
  9288  004C42  6E1C               	movwf	disk_initialize@tmr+1,c
  9289  004C44  0EE8               	movlw	232
  9290  004C46  6E1B               	movwf	disk_initialize@tmr,c
  9291  004C48  D01B               	goto	l184
  9292  004C4A                     l4605:
  9293                           
  9294                           ;diskio.c: 327: if (send_cmd((0x80+41), 1UL << 30) == 0) break;
  9295  004C4A  0E00               	movlw	0
  9296  004C4C  6E0B               	movwf	send_cmd@arg,c
  9297  004C4E  0E00               	movlw	0
  9298  004C50  6E0C               	movwf	send_cmd@arg+1,c
  9299  004C52  0E00               	movlw	0
  9300  004C54  6E0D               	movwf	send_cmd@arg+2,c
  9301  004C56  0E40               	movlw	64
  9302  004C58  6E0E               	movwf	send_cmd@arg+3,c
  9303  004C5A  0EA9               	movlw	169
  9304  004C5C  EC8F  F032         	call	_send_cmd
  9305  004C60  0900               	iorlw	0
  9306  004C62  B4D8               	btfsc	status,2,c
  9307  004C64  D011               	goto	l4613
  9308  004C66  D001               	goto	l4609
  9309  004C68  D00F               	goto	l4613
  9310  004C6A                     l4609:
  9311                           
  9312                           ;diskio.c: 328: _delay((unsigned long)((1)*(16000000/4000.0)));
  9313  004C6A  0E06               	movlw	6
  9314  004C6C  6E11               	movwf	??_disk_initialize& (0+255),c
  9315  004C6E  0E30               	movlw	48
  9316  004C70                     u8937:
  9317  004C70  2EE8               	decfsz	wreg,f,c
  9318  004C72  D7FE               	goto	u8937
  9319  004C74  2E11               	decfsz	??_disk_initialize& (0+255),f,c
  9320  004C76  D7FC               	goto	u8937
  9321  004C78  D000               	nop2	
  9322  004C7A  061B               	decf	disk_initialize@tmr,f,c
  9323  004C7C  A0D8               	btfss	status,0,c
  9324  004C7E  061C               	decf	disk_initialize@tmr+1,f,c
  9325  004C80                     l184:
  9326  004C80  501B               	movf	disk_initialize@tmr,w,c
  9327  004C82  101C               	iorwf	disk_initialize@tmr+1,w,c
  9328  004C84  A4D8               	btfss	status,2,c
  9329  004C86  D7E1               	goto	l4605
  9330  004C88                     l4613:
  9331                           
  9332                           ;diskio.c: 329: }
  9333                           ;diskio.c: 330: if (tmr && send_cmd((58), 0) == 0) {
  9334  004C88  501B               	movf	disk_initialize@tmr,w,c
  9335  004C8A  101C               	iorwf	disk_initialize@tmr+1,w,c
  9336  004C8C  B4D8               	btfsc	status,2,c
  9337  004C8E  D080               	goto	l4655
  9338  004C90  0E00               	movlw	0
  9339  004C92  6E0B               	movwf	send_cmd@arg,c
  9340  004C94  0E00               	movlw	0
  9341  004C96  6E0C               	movwf	send_cmd@arg+1,c
  9342  004C98  0E00               	movlw	0
  9343  004C9A  6E0D               	movwf	send_cmd@arg+2,c
  9344  004C9C  0E00               	movlw	0
  9345  004C9E  6E0E               	movwf	send_cmd@arg+3,c
  9346  004CA0  0E3A               	movlw	58
  9347  004CA2  EC8F  F032         	call	_send_cmd
  9348  004CA6  0900               	iorlw	0
  9349  004CA8  A4D8               	btfss	status,2,c
  9350  004CAA  D072               	goto	l4655
  9351                           
  9352                           ;diskio.c: 331: for (n = 0; n < 4; n++) ocr[n] = SPI1_Exchange8bit(0xFF);
  9353  004CAC  0E00               	movlw	0
  9354  004CAE  6E1D               	movwf	disk_initialize@n,c
  9355  004CB0  D00E               	goto	l4627
  9356  004CB2  D010               	goto	l190
  9357  004CB4                     l4623:
  9358  004CB4  501D               	movf	disk_initialize@n,w,c
  9359  004CB6  0D01               	mullw	1
  9360  004CB8  0E13               	movlw	low disk_initialize@ocr
  9361  004CBA  24F3               	addwf	prodl,w,c
  9362  004CBC  6ED9               	movwf	fsr2l,c
  9363  004CBE  0E00               	movlw	high disk_initialize@ocr
  9364  004CC0  20F4               	addwfc	prodh,w,c
  9365  004CC2  6EDA               	movwf	fsr2h,c
  9366  004CC4  0EFF               	movlw	255
  9367  004CC6  EC68  F033         	call	_SPI1_Exchange8bit
  9368  004CCA  6EDF               	movwf	indf2,c
  9369  004CCC  2A1D               	incf	disk_initialize@n,f,c
  9370  004CCE                     l4627:
  9371  004CCE  0E03               	movlw	3
  9372  004CD0  641D               	cpfsgt	disk_initialize@n,c
  9373  004CD2  D7F0               	goto	l4623
  9374  004CD4                     l190:
  9375                           
  9376                           ;diskio.c: 332: ty = (ocr[0] & 0x40) ? 0x04 | 0x08 : 0x04;
  9377  004CD4  BC13               	btfsc	disk_initialize@ocr,6,c
  9378  004CD6  D004               	goto	l4631
  9379  004CD8  0E00               	movlw	0
  9380  004CDA  6E18               	movwf	_disk_initialize$500+1,c
  9381  004CDC  0E04               	movlw	4
  9382  004CDE  D003               	goto	L10
  9383  004CE0                     l4631:
  9384  004CE0  0E00               	movlw	0
  9385  004CE2  6E18               	movwf	_disk_initialize$500+1,c
  9386  004CE4  0E0C               	movlw	12
  9387  004CE6                     L10:
  9388  004CE6  6E17               	movwf	_disk_initialize$500,c
  9389  004CE8  D000               	goto	l4633
  9390  004CEA                     l4633:
  9391  004CEA  C017  F01A         	movff	_disk_initialize$500,disk_initialize@ty
  9392                           
  9393                           ;diskio.c: 333: }
  9394                           ;diskio.c: 334: }
  9395                           ;diskio.c: 335: } else {
  9396  004CEE  D050               	goto	l4655
  9397  004CF0                     l4635:
  9398                           
  9399                           ;diskio.c: 336: if (send_cmd((0x80+41), 0) <= 1) {
  9400  004CF0  0E00               	movlw	0
  9401  004CF2  6E0B               	movwf	send_cmd@arg,c
  9402  004CF4  0E00               	movlw	0
  9403  004CF6  6E0C               	movwf	send_cmd@arg+1,c
  9404  004CF8  0E00               	movlw	0
  9405  004CFA  6E0D               	movwf	send_cmd@arg+2,c
  9406  004CFC  0E00               	movlw	0
  9407  004CFE  6E0E               	movwf	send_cmd@arg+3,c
  9408  004D00  0EA9               	movlw	169
  9409  004D02  EC8F  F032         	call	_send_cmd
  9410  004D06  6E11               	movwf	??_disk_initialize& (0+255),c
  9411  004D08  0E02               	movlw	2
  9412  004D0A  6011               	cpfslt	??_disk_initialize,c
  9413  004D0C  D004               	goto	l4639
  9414                           
  9415                           ;diskio.c: 337: ty = 0x02; cmd = (0x80+41);
  9416  004D0E  0E02               	movlw	2
  9417  004D10  6E1A               	movwf	disk_initialize@ty,c
  9418  004D12  0EA9               	movlw	169
  9419  004D14  D003               	goto	L11
  9420  004D16                     l4639:
  9421                           
  9422                           ;diskio.c: 339: ty = 0x01; cmd = (1);
  9423  004D16  0E01               	movlw	1
  9424  004D18  6E1A               	movwf	disk_initialize@ty,c
  9425  004D1A  0E01               	movlw	1
  9426  004D1C                     L11:
  9427  004D1C  6E19               	movwf	disk_initialize@cmd,c
  9428                           
  9429                           ;diskio.c: 340: }
  9430                           ;diskio.c: 341: for (tmr = 1000; tmr; tmr--) {
  9431  004D1E  0E03               	movlw	3
  9432  004D20  6E1C               	movwf	disk_initialize@tmr+1,c
  9433  004D22  0EE8               	movlw	232
  9434  004D24  6E1B               	movwf	disk_initialize@tmr,c
  9435  004D26  D01B               	goto	l198
  9436  004D28                     l4641:
  9437                           
  9438                           ;diskio.c: 342: if (send_cmd(cmd, 0) == 0) break;
  9439  004D28  0E00               	movlw	0
  9440  004D2A  6E0B               	movwf	send_cmd@arg,c
  9441  004D2C  0E00               	movlw	0
  9442  004D2E  6E0C               	movwf	send_cmd@arg+1,c
  9443  004D30  0E00               	movlw	0
  9444  004D32  6E0D               	movwf	send_cmd@arg+2,c
  9445  004D34  0E00               	movlw	0
  9446  004D36  6E0E               	movwf	send_cmd@arg+3,c
  9447  004D38  5019               	movf	disk_initialize@cmd,w,c
  9448  004D3A  EC8F  F032         	call	_send_cmd
  9449  004D3E  0900               	iorlw	0
  9450  004D40  B4D8               	btfsc	status,2,c
  9451  004D42  D011               	goto	l4649
  9452  004D44  D001               	goto	l4645
  9453  004D46  D00F               	goto	l4649
  9454  004D48                     l4645:
  9455                           
  9456                           ;diskio.c: 343: _delay((unsigned long)((1)*(16000000/4000.0)));
  9457  004D48  0E06               	movlw	6
  9458  004D4A  6E11               	movwf	??_disk_initialize& (0+255),c
  9459  004D4C  0E30               	movlw	48
  9460  004D4E                     u8947:
  9461  004D4E  2EE8               	decfsz	wreg,f,c
  9462  004D50  D7FE               	goto	u8947
  9463  004D52  2E11               	decfsz	??_disk_initialize& (0+255),f,c
  9464  004D54  D7FC               	goto	u8947
  9465  004D56  D000               	nop2	
  9466  004D58  061B               	decf	disk_initialize@tmr,f,c
  9467  004D5A  A0D8               	btfss	status,0,c
  9468  004D5C  061C               	decf	disk_initialize@tmr+1,f,c
  9469  004D5E                     l198:
  9470  004D5E  501B               	movf	disk_initialize@tmr,w,c
  9471  004D60  101C               	iorwf	disk_initialize@tmr+1,w,c
  9472  004D62  A4D8               	btfss	status,2,c
  9473  004D64  D7E1               	goto	l4641
  9474  004D66                     l4649:
  9475                           
  9476                           ;diskio.c: 344: }
  9477                           ;diskio.c: 345: if (!tmr || send_cmd((16), 512) != 0)
  9478  004D66  501B               	movf	disk_initialize@tmr,w,c
  9479  004D68  101C               	iorwf	disk_initialize@tmr+1,w,c
  9480  004D6A  B4D8               	btfsc	status,2,c
  9481  004D6C  D00E               	goto	l4653
  9482  004D6E  0E00               	movlw	0
  9483  004D70  6E0B               	movwf	send_cmd@arg,c
  9484  004D72  0E02               	movlw	2
  9485  004D74  6E0C               	movwf	send_cmd@arg+1,c
  9486  004D76  0E00               	movlw	0
  9487  004D78  6E0D               	movwf	send_cmd@arg+2,c
  9488  004D7A  0E00               	movlw	0
  9489  004D7C  6E0E               	movwf	send_cmd@arg+3,c
  9490  004D7E  0E10               	movlw	16
  9491  004D80  EC8F  F032         	call	_send_cmd
  9492  004D84  0900               	iorlw	0
  9493  004D86  B4D8               	btfsc	status,2,c
  9494  004D88  D003               	goto	l4655
  9495  004D8A                     l4653:
  9496                           
  9497                           ;diskio.c: 346: ty = 0;
  9498  004D8A  0E00               	movlw	0
  9499  004D8C  6E1A               	movwf	disk_initialize@ty,c
  9500  004D8E  D000               	goto	l4655
  9501  004D90                     l4655:
  9502                           
  9503                           ;diskio.c: 347: }
  9504                           ;diskio.c: 348: }
  9505                           ;diskio.c: 349: CardType = ty;
  9506  004D90  C01A  F0D6         	movff	disk_initialize@ty,_CardType
  9507                           
  9508                           ;diskio.c: 350: deselect();
  9509  004D94  EC8D  F033         	call	_deselect	;wreg free
  9510                           
  9511                           ;diskio.c: 352: if (ty) {
  9512  004D98  501A               	movf	disk_initialize@ty,w,c
  9513  004D9A  B4D8               	btfsc	status,2,c
  9514  004D9C  D005               	goto	l4665
  9515                           
  9516                           ;diskio.c: 353: Stat &= ~0x01;
  9517  004D9E  0100               	movlb	0	; () banked
  9518  004DA0  91F7               	bcf	_Stat& (0+255),0,b
  9519                           
  9520                           ; BSR set to: 0
  9521                           ;diskio.c: 354: SPI1_Open();
  9522  004DA2  EC71  F033         	call	_SPI1_Open	;wreg free
  9523  004DA6  D000               	goto	l4665
  9524  004DA8                     l4665:
  9525                           
  9526                           ;diskio.c: 355: }
  9527                           ;diskio.c: 357: return Stat;
  9528  004DA8  0100               	movlb	0	; () banked
  9529  004DAA  51F7               	movf	_Stat& (0+255),w,b
  9530  004DAC  0012               	return	
  9531                           
  9532                           ; BSR set to: 0
  9533  004DAE  0012               	return		;funcret
  9534  004DB0                     __end_of_disk_initialize:
  9535                           	opt stack 0
  9536                           tblptru	equ	0xFF8
  9537                           tblptrh	equ	0xFF7
  9538                           tblptrl	equ	0xFF6
  9539                           tablat	equ	0xFF5
  9540                           prodh	equ	0xFF4
  9541                           prodl	equ	0xFF3
  9542                           indf0	equ	0xFEF
  9543                           postinc0	equ	0xFEE
  9544                           fsr0h	equ	0xFEA
  9545                           fsr0l	equ	0xFE9
  9546                           wreg	equ	0xFE8
  9547                           indf1	equ	0xFE7
  9548                           postinc1	equ	0xFE6
  9549                           postdec1	equ	0xFE5
  9550                           fsr1h	equ	0xFE2
  9551                           fsr1l	equ	0xFE1
  9552                           indf2	equ	0xFDF
  9553                           postinc2	equ	0xFDE
  9554                           postdec2	equ	0xFDD
  9555                           plusw2	equ	0xFDB
  9556                           fsr2h	equ	0xFDA
  9557                           fsr2l	equ	0xFD9
  9558                           status	equ	0xFD8
  9559                           
  9560 ;; *************** function _SPI1_Open *****************
  9561 ;; Defined at:
  9562 ;;		line 77 in file "mcc_generated_files/spi1.c"
  9563 ;; Parameters:    Size  Location     Type
  9564 ;;		None
  9565 ;; Auto vars:     Size  Location     Type
  9566 ;;		None
  9567 ;; Return value:  Size  Location     Type
  9568 ;;		None               void
  9569 ;; Registers used:
  9570 ;;		wreg, status,2
  9571 ;; Tracked objects:
  9572 ;;		On entry : 0/0
  9573 ;;		On exit  : 0/0
  9574 ;;		Unchanged: 0/0
  9575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9580 ;;Total ram usage:        0 bytes
  9581 ;; Hardware stack levels used:    1
  9582 ;; This function calls:
  9583 ;;		Nothing
  9584 ;; This function is called by:
  9585 ;;		_disk_initialize
  9586 ;; This function uses a non-reentrant model
  9587 ;;
  9588                           
  9589                           	psect	text19
  9590  0066E2                     __ptext19:
  9591                           	opt stack 0
  9592  0066E2                     _SPI1_Open:
  9593                           	opt stack 27
  9594                           
  9595                           ;spi1.c: 81: SSP1STAT = 0x40;
  9596                           
  9597                           ;incstack = 0
  9598  0066E2  0E40               	movlw	64
  9599  0066E4  6EC7               	movwf	4039,c	;volatile
  9600                           
  9601                           ;spi1.c: 84: SSP1CON1 = 0x20;
  9602  0066E6  0E20               	movlw	32
  9603  0066E8  6EC6               	movwf	4038,c	;volatile
  9604                           
  9605                           ;spi1.c: 87: SSP1ADD = 0x00;
  9606  0066EA  0E00               	movlw	0
  9607  0066EC  6EC8               	movwf	4040,c	;volatile
  9608  0066EE  0012               	return		;funcret
  9609  0066F0                     __end_of_SPI1_Open:
  9610                           	opt stack 0
  9611                           tblptru	equ	0xFF8
  9612                           tblptrh	equ	0xFF7
  9613                           tblptrl	equ	0xFF6
  9614                           tablat	equ	0xFF5
  9615                           prodh	equ	0xFF4
  9616                           prodl	equ	0xFF3
  9617                           indf0	equ	0xFEF
  9618                           postinc0	equ	0xFEE
  9619                           fsr0h	equ	0xFEA
  9620                           fsr0l	equ	0xFE9
  9621                           wreg	equ	0xFE8
  9622                           indf1	equ	0xFE7
  9623                           postinc1	equ	0xFE6
  9624                           postdec1	equ	0xFE5
  9625                           fsr1h	equ	0xFE2
  9626                           fsr1l	equ	0xFE1
  9627                           indf2	equ	0xFDF
  9628                           postinc2	equ	0xFDE
  9629                           postdec2	equ	0xFDD
  9630                           plusw2	equ	0xFDB
  9631                           fsr2h	equ	0xFDA
  9632                           fsr2l	equ	0xFD9
  9633                           status	equ	0xFD8
  9634                           
  9635 ;; *************** function _check_fs *****************
  9636 ;; Defined at:
  9637 ;;		line 2175 in file "ff.c"
  9638 ;; Parameters:    Size  Location     Type
  9639 ;;  fs              2   58[COMRAM] PTR struct .
  9640 ;;		 -> FatFs(558), NULL(0), 
  9641 ;;  sect            4   60[COMRAM] unsigned long 
  9642 ;; Auto vars:     Size  Location     Type
  9643 ;;		None
  9644 ;; Return value:  Size  Location     Type
  9645 ;;                  1    wreg      unsigned char 
  9646 ;; Registers used:
  9647 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9648 ;; Tracked objects:
  9649 ;;		On entry : 0/0
  9650 ;;		On exit  : 0/0
  9651 ;;		Unchanged: 0/0
  9652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9653 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9655 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9656 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9657 ;;Total ram usage:       10 bytes
  9658 ;; Hardware stack levels used:    1
  9659 ;; Hardware stack levels required when called:    8
  9660 ;; This function calls:
  9661 ;;		_move_window
  9662 ;; This function is called by:
  9663 ;;		_find_volume
  9664 ;; This function uses a non-reentrant model
  9665 ;;
  9666                           
  9667                           	psect	text20
  9668  005A18                     __ptext20:
  9669                           	opt stack 0
  9670  005A18                     _check_fs:
  9671                           	opt stack 20
  9672                           
  9673                           ;ff.c: 2180: fs->wflag = 0; fs->winsect = 0xFFFFFFFF;
  9674                           
  9675                           ;incstack = 0
  9676  005A18  EE20 F004          	lfsr	2,4
  9677  005A1C  503B               	movf	check_fs@fs,w,c
  9678  005A1E  26D9               	addwf	fsr2l,f,c
  9679  005A20  503C               	movf	check_fs@fs+1,w,c
  9680  005A22  22DA               	addwfc	fsr2h,f,c
  9681  005A24  0E00               	movlw	0
  9682  005A26  6EDF               	movwf	indf2,c
  9683  005A28  EE20 F02A          	lfsr	2,42
  9684  005A2C  503B               	movf	check_fs@fs,w,c
  9685  005A2E  26D9               	addwf	fsr2l,f,c
  9686  005A30  503C               	movf	check_fs@fs+1,w,c
  9687  005A32  22DA               	addwfc	fsr2h,f,c
  9688  005A34  0EFF               	movlw	255
  9689  005A36  6EDE               	movwf	postinc2,c
  9690  005A38  0EFF               	movlw	255
  9691  005A3A  6EDE               	movwf	postinc2,c
  9692  005A3C  0EFF               	movlw	255
  9693  005A3E  6EDE               	movwf	postinc2,c
  9694  005A40  0EFF               	movlw	255
  9695  005A42  6EDD               	movwf	postdec2,c
  9696                           
  9697                           ;ff.c: 2181: if (move_window(fs, sect) != FR_OK)
  9698  005A44  C03B  F030         	movff	check_fs@fs,move_window@fs
  9699  005A48  C03C  F031         	movff	check_fs@fs+1,move_window@fs+1
  9700  005A4C  C03D  F032         	movff	check_fs@sect,move_window@sector
  9701  005A50  C03E  F033         	movff	check_fs@sect+1,move_window@sector+1
  9702  005A54  C03F  F034         	movff	check_fs@sect+2,move_window@sector+2
  9703  005A58  C040  F035         	movff	check_fs@sect+3,move_window@sector+3
  9704  005A5C  ECE9  F02F         	call	_move_window	;wreg free
  9705  005A60  0900               	iorlw	0
  9706  005A62  B4D8               	btfsc	status,2,c
  9707  005A64  D002               	goto	l4987
  9708                           
  9709                           ;ff.c: 2182: return 3;
  9710  005A66  0E03               	movlw	3
  9711  005A68  0012               	return	
  9712  005A6A                     l4987:
  9713                           
  9714                           ;ff.c: 2184: if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
  9715  005A6A  EE22 F02C          	lfsr	2,556
  9716  005A6E  503B               	movf	check_fs@fs,w,c
  9717  005A70  26D9               	addwf	fsr2l,f,c
  9718  005A72  503C               	movf	check_fs@fs+1,w,c
  9719  005A74  22DA               	addwfc	fsr2h,f,c
  9720  005A76  0E55               	movlw	85
  9721  005A78  18DE               	xorwf	postinc2,w,c
  9722  005A7A  E104               	bnz	u7000
  9723  005A7C  0EAA               	movlw	170
  9724  005A7E  18DE               	xorwf	postinc2,w,c
  9725  005A80  B4D8               	btfsc	status,2,c
  9726  005A82  D002               	goto	l4993
  9727  005A84                     u7000:
  9728                           
  9729                           ;ff.c: 2185: return 2;
  9730  005A84  0E02               	movlw	2
  9731  005A86  0012               	return	
  9732  005A88                     l4993:
  9733                           
  9734                           ;ff.c: 2187: if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[54])) & 0xFFFFFF) == 0x544146)
  9735  005A88  EE20 F064          	lfsr	2,100
  9736  005A8C  503B               	movf	check_fs@fs,w,c
  9737  005A8E  26D9               	addwf	fsr2l,f,c
  9738  005A90  503C               	movf	check_fs@fs+1,w,c
  9739  005A92  22DA               	addwfc	fsr2h,f,c
  9740  005A94  0EFF               	movlw	255
  9741  005A96  14DE               	andwf	postinc2,w,c
  9742  005A98  6E41               	movwf	??_check_fs& (0+255),c
  9743  005A9A  0EFF               	movlw	255
  9744  005A9C  14DE               	andwf	postinc2,w,c
  9745  005A9E  6E42               	movwf	(??_check_fs+1)& (0+255),c
  9746  005AA0  0EFF               	movlw	255
  9747  005AA2  14DE               	andwf	postinc2,w,c
  9748  005AA4  6E43               	movwf	(??_check_fs+2)& (0+255),c
  9749  005AA6  0E00               	movlw	0
  9750  005AA8  14DE               	andwf	postinc2,w,c
  9751  005AAA  6E44               	movwf	(??_check_fs+3)& (0+255),c
  9752  005AAC  0E46               	movlw	70
  9753  005AAE  1841               	xorwf	??_check_fs,w,c
  9754  005AB0  E10A               	bnz	l4999
  9755  005AB2  0E41               	movlw	65
  9756  005AB4  1842               	xorwf	??_check_fs+1,w,c
  9757  005AB6  E107               	bnz	l4999
  9758  005AB8  0E54               	movlw	84
  9759  005ABA  1843               	xorwf	??_check_fs+2,w,c
  9760  005ABC  1044               	iorwf	??_check_fs+3,w,c
  9761  005ABE  A4D8               	btfss	status,2,c
  9762  005AC0  D002               	goto	l4999
  9763                           
  9764                           ;ff.c: 2188: return 0;
  9765  005AC2  0E00               	movlw	0
  9766  005AC4  0012               	return	
  9767  005AC6                     l4999:
  9768                           
  9769                           ;ff.c: 2189: if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[82])) & 0xFFFFFF) == 0x544146)
  9770  005AC6  EE20 F080          	lfsr	2,128
  9771  005ACA  503B               	movf	check_fs@fs,w,c
  9772  005ACC  26D9               	addwf	fsr2l,f,c
  9773  005ACE  503C               	movf	check_fs@fs+1,w,c
  9774  005AD0  22DA               	addwfc	fsr2h,f,c
  9775  005AD2  0EFF               	movlw	255
  9776  005AD4  14DE               	andwf	postinc2,w,c
  9777  005AD6  6E41               	movwf	??_check_fs& (0+255),c
  9778  005AD8  0EFF               	movlw	255
  9779  005ADA  14DE               	andwf	postinc2,w,c
  9780  005ADC  6E42               	movwf	(??_check_fs+1)& (0+255),c
  9781  005ADE  0EFF               	movlw	255
  9782  005AE0  14DE               	andwf	postinc2,w,c
  9783  005AE2  6E43               	movwf	(??_check_fs+2)& (0+255),c
  9784  005AE4  0E00               	movlw	0
  9785  005AE6  14DE               	andwf	postinc2,w,c
  9786  005AE8  6E44               	movwf	(??_check_fs+3)& (0+255),c
  9787  005AEA  0E46               	movlw	70
  9788  005AEC  1841               	xorwf	??_check_fs,w,c
  9789  005AEE  E10A               	bnz	l5005
  9790  005AF0  0E41               	movlw	65
  9791  005AF2  1842               	xorwf	??_check_fs+1,w,c
  9792  005AF4  E107               	bnz	l5005
  9793  005AF6  0E54               	movlw	84
  9794  005AF8  1843               	xorwf	??_check_fs+2,w,c
  9795  005AFA  1044               	iorwf	??_check_fs+3,w,c
  9796  005AFC  A4D8               	btfss	status,2,c
  9797  005AFE  D002               	goto	l5005
  9798                           
  9799                           ;ff.c: 2190: return 0;
  9800  005B00  0E00               	movlw	0
  9801  005B02  0012               	return	
  9802  005B04                     l5005:
  9803                           
  9804                           ;ff.c: 2192: return 1;
  9805  005B04  0E01               	movlw	1
  9806  005B06  0012               	return	
  9807  005B08  0012               	return		;funcret
  9808  005B0A                     __end_of_check_fs:
  9809                           	opt stack 0
  9810                           tblptru	equ	0xFF8
  9811                           tblptrh	equ	0xFF7
  9812                           tblptrl	equ	0xFF6
  9813                           tablat	equ	0xFF5
  9814                           prodh	equ	0xFF4
  9815                           prodl	equ	0xFF3
  9816                           indf0	equ	0xFEF
  9817                           postinc0	equ	0xFEE
  9818                           fsr0h	equ	0xFEA
  9819                           fsr0l	equ	0xFE9
  9820                           wreg	equ	0xFE8
  9821                           indf1	equ	0xFE7
  9822                           postinc1	equ	0xFE6
  9823                           postdec1	equ	0xFE5
  9824                           fsr1h	equ	0xFE2
  9825                           fsr1l	equ	0xFE1
  9826                           indf2	equ	0xFDF
  9827                           postinc2	equ	0xFDE
  9828                           postdec2	equ	0xFDD
  9829                           plusw2	equ	0xFDB
  9830                           fsr2h	equ	0xFDA
  9831                           fsr2l	equ	0xFD9
  9832                           status	equ	0xFD8
  9833                           
  9834 ;; *************** function _f_lseek *****************
  9835 ;; Defined at:
  9836 ;;		line 3033 in file "ff.c"
  9837 ;; Parameters:    Size  Location     Type
  9838 ;;  fp              2   13[BANK0 ] PTR struct .
  9839 ;;		 -> Fil(32), 
  9840 ;;  ofs             4   15[BANK0 ] unsigned long 
  9841 ;; Auto vars:     Size  Location     Type
  9842 ;;  clst            4   44[BANK0 ] unsigned long 
  9843 ;;  bcs             4   40[BANK0 ] unsigned long 
  9844 ;;  nsect           4   36[BANK0 ] unsigned long 
  9845 ;;  ifptr           4   31[BANK0 ] unsigned long 
  9846 ;;  res             1   35[BANK0 ] enum E88
  9847 ;; Return value:  Size  Location     Type
  9848 ;;                  1    wreg      enum E88
  9849 ;; Registers used:
  9850 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9851 ;; Tracked objects:
  9852 ;;		On entry : 0/0
  9853 ;;		On exit  : 0/0
  9854 ;;		Unchanged: 0/0
  9855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9856 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9857 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9858 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9859 ;;      Totals:         0      35       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9860 ;;Total ram usage:       35 bytes
  9861 ;; Hardware stack levels used:    1
  9862 ;; Hardware stack levels required when called:   10
  9863 ;; This function calls:
  9864 ;;		___lldiv
  9865 ;;		_clust2sect
  9866 ;;		_create_chain
  9867 ;;		_get_fat
  9868 ;;		_validate
  9869 ;; This function is called by:
  9870 ;;		_main
  9871 ;; This function uses a non-reentrant model
  9872 ;;
  9873                           
  9874                           	psect	text21
  9875  0024E2                     __ptext21:
  9876                           	opt stack 0
  9877  0024E2                     _f_lseek:
  9878                           	opt stack 20
  9879                           
  9880                           ;ff.c: 3038: FRESULT res;
  9881                           ;ff.c: 3039: DWORD clst, bcs, nsect, ifptr;
  9882                           ;ff.c: 3045: res = validate(fp);
  9883                           
  9884                           ;incstack = 0
  9885  0024E2  C06D  F002         	movff	f_lseek@fp,validate@obj
  9886  0024E6  C06E  F003         	movff	f_lseek@fp+1,validate@obj+1
  9887  0024EA  EC3F  F030         	call	_validate	;wreg free
  9888  0024EE  0100               	movlb	0	; () banked
  9889  0024F0  6F83               	movwf	f_lseek@res& (0+255),b
  9890                           
  9891                           ; BSR set to: 0
  9892                           ;ff.c: 3046: if (res != FR_OK) return res;
  9893  0024F2  0100               	movlb	0	; () banked
  9894  0024F4  5183               	movf	f_lseek@res& (0+255),w,b
  9895  0024F6  0100               	movlb	0	; () banked
  9896  0024F8  B4D8               	btfsc	status,2,c
  9897  0024FA  D003               	goto	l5775
  9898                           
  9899                           ; BSR set to: 0
  9900  0024FC  0100               	movlb	0	; () banked
  9901  0024FE  5183               	movf	f_lseek@res& (0+255),w,b
  9902                           
  9903                           ; BSR set to: 0
  9904  002500  0012               	return	
  9905  002502                     l5775:
  9906                           
  9907                           ; BSR set to: 0
  9908                           ;ff.c: 3047: if (fp->err)
  9909  002502  0100               	movlb	0	; () banked
  9910  002504  EE20 F005          	lfsr	2,5
  9911  002508  516D               	movf	f_lseek@fp& (0+255),w,b
  9912  00250A  26D9               	addwf	fsr2l,f,c
  9913  00250C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9914  00250E  22DA               	addwfc	fsr2h,f,c
  9915  002510  50DF               	movf	indf2,w,c
  9916  002512  B4D8               	btfsc	status,2,c
  9917  002514  D009               	goto	l5781
  9918                           
  9919                           ; BSR set to: 0
  9920                           ;ff.c: 3048: return (FRESULT)fp->err;
  9921  002516  0100               	movlb	0	; () banked
  9922  002518  EE20 F005          	lfsr	2,5
  9923  00251C  516D               	movf	f_lseek@fp& (0+255),w,b
  9924  00251E  26D9               	addwf	fsr2l,f,c
  9925  002520  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9926  002522  22DA               	addwfc	fsr2h,f,c
  9927  002524  50DF               	movf	indf2,w,c
  9928                           
  9929                           ; BSR set to: 0
  9930  002526  0012               	return	
  9931  002528                     l5781:
  9932                           
  9933                           ; BSR set to: 0
  9934                           ;ff.c: 3106: {
  9935                           ;ff.c: 3107: if (ofs > fp->fsize
  9936                           ;ff.c: 3109: && !(fp->flag & 0x02)
  9937                           ;ff.c: 3111: ) ofs = fp->fsize;
  9938  002528  0100               	movlb	0	; () banked
  9939  00252A  EE20 F00A          	lfsr	2,10
  9940  00252E  516D               	movf	f_lseek@fp& (0+255),w,b
  9941  002530  26D9               	addwf	fsr2l,f,c
  9942  002532  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9943  002534  22DA               	addwfc	fsr2h,f,c
  9944  002536  0100               	movlb	0	; () banked
  9945  002538  516F               	movf	f_lseek@ofs& (0+255),w,b
  9946  00253A  5CDE               	subwf	postinc2,w,c
  9947  00253C  0100               	movlb	0	; () banked
  9948  00253E  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  9949  002540  58DE               	subwfb	postinc2,w,c
  9950  002542  0100               	movlb	0	; () banked
  9951  002544  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  9952  002546  58DE               	subwfb	postinc2,w,c
  9953  002548  0100               	movlb	0	; () banked
  9954  00254A  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  9955  00254C  58DE               	subwfb	postinc2,w,c
  9956  00254E  B0D8               	btfsc	status,0,c
  9957  002550  D019               	goto	l770
  9958                           
  9959                           ; BSR set to: 0
  9960  002552  0100               	movlb	0	; () banked
  9961  002554  EE20 F004          	lfsr	2,4
  9962  002558  516D               	movf	f_lseek@fp& (0+255),w,b
  9963  00255A  26D9               	addwf	fsr2l,f,c
  9964  00255C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9965  00255E  22DA               	addwfc	fsr2h,f,c
  9966  002560  0100               	movlb	0	; () banked
  9967  002562  B2DF               	btfsc	indf2,1,c
  9968  002564  D00F               	goto	l770
  9969                           
  9970                           ; BSR set to: 0
  9971  002566  0100               	movlb	0	; () banked
  9972  002568  EE20 F00A          	lfsr	2,10
  9973  00256C  516D               	movf	f_lseek@fp& (0+255),w,b
  9974  00256E  26D9               	addwf	fsr2l,f,c
  9975  002570  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9976  002572  22DA               	addwfc	fsr2h,f,c
  9977  002574  CFDE F06F          	movff	postinc2,f_lseek@ofs
  9978  002578  CFDE F070          	movff	postinc2,f_lseek@ofs+1
  9979  00257C  CFDE F071          	movff	postinc2,f_lseek@ofs+2
  9980  002580  CFDE F072          	movff	postinc2,f_lseek@ofs+3
  9981  002584                     l770:
  9982                           
  9983                           ; BSR set to: 0
  9984                           ;ff.c: 3113: ifptr = fp->fptr;
  9985  002584  0100               	movlb	0	; () banked
  9986  002586  EE20 F006          	lfsr	2,6
  9987  00258A  516D               	movf	f_lseek@fp& (0+255),w,b
  9988  00258C  26D9               	addwf	fsr2l,f,c
  9989  00258E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9990  002590  22DA               	addwfc	fsr2h,f,c
  9991  002592  CFDE F07F          	movff	postinc2,f_lseek@ifptr
  9992  002596  CFDE F080          	movff	postinc2,f_lseek@ifptr+1
  9993  00259A  CFDE F081          	movff	postinc2,f_lseek@ifptr+2
  9994  00259E  CFDE F082          	movff	postinc2,f_lseek@ifptr+3
  9995                           
  9996                           ;ff.c: 3114: fp->fptr = nsect = 0;
  9997  0025A2  0E00               	movlw	0
  9998  0025A4  0100               	movlb	0	; () banked
  9999  0025A6  6F84               	movwf	f_lseek@nsect& (0+255),b
 10000  0025A8  0E00               	movlw	0
 10001  0025AA  6F85               	movwf	(f_lseek@nsect+1)& (0+255),b
 10002  0025AC  0E00               	movlw	0
 10003  0025AE  6F86               	movwf	(f_lseek@nsect+2)& (0+255),b
 10004  0025B0  0E00               	movlw	0
 10005  0025B2  6F87               	movwf	(f_lseek@nsect+3)& (0+255),b
 10006  0025B4  0100               	movlb	0	; () banked
 10007  0025B6  EE20 F006          	lfsr	2,6
 10008  0025BA  516D               	movf	f_lseek@fp& (0+255),w,b
 10009  0025BC  26D9               	addwf	fsr2l,f,c
 10010  0025BE  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10011  0025C0  22DA               	addwfc	fsr2h,f,c
 10012  0025C2  C084  FFDE         	movff	f_lseek@nsect,postinc2
 10013  0025C6  C085  FFDE         	movff	f_lseek@nsect+1,postinc2
 10014  0025CA  C086  FFDE         	movff	f_lseek@nsect+2,postinc2
 10015  0025CE  C087  FFDE         	movff	f_lseek@nsect+3,postinc2
 10016                           
 10017                           ; BSR set to: 0
 10018                           ;ff.c: 3115: if (ofs) {
 10019  0025D2  0100               	movlb	0	; () banked
 10020  0025D4  516F               	movf	f_lseek@ofs& (0+255),w,b
 10021  0025D6  0100               	movlb	0	; () banked
 10022  0025D8  1170               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
 10023  0025DA  0100               	movlb	0	; () banked
 10024  0025DC  1171               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
 10025  0025DE  0100               	movlb	0	; () banked
 10026  0025E0  1172               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
 10027  0025E2  B4D8               	btfsc	status,2,c
 10028  0025E4  D2D6               	goto	l5875
 10029                           
 10030                           ; BSR set to: 0
 10031                           ;ff.c: 3116: bcs = (DWORD)fp->fs->csize * ((UINT)512);
 10032  0025E6  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10033  0025EA  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10034  0025EE  EE10 F002          	lfsr	1,2
 10035  0025F2  50DE               	movf	postinc2,w,c
 10036  0025F4  26E1               	addwf	fsr1l,f,c
 10037  0025F6  50DD               	movf	postdec2,w,c
 10038  0025F8  22E2               	addwfc	fsr1h,f,c
 10039  0025FA  50E7               	movf	indf1,w,c
 10040  0025FC  0100               	movlb	0	; () banked
 10041  0025FE  6F73               	movwf	??_f_lseek& (0+255),b
 10042  002600  C073  F074         	movff	??_f_lseek,??_f_lseek+1
 10043  002604  0100               	movlb	0	; () banked
 10044  002606  6B75               	clrf	(??_f_lseek+2)& (0+255),b
 10045  002608  6B76               	clrf	(??_f_lseek+3)& (0+255),b
 10046  00260A  6B77               	clrf	(??_f_lseek+4)& (0+255),b
 10047  00260C  0E09               	movlw	9
 10048  00260E                     u8425:
 10049  00260E  90D8               	bcf	status,0,c
 10050  002610  0100               	movlb	0	; () banked
 10051  002612  3774               	rlcf	(??_f_lseek+1)& (0+255),f,b
 10052  002614  3775               	rlcf	(??_f_lseek+2)& (0+255),f,b
 10053  002616  3776               	rlcf	(??_f_lseek+3)& (0+255),f,b
 10054  002618  3777               	rlcf	(??_f_lseek+4)& (0+255),f,b
 10055  00261A  2EE8               	decfsz	wreg,f,c
 10056  00261C  D7F8               	goto	u8425
 10057  00261E  C074  F088         	movff	??_f_lseek+1,f_lseek@bcs
 10058  002622  C075  F089         	movff	??_f_lseek+2,f_lseek@bcs+1
 10059  002626  C076  F08A         	movff	??_f_lseek+3,f_lseek@bcs+2
 10060  00262A  C077  F08B         	movff	??_f_lseek+4,f_lseek@bcs+3
 10061                           
 10062                           ; BSR set to: 0
 10063                           ;ff.c: 3117: if (ifptr > 0 &&
 10064                           ;ff.c: 3118: (ofs - 1) / bcs >= (ifptr - 1) / bcs) {
 10065  00262E  0100               	movlb	0	; () banked
 10066  002630  517F               	movf	f_lseek@ifptr& (0+255),w,b
 10067  002632  0100               	movlb	0	; () banked
 10068  002634  1180               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
 10069  002636  0100               	movlb	0	; () banked
 10070  002638  1181               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
 10071  00263A  0100               	movlb	0	; () banked
 10072  00263C  1182               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
 10073  00263E  B4D8               	btfsc	status,2,c
 10074  002640  D0C1               	goto	l5797
 10075                           
 10076                           ; BSR set to: 0
 10077  002642  0EFF               	movlw	255
 10078  002644  0100               	movlb	0	; () banked
 10079  002646  256F               	addwf	f_lseek@ofs& (0+255),w,b
 10080  002648  6E01               	movwf	___lldiv@dividend,c
 10081  00264A  0EFF               	movlw	255
 10082  00264C  0100               	movlb	0	; () banked
 10083  00264E  2170               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
 10084  002650  6E02               	movwf	___lldiv@dividend+1,c
 10085  002652  0EFF               	movlw	255
 10086  002654  0100               	movlb	0	; () banked
 10087  002656  2171               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
 10088  002658  6E03               	movwf	___lldiv@dividend+2,c
 10089  00265A  0EFF               	movlw	255
 10090  00265C  0100               	movlb	0	; () banked
 10091  00265E  2172               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
 10092  002660  6E04               	movwf	___lldiv@dividend+3,c
 10093  002662  C088  F005         	movff	f_lseek@bcs,___lldiv@divisor
 10094  002666  C089  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
 10095  00266A  C08A  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
 10096  00266E  C08B  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
 10097  002672  EC19  F031         	call	___lldiv	;wreg free
 10098  002676  C001  F073         	movff	?___lldiv,??_f_lseek
 10099  00267A  C002  F074         	movff	?___lldiv+1,??_f_lseek+1
 10100  00267E  C003  F075         	movff	?___lldiv+2,??_f_lseek+2
 10101  002682  C004  F076         	movff	?___lldiv+3,??_f_lseek+3
 10102  002686  0EFF               	movlw	255
 10103  002688  0100               	movlb	0	; () banked
 10104  00268A  257F               	addwf	f_lseek@ifptr& (0+255),w,b
 10105  00268C  6E01               	movwf	___lldiv@dividend,c
 10106  00268E  0EFF               	movlw	255
 10107  002690  0100               	movlb	0	; () banked
 10108  002692  2180               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 10109  002694  6E02               	movwf	___lldiv@dividend+1,c
 10110  002696  0EFF               	movlw	255
 10111  002698  0100               	movlb	0	; () banked
 10112  00269A  2181               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 10113  00269C  6E03               	movwf	___lldiv@dividend+2,c
 10114  00269E  0EFF               	movlw	255
 10115  0026A0  0100               	movlb	0	; () banked
 10116  0026A2  2182               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 10117  0026A4  6E04               	movwf	___lldiv@dividend+3,c
 10118  0026A6  C088  F005         	movff	f_lseek@bcs,___lldiv@divisor
 10119  0026AA  C089  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
 10120  0026AE  C08A  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
 10121  0026B2  C08B  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
 10122  0026B6  EC19  F031         	call	___lldiv	;wreg free
 10123  0026BA  5001               	movf	?___lldiv,w,c
 10124  0026BC  0100               	movlb	0	; () banked
 10125  0026BE  5D73               	subwf	??_f_lseek& (0+255),w,b
 10126  0026C0  5002               	movf	?___lldiv+1,w,c
 10127  0026C2  0100               	movlb	0	; () banked
 10128  0026C4  5974               	subwfb	(??_f_lseek+1)& (0+255),w,b
 10129  0026C6  5003               	movf	?___lldiv+2,w,c
 10130  0026C8  0100               	movlb	0	; () banked
 10131  0026CA  5975               	subwfb	(??_f_lseek+2)& (0+255),w,b
 10132  0026CC  5004               	movf	?___lldiv+3,w,c
 10133  0026CE  0100               	movlb	0	; () banked
 10134  0026D0  5976               	subwfb	(??_f_lseek+3)& (0+255),w,b
 10135  0026D2  A0D8               	btfss	status,0,c
 10136  0026D4  D077               	goto	l5797
 10137                           
 10138                           ; BSR set to: 0
 10139                           ;ff.c: 3119: fp->fptr = (ifptr - 1) & ~(bcs - 1);
 10140  0026D6  0EFF               	movlw	255
 10141  0026D8  0100               	movlb	0	; () banked
 10142  0026DA  2588               	addwf	f_lseek@bcs& (0+255),w,b
 10143  0026DC  0100               	movlb	0	; () banked
 10144  0026DE  6F73               	movwf	??_f_lseek& (0+255),b
 10145  0026E0  0EFF               	movlw	255
 10146  0026E2  0100               	movlb	0	; () banked
 10147  0026E4  2189               	addwfc	(f_lseek@bcs+1)& (0+255),w,b
 10148  0026E6  0100               	movlb	0	; () banked
 10149  0026E8  6F74               	movwf	(??_f_lseek+1)& (0+255),b
 10150  0026EA  0EFF               	movlw	255
 10151  0026EC  0100               	movlb	0	; () banked
 10152  0026EE  218A               	addwfc	(f_lseek@bcs+2)& (0+255),w,b
 10153  0026F0  0100               	movlb	0	; () banked
 10154  0026F2  6F75               	movwf	(??_f_lseek+2)& (0+255),b
 10155  0026F4  0EFF               	movlw	255
 10156  0026F6  0100               	movlb	0	; () banked
 10157  0026F8  218B               	addwfc	(f_lseek@bcs+3)& (0+255),w,b
 10158  0026FA  0100               	movlb	0	; () banked
 10159  0026FC  6F76               	movwf	(??_f_lseek+3)& (0+255),b
 10160  0026FE  0100               	movlb	0	; () banked
 10161  002700  1F73               	comf	??_f_lseek& (0+255),f,b
 10162  002702  1F74               	comf	(??_f_lseek+1)& (0+255),f,b
 10163  002704  1F75               	comf	(??_f_lseek+2)& (0+255),f,b
 10164  002706  1F76               	comf	(??_f_lseek+3)& (0+255),f,b
 10165  002708  0EFF               	movlw	255
 10166  00270A  0100               	movlb	0	; () banked
 10167  00270C  257F               	addwf	f_lseek@ifptr& (0+255),w,b
 10168  00270E  0100               	movlb	0	; () banked
 10169  002710  6F77               	movwf	(??_f_lseek+4)& (0+255),b
 10170  002712  0EFF               	movlw	255
 10171  002714  0100               	movlb	0	; () banked
 10172  002716  2180               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 10173  002718  0100               	movlb	0	; () banked
 10174  00271A  6F78               	movwf	(??_f_lseek+5)& (0+255),b
 10175  00271C  0EFF               	movlw	255
 10176  00271E  0100               	movlb	0	; () banked
 10177  002720  2181               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 10178  002722  0100               	movlb	0	; () banked
 10179  002724  6F79               	movwf	(??_f_lseek+6)& (0+255),b
 10180  002726  0EFF               	movlw	255
 10181  002728  0100               	movlb	0	; () banked
 10182  00272A  2182               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 10183  00272C  0100               	movlb	0	; () banked
 10184  00272E  6F7A               	movwf	(??_f_lseek+7)& (0+255),b
 10185  002730  0100               	movlb	0	; () banked
 10186  002732  5173               	movf	??_f_lseek& (0+255),w,b
 10187  002734  0100               	movlb	0	; () banked
 10188  002736  1577               	andwf	(??_f_lseek+4)& (0+255),w,b
 10189  002738  0100               	movlb	0	; () banked
 10190  00273A  6F7B               	movwf	(??_f_lseek+8)& (0+255),b
 10191  00273C  0100               	movlb	0	; () banked
 10192  00273E  5174               	movf	(??_f_lseek+1)& (0+255),w,b
 10193  002740  0100               	movlb	0	; () banked
 10194  002742  1578               	andwf	(??_f_lseek+5)& (0+255),w,b
 10195  002744  0100               	movlb	0	; () banked
 10196  002746  6F7C               	movwf	(??_f_lseek+9)& (0+255),b
 10197  002748  0100               	movlb	0	; () banked
 10198  00274A  5175               	movf	(??_f_lseek+2)& (0+255),w,b
 10199  00274C  0100               	movlb	0	; () banked
 10200  00274E  1579               	andwf	(??_f_lseek+6)& (0+255),w,b
 10201  002750  0100               	movlb	0	; () banked
 10202  002752  6F7D               	movwf	(??_f_lseek+10)& (0+255),b
 10203  002754  0100               	movlb	0	; () banked
 10204  002756  5176               	movf	(??_f_lseek+3)& (0+255),w,b
 10205  002758  0100               	movlb	0	; () banked
 10206  00275A  157A               	andwf	(??_f_lseek+7)& (0+255),w,b
 10207  00275C  0100               	movlb	0	; () banked
 10208  00275E  6F7E               	movwf	(??_f_lseek+11)& (0+255),b
 10209  002760  0100               	movlb	0	; () banked
 10210  002762  EE20 F006          	lfsr	2,6
 10211  002766  516D               	movf	f_lseek@fp& (0+255),w,b
 10212  002768  26D9               	addwf	fsr2l,f,c
 10213  00276A  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10214  00276C  22DA               	addwfc	fsr2h,f,c
 10215  00276E  C07B  FFDE         	movff	??_f_lseek+8,postinc2
 10216  002772  C07C  FFDE         	movff	??_f_lseek+9,postinc2
 10217  002776  C07D  FFDE         	movff	??_f_lseek+10,postinc2
 10218  00277A  C07E  FFDE         	movff	??_f_lseek+11,postinc2
 10219                           
 10220                           ;ff.c: 3120: ofs -= fp->fptr;
 10221  00277E  0100               	movlb	0	; () banked
 10222  002780  EE20 F006          	lfsr	2,6
 10223  002784  516D               	movf	f_lseek@fp& (0+255),w,b
 10224  002786  26D9               	addwf	fsr2l,f,c
 10225  002788  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10226  00278A  22DA               	addwfc	fsr2h,f,c
 10227  00278C  50DE               	movf	postinc2,w,c
 10228  00278E  0100               	movlb	0	; () banked
 10229  002790  5F6F               	subwf	f_lseek@ofs& (0+255),f,b
 10230  002792  50DE               	movf	postinc2,w,c
 10231  002794  0100               	movlb	0	; () banked
 10232  002796  5B70               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 10233  002798  50DE               	movf	postinc2,w,c
 10234  00279A  0100               	movlb	0	; () banked
 10235  00279C  5B71               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 10236  00279E  50DD               	movf	postdec2,w,c
 10237  0027A0  0100               	movlb	0	; () banked
 10238  0027A2  5B72               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 10239                           
 10240                           ;ff.c: 3121: clst = fp->clust;
 10241  0027A4  0100               	movlb	0	; () banked
 10242  0027A6  EE20 F012          	lfsr	2,18
 10243  0027AA  516D               	movf	f_lseek@fp& (0+255),w,b
 10244  0027AC  26D9               	addwf	fsr2l,f,c
 10245  0027AE  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10246  0027B0  22DA               	addwfc	fsr2h,f,c
 10247  0027B2  CFDE F08C          	movff	postinc2,f_lseek@clst
 10248  0027B6  CFDE F08D          	movff	postinc2,f_lseek@clst+1
 10249  0027BA  CFDE F08E          	movff	postinc2,f_lseek@clst+2
 10250  0027BE  CFDE F08F          	movff	postinc2,f_lseek@clst+3
 10251                           
 10252                           ;ff.c: 3122: } else {
 10253  0027C2  D07F               	goto	l5821
 10254  0027C4                     l5797:
 10255                           
 10256                           ; BSR set to: 0
 10257                           ;ff.c: 3123: clst = fp->sclust;
 10258  0027C4  0100               	movlb	0	; () banked
 10259  0027C6  EE20 F00E          	lfsr	2,14
 10260  0027CA  516D               	movf	f_lseek@fp& (0+255),w,b
 10261  0027CC  26D9               	addwf	fsr2l,f,c
 10262  0027CE  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10263  0027D0  22DA               	addwfc	fsr2h,f,c
 10264  0027D2  CFDE F08C          	movff	postinc2,f_lseek@clst
 10265  0027D6  CFDE F08D          	movff	postinc2,f_lseek@clst+1
 10266  0027DA  CFDE F08E          	movff	postinc2,f_lseek@clst+2
 10267  0027DE  CFDE F08F          	movff	postinc2,f_lseek@clst+3
 10268                           
 10269                           ; BSR set to: 0
 10270                           ;ff.c: 3125: if (clst == 0) {
 10271  0027E2  0100               	movlb	0	; () banked
 10272  0027E4  518C               	movf	f_lseek@clst& (0+255),w,b
 10273  0027E6  0100               	movlb	0	; () banked
 10274  0027E8  118D               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 10275  0027EA  0100               	movlb	0	; () banked
 10276  0027EC  118E               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 10277  0027EE  0100               	movlb	0	; () banked
 10278  0027F0  118F               	iorwf	(f_lseek@clst+3)& (0+255),w,b
 10279  0027F2  A4D8               	btfss	status,2,c
 10280  0027F4  D056               	goto	l774
 10281                           
 10282                           ; BSR set to: 0
 10283                           ;ff.c: 3126: clst = create_chain(fp->fs, 0);
 10284  0027F6  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10285  0027FA  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10286  0027FE  CFDE F056          	movff	postinc2,create_chain@fs
 10287  002802  CFDD F057          	movff	postdec2,create_chain@fs+1
 10288  002806  0E00               	movlw	0
 10289  002808  6E58               	movwf	create_chain@clst,c
 10290  00280A  0E00               	movlw	0
 10291  00280C  6E59               	movwf	create_chain@clst+1,c
 10292  00280E  0E00               	movlw	0
 10293  002810  6E5A               	movwf	create_chain@clst+2,c
 10294  002812  0E00               	movlw	0
 10295  002814  6E5B               	movwf	create_chain@clst+3,c
 10296  002816  EC45  F01F         	call	_create_chain	;wreg free
 10297  00281A  C056  F08C         	movff	?_create_chain,f_lseek@clst
 10298  00281E  C057  F08D         	movff	?_create_chain+1,f_lseek@clst+1
 10299  002822  C058  F08E         	movff	?_create_chain+2,f_lseek@clst+2
 10300  002826  C059  F08F         	movff	?_create_chain+3,f_lseek@clst+3
 10301                           
 10302                           ;ff.c: 3127: if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
 10303  00282A  0100               	movlb	0	; () banked
 10304  00282C  058C               	decf	f_lseek@clst& (0+255),w,b
 10305  00282E  0100               	movlb	0	; () banked
 10306  002830  118D               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 10307  002832  0100               	movlb	0	; () banked
 10308  002834  118E               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 10309  002836  0100               	movlb	0	; () banked
 10310  002838  118F               	iorwf	(f_lseek@clst+3)& (0+255),w,b
 10311  00283A  A4D8               	btfss	status,2,c
 10312  00283C  D00B               	goto	l5811
 10313                           
 10314                           ; BSR set to: 0
 10315  00283E  0100               	movlb	0	; () banked
 10316  002840  EE20 F005          	lfsr	2,5
 10317  002844  516D               	movf	f_lseek@fp& (0+255),w,b
 10318  002846  26D9               	addwf	fsr2l,f,c
 10319  002848  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10320  00284A  22DA               	addwfc	fsr2h,f,c
 10321  00284C  0E02               	movlw	2
 10322  00284E  6EDF               	movwf	indf2,c
 10323                           
 10324                           ; BSR set to: 0
 10325  002850  0E02               	movlw	2
 10326                           
 10327                           ; BSR set to: 0
 10328  002852  0012               	return	
 10329  002854                     l5811:
 10330                           
 10331                           ; BSR set to: 0
 10332                           ;ff.c: 3128: if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR
      +                          ; };
 10333  002854  0100               	movlb	0	; () banked
 10334  002856  298C               	incf	f_lseek@clst& (0+255),w,b
 10335  002858  E115               	bnz	l5819
 10336  00285A  0100               	movlb	0	; () banked
 10337  00285C  298D               	incf	(f_lseek@clst+1)& (0+255),w,b
 10338  00285E  E112               	bnz	l5819
 10339  002860  0100               	movlb	0	; () banked
 10340  002862  298E               	incf	(f_lseek@clst+2)& (0+255),w,b
 10341  002864  E10F               	bnz	l5819
 10342  002866  0100               	movlb	0	; () banked
 10343  002868  298F               	incf	(f_lseek@clst+3)& (0+255),w,b
 10344  00286A  A4D8               	btfss	status,2,c
 10345  00286C  D00B               	goto	l5819
 10346                           
 10347                           ; BSR set to: 0
 10348  00286E  0100               	movlb	0	; () banked
 10349  002870  EE20 F005          	lfsr	2,5
 10350  002874  516D               	movf	f_lseek@fp& (0+255),w,b
 10351  002876  26D9               	addwf	fsr2l,f,c
 10352  002878  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10353  00287A  22DA               	addwfc	fsr2h,f,c
 10354  00287C  0E01               	movlw	1
 10355  00287E  6EDF               	movwf	indf2,c
 10356                           
 10357                           ; BSR set to: 0
 10358  002880  0E01               	movlw	1
 10359                           
 10360                           ; BSR set to: 0
 10361  002882  0012               	return	
 10362  002884                     l5819:
 10363                           
 10364                           ; BSR set to: 0
 10365                           ;ff.c: 3129: fp->sclust = clst;
 10366  002884  0100               	movlb	0	; () banked
 10367  002886  EE20 F00E          	lfsr	2,14
 10368  00288A  516D               	movf	f_lseek@fp& (0+255),w,b
 10369  00288C  26D9               	addwf	fsr2l,f,c
 10370  00288E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10371  002890  22DA               	addwfc	fsr2h,f,c
 10372  002892  C08C  FFDE         	movff	f_lseek@clst,postinc2
 10373  002896  C08D  FFDE         	movff	f_lseek@clst+1,postinc2
 10374  00289A  C08E  FFDE         	movff	f_lseek@clst+2,postinc2
 10375  00289E  C08F  FFDE         	movff	f_lseek@clst+3,postinc2
 10376  0028A2                     l774:
 10377                           
 10378                           ; BSR set to: 0
 10379                           ;ff.c: 3130: }
 10380                           ;ff.c: 3132: fp->clust = clst;
 10381  0028A2  0100               	movlb	0	; () banked
 10382  0028A4  EE20 F012          	lfsr	2,18
 10383  0028A8  516D               	movf	f_lseek@fp& (0+255),w,b
 10384  0028AA  26D9               	addwf	fsr2l,f,c
 10385  0028AC  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10386  0028AE  22DA               	addwfc	fsr2h,f,c
 10387  0028B0  C08C  FFDE         	movff	f_lseek@clst,postinc2
 10388  0028B4  C08D  FFDE         	movff	f_lseek@clst+1,postinc2
 10389  0028B8  C08E  FFDE         	movff	f_lseek@clst+2,postinc2
 10390  0028BC  C08F  FFDE         	movff	f_lseek@clst+3,postinc2
 10391  0028C0  D000               	goto	l5821
 10392  0028C2                     l5821:
 10393                           
 10394                           ; BSR set to: 0
 10395                           ;ff.c: 3133: }
 10396                           ;ff.c: 3134: if (clst != 0) {
 10397  0028C2  0100               	movlb	0	; () banked
 10398  0028C4  518C               	movf	f_lseek@clst& (0+255),w,b
 10399  0028C6  0100               	movlb	0	; () banked
 10400  0028C8  118D               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 10401  0028CA  0100               	movlb	0	; () banked
 10402  0028CC  118E               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 10403  0028CE  0100               	movlb	0	; () banked
 10404  0028D0  118F               	iorwf	(f_lseek@clst+3)& (0+255),w,b
 10405  0028D2  A4D8               	btfss	status,2,c
 10406  0028D4  D0CC               	goto	l5857
 10407  0028D6  D15D               	goto	l5875
 10408                           
 10409                           ; BSR set to: 0
 10410                           ;ff.c: 3135: while (ofs > bcs) {
 10411  0028D8  D0CA               	goto	l5857
 10412  0028DA                     l5825:
 10413                           
 10414                           ; BSR set to: 0
 10415                           ;ff.c: 3137: if (fp->flag & 0x02) {
 10416  0028DA  0100               	movlb	0	; () banked
 10417  0028DC  EE20 F004          	lfsr	2,4
 10418  0028E0  516D               	movf	f_lseek@fp& (0+255),w,b
 10419  0028E2  26D9               	addwf	fsr2l,f,c
 10420  0028E4  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10421  0028E6  22DA               	addwfc	fsr2h,f,c
 10422  0028E8  0100               	movlb	0	; () banked
 10423  0028EA  A2DF               	btfss	indf2,1,c
 10424  0028EC  D02E               	goto	l5833
 10425                           
 10426                           ; BSR set to: 0
 10427                           ;ff.c: 3138: clst = create_chain(fp->fs, clst);
 10428  0028EE  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10429  0028F2  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10430  0028F6  CFDE F056          	movff	postinc2,create_chain@fs
 10431  0028FA  CFDD F057          	movff	postdec2,create_chain@fs+1
 10432  0028FE  C08C  F058         	movff	f_lseek@clst,create_chain@clst
 10433  002902  C08D  F059         	movff	f_lseek@clst+1,create_chain@clst+1
 10434  002906  C08E  F05A         	movff	f_lseek@clst+2,create_chain@clst+2
 10435  00290A  C08F  F05B         	movff	f_lseek@clst+3,create_chain@clst+3
 10436  00290E  EC45  F01F         	call	_create_chain	;wreg free
 10437  002912  C056  F08C         	movff	?_create_chain,f_lseek@clst
 10438  002916  C057  F08D         	movff	?_create_chain+1,f_lseek@clst+1
 10439  00291A  C058  F08E         	movff	?_create_chain+2,f_lseek@clst+2
 10440  00291E  C059  F08F         	movff	?_create_chain+3,f_lseek@clst+3
 10441                           
 10442                           ;ff.c: 3139: if (clst == 0) {
 10443  002922  0100               	movlb	0	; () banked
 10444  002924  518C               	movf	f_lseek@clst& (0+255),w,b
 10445  002926  0100               	movlb	0	; () banked
 10446  002928  118D               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 10447  00292A  0100               	movlb	0	; () banked
 10448  00292C  118E               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 10449  00292E  0100               	movlb	0	; () banked
 10450  002930  118F               	iorwf	(f_lseek@clst+3)& (0+255),w,b
 10451  002932  A4D8               	btfss	status,2,c
 10452  002934  D025               	goto	l5835
 10453                           
 10454                           ; BSR set to: 0
 10455                           ;ff.c: 3140: ofs = bcs; break;
 10456  002936  C088  F06F         	movff	f_lseek@bcs,f_lseek@ofs
 10457  00293A  C089  F070         	movff	f_lseek@bcs+1,f_lseek@ofs+1
 10458  00293E  C08A  F071         	movff	f_lseek@bcs+2,f_lseek@ofs+2
 10459  002942  C08B  F072         	movff	f_lseek@bcs+3,f_lseek@ofs+3
 10460  002946  D0A5               	goto	l5859
 10461                           
 10462                           ; BSR set to: 0
 10463                           ;ff.c: 3141: }
 10464                           ;ff.c: 3142: } else
 10465  002948  D01B               	goto	l5835
 10466  00294A                     l5833:
 10467                           
 10468                           ; BSR set to: 0
 10469                           ;ff.c: 3144: clst = get_fat(fp->fs, clst);
 10470  00294A  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10471  00294E  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10472  002952  CFDE F03B          	movff	postinc2,get_fat@fs
 10473  002956  CFDD F03C          	movff	postdec2,get_fat@fs+1
 10474  00295A  C08C  F03D         	movff	f_lseek@clst,get_fat@clst
 10475  00295E  C08D  F03E         	movff	f_lseek@clst+1,get_fat@clst+1
 10476  002962  C08E  F03F         	movff	f_lseek@clst+2,get_fat@clst+2
 10477  002966  C08F  F040         	movff	f_lseek@clst+3,get_fat@clst+3
 10478  00296A  EC20  F021         	call	_get_fat	;wreg free
 10479  00296E  C03B  F08C         	movff	?_get_fat,f_lseek@clst
 10480  002972  C03C  F08D         	movff	?_get_fat+1,f_lseek@clst+1
 10481  002976  C03D  F08E         	movff	?_get_fat+2,f_lseek@clst+2
 10482  00297A  C03E  F08F         	movff	?_get_fat+3,f_lseek@clst+3
 10483  00297E  D000               	goto	l5835
 10484  002980                     l5835:
 10485                           
 10486                           ;ff.c: 3145: if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR
      +                          ; };
 10487  002980  0100               	movlb	0	; () banked
 10488  002982  298C               	incf	f_lseek@clst& (0+255),w,b
 10489  002984  E115               	bnz	l5843
 10490  002986  0100               	movlb	0	; () banked
 10491  002988  298D               	incf	(f_lseek@clst+1)& (0+255),w,b
 10492  00298A  E112               	bnz	l5843
 10493  00298C  0100               	movlb	0	; () banked
 10494  00298E  298E               	incf	(f_lseek@clst+2)& (0+255),w,b
 10495  002990  E10F               	bnz	l5843
 10496  002992  0100               	movlb	0	; () banked
 10497  002994  298F               	incf	(f_lseek@clst+3)& (0+255),w,b
 10498  002996  A4D8               	btfss	status,2,c
 10499  002998  D00B               	goto	l5843
 10500                           
 10501                           ; BSR set to: 0
 10502  00299A  0100               	movlb	0	; () banked
 10503  00299C  EE20 F005          	lfsr	2,5
 10504  0029A0  516D               	movf	f_lseek@fp& (0+255),w,b
 10505  0029A2  26D9               	addwf	fsr2l,f,c
 10506  0029A4  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10507  0029A6  22DA               	addwfc	fsr2h,f,c
 10508  0029A8  0E01               	movlw	1
 10509  0029AA  6EDF               	movwf	indf2,c
 10510                           
 10511                           ; BSR set to: 0
 10512  0029AC  0E01               	movlw	1
 10513                           
 10514                           ; BSR set to: 0
 10515  0029AE  0012               	return	
 10516  0029B0                     l5843:
 10517                           
 10518                           ; BSR set to: 0
 10519                           ;ff.c: 3146: if (clst <= 1 || clst >= fp->fs->n_fatent) { fp->err = (BYTE)(FR_INT_ERR); 
      +                          return FR_INT_ERR; };
 10520  0029B0  0100               	movlb	0	; () banked
 10521  0029B2  518F               	movf	(f_lseek@clst+3)& (0+255),w,b
 10522  0029B4  0100               	movlb	0	; () banked
 10523  0029B6  118E               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 10524  0029B8  0100               	movlb	0	; () banked
 10525  0029BA  118D               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 10526  0029BC  E105               	bnz	u8520
 10527  0029BE  0E02               	movlw	2
 10528  0029C0  0100               	movlb	0	; () banked
 10529  0029C2  5D8C               	subwf	f_lseek@clst& (0+255),w,b
 10530  0029C4  A0D8               	btfss	status,0,c
 10531  0029C6  D018               	goto	l5847
 10532  0029C8                     u8520:
 10533                           
 10534                           ; BSR set to: 0
 10535  0029C8  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10536  0029CC  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10537  0029D0  EE10 F012          	lfsr	1,18
 10538  0029D4  50DE               	movf	postinc2,w,c
 10539  0029D6  26E1               	addwf	fsr1l,f,c
 10540  0029D8  50DD               	movf	postdec2,w,c
 10541  0029DA  22E2               	addwfc	fsr1h,f,c
 10542  0029DC  50E6               	movf	postinc1,w,c
 10543  0029DE  0100               	movlb	0	; () banked
 10544  0029E0  5D8C               	subwf	f_lseek@clst& (0+255),w,b
 10545  0029E2  50E6               	movf	postinc1,w,c
 10546  0029E4  0100               	movlb	0	; () banked
 10547  0029E6  598D               	subwfb	(f_lseek@clst+1)& (0+255),w,b
 10548  0029E8  50E6               	movf	postinc1,w,c
 10549  0029EA  0100               	movlb	0	; () banked
 10550  0029EC  598E               	subwfb	(f_lseek@clst+2)& (0+255),w,b
 10551  0029EE  50E6               	movf	postinc1,w,c
 10552  0029F0  0100               	movlb	0	; () banked
 10553  0029F2  598F               	subwfb	(f_lseek@clst+3)& (0+255),w,b
 10554  0029F4  A0D8               	btfss	status,0,c
 10555  0029F6  D00B               	goto	l5853
 10556  0029F8                     l5847:
 10557                           
 10558                           ; BSR set to: 0
 10559  0029F8  0100               	movlb	0	; () banked
 10560  0029FA  EE20 F005          	lfsr	2,5
 10561  0029FE  516D               	movf	f_lseek@fp& (0+255),w,b
 10562  002A00  26D9               	addwf	fsr2l,f,c
 10563  002A02  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10564  002A04  22DA               	addwfc	fsr2h,f,c
 10565  002A06  0E02               	movlw	2
 10566  002A08  6EDF               	movwf	indf2,c
 10567                           
 10568                           ; BSR set to: 0
 10569  002A0A  0E02               	movlw	2
 10570                           
 10571                           ; BSR set to: 0
 10572  002A0C  0012               	return	
 10573  002A0E                     l5853:
 10574                           
 10575                           ; BSR set to: 0
 10576                           ;ff.c: 3147: fp->clust = clst;
 10577  002A0E  0100               	movlb	0	; () banked
 10578  002A10  EE20 F012          	lfsr	2,18
 10579  002A14  516D               	movf	f_lseek@fp& (0+255),w,b
 10580  002A16  26D9               	addwf	fsr2l,f,c
 10581  002A18  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10582  002A1A  22DA               	addwfc	fsr2h,f,c
 10583  002A1C  C08C  FFDE         	movff	f_lseek@clst,postinc2
 10584  002A20  C08D  FFDE         	movff	f_lseek@clst+1,postinc2
 10585  002A24  C08E  FFDE         	movff	f_lseek@clst+2,postinc2
 10586  002A28  C08F  FFDE         	movff	f_lseek@clst+3,postinc2
 10587                           
 10588                           ;ff.c: 3148: fp->fptr += bcs;
 10589  002A2C  0100               	movlb	0	; () banked
 10590  002A2E  EE20 F006          	lfsr	2,6
 10591  002A32  516D               	movf	f_lseek@fp& (0+255),w,b
 10592  002A34  26D9               	addwf	fsr2l,f,c
 10593  002A36  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10594  002A38  22DA               	addwfc	fsr2h,f,c
 10595  002A3A  0100               	movlb	0	; () banked
 10596  002A3C  5188               	movf	f_lseek@bcs& (0+255),w,b
 10597  002A3E  26DE               	addwf	postinc2,f,c
 10598  002A40  5189               	movf	(f_lseek@bcs+1)& (0+255),w,b
 10599  002A42  22DE               	addwfc	postinc2,f,c
 10600  002A44  518A               	movf	(f_lseek@bcs+2)& (0+255),w,b
 10601  002A46  22DE               	addwfc	postinc2,f,c
 10602  002A48  518B               	movf	(f_lseek@bcs+3)& (0+255),w,b
 10603  002A4A  22DE               	addwfc	postinc2,f,c
 10604                           
 10605                           ; BSR set to: 0
 10606                           ;ff.c: 3149: ofs -= bcs;
 10607  002A4C  0100               	movlb	0	; () banked
 10608  002A4E  5188               	movf	f_lseek@bcs& (0+255),w,b
 10609  002A50  0100               	movlb	0	; () banked
 10610  002A52  5F6F               	subwf	f_lseek@ofs& (0+255),f,b
 10611  002A54  0100               	movlb	0	; () banked
 10612  002A56  5189               	movf	(f_lseek@bcs+1)& (0+255),w,b
 10613  002A58  0100               	movlb	0	; () banked
 10614  002A5A  5B70               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 10615  002A5C  0100               	movlb	0	; () banked
 10616  002A5E  518A               	movf	(f_lseek@bcs+2)& (0+255),w,b
 10617  002A60  0100               	movlb	0	; () banked
 10618  002A62  5B71               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 10619  002A64  0100               	movlb	0	; () banked
 10620  002A66  518B               	movf	(f_lseek@bcs+3)& (0+255),w,b
 10621  002A68  0100               	movlb	0	; () banked
 10622  002A6A  5B72               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 10623  002A6C  D000               	goto	l5857
 10624  002A6E                     l5857:
 10625                           
 10626                           ; BSR set to: 0
 10627  002A6E  0100               	movlb	0	; () banked
 10628  002A70  516F               	movf	f_lseek@ofs& (0+255),w,b
 10629  002A72  0100               	movlb	0	; () banked
 10630  002A74  5D88               	subwf	f_lseek@bcs& (0+255),w,b
 10631  002A76  0100               	movlb	0	; () banked
 10632  002A78  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
 10633  002A7A  0100               	movlb	0	; () banked
 10634  002A7C  5989               	subwfb	(f_lseek@bcs+1)& (0+255),w,b
 10635  002A7E  0100               	movlb	0	; () banked
 10636  002A80  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
 10637  002A82  0100               	movlb	0	; () banked
 10638  002A84  598A               	subwfb	(f_lseek@bcs+2)& (0+255),w,b
 10639  002A86  0100               	movlb	0	; () banked
 10640  002A88  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
 10641  002A8A  0100               	movlb	0	; () banked
 10642  002A8C  598B               	subwfb	(f_lseek@bcs+3)& (0+255),w,b
 10643  002A8E  A0D8               	btfss	status,0,c
 10644  002A90  D724               	goto	l5825
 10645  002A92                     l5859:
 10646                           
 10647                           ; BSR set to: 0
 10648                           ;ff.c: 3150: }
 10649                           ;ff.c: 3151: fp->fptr += ofs;
 10650  002A92  0100               	movlb	0	; () banked
 10651  002A94  EE20 F006          	lfsr	2,6
 10652  002A98  516D               	movf	f_lseek@fp& (0+255),w,b
 10653  002A9A  26D9               	addwf	fsr2l,f,c
 10654  002A9C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10655  002A9E  22DA               	addwfc	fsr2h,f,c
 10656  002AA0  0100               	movlb	0	; () banked
 10657  002AA2  516F               	movf	f_lseek@ofs& (0+255),w,b
 10658  002AA4  26DE               	addwf	postinc2,f,c
 10659  002AA6  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
 10660  002AA8  22DE               	addwfc	postinc2,f,c
 10661  002AAA  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
 10662  002AAC  22DE               	addwfc	postinc2,f,c
 10663  002AAE  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
 10664  002AB0  22DE               	addwfc	postinc2,f,c
 10665                           
 10666                           ; BSR set to: 0
 10667                           ;ff.c: 3152: if (ofs % ((UINT)512)) {
 10668  002AB2  0EFF               	movlw	255
 10669  002AB4  0100               	movlb	0	; () banked
 10670  002AB6  156F               	andwf	f_lseek@ofs& (0+255),w,b
 10671  002AB8  0100               	movlb	0	; () banked
 10672  002ABA  6F73               	movwf	??_f_lseek& (0+255),b
 10673  002ABC  0E01               	movlw	1
 10674  002ABE  0100               	movlb	0	; () banked
 10675  002AC0  1570               	andwf	(f_lseek@ofs+1)& (0+255),w,b
 10676  002AC2  0100               	movlb	0	; () banked
 10677  002AC4  6F74               	movwf	(??_f_lseek+1)& (0+255),b
 10678  002AC6  0E00               	movlw	0
 10679  002AC8  0100               	movlb	0	; () banked
 10680  002ACA  1571               	andwf	(f_lseek@ofs+2)& (0+255),w,b
 10681  002ACC  0100               	movlb	0	; () banked
 10682  002ACE  6F75               	movwf	(??_f_lseek+2)& (0+255),b
 10683  002AD0  0E00               	movlw	0
 10684  002AD2  0100               	movlb	0	; () banked
 10685  002AD4  1572               	andwf	(f_lseek@ofs+3)& (0+255),w,b
 10686  002AD6  0100               	movlb	0	; () banked
 10687  002AD8  6F76               	movwf	(??_f_lseek+3)& (0+255),b
 10688  002ADA  0100               	movlb	0	; () banked
 10689  002ADC  5173               	movf	??_f_lseek& (0+255),w,b
 10690  002ADE  0100               	movlb	0	; () banked
 10691  002AE0  1174               	iorwf	(??_f_lseek+1)& (0+255),w,b
 10692  002AE2  0100               	movlb	0	; () banked
 10693  002AE4  1175               	iorwf	(??_f_lseek+2)& (0+255),w,b
 10694  002AE6  0100               	movlb	0	; () banked
 10695  002AE8  1176               	iorwf	(??_f_lseek+3)& (0+255),w,b
 10696  002AEA  B4D8               	btfsc	status,2,c
 10697  002AEC  D052               	goto	l5875
 10698                           
 10699                           ; BSR set to: 0
 10700                           ;ff.c: 3153: nsect = clust2sect(fp->fs, clst);
 10701  002AEE  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10702  002AF2  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10703  002AF6  CFDE F00D          	movff	postinc2,clust2sect@fs
 10704  002AFA  CFDD F00E          	movff	postdec2,clust2sect@fs+1
 10705  002AFE  C08C  F00F         	movff	f_lseek@clst,clust2sect@clst
 10706  002B02  C08D  F010         	movff	f_lseek@clst+1,clust2sect@clst+1
 10707  002B06  C08E  F011         	movff	f_lseek@clst+2,clust2sect@clst+2
 10708  002B0A  C08F  F012         	movff	f_lseek@clst+3,clust2sect@clst+3
 10709  002B0E  EC30  F02F         	call	_clust2sect	;wreg free
 10710  002B12  C00D  F084         	movff	?_clust2sect,f_lseek@nsect
 10711  002B16  C00E  F085         	movff	?_clust2sect+1,f_lseek@nsect+1
 10712  002B1A  C00F  F086         	movff	?_clust2sect+2,f_lseek@nsect+2
 10713  002B1E  C010  F087         	movff	?_clust2sect+3,f_lseek@nsect+3
 10714                           
 10715                           ;ff.c: 3154: if (!nsect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
 10716  002B22  0100               	movlb	0	; () banked
 10717  002B24  5184               	movf	f_lseek@nsect& (0+255),w,b
 10718  002B26  0100               	movlb	0	; () banked
 10719  002B28  1185               	iorwf	(f_lseek@nsect+1)& (0+255),w,b
 10720  002B2A  0100               	movlb	0	; () banked
 10721  002B2C  1186               	iorwf	(f_lseek@nsect+2)& (0+255),w,b
 10722  002B2E  0100               	movlb	0	; () banked
 10723  002B30  1187               	iorwf	(f_lseek@nsect+3)& (0+255),w,b
 10724  002B32  A4D8               	btfss	status,2,c
 10725  002B34  D00B               	goto	l5873
 10726                           
 10727                           ; BSR set to: 0
 10728  002B36  0100               	movlb	0	; () banked
 10729  002B38  EE20 F005          	lfsr	2,5
 10730  002B3C  516D               	movf	f_lseek@fp& (0+255),w,b
 10731  002B3E  26D9               	addwf	fsr2l,f,c
 10732  002B40  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10733  002B42  22DA               	addwfc	fsr2h,f,c
 10734  002B44  0E02               	movlw	2
 10735  002B46  6EDF               	movwf	indf2,c
 10736                           
 10737                           ; BSR set to: 0
 10738  002B48  0E02               	movlw	2
 10739                           
 10740                           ; BSR set to: 0
 10741  002B4A  0012               	return	
 10742  002B4C                     l5873:
 10743                           
 10744                           ; BSR set to: 0
 10745                           ;ff.c: 3155: nsect += ofs / ((UINT)512);
 10746  002B4C  C06F  F073         	movff	f_lseek@ofs,??_f_lseek
 10747  002B50  C070  F074         	movff	f_lseek@ofs+1,??_f_lseek+1
 10748  002B54  C071  F075         	movff	f_lseek@ofs+2,??_f_lseek+2
 10749  002B58  C072  F076         	movff	f_lseek@ofs+3,??_f_lseek+3
 10750  002B5C  0E0A               	movlw	10
 10751  002B5E  D006               	goto	u8570
 10752  002B60                     u8575:
 10753  002B60  0100               	movlb	0	; () banked
 10754  002B62  90D8               	bcf	status,0,c
 10755  002B64  3376               	rrcf	(??_f_lseek+3)& (0+255),f,b
 10756  002B66  3375               	rrcf	(??_f_lseek+2)& (0+255),f,b
 10757  002B68  3374               	rrcf	(??_f_lseek+1)& (0+255),f,b
 10758  002B6A  3373               	rrcf	??_f_lseek& (0+255),f,b
 10759  002B6C                     u8570:
 10760  002B6C  2EE8               	decfsz	wreg,f,c
 10761  002B6E  D7F8               	goto	u8575
 10762  002B70  0100               	movlb	0	; () banked
 10763  002B72  5173               	movf	??_f_lseek& (0+255),w,b
 10764  002B74  0100               	movlb	0	; () banked
 10765  002B76  2784               	addwf	f_lseek@nsect& (0+255),f,b
 10766  002B78  0100               	movlb	0	; () banked
 10767  002B7A  5174               	movf	(??_f_lseek+1)& (0+255),w,b
 10768  002B7C  0100               	movlb	0	; () banked
 10769  002B7E  2385               	addwfc	(f_lseek@nsect+1)& (0+255),f,b
 10770  002B80  0100               	movlb	0	; () banked
 10771  002B82  5175               	movf	(??_f_lseek+2)& (0+255),w,b
 10772  002B84  0100               	movlb	0	; () banked
 10773  002B86  2386               	addwfc	(f_lseek@nsect+2)& (0+255),f,b
 10774  002B88  0100               	movlb	0	; () banked
 10775  002B8A  5176               	movf	(??_f_lseek+3)& (0+255),w,b
 10776  002B8C  0100               	movlb	0	; () banked
 10777  002B8E  2387               	addwfc	(f_lseek@nsect+3)& (0+255),f,b
 10778                           
 10779                           ; BSR set to: 0
 10780                           
 10781                           ; BSR set to: 0
 10782  002B90  D000               	goto	l5875
 10783  002B92                     l5875:
 10784                           
 10785                           ; BSR set to: 0
 10786                           ;ff.c: 3156: }
 10787                           ;ff.c: 3157: }
 10788                           ;ff.c: 3158: }
 10789                           ;ff.c: 3159: if (fp->fptr % ((UINT)512) && nsect != fp->dsect) {
 10790  002B92  0100               	movlb	0	; () banked
 10791  002B94  EE20 F006          	lfsr	2,6
 10792  002B98  516D               	movf	f_lseek@fp& (0+255),w,b
 10793  002B9A  26D9               	addwf	fsr2l,f,c
 10794  002B9C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10795  002B9E  22DA               	addwfc	fsr2h,f,c
 10796  002BA0  0EFF               	movlw	255
 10797  002BA2  14DE               	andwf	postinc2,w,c
 10798  002BA4  0100               	movlb	0	; () banked
 10799  002BA6  6F73               	movwf	??_f_lseek& (0+255),b
 10800  002BA8  0E01               	movlw	1
 10801  002BAA  14DE               	andwf	postinc2,w,c
 10802  002BAC  0100               	movlb	0	; () banked
 10803  002BAE  6F74               	movwf	(??_f_lseek+1)& (0+255),b
 10804  002BB0  0E00               	movlw	0
 10805  002BB2  14DE               	andwf	postinc2,w,c
 10806  002BB4  0100               	movlb	0	; () banked
 10807  002BB6  6F75               	movwf	(??_f_lseek+2)& (0+255),b
 10808  002BB8  0E00               	movlw	0
 10809  002BBA  14DE               	andwf	postinc2,w,c
 10810  002BBC  0100               	movlb	0	; () banked
 10811  002BBE  6F76               	movwf	(??_f_lseek+3)& (0+255),b
 10812  002BC0  0100               	movlb	0	; () banked
 10813  002BC2  5173               	movf	??_f_lseek& (0+255),w,b
 10814  002BC4  0100               	movlb	0	; () banked
 10815  002BC6  1174               	iorwf	(??_f_lseek+1)& (0+255),w,b
 10816  002BC8  0100               	movlb	0	; () banked
 10817  002BCA  1175               	iorwf	(??_f_lseek+2)& (0+255),w,b
 10818  002BCC  0100               	movlb	0	; () banked
 10819  002BCE  1176               	iorwf	(??_f_lseek+3)& (0+255),w,b
 10820  002BD0  B4D8               	btfsc	status,2,c
 10821  002BD2  D028               	goto	l5881
 10822                           
 10823                           ; BSR set to: 0
 10824  002BD4  0100               	movlb	0	; () banked
 10825  002BD6  EE20 F016          	lfsr	2,22
 10826  002BDA  516D               	movf	f_lseek@fp& (0+255),w,b
 10827  002BDC  26D9               	addwf	fsr2l,f,c
 10828  002BDE  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10829  002BE0  22DA               	addwfc	fsr2h,f,c
 10830  002BE2  0100               	movlb	0	; () banked
 10831  002BE4  5184               	movf	f_lseek@nsect& (0+255),w,b
 10832  002BE6  18DE               	xorwf	postinc2,w,c
 10833  002BE8  E10D               	bnz	u8590
 10834  002BEA  0100               	movlb	0	; () banked
 10835  002BEC  5185               	movf	(f_lseek@nsect+1)& (0+255),w,b
 10836  002BEE  18DE               	xorwf	postinc2,w,c
 10837  002BF0  E109               	bnz	u8590
 10838  002BF2  0100               	movlb	0	; () banked
 10839  002BF4  5186               	movf	(f_lseek@nsect+2)& (0+255),w,b
 10840  002BF6  18DE               	xorwf	postinc2,w,c
 10841  002BF8  E105               	bnz	u8590
 10842  002BFA  0100               	movlb	0	; () banked
 10843  002BFC  5187               	movf	(f_lseek@nsect+3)& (0+255),w,b
 10844  002BFE  18DE               	xorwf	postinc2,w,c
 10845  002C00  B4D8               	btfsc	status,2,c
 10846  002C02  D010               	goto	l5881
 10847  002C04                     u8590:
 10848                           
 10849                           ; BSR set to: 0
 10850                           ;ff.c: 3171: fp->dsect = nsect;
 10851  002C04  0100               	movlb	0	; () banked
 10852  002C06  EE20 F016          	lfsr	2,22
 10853  002C0A  516D               	movf	f_lseek@fp& (0+255),w,b
 10854  002C0C  26D9               	addwf	fsr2l,f,c
 10855  002C0E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10856  002C10  22DA               	addwfc	fsr2h,f,c
 10857  002C12  C084  FFDE         	movff	f_lseek@nsect,postinc2
 10858  002C16  C085  FFDE         	movff	f_lseek@nsect+1,postinc2
 10859  002C1A  C086  FFDE         	movff	f_lseek@nsect+2,postinc2
 10860  002C1E  C087  FFDE         	movff	f_lseek@nsect+3,postinc2
 10861  002C22  D000               	goto	l5881
 10862  002C24                     l5881:
 10863                           
 10864                           ; BSR set to: 0
 10865                           ;ff.c: 3172: }
 10866                           ;ff.c: 3174: if (fp->fptr > fp->fsize) {
 10867  002C24  0100               	movlb	0	; () banked
 10868  002C26  EE20 F006          	lfsr	2,6
 10869  002C2A  516D               	movf	f_lseek@fp& (0+255),w,b
 10870  002C2C  26D9               	addwf	fsr2l,f,c
 10871  002C2E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10872  002C30  22DA               	addwfc	fsr2h,f,c
 10873  002C32  0100               	movlb	0	; () banked
 10874  002C34  EE10 F00A          	lfsr	1,10
 10875  002C38  516D               	movf	f_lseek@fp& (0+255),w,b
 10876  002C3A  26E1               	addwf	fsr1l,f,c
 10877  002C3C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10878  002C3E  22E2               	addwfc	fsr1h,f,c
 10879  002C40  50DE               	movf	postinc2,w,c
 10880  002C42  5CE6               	subwf	postinc1,w,c
 10881  002C44  50DE               	movf	postinc2,w,c
 10882  002C46  58E6               	subwfb	postinc1,w,c
 10883  002C48  50DE               	movf	postinc2,w,c
 10884  002C4A  58E6               	subwfb	postinc1,w,c
 10885  002C4C  50DE               	movf	postinc2,w,c
 10886  002C4E  58E6               	subwfb	postinc1,w,c
 10887  002C50  B0D8               	btfsc	status,0,c
 10888  002C52  D020               	goto	l5887
 10889                           
 10890                           ; BSR set to: 0
 10891                           ;ff.c: 3175: fp->fsize = fp->fptr;
 10892  002C54  0100               	movlb	0	; () banked
 10893  002C56  EE20 F006          	lfsr	2,6
 10894  002C5A  516D               	movf	f_lseek@fp& (0+255),w,b
 10895  002C5C  26D9               	addwf	fsr2l,f,c
 10896  002C5E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10897  002C60  22DA               	addwfc	fsr2h,f,c
 10898  002C62  0100               	movlb	0	; () banked
 10899  002C64  EE10 F00A          	lfsr	1,10
 10900  002C68  516D               	movf	f_lseek@fp& (0+255),w,b
 10901  002C6A  26E1               	addwf	fsr1l,f,c
 10902  002C6C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10903  002C6E  22E2               	addwfc	fsr1h,f,c
 10904  002C70  CFDE FFE6          	movff	postinc2,postinc1
 10905  002C74  CFDE FFE6          	movff	postinc2,postinc1
 10906  002C78  CFDE FFE6          	movff	postinc2,postinc1
 10907  002C7C  CFDE FFE6          	movff	postinc2,postinc1
 10908                           
 10909                           ; BSR set to: 0
 10910                           ;ff.c: 3176: fp->flag |= 0x20;
 10911  002C80  0100               	movlb	0	; () banked
 10912  002C82  EE20 F004          	lfsr	2,4
 10913  002C86  516D               	movf	f_lseek@fp& (0+255),w,b
 10914  002C88  26D9               	addwf	fsr2l,f,c
 10915  002C8A  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10916  002C8C  22DA               	addwfc	fsr2h,f,c
 10917  002C8E  0E00               	movlw	0
 10918  002C90  8ADB               	bsf	plusw2,5,c
 10919  002C92  D000               	goto	l5887
 10920  002C94                     l5887:
 10921                           
 10922                           ; BSR set to: 0
 10923                           ;ff.c: 3177: }
 10924                           ;ff.c: 3179: }
 10925                           ;ff.c: 3181: return res;
 10926  002C94  0100               	movlb	0	; () banked
 10927  002C96  5183               	movf	f_lseek@res& (0+255),w,b
 10928  002C98  0012               	return	
 10929                           
 10930                           ; BSR set to: 0
 10931                           
 10932                           ; BSR set to: 0
 10933  002C9A  0012               	return		;funcret
 10934  002C9C                     __end_of_f_lseek:
 10935                           	opt stack 0
 10936                           tblptru	equ	0xFF8
 10937                           tblptrh	equ	0xFF7
 10938                           tblptrl	equ	0xFF6
 10939                           tablat	equ	0xFF5
 10940                           prodh	equ	0xFF4
 10941                           prodl	equ	0xFF3
 10942                           indf0	equ	0xFEF
 10943                           postinc0	equ	0xFEE
 10944                           fsr0h	equ	0xFEA
 10945                           fsr0l	equ	0xFE9
 10946                           wreg	equ	0xFE8
 10947                           indf1	equ	0xFE7
 10948                           postinc1	equ	0xFE6
 10949                           postdec1	equ	0xFE5
 10950                           fsr1h	equ	0xFE2
 10951                           fsr1l	equ	0xFE1
 10952                           indf2	equ	0xFDF
 10953                           postinc2	equ	0xFDE
 10954                           postdec2	equ	0xFDD
 10955                           plusw2	equ	0xFDB
 10956                           fsr2h	equ	0xFDA
 10957                           fsr2l	equ	0xFD9
 10958                           status	equ	0xFD8
 10959                           
 10960 ;; *************** function _create_chain *****************
 10961 ;; Defined at:
 10962 ;;		line 990 in file "ff.c"
 10963 ;; Parameters:    Size  Location     Type
 10964 ;;  fs              2   85[COMRAM] PTR struct .
 10965 ;;		 -> FatFs(558), NULL(0), 
 10966 ;;  clst            4   87[COMRAM] unsigned long 
 10967 ;; Auto vars:     Size  Location     Type
 10968 ;;  cs              4    9[BANK0 ] unsigned long 
 10969 ;;  ncl             4    5[BANK0 ] unsigned long 
 10970 ;;  scl             4    1[BANK0 ] unsigned long 
 10971 ;;  res             1    0[BANK0 ] enum E88
 10972 ;; Return value:  Size  Location     Type
 10973 ;;                  4   85[COMRAM] unsigned long 
 10974 ;; Registers used:
 10975 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10976 ;; Tracked objects:
 10977 ;;		On entry : 0/0
 10978 ;;		On exit  : 0/0
 10979 ;;		Unchanged: 0/0
 10980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10981 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10982 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10983 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10984 ;;      Totals:        10      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10985 ;;Total ram usage:       23 bytes
 10986 ;; Hardware stack levels used:    1
 10987 ;; Hardware stack levels required when called:    9
 10988 ;; This function calls:
 10989 ;;		_get_fat
 10990 ;;		_put_fat
 10991 ;; This function is called by:
 10992 ;;		_dir_next
 10993 ;;		_f_write
 10994 ;;		_f_lseek
 10995 ;; This function uses a non-reentrant model
 10996 ;;
 10997                           
 10998                           	psect	text22
 10999  003E8A                     __ptext22:
 11000                           	opt stack 0
 11001  003E8A                     _create_chain:
 11002                           	opt stack 20
 11003                           
 11004                           ;ff.c: 995: DWORD cs, ncl, scl;
 11005                           ;ff.c: 996: FRESULT res;
 11006                           ;ff.c: 999: if (clst == 0) {
 11007                           
 11008                           ; BSR set to: 0
 11009                           ;incstack = 0
 11010  003E8A  5058               	movf	create_chain@clst,w,c
 11011  003E8C  1059               	iorwf	create_chain@clst+1,w,c
 11012  003E8E  105A               	iorwf	create_chain@clst+2,w,c
 11013  003E90  105B               	iorwf	create_chain@clst+3,w,c
 11014  003E92  A4D8               	btfss	status,2,c
 11015  003E94  D036               	goto	l4179
 11016                           
 11017                           ;ff.c: 1000: scl = fs->last_clust;
 11018  003E96  EE20 F00A          	lfsr	2,10
 11019  003E9A  5056               	movf	create_chain@fs,w,c
 11020  003E9C  26D9               	addwf	fsr2l,f,c
 11021  003E9E  5057               	movf	create_chain@fs+1,w,c
 11022  003EA0  22DA               	addwfc	fsr2h,f,c
 11023  003EA2  CFDE F061          	movff	postinc2,create_chain@scl
 11024  003EA6  CFDE F062          	movff	postinc2,create_chain@scl+1
 11025  003EAA  CFDE F063          	movff	postinc2,create_chain@scl+2
 11026  003EAE  CFDE F064          	movff	postinc2,create_chain@scl+3
 11027                           
 11028                           ;ff.c: 1001: if (!scl || scl >= fs->n_fatent) scl = 1;
 11029  003EB2  0100               	movlb	0	; () banked
 11030  003EB4  5161               	movf	create_chain@scl& (0+255),w,b
 11031  003EB6  0100               	movlb	0	; () banked
 11032  003EB8  1162               	iorwf	(create_chain@scl+1)& (0+255),w,b
 11033  003EBA  0100               	movlb	0	; () banked
 11034  003EBC  1163               	iorwf	(create_chain@scl+2)& (0+255),w,b
 11035  003EBE  0100               	movlb	0	; () banked
 11036  003EC0  1164               	iorwf	(create_chain@scl+3)& (0+255),w,b
 11037  003EC2  B4D8               	btfsc	status,2,c
 11038  003EC4  D014               	goto	l4177
 11039                           
 11040                           ; BSR set to: 0
 11041  003EC6  EE20 F012          	lfsr	2,18
 11042  003ECA  5056               	movf	create_chain@fs,w,c
 11043  003ECC  26D9               	addwf	fsr2l,f,c
 11044  003ECE  5057               	movf	create_chain@fs+1,w,c
 11045  003ED0  22DA               	addwfc	fsr2h,f,c
 11046  003ED2  50DE               	movf	postinc2,w,c
 11047  003ED4  0100               	movlb	0	; () banked
 11048  003ED6  5D61               	subwf	create_chain@scl& (0+255),w,b
 11049  003ED8  50DE               	movf	postinc2,w,c
 11050  003EDA  0100               	movlb	0	; () banked
 11051  003EDC  5962               	subwfb	(create_chain@scl+1)& (0+255),w,b
 11052  003EDE  50DE               	movf	postinc2,w,c
 11053  003EE0  0100               	movlb	0	; () banked
 11054  003EE2  5963               	subwfb	(create_chain@scl+2)& (0+255),w,b
 11055  003EE4  50DE               	movf	postinc2,w,c
 11056  003EE6  0100               	movlb	0	; () banked
 11057  003EE8  5964               	subwfb	(create_chain@scl+3)& (0+255),w,b
 11058  003EEA  A0D8               	btfss	status,0,c
 11059  003EEC  D070               	goto	l420
 11060  003EEE                     l4177:
 11061                           
 11062                           ; BSR set to: 0
 11063  003EEE  0E01               	movlw	1
 11064  003EF0  0100               	movlb	0	; () banked
 11065  003EF2  6F61               	movwf	create_chain@scl& (0+255),b
 11066  003EF4  0E00               	movlw	0
 11067  003EF6  6F62               	movwf	(create_chain@scl+1)& (0+255),b
 11068  003EF8  0E00               	movlw	0
 11069  003EFA  6F63               	movwf	(create_chain@scl+2)& (0+255),b
 11070  003EFC  0E00               	movlw	0
 11071  003EFE  6F64               	movwf	(create_chain@scl+3)& (0+255),b
 11072                           
 11073                           ; BSR set to: 0
 11074                           ;ff.c: 1002: }
 11075  003F00  D066               	goto	l420
 11076  003F02                     l4179:
 11077                           
 11078                           ;ff.c: 1003: else {
 11079                           ;ff.c: 1004: cs = get_fat(fs, clst);
 11080  003F02  C056  F03B         	movff	create_chain@fs,get_fat@fs
 11081  003F06  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
 11082  003F0A  C058  F03D         	movff	create_chain@clst,get_fat@clst
 11083  003F0E  C059  F03E         	movff	create_chain@clst+1,get_fat@clst+1
 11084  003F12  C05A  F03F         	movff	create_chain@clst+2,get_fat@clst+2
 11085  003F16  C05B  F040         	movff	create_chain@clst+3,get_fat@clst+3
 11086  003F1A  EC20  F021         	call	_get_fat	;wreg free
 11087  003F1E  C03B  F069         	movff	?_get_fat,create_chain@cs
 11088  003F22  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
 11089  003F26  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
 11090  003F2A  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
 11091                           
 11092                           ;ff.c: 1005: if (cs < 2) return 1;
 11093  003F2E  0100               	movlb	0	; () banked
 11094  003F30  516C               	movf	(create_chain@cs+3)& (0+255),w,b
 11095  003F32  0100               	movlb	0	; () banked
 11096  003F34  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
 11097  003F36  0100               	movlb	0	; () banked
 11098  003F38  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
 11099  003F3A  E10E               	bnz	l4187
 11100  003F3C  0E02               	movlw	2
 11101  003F3E  0100               	movlb	0	; () banked
 11102  003F40  5D69               	subwf	create_chain@cs& (0+255),w,b
 11103  003F42  B0D8               	btfsc	status,0,c
 11104  003F44  D009               	goto	l4187
 11105                           
 11106                           ; BSR set to: 0
 11107  003F46  0E01               	movlw	1
 11108  003F48  6E56               	movwf	?_create_chain,c
 11109  003F4A  0E00               	movlw	0
 11110  003F4C  6E57               	movwf	?_create_chain+1,c
 11111  003F4E  0E00               	movlw	0
 11112  003F50  6E58               	movwf	?_create_chain+2,c
 11113  003F52  0E00               	movlw	0
 11114  003F54  6E59               	movwf	?_create_chain+3,c
 11115                           
 11116                           ; BSR set to: 0
 11117  003F56  0012               	return	
 11118  003F58                     l4187:
 11119                           
 11120                           ; BSR set to: 0
 11121                           ;ff.c: 1006: if (cs == 0xFFFFFFFF) return cs;
 11122  003F58  0100               	movlb	0	; () banked
 11123  003F5A  2969               	incf	create_chain@cs& (0+255),w,b
 11124  003F5C  E113               	bnz	l4191
 11125  003F5E  0100               	movlb	0	; () banked
 11126  003F60  296A               	incf	(create_chain@cs+1)& (0+255),w,b
 11127  003F62  E110               	bnz	l4191
 11128  003F64  0100               	movlb	0	; () banked
 11129  003F66  296B               	incf	(create_chain@cs+2)& (0+255),w,b
 11130  003F68  E10D               	bnz	l4191
 11131  003F6A  0100               	movlb	0	; () banked
 11132  003F6C  296C               	incf	(create_chain@cs+3)& (0+255),w,b
 11133  003F6E  A4D8               	btfss	status,2,c
 11134  003F70  D009               	goto	l4191
 11135                           
 11136                           ; BSR set to: 0
 11137  003F72  C069  F056         	movff	create_chain@cs,?_create_chain
 11138  003F76  C06A  F057         	movff	create_chain@cs+1,?_create_chain+1
 11139  003F7A  C06B  F058         	movff	create_chain@cs+2,?_create_chain+2
 11140  003F7E  C06C  F059         	movff	create_chain@cs+3,?_create_chain+3
 11141  003F82  0012               	return	
 11142  003F84                     l4191:
 11143                           
 11144                           ; BSR set to: 0
 11145                           ;ff.c: 1007: if (cs < fs->n_fatent) return cs;
 11146  003F84  EE20 F012          	lfsr	2,18
 11147  003F88  5056               	movf	create_chain@fs,w,c
 11148  003F8A  26D9               	addwf	fsr2l,f,c
 11149  003F8C  5057               	movf	create_chain@fs+1,w,c
 11150  003F8E  22DA               	addwfc	fsr2h,f,c
 11151  003F90  50DE               	movf	postinc2,w,c
 11152  003F92  0100               	movlb	0	; () banked
 11153  003F94  5D69               	subwf	create_chain@cs& (0+255),w,b
 11154  003F96  50DE               	movf	postinc2,w,c
 11155  003F98  0100               	movlb	0	; () banked
 11156  003F9A  596A               	subwfb	(create_chain@cs+1)& (0+255),w,b
 11157  003F9C  50DE               	movf	postinc2,w,c
 11158  003F9E  0100               	movlb	0	; () banked
 11159  003FA0  596B               	subwfb	(create_chain@cs+2)& (0+255),w,b
 11160  003FA2  50DE               	movf	postinc2,w,c
 11161  003FA4  0100               	movlb	0	; () banked
 11162  003FA6  596C               	subwfb	(create_chain@cs+3)& (0+255),w,b
 11163  003FA8  B0D8               	btfsc	status,0,c
 11164  003FAA  D009               	goto	l424
 11165                           
 11166                           ; BSR set to: 0
 11167  003FAC  C069  F056         	movff	create_chain@cs,?_create_chain
 11168  003FB0  C06A  F057         	movff	create_chain@cs+1,?_create_chain+1
 11169  003FB4  C06B  F058         	movff	create_chain@cs+2,?_create_chain+2
 11170  003FB8  C06C  F059         	movff	create_chain@cs+3,?_create_chain+3
 11171  003FBC  0012               	return	
 11172  003FBE                     l424:
 11173                           
 11174                           ; BSR set to: 0
 11175                           ;ff.c: 1008: scl = clst;
 11176  003FBE  C058  F061         	movff	create_chain@clst,create_chain@scl
 11177  003FC2  C059  F062         	movff	create_chain@clst+1,create_chain@scl+1
 11178  003FC6  C05A  F063         	movff	create_chain@clst+2,create_chain@scl+2
 11179  003FCA  C05B  F064         	movff	create_chain@clst+3,create_chain@scl+3
 11180  003FCE                     l420:
 11181                           
 11182                           ; BSR set to: 0
 11183                           ;ff.c: 1009: }
 11184                           ;ff.c: 1011: ncl = scl;
 11185  003FCE  C061  F065         	movff	create_chain@scl,create_chain@ncl
 11186  003FD2  C062  F066         	movff	create_chain@scl+1,create_chain@ncl+1
 11187  003FD6  C063  F067         	movff	create_chain@scl+2,create_chain@ncl+2
 11188  003FDA  C064  F068         	movff	create_chain@scl+3,create_chain@ncl+3
 11189  003FDE  D000               	goto	l4195
 11190  003FE0                     l4195:
 11191                           
 11192                           ; BSR set to: 0
 11193                           ;ff.c: 1013: ncl++;
 11194  003FE0  0E01               	movlw	1
 11195  003FE2  0100               	movlb	0	; () banked
 11196  003FE4  2765               	addwf	create_chain@ncl& (0+255),f,b
 11197  003FE6  0E00               	movlw	0
 11198  003FE8  2366               	addwfc	(create_chain@ncl+1)& (0+255),f,b
 11199  003FEA  2367               	addwfc	(create_chain@ncl+2)& (0+255),f,b
 11200  003FEC  2368               	addwfc	(create_chain@ncl+3)& (0+255),f,b
 11201                           
 11202                           ; BSR set to: 0
 11203                           ;ff.c: 1014: if (ncl >= fs->n_fatent) {
 11204  003FEE  EE20 F012          	lfsr	2,18
 11205  003FF2  5056               	movf	create_chain@fs,w,c
 11206  003FF4  26D9               	addwf	fsr2l,f,c
 11207  003FF6  5057               	movf	create_chain@fs+1,w,c
 11208  003FF8  22DA               	addwfc	fsr2h,f,c
 11209  003FFA  50DE               	movf	postinc2,w,c
 11210  003FFC  0100               	movlb	0	; () banked
 11211  003FFE  5D65               	subwf	create_chain@ncl& (0+255),w,b
 11212  004000  50DE               	movf	postinc2,w,c
 11213  004002  0100               	movlb	0	; () banked
 11214  004004  5966               	subwfb	(create_chain@ncl+1)& (0+255),w,b
 11215  004006  50DE               	movf	postinc2,w,c
 11216  004008  0100               	movlb	0	; () banked
 11217  00400A  5967               	subwfb	(create_chain@ncl+2)& (0+255),w,b
 11218  00400C  50DE               	movf	postinc2,w,c
 11219  00400E  0100               	movlb	0	; () banked
 11220  004010  5968               	subwfb	(create_chain@ncl+3)& (0+255),w,b
 11221  004012  A0D8               	btfss	status,0,c
 11222  004014  D025               	goto	l4207
 11223                           
 11224                           ; BSR set to: 0
 11225                           ;ff.c: 1015: ncl = 2;
 11226  004016  0E02               	movlw	2
 11227  004018  0100               	movlb	0	; () banked
 11228  00401A  6F65               	movwf	create_chain@ncl& (0+255),b
 11229  00401C  0E00               	movlw	0
 11230  00401E  6F66               	movwf	(create_chain@ncl+1)& (0+255),b
 11231  004020  0E00               	movlw	0
 11232  004022  6F67               	movwf	(create_chain@ncl+2)& (0+255),b
 11233  004024  0E00               	movlw	0
 11234  004026  6F68               	movwf	(create_chain@ncl+3)& (0+255),b
 11235                           
 11236                           ; BSR set to: 0
 11237                           ;ff.c: 1016: if (ncl > scl) return 0;
 11238  004028  0100               	movlb	0	; () banked
 11239  00402A  5165               	movf	create_chain@ncl& (0+255),w,b
 11240  00402C  0100               	movlb	0	; () banked
 11241  00402E  5D61               	subwf	create_chain@scl& (0+255),w,b
 11242  004030  0100               	movlb	0	; () banked
 11243  004032  5166               	movf	(create_chain@ncl+1)& (0+255),w,b
 11244  004034  0100               	movlb	0	; () banked
 11245  004036  5962               	subwfb	(create_chain@scl+1)& (0+255),w,b
 11246  004038  0100               	movlb	0	; () banked
 11247  00403A  5167               	movf	(create_chain@ncl+2)& (0+255),w,b
 11248  00403C  0100               	movlb	0	; () banked
 11249  00403E  5963               	subwfb	(create_chain@scl+2)& (0+255),w,b
 11250  004040  0100               	movlb	0	; () banked
 11251  004042  5168               	movf	(create_chain@ncl+3)& (0+255),w,b
 11252  004044  0100               	movlb	0	; () banked
 11253  004046  5964               	subwfb	(create_chain@scl+3)& (0+255),w,b
 11254  004048  B0D8               	btfsc	status,0,c
 11255  00404A  D00A               	goto	l4207
 11256                           
 11257                           ; BSR set to: 0
 11258  00404C  0E00               	movlw	0
 11259  00404E  6E56               	movwf	?_create_chain,c
 11260  004050  0E00               	movlw	0
 11261  004052  6E57               	movwf	?_create_chain+1,c
 11262  004054  0E00               	movlw	0
 11263  004056  6E58               	movwf	?_create_chain+2,c
 11264  004058  0E00               	movlw	0
 11265  00405A  6E59               	movwf	?_create_chain+3,c
 11266                           
 11267                           ; BSR set to: 0
 11268  00405C  0012               	return	
 11269                           
 11270                           ; BSR set to: 0
 11271  00405E  D000               	goto	l4207
 11272  004060                     l4207:
 11273                           
 11274                           ; BSR set to: 0
 11275                           ;ff.c: 1017: }
 11276                           ;ff.c: 1018: cs = get_fat(fs, ncl);
 11277  004060  C056  F03B         	movff	create_chain@fs,get_fat@fs
 11278  004064  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
 11279  004068  C065  F03D         	movff	create_chain@ncl,get_fat@clst
 11280  00406C  C066  F03E         	movff	create_chain@ncl+1,get_fat@clst+1
 11281  004070  C067  F03F         	movff	create_chain@ncl+2,get_fat@clst+2
 11282  004074  C068  F040         	movff	create_chain@ncl+3,get_fat@clst+3
 11283  004078  EC20  F021         	call	_get_fat	;wreg free
 11284  00407C  C03B  F069         	movff	?_get_fat,create_chain@cs
 11285  004080  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
 11286  004084  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
 11287  004088  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
 11288                           
 11289                           ;ff.c: 1019: if (cs == 0) break;
 11290  00408C  0100               	movlb	0	; () banked
 11291  00408E  5169               	movf	create_chain@cs& (0+255),w,b
 11292  004090  0100               	movlb	0	; () banked
 11293  004092  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
 11294  004094  0100               	movlb	0	; () banked
 11295  004096  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
 11296  004098  0100               	movlb	0	; () banked
 11297  00409A  116C               	iorwf	(create_chain@cs+3)& (0+255),w,b
 11298  00409C  B4D8               	btfsc	status,2,c
 11299  00409E  D041               	goto	l4223
 11300  0040A0  D001               	goto	l4213
 11301                           
 11302                           ; BSR set to: 0
 11303  0040A2  D03F               	goto	l4223
 11304  0040A4                     l4213:
 11305                           
 11306                           ; BSR set to: 0
 11307                           ;ff.c: 1020: if (cs == 0xFFFFFFFF || cs == 1)
 11308  0040A4  0100               	movlb	0	; () banked
 11309  0040A6  2969               	incf	create_chain@cs& (0+255),w,b
 11310  0040A8  E10A               	bnz	u5440
 11311  0040AA  0100               	movlb	0	; () banked
 11312  0040AC  296A               	incf	(create_chain@cs+1)& (0+255),w,b
 11313  0040AE  E107               	bnz	u5440
 11314  0040B0  0100               	movlb	0	; () banked
 11315  0040B2  296B               	incf	(create_chain@cs+2)& (0+255),w,b
 11316  0040B4  E104               	bnz	u5440
 11317  0040B6  0100               	movlb	0	; () banked
 11318  0040B8  296C               	incf	(create_chain@cs+3)& (0+255),w,b
 11319  0040BA  B4D8               	btfsc	status,2,c
 11320  0040BC  D00A               	goto	l432
 11321  0040BE                     u5440:
 11322                           
 11323                           ; BSR set to: 0
 11324  0040BE  0100               	movlb	0	; () banked
 11325  0040C0  0569               	decf	create_chain@cs& (0+255),w,b
 11326  0040C2  0100               	movlb	0	; () banked
 11327  0040C4  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
 11328  0040C6  0100               	movlb	0	; () banked
 11329  0040C8  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
 11330  0040CA  0100               	movlb	0	; () banked
 11331  0040CC  116C               	iorwf	(create_chain@cs+3)& (0+255),w,b
 11332  0040CE  A4D8               	btfss	status,2,c
 11333  0040D0  D009               	goto	l4217
 11334  0040D2                     l432:
 11335                           
 11336                           ; BSR set to: 0
 11337                           ;ff.c: 1021: return cs;
 11338  0040D2  C069  F056         	movff	create_chain@cs,?_create_chain
 11339  0040D6  C06A  F057         	movff	create_chain@cs+1,?_create_chain+1
 11340  0040DA  C06B  F058         	movff	create_chain@cs+2,?_create_chain+2
 11341  0040DE  C06C  F059         	movff	create_chain@cs+3,?_create_chain+3
 11342  0040E2  0012               	return	
 11343  0040E4                     l4217:
 11344                           
 11345                           ; BSR set to: 0
 11346                           ;ff.c: 1022: if (ncl == scl) return 0;
 11347  0040E4  0100               	movlb	0	; () banked
 11348  0040E6  5161               	movf	create_chain@scl& (0+255),w,b
 11349  0040E8  0100               	movlb	0	; () banked
 11350  0040EA  1965               	xorwf	create_chain@ncl& (0+255),w,b
 11351  0040EC  E10F               	bnz	u5461
 11352  0040EE  0100               	movlb	0	; () banked
 11353  0040F0  5162               	movf	(create_chain@scl+1)& (0+255),w,b
 11354  0040F2  0100               	movlb	0	; () banked
 11355  0040F4  1966               	xorwf	(create_chain@ncl+1)& (0+255),w,b
 11356  0040F6  E10A               	bnz	u5461
 11357  0040F8  0100               	movlb	0	; () banked
 11358  0040FA  5163               	movf	(create_chain@scl+2)& (0+255),w,b
 11359  0040FC  0100               	movlb	0	; () banked
 11360  0040FE  1967               	xorwf	(create_chain@ncl+2)& (0+255),w,b
 11361  004100  E105               	bnz	u5461
 11362  004102  0100               	movlb	0	; () banked
 11363  004104  5164               	movf	(create_chain@scl+3)& (0+255),w,b
 11364  004106  0100               	movlb	0	; () banked
 11365  004108  1968               	xorwf	(create_chain@ncl+3)& (0+255),w,b
 11366  00410A  A4D8               	btfss	status,2,c
 11367  00410C                     u5461:
 11368  00410C  D769               	goto	l4195
 11369                           
 11370                           ; BSR set to: 0
 11371  00410E  0E00               	movlw	0
 11372  004110  6E56               	movwf	?_create_chain,c
 11373  004112  0E00               	movlw	0
 11374  004114  6E57               	movwf	?_create_chain+1,c
 11375  004116  0E00               	movlw	0
 11376  004118  6E58               	movwf	?_create_chain+2,c
 11377  00411A  0E00               	movlw	0
 11378  00411C  6E59               	movwf	?_create_chain+3,c
 11379                           
 11380                           ; BSR set to: 0
 11381  00411E  0012               	return	
 11382                           
 11383                           ; BSR set to: 0
 11384                           ;ff.c: 1023: }
 11385  004120  D75F               	goto	l4195
 11386  004122                     l4223:
 11387                           
 11388                           ; BSR set to: 0
 11389                           ;ff.c: 1025: res = put_fat(fs, ncl, 0x0FFFFFFF);
 11390  004122  C056  F03B         	movff	create_chain@fs,put_fat@fs
 11391  004126  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
 11392  00412A  C065  F03D         	movff	create_chain@ncl,put_fat@clst
 11393  00412E  C066  F03E         	movff	create_chain@ncl+1,put_fat@clst+1
 11394  004132  C067  F03F         	movff	create_chain@ncl+2,put_fat@clst+2
 11395  004136  C068  F040         	movff	create_chain@ncl+3,put_fat@clst+3
 11396  00413A  0EFF               	movlw	255
 11397  00413C  6E41               	movwf	put_fat@val,c
 11398  00413E  0EFF               	movlw	255
 11399  004140  6E42               	movwf	put_fat@val+1,c
 11400  004142  0EFF               	movlw	255
 11401  004144  6E43               	movwf	put_fat@val+2,c
 11402  004146  0E0F               	movlw	15
 11403  004148  6E44               	movwf	put_fat@val+3,c
 11404  00414A  EC39  F01D         	call	_put_fat	;wreg free
 11405  00414E  0100               	movlb	0	; () banked
 11406  004150  6F60               	movwf	create_chain@res& (0+255),b
 11407                           
 11408                           ; BSR set to: 0
 11409                           ;ff.c: 1026: if (res == FR_OK && clst != 0) {
 11410  004152  0100               	movlb	0	; () banked
 11411  004154  5160               	movf	create_chain@res& (0+255),w,b
 11412  004156  0100               	movlb	0	; () banked
 11413  004158  A4D8               	btfss	status,2,c
 11414  00415A  D01F               	goto	l4231
 11415                           
 11416                           ; BSR set to: 0
 11417  00415C  5058               	movf	create_chain@clst,w,c
 11418  00415E  1059               	iorwf	create_chain@clst+1,w,c
 11419  004160  105A               	iorwf	create_chain@clst+2,w,c
 11420  004162  105B               	iorwf	create_chain@clst+3,w,c
 11421  004164  B4D8               	btfsc	status,2,c
 11422  004166  D019               	goto	l4231
 11423                           
 11424                           ; BSR set to: 0
 11425                           ;ff.c: 1027: res = put_fat(fs, clst, ncl);
 11426  004168  C056  F03B         	movff	create_chain@fs,put_fat@fs
 11427  00416C  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
 11428  004170  C058  F03D         	movff	create_chain@clst,put_fat@clst
 11429  004174  C059  F03E         	movff	create_chain@clst+1,put_fat@clst+1
 11430  004178  C05A  F03F         	movff	create_chain@clst+2,put_fat@clst+2
 11431  00417C  C05B  F040         	movff	create_chain@clst+3,put_fat@clst+3
 11432  004180  C065  F041         	movff	create_chain@ncl,put_fat@val
 11433  004184  C066  F042         	movff	create_chain@ncl+1,put_fat@val+1
 11434  004188  C067  F043         	movff	create_chain@ncl+2,put_fat@val+2
 11435  00418C  C068  F044         	movff	create_chain@ncl+3,put_fat@val+3
 11436  004190  EC39  F01D         	call	_put_fat	;wreg free
 11437  004194  0100               	movlb	0	; () banked
 11438  004196  6F60               	movwf	create_chain@res& (0+255),b
 11439  004198  D000               	goto	l4231
 11440  00419A                     l4231:
 11441                           
 11442                           ; BSR set to: 0
 11443                           ;ff.c: 1028: }
 11444                           ;ff.c: 1029: if (res == FR_OK) {
 11445  00419A  0100               	movlb	0	; () banked
 11446  00419C  5160               	movf	create_chain@res& (0+255),w,b
 11447  00419E  0100               	movlb	0	; () banked
 11448  0041A0  A4D8               	btfss	status,2,c
 11449  0041A2  D031               	goto	l4237
 11450                           
 11451                           ; BSR set to: 0
 11452                           ;ff.c: 1030: fs->last_clust = ncl;
 11453  0041A4  EE20 F00A          	lfsr	2,10
 11454  0041A8  5056               	movf	create_chain@fs,w,c
 11455  0041AA  26D9               	addwf	fsr2l,f,c
 11456  0041AC  5057               	movf	create_chain@fs+1,w,c
 11457  0041AE  22DA               	addwfc	fsr2h,f,c
 11458  0041B0  C065  FFDE         	movff	create_chain@ncl,postinc2
 11459  0041B4  C066  FFDE         	movff	create_chain@ncl+1,postinc2
 11460  0041B8  C067  FFDE         	movff	create_chain@ncl+2,postinc2
 11461  0041BC  C068  FFDE         	movff	create_chain@ncl+3,postinc2
 11462                           
 11463                           ;ff.c: 1031: if (fs->free_clust != 0xFFFFFFFF) {
 11464  0041C0  EE20 F00E          	lfsr	2,14
 11465  0041C4  5056               	movf	create_chain@fs,w,c
 11466  0041C6  26D9               	addwf	fsr2l,f,c
 11467  0041C8  5057               	movf	create_chain@fs+1,w,c
 11468  0041CA  22DA               	addwfc	fsr2h,f,c
 11469  0041CC  28DE               	incf	postinc2,w,c
 11470  0041CE  E107               	bnz	u5500
 11471  0041D0  28DE               	incf	postinc2,w,c
 11472  0041D2  E105               	bnz	u5500
 11473  0041D4  28DE               	incf	postinc2,w,c
 11474  0041D6  E103               	bnz	u5500
 11475  0041D8  28DE               	incf	postinc2,w,c
 11476  0041DA  B4D8               	btfsc	status,2,c
 11477  0041DC  D028               	goto	l437
 11478  0041DE                     u5500:
 11479                           
 11480                           ; BSR set to: 0
 11481                           ;ff.c: 1032: fs->free_clust--;
 11482  0041DE  EE20 F00E          	lfsr	2,14
 11483  0041E2  5056               	movf	create_chain@fs,w,c
 11484  0041E4  26D9               	addwf	fsr2l,f,c
 11485  0041E6  5057               	movf	create_chain@fs+1,w,c
 11486  0041E8  22DA               	addwfc	fsr2h,f,c
 11487  0041EA  06DE               	decf	postinc2,f,c
 11488  0041EC  0E00               	movlw	0
 11489  0041EE  5ADE               	subwfb	postinc2,f,c
 11490  0041F0  5ADE               	subwfb	postinc2,f,c
 11491  0041F2  5ADE               	subwfb	postinc2,f,c
 11492                           
 11493                           ;ff.c: 1033: fs->fsi_flag |= 1;
 11494  0041F4  EE20 F005          	lfsr	2,5
 11495  0041F8  5056               	movf	create_chain@fs,w,c
 11496  0041FA  26D9               	addwf	fsr2l,f,c
 11497  0041FC  5057               	movf	create_chain@fs+1,w,c
 11498  0041FE  22DA               	addwfc	fsr2h,f,c
 11499  004200  0E00               	movlw	0
 11500  004202  80DB               	bsf	plusw2,0,c
 11501                           
 11502                           ; BSR set to: 0
 11503                           ;ff.c: 1034: }
 11504                           ;ff.c: 1035: } else {
 11505  004204  D014               	goto	l437
 11506  004206                     l4237:
 11507                           
 11508                           ; BSR set to: 0
 11509                           ;ff.c: 1036: ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 11510  004206  0100               	movlb	0	; () banked
 11511  004208  0560               	decf	create_chain@res& (0+255),w,b
 11512  00420A  B4D8               	btfsc	status,2,c
 11513  00420C  D00A               	goto	l439
 11514                           
 11515                           ; BSR set to: 0
 11516  00420E  0E01               	movlw	1
 11517  004210  0100               	movlb	0	; () banked
 11518  004212  6F65               	movwf	create_chain@ncl& (0+255),b
 11519  004214  0E00               	movlw	0
 11520  004216  6F66               	movwf	(create_chain@ncl+1)& (0+255),b
 11521  004218  0E00               	movlw	0
 11522  00421A  6F67               	movwf	(create_chain@ncl+2)& (0+255),b
 11523  00421C  0E00               	movlw	0
 11524  00421E  6F68               	movwf	(create_chain@ncl+3)& (0+255),b
 11525  004220  D006               	goto	l437
 11526  004222                     l439:
 11527                           
 11528                           ; BSR set to: 0
 11529  004222  0100               	movlb	0	; () banked
 11530  004224  6965               	setf	create_chain@ncl& (0+255),b
 11531  004226  6966               	setf	(create_chain@ncl+1)& (0+255),b
 11532  004228  6967               	setf	(create_chain@ncl+2)& (0+255),b
 11533  00422A  6968               	setf	(create_chain@ncl+3)& (0+255),b
 11534  00422C  D000               	goto	l437
 11535  00422E                     l437:
 11536                           
 11537                           ; BSR set to: 0
 11538                           ;ff.c: 1037: }
 11539                           ;ff.c: 1039: return ncl;
 11540  00422E  C065  F056         	movff	create_chain@ncl,?_create_chain
 11541  004232  C066  F057         	movff	create_chain@ncl+1,?_create_chain+1
 11542  004236  C067  F058         	movff	create_chain@ncl+2,?_create_chain+2
 11543  00423A  C068  F059         	movff	create_chain@ncl+3,?_create_chain+3
 11544                           
 11545                           ; BSR set to: 0
 11546  00423E  0012               	return		;funcret
 11547  004240                     __end_of_create_chain:
 11548                           	opt stack 0
 11549                           tblptru	equ	0xFF8
 11550                           tblptrh	equ	0xFF7
 11551                           tblptrl	equ	0xFF6
 11552                           tablat	equ	0xFF5
 11553                           prodh	equ	0xFF4
 11554                           prodl	equ	0xFF3
 11555                           indf0	equ	0xFEF
 11556                           postinc0	equ	0xFEE
 11557                           fsr0h	equ	0xFEA
 11558                           fsr0l	equ	0xFE9
 11559                           wreg	equ	0xFE8
 11560                           indf1	equ	0xFE7
 11561                           postinc1	equ	0xFE6
 11562                           postdec1	equ	0xFE5
 11563                           fsr1h	equ	0xFE2
 11564                           fsr1l	equ	0xFE1
 11565                           indf2	equ	0xFDF
 11566                           postinc2	equ	0xFDE
 11567                           postdec2	equ	0xFDD
 11568                           plusw2	equ	0xFDB
 11569                           fsr2h	equ	0xFDA
 11570                           fsr2l	equ	0xFD9
 11571                           status	equ	0xFD8
 11572                           
 11573 ;; *************** function _put_fat *****************
 11574 ;; Defined at:
 11575 ;;		line 873 in file "ff.c"
 11576 ;; Parameters:    Size  Location     Type
 11577 ;;  fs              2   58[COMRAM] PTR struct .
 11578 ;;		 -> FatFs(558), NULL(0), 
 11579 ;;  clst            4   60[COMRAM] unsigned long 
 11580 ;;  val             4   64[COMRAM] unsigned long 
 11581 ;; Auto vars:     Size  Location     Type
 11582 ;;  p               2   83[COMRAM] PTR unsigned char 
 11583 ;;		 -> FatFs.win(512), FatFs(558), NULL(0), 
 11584 ;;  bc              2   80[COMRAM] unsigned int 
 11585 ;;  res             1   82[COMRAM] enum E88
 11586 ;; Return value:  Size  Location     Type
 11587 ;;                  1    wreg      enum E88
 11588 ;; Registers used:
 11589 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11590 ;; Tracked objects:
 11591 ;;		On entry : 0/0
 11592 ;;		On exit  : 0/0
 11593 ;;		Unchanged: 0/0
 11594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11595 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11596 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11597 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11598 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11599 ;;Total ram usage:       27 bytes
 11600 ;; Hardware stack levels used:    1
 11601 ;; Hardware stack levels required when called:    8
 11602 ;; This function calls:
 11603 ;;		_move_window
 11604 ;; This function is called by:
 11605 ;;		_remove_chain
 11606 ;;		_create_chain
 11607 ;; This function uses a non-reentrant model
 11608 ;;
 11609                           
 11610                           	psect	text23
 11611  003A72                     __ptext23:
 11612                           	opt stack 0
 11613  003A72                     _put_fat:
 11614                           	opt stack 20
 11615                           
 11616                           ;ff.c: 879: UINT bc;
 11617                           ;ff.c: 880: BYTE *p;
 11618                           ;ff.c: 881: FRESULT res;
 11619                           ;ff.c: 884: if (clst < 2 || clst >= fs->n_fatent) {
 11620                           
 11621                           ; BSR set to: 0
 11622                           ;incstack = 0
 11623  003A72  5040               	movf	put_fat@clst+3,w,c
 11624  003A74  103F               	iorwf	put_fat@clst+2,w,c
 11625  003A76  103E               	iorwf	put_fat@clst+1,w,c
 11626  003A78  E104               	bnz	u5190
 11627  003A7A  0E02               	movlw	2
 11628  003A7C  5C3D               	subwf	put_fat@clst,w,c
 11629  003A7E  A0D8               	btfss	status,0,c
 11630  003A80  D1EE               	goto	l4131
 11631  003A82                     u5190:
 11632  003A82  EE20 F012          	lfsr	2,18
 11633  003A86  503B               	movf	put_fat@fs,w,c
 11634  003A88  26D9               	addwf	fsr2l,f,c
 11635  003A8A  503C               	movf	put_fat@fs+1,w,c
 11636  003A8C  22DA               	addwfc	fsr2h,f,c
 11637  003A8E  50DE               	movf	postinc2,w,c
 11638  003A90  5C3D               	subwf	put_fat@clst,w,c
 11639  003A92  50DE               	movf	postinc2,w,c
 11640  003A94  583E               	subwfb	put_fat@clst+1,w,c
 11641  003A96  50DE               	movf	postinc2,w,c
 11642  003A98  583F               	subwfb	put_fat@clst+2,w,c
 11643  003A9A  50DE               	movf	postinc2,w,c
 11644  003A9C  5840               	subwfb	put_fat@clst+3,w,c
 11645  003A9E  A0D8               	btfss	status,0,c
 11646  003AA0  D1E1               	goto	l4133
 11647  003AA2  D1DD               	goto	l4131
 11648                           
 11649                           ;ff.c: 888: switch (fs->fs_type) {
 11650                           
 11651                           ;ff.c: 887: } else {
 11652                           
 11653                           ;ff.c: 885: res = FR_INT_ERR;
 11654  003AA4  D1DF               	goto	l4133
 11655  003AA6                     l381:
 11656                           
 11657                           ;ff.c: 890: bc = (UINT)clst; bc += bc / 2;
 11658  003AA6  C03D  F051         	movff	put_fat@clst,put_fat@bc
 11659  003AAA  C03E  F052         	movff	put_fat@clst+1,put_fat@bc+1
 11660  003AAE  90D8               	bcf	status,0,c
 11661  003AB0  3052               	rrcf	put_fat@bc+1,w,c
 11662  003AB2  6E46               	movwf	(??_put_fat+1)& (0+255),c
 11663  003AB4  3051               	rrcf	put_fat@bc,w,c
 11664  003AB6  6E45               	movwf	??_put_fat& (0+255),c
 11665  003AB8  5045               	movf	??_put_fat,w,c
 11666  003ABA  2651               	addwf	put_fat@bc,f,c
 11667  003ABC  5046               	movf	??_put_fat+1,w,c
 11668  003ABE  2252               	addwfc	put_fat@bc+1,f,c
 11669                           
 11670                           ;ff.c: 891: res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
 11671  003AC0  C03B  F030         	movff	put_fat@fs,move_window@fs
 11672  003AC4  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 11673  003AC8  EE20 F01E          	lfsr	2,30
 11674  003ACC  503B               	movf	put_fat@fs,w,c
 11675  003ACE  26D9               	addwf	fsr2l,f,c
 11676  003AD0  503C               	movf	put_fat@fs+1,w,c
 11677  003AD2  22DA               	addwfc	fsr2h,f,c
 11678  003AD4  CFDE F045          	movff	postinc2,??_put_fat
 11679  003AD8  CFDE F046          	movff	postinc2,??_put_fat+1
 11680  003ADC  CFDE F047          	movff	postinc2,??_put_fat+2
 11681  003AE0  CFDE F048          	movff	postinc2,??_put_fat+3
 11682  003AE4  C051  F049         	movff	put_fat@bc,??_put_fat+4
 11683  003AE8  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
 11684  003AEC  0E09               	movlw	9
 11685  003AEE  6E4B               	movwf	(??_put_fat+6)& (0+255),c
 11686  003AF0                     u5215:
 11687  003AF0  90D8               	bcf	status,0,c
 11688  003AF2  324A               	rrcf	??_put_fat+5,f,c
 11689  003AF4  3249               	rrcf	??_put_fat+4,f,c
 11690  003AF6  2E4B               	decfsz	(??_put_fat+6)& (0+255),f,c
 11691  003AF8  D7FB               	goto	u5215
 11692  003AFA  5049               	movf	??_put_fat+4,w,c
 11693  003AFC  2445               	addwf	??_put_fat,w,c
 11694  003AFE  6E32               	movwf	move_window@sector,c
 11695  003B00  504A               	movf	??_put_fat+5,w,c
 11696  003B02  2046               	addwfc	??_put_fat+1,w,c
 11697  003B04  6E33               	movwf	move_window@sector+1,c
 11698  003B06  0E00               	movlw	0
 11699  003B08  2047               	addwfc	??_put_fat+2,w,c
 11700  003B0A  6E34               	movwf	move_window@sector+2,c
 11701  003B0C  0E00               	movlw	0
 11702  003B0E  2048               	addwfc	??_put_fat+3,w,c
 11703  003B10  6E35               	movwf	move_window@sector+3,c
 11704  003B12  ECE9  F02F         	call	_move_window	;wreg free
 11705  003B16  6E53               	movwf	put_fat@res,c
 11706                           
 11707                           ;ff.c: 892: if (res != FR_OK) break;
 11708  003B18  5053               	movf	put_fat@res,w,c
 11709  003B1A  A4D8               	btfss	status,2,c
 11710  003B1C  D1B3               	goto	l4135
 11711  003B1E  D001               	goto	l4079
 11712  003B20  D1B1               	goto	l4135
 11713  003B22                     l4079:
 11714                           
 11715                           ;ff.c: 893: p = &fs->win[bc++ % ((UINT)512)];
 11716  003B22  0EFF               	movlw	255
 11717  003B24  6E45               	movwf	??_put_fat& (0+255),c
 11718  003B26  0E01               	movlw	1
 11719  003B28  6E46               	movwf	(??_put_fat+1)& (0+255),c
 11720  003B2A  C051  F047         	movff	put_fat@bc,??_put_fat+2
 11721  003B2E  C052  F048         	movff	put_fat@bc+1,??_put_fat+3
 11722  003B32  5045               	movf	??_put_fat,w,c
 11723  003B34  1647               	andwf	??_put_fat+2,f,c
 11724  003B36  5046               	movf	??_put_fat+1,w,c
 11725  003B38  1648               	andwf	??_put_fat+3,f,c
 11726  003B3A  0E2E               	movlw	46
 11727  003B3C  2647               	addwf	??_put_fat+2,f,c
 11728  003B3E  0E00               	movlw	0
 11729  003B40  2248               	addwfc	??_put_fat+3,f,c
 11730  003B42  5047               	movf	??_put_fat+2,w,c
 11731  003B44  243B               	addwf	put_fat@fs,w,c
 11732  003B46  6E54               	movwf	put_fat@p,c
 11733  003B48  5048               	movf	??_put_fat+3,w,c
 11734  003B4A  203C               	addwfc	put_fat@fs+1,w,c
 11735  003B4C  6E55               	movwf	put_fat@p+1,c
 11736  003B4E  4A51               	infsnz	put_fat@bc,f,c
 11737  003B50  2A52               	incf	put_fat@bc+1,f,c
 11738                           
 11739                           ;ff.c: 894: *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 11740  003B52  B03D               	btfsc	put_fat@clst,0,c
 11741  003B54  D004               	goto	l4087
 11742  003B56  C041  F04D         	movff	put_fat@val,_put_fat$767
 11743  003B5A  6A4E               	clrf	_put_fat$767+1,c
 11744  003B5C  D01B               	goto	l4089
 11745  003B5E                     l4087:
 11746  003B5E  5041               	movf	put_fat@val,w,c
 11747  003B60  6E45               	movwf	??_put_fat& (0+255),c
 11748  003B62  6A46               	clrf	(??_put_fat+1)& (0+255),c
 11749  003B64  3A45               	swapf	??_put_fat,f,c
 11750  003B66  3A46               	swapf	??_put_fat+1,f,c
 11751  003B68  0EF0               	movlw	240
 11752  003B6A  1646               	andwf	??_put_fat+1,f,c
 11753  003B6C  5045               	movf	??_put_fat,w,c
 11754  003B6E  0B0F               	andlw	15
 11755  003B70  1246               	iorwf	??_put_fat+1,f,c
 11756  003B72  0EF0               	movlw	240
 11757  003B74  1645               	andwf	??_put_fat,f,c
 11758  003B76  C054  FFD9         	movff	put_fat@p,fsr2l
 11759  003B7A  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11760  003B7E  50DF               	movf	indf2,w,c
 11761  003B80  0B0F               	andlw	15
 11762  003B82  6E47               	movwf	(??_put_fat+2)& (0+255),c
 11763  003B84  6A48               	clrf	(??_put_fat+3)& (0+255),c
 11764  003B86  5045               	movf	??_put_fat,w,c
 11765  003B88  1047               	iorwf	??_put_fat+2,w,c
 11766  003B8A  6E4D               	movwf	_put_fat$767,c
 11767  003B8C  5046               	movf	??_put_fat+1,w,c
 11768  003B8E  1048               	iorwf	??_put_fat+3,w,c
 11769  003B90  6E4E               	movwf	_put_fat$767+1,c
 11770  003B92  D000               	goto	l4089
 11771  003B94                     l4089:
 11772  003B94  C054  FFD9         	movff	put_fat@p,fsr2l
 11773  003B98  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11774  003B9C  C04D  FFDF         	movff	_put_fat$767,indf2
 11775                           
 11776                           ;ff.c: 895: fs->wflag = 1;
 11777  003BA0  EE20 F004          	lfsr	2,4
 11778  003BA4  503B               	movf	put_fat@fs,w,c
 11779  003BA6  26D9               	addwf	fsr2l,f,c
 11780  003BA8  503C               	movf	put_fat@fs+1,w,c
 11781  003BAA  22DA               	addwfc	fsr2h,f,c
 11782  003BAC  0E01               	movlw	1
 11783  003BAE  6EDF               	movwf	indf2,c
 11784                           
 11785                           ;ff.c: 896: res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
 11786  003BB0  C03B  F030         	movff	put_fat@fs,move_window@fs
 11787  003BB4  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 11788  003BB8  EE20 F01E          	lfsr	2,30
 11789  003BBC  503B               	movf	put_fat@fs,w,c
 11790  003BBE  26D9               	addwf	fsr2l,f,c
 11791  003BC0  503C               	movf	put_fat@fs+1,w,c
 11792  003BC2  22DA               	addwfc	fsr2h,f,c
 11793  003BC4  CFDE F045          	movff	postinc2,??_put_fat
 11794  003BC8  CFDE F046          	movff	postinc2,??_put_fat+1
 11795  003BCC  CFDE F047          	movff	postinc2,??_put_fat+2
 11796  003BD0  CFDE F048          	movff	postinc2,??_put_fat+3
 11797  003BD4  C051  F049         	movff	put_fat@bc,??_put_fat+4
 11798  003BD8  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
 11799  003BDC  0E09               	movlw	9
 11800  003BDE  6E4B               	movwf	(??_put_fat+6)& (0+255),c
 11801  003BE0                     u5245:
 11802  003BE0  90D8               	bcf	status,0,c
 11803  003BE2  324A               	rrcf	??_put_fat+5,f,c
 11804  003BE4  3249               	rrcf	??_put_fat+4,f,c
 11805  003BE6  2E4B               	decfsz	(??_put_fat+6)& (0+255),f,c
 11806  003BE8  D7FB               	goto	u5245
 11807  003BEA  5049               	movf	??_put_fat+4,w,c
 11808  003BEC  2445               	addwf	??_put_fat,w,c
 11809  003BEE  6E32               	movwf	move_window@sector,c
 11810  003BF0  504A               	movf	??_put_fat+5,w,c
 11811  003BF2  2046               	addwfc	??_put_fat+1,w,c
 11812  003BF4  6E33               	movwf	move_window@sector+1,c
 11813  003BF6  0E00               	movlw	0
 11814  003BF8  2047               	addwfc	??_put_fat+2,w,c
 11815  003BFA  6E34               	movwf	move_window@sector+2,c
 11816  003BFC  0E00               	movlw	0
 11817  003BFE  2048               	addwfc	??_put_fat+3,w,c
 11818  003C00  6E35               	movwf	move_window@sector+3,c
 11819  003C02  ECE9  F02F         	call	_move_window	;wreg free
 11820  003C06  6E53               	movwf	put_fat@res,c
 11821                           
 11822                           ;ff.c: 897: if (res != FR_OK) break;
 11823  003C08  5053               	movf	put_fat@res,w,c
 11824  003C0A  A4D8               	btfss	status,2,c
 11825  003C0C  D13B               	goto	l4135
 11826  003C0E  D001               	goto	l4099
 11827  003C10  D139               	goto	l4135
 11828  003C12                     l4099:
 11829                           
 11830                           ;ff.c: 898: p = &fs->win[bc % ((UINT)512)];
 11831  003C12  0EFF               	movlw	255
 11832  003C14  6E45               	movwf	??_put_fat& (0+255),c
 11833  003C16  0E01               	movlw	1
 11834  003C18  6E46               	movwf	(??_put_fat+1)& (0+255),c
 11835  003C1A  C051  F047         	movff	put_fat@bc,??_put_fat+2
 11836  003C1E  C052  F048         	movff	put_fat@bc+1,??_put_fat+3
 11837  003C22  5045               	movf	??_put_fat,w,c
 11838  003C24  1647               	andwf	??_put_fat+2,f,c
 11839  003C26  5046               	movf	??_put_fat+1,w,c
 11840  003C28  1648               	andwf	??_put_fat+3,f,c
 11841  003C2A  0E2E               	movlw	46
 11842  003C2C  2647               	addwf	??_put_fat+2,f,c
 11843  003C2E  0E00               	movlw	0
 11844  003C30  2248               	addwfc	??_put_fat+3,f,c
 11845  003C32  5047               	movf	??_put_fat+2,w,c
 11846  003C34  243B               	addwf	put_fat@fs,w,c
 11847  003C36  6E54               	movwf	put_fat@p,c
 11848  003C38  5048               	movf	??_put_fat+3,w,c
 11849  003C3A  203C               	addwfc	put_fat@fs+1,w,c
 11850  003C3C  6E55               	movwf	put_fat@p+1,c
 11851                           
 11852                           ;ff.c: 899: *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F
      +                          ));
 11853  003C3E  B03D               	btfsc	put_fat@clst,0,c
 11854  003C40  D01B               	goto	l4105
 11855  003C42  C041  F045         	movff	put_fat@val,??_put_fat
 11856  003C46  C042  F046         	movff	put_fat@val+1,??_put_fat+1
 11857  003C4A  C043  F047         	movff	put_fat@val+2,??_put_fat+2
 11858  003C4E  C044  F048         	movff	put_fat@val+3,??_put_fat+3
 11859  003C52  C046  F045         	movff	??_put_fat+1,??_put_fat
 11860  003C56  C047  F046         	movff	??_put_fat+2,??_put_fat+1
 11861  003C5A  C048  F047         	movff	??_put_fat+3,??_put_fat+2
 11862  003C5E  6A48               	clrf	??_put_fat+3,c
 11863  003C60  0E0F               	movlw	15
 11864  003C62  1645               	andwf	??_put_fat,f,c
 11865  003C64  C054  FFD9         	movff	put_fat@p,fsr2l
 11866  003C68  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11867  003C6C  50DF               	movf	indf2,w,c
 11868  003C6E  0BF0               	andlw	240
 11869  003C70  1045               	iorwf	??_put_fat,w,c
 11870  003C72  6E49               	movwf	(??_put_fat+4)& (0+255),c
 11871  003C74  5049               	movf	??_put_fat+4,w,c
 11872  003C76  D012               	goto	L12
 11873  003C78                     l4105:
 11874  003C78  C041  F045         	movff	put_fat@val,??_put_fat
 11875  003C7C  C042  F046         	movff	put_fat@val+1,??_put_fat+1
 11876  003C80  C043  F047         	movff	put_fat@val+2,??_put_fat+2
 11877  003C84  C044  F048         	movff	put_fat@val+3,??_put_fat+3
 11878  003C88  0E05               	movlw	5
 11879  003C8A  D005               	goto	u5270
 11880  003C8C                     u5275:
 11881  003C8C  90D8               	bcf	status,0,c
 11882  003C8E  3248               	rrcf	??_put_fat+3,f,c
 11883  003C90  3247               	rrcf	??_put_fat+2,f,c
 11884  003C92  3246               	rrcf	??_put_fat+1,f,c
 11885  003C94  3245               	rrcf	??_put_fat,f,c
 11886  003C96                     u5270:
 11887  003C96  2EE8               	decfsz	wreg,f,c
 11888  003C98  D7F9               	goto	u5275
 11889  003C9A  5045               	movf	??_put_fat,w,c
 11890  003C9C                     L12:
 11891  003C9C  6E4F               	movwf	_put_fat$768,c
 11892  003C9E  6A50               	clrf	_put_fat$768+1,c
 11893  003CA0  D000               	goto	l4107
 11894  003CA2                     l4107:
 11895  003CA2  C054  FFD9         	movff	put_fat@p,fsr2l
 11896  003CA6  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11897  003CAA  C04F  FFDF         	movff	_put_fat$768,indf2
 11898  003CAE  D0CE               	goto	l4129
 11899  003CB0                     l4109:
 11900                           
 11901                           ;ff.c: 904: res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2)));
 11902  003CB0  C03B  F030         	movff	put_fat@fs,move_window@fs
 11903  003CB4  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 11904  003CB8  EE20 F01E          	lfsr	2,30
 11905  003CBC  503B               	movf	put_fat@fs,w,c
 11906  003CBE  26D9               	addwf	fsr2l,f,c
 11907  003CC0  503C               	movf	put_fat@fs+1,w,c
 11908  003CC2  22DA               	addwfc	fsr2h,f,c
 11909  003CC4  CFDE F045          	movff	postinc2,??_put_fat
 11910  003CC8  CFDE F046          	movff	postinc2,??_put_fat+1
 11911  003CCC  CFDE F047          	movff	postinc2,??_put_fat+2
 11912  003CD0  CFDE F048          	movff	postinc2,??_put_fat+3
 11913  003CD4  C03D  F049         	movff	put_fat@clst,??_put_fat+4
 11914  003CD8  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
 11915  003CDC  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
 11916  003CE0  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
 11917  003CE4  C04A  F049         	movff	??_put_fat+5,??_put_fat+4
 11918  003CE8  C04B  F04A         	movff	??_put_fat+6,??_put_fat+5
 11919  003CEC  C04C  F04B         	movff	??_put_fat+7,??_put_fat+6
 11920  003CF0  6A4C               	clrf	??_put_fat+7,c
 11921  003CF2  5045               	movf	??_put_fat,w,c
 11922  003CF4  2449               	addwf	??_put_fat+4,w,c
 11923  003CF6  6E32               	movwf	move_window@sector,c
 11924  003CF8  5046               	movf	??_put_fat+1,w,c
 11925  003CFA  204A               	addwfc	??_put_fat+5,w,c
 11926  003CFC  6E33               	movwf	move_window@sector+1,c
 11927  003CFE  5047               	movf	??_put_fat+2,w,c
 11928  003D00  204B               	addwfc	??_put_fat+6,w,c
 11929  003D02  6E34               	movwf	move_window@sector+2,c
 11930  003D04  5048               	movf	??_put_fat+3,w,c
 11931  003D06  204C               	addwfc	??_put_fat+7,w,c
 11932  003D08  6E35               	movwf	move_window@sector+3,c
 11933  003D0A  ECE9  F02F         	call	_move_window	;wreg free
 11934  003D0E  6E53               	movwf	put_fat@res,c
 11935                           
 11936                           ;ff.c: 905: if (res != FR_OK) break;
 11937  003D10  5053               	movf	put_fat@res,w,c
 11938  003D12  A4D8               	btfss	status,2,c
 11939  003D14  D0B7               	goto	l4135
 11940  003D16  D001               	goto	l4115
 11941  003D18  D0B5               	goto	l4135
 11942  003D1A                     l4115:
 11943                           
 11944                           ;ff.c: 906: p = &fs->win[clst * 2 % ((UINT)512)];
 11945  003D1A  0EFF               	movlw	255
 11946  003D1C  6E45               	movwf	??_put_fat& (0+255),c
 11947  003D1E  0E01               	movlw	1
 11948  003D20  6E46               	movwf	(??_put_fat+1)& (0+255),c
 11949  003D22  C03D  F047         	movff	put_fat@clst,??_put_fat+2
 11950  003D26  C03E  F048         	movff	put_fat@clst+1,??_put_fat+3
 11951  003D2A  90D8               	bcf	status,0,c
 11952  003D2C  3647               	rlcf	??_put_fat+2,f,c
 11953  003D2E  3648               	rlcf	??_put_fat+3,f,c
 11954  003D30  5045               	movf	??_put_fat,w,c
 11955  003D32  1647               	andwf	??_put_fat+2,f,c
 11956  003D34  5046               	movf	??_put_fat+1,w,c
 11957  003D36  1648               	andwf	??_put_fat+3,f,c
 11958  003D38  0E2E               	movlw	46
 11959  003D3A  2647               	addwf	??_put_fat+2,f,c
 11960  003D3C  0E00               	movlw	0
 11961  003D3E  2248               	addwfc	??_put_fat+3,f,c
 11962  003D40  5047               	movf	??_put_fat+2,w,c
 11963  003D42  243B               	addwf	put_fat@fs,w,c
 11964  003D44  6E54               	movwf	put_fat@p,c
 11965  003D46  5048               	movf	??_put_fat+3,w,c
 11966  003D48  203C               	addwfc	put_fat@fs+1,w,c
 11967  003D4A  6E55               	movwf	put_fat@p+1,c
 11968                           
 11969                           ;ff.c: 907: *(WORD*)(BYTE*)(p)=(WORD)((WORD)val);
 11970  003D4C  C054  FFD9         	movff	put_fat@p,fsr2l
 11971  003D50  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11972  003D54  C041  FFDE         	movff	put_fat@val,postinc2
 11973  003D58  C042  FFDD         	movff	put_fat@val+1,postdec2
 11974  003D5C  D077               	goto	l4129
 11975  003D5E                     l4119:
 11976                           
 11977                           ;ff.c: 912: res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4)));
 11978  003D5E  C03B  F030         	movff	put_fat@fs,move_window@fs
 11979  003D62  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 11980  003D66  EE20 F01E          	lfsr	2,30
 11981  003D6A  503B               	movf	put_fat@fs,w,c
 11982  003D6C  26D9               	addwf	fsr2l,f,c
 11983  003D6E  503C               	movf	put_fat@fs+1,w,c
 11984  003D70  22DA               	addwfc	fsr2h,f,c
 11985  003D72  CFDE F045          	movff	postinc2,??_put_fat
 11986  003D76  CFDE F046          	movff	postinc2,??_put_fat+1
 11987  003D7A  CFDE F047          	movff	postinc2,??_put_fat+2
 11988  003D7E  CFDE F048          	movff	postinc2,??_put_fat+3
 11989  003D82  C03D  F049         	movff	put_fat@clst,??_put_fat+4
 11990  003D86  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
 11991  003D8A  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
 11992  003D8E  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
 11993  003D92  0E08               	movlw	8
 11994  003D94  D005               	goto	u5290
 11995  003D96                     u5295:
 11996  003D96  90D8               	bcf	status,0,c
 11997  003D98  324C               	rrcf	??_put_fat+7,f,c
 11998  003D9A  324B               	rrcf	??_put_fat+6,f,c
 11999  003D9C  324A               	rrcf	??_put_fat+5,f,c
 12000  003D9E  3249               	rrcf	??_put_fat+4,f,c
 12001  003DA0                     u5290:
 12002  003DA0  2EE8               	decfsz	wreg,f,c
 12003  003DA2  D7F9               	goto	u5295
 12004  003DA4  5045               	movf	??_put_fat,w,c
 12005  003DA6  2449               	addwf	??_put_fat+4,w,c
 12006  003DA8  6E32               	movwf	move_window@sector,c
 12007  003DAA  5046               	movf	??_put_fat+1,w,c
 12008  003DAC  204A               	addwfc	??_put_fat+5,w,c
 12009  003DAE  6E33               	movwf	move_window@sector+1,c
 12010  003DB0  5047               	movf	??_put_fat+2,w,c
 12011  003DB2  204B               	addwfc	??_put_fat+6,w,c
 12012  003DB4  6E34               	movwf	move_window@sector+2,c
 12013  003DB6  5048               	movf	??_put_fat+3,w,c
 12014  003DB8  204C               	addwfc	??_put_fat+7,w,c
 12015  003DBA  6E35               	movwf	move_window@sector+3,c
 12016  003DBC  ECE9  F02F         	call	_move_window	;wreg free
 12017  003DC0  6E53               	movwf	put_fat@res,c
 12018                           
 12019                           ;ff.c: 913: if (res != FR_OK) break;
 12020  003DC2  5053               	movf	put_fat@res,w,c
 12021  003DC4  A4D8               	btfss	status,2,c
 12022  003DC6  D05E               	goto	l4135
 12023  003DC8  D001               	goto	l4125
 12024  003DCA  D05C               	goto	l4135
 12025  003DCC                     l4125:
 12026                           
 12027                           ;ff.c: 914: p = &fs->win[clst * 4 % ((UINT)512)];
 12028  003DCC  0EFF               	movlw	255
 12029  003DCE  6E45               	movwf	??_put_fat& (0+255),c
 12030  003DD0  0E01               	movlw	1
 12031  003DD2  6E46               	movwf	(??_put_fat+1)& (0+255),c
 12032  003DD4  C03D  F047         	movff	put_fat@clst,??_put_fat+2
 12033  003DD8  C03E  F048         	movff	put_fat@clst+1,??_put_fat+3
 12034  003DDC  90D8               	bcf	status,0,c
 12035  003DDE  3647               	rlcf	??_put_fat+2,f,c
 12036  003DE0  3648               	rlcf	??_put_fat+3,f,c
 12037  003DE2  90D8               	bcf	status,0,c
 12038  003DE4  3647               	rlcf	??_put_fat+2,f,c
 12039  003DE6  3648               	rlcf	??_put_fat+3,f,c
 12040  003DE8  5045               	movf	??_put_fat,w,c
 12041  003DEA  1647               	andwf	??_put_fat+2,f,c
 12042  003DEC  5046               	movf	??_put_fat+1,w,c
 12043  003DEE  1648               	andwf	??_put_fat+3,f,c
 12044  003DF0  0E2E               	movlw	46
 12045  003DF2  2647               	addwf	??_put_fat+2,f,c
 12046  003DF4  0E00               	movlw	0
 12047  003DF6  2248               	addwfc	??_put_fat+3,f,c
 12048  003DF8  5047               	movf	??_put_fat+2,w,c
 12049  003DFA  243B               	addwf	put_fat@fs,w,c
 12050  003DFC  6E54               	movwf	put_fat@p,c
 12051  003DFE  5048               	movf	??_put_fat+3,w,c
 12052  003E00  203C               	addwfc	put_fat@fs+1,w,c
 12053  003E02  6E55               	movwf	put_fat@p+1,c
 12054                           
 12055                           ;ff.c: 915: val |= (DWORD)(*(DWORD*)(BYTE*)(p)) & 0xF0000000;
 12056  003E04  C054  FFD9         	movff	put_fat@p,fsr2l
 12057  003E08  C055  FFDA         	movff	put_fat@p+1,fsr2h
 12058  003E0C  0E00               	movlw	0
 12059  003E0E  14DE               	andwf	postinc2,w,c
 12060  003E10  6E45               	movwf	??_put_fat& (0+255),c
 12061  003E12  0E00               	movlw	0
 12062  003E14  14DE               	andwf	postinc2,w,c
 12063  003E16  6E46               	movwf	(??_put_fat+1)& (0+255),c
 12064  003E18  0E00               	movlw	0
 12065  003E1A  14DE               	andwf	postinc2,w,c
 12066  003E1C  6E47               	movwf	(??_put_fat+2)& (0+255),c
 12067  003E1E  0EF0               	movlw	240
 12068  003E20  14DE               	andwf	postinc2,w,c
 12069  003E22  6E48               	movwf	(??_put_fat+3)& (0+255),c
 12070  003E24  5045               	movf	??_put_fat,w,c
 12071  003E26  1241               	iorwf	put_fat@val,f,c
 12072  003E28  5046               	movf	??_put_fat+1,w,c
 12073  003E2A  1242               	iorwf	put_fat@val+1,f,c
 12074  003E2C  5047               	movf	??_put_fat+2,w,c
 12075  003E2E  1243               	iorwf	put_fat@val+2,f,c
 12076  003E30  5048               	movf	??_put_fat+3,w,c
 12077  003E32  1244               	iorwf	put_fat@val+3,f,c
 12078                           
 12079                           ;ff.c: 916: *(DWORD*)(BYTE*)(p)=(DWORD)(val);
 12080  003E34  C054  FFD9         	movff	put_fat@p,fsr2l
 12081  003E38  C055  FFDA         	movff	put_fat@p+1,fsr2h
 12082  003E3C  C041  FFDE         	movff	put_fat@val,postinc2
 12083  003E40  C042  FFDE         	movff	put_fat@val+1,postinc2
 12084  003E44  C043  FFDE         	movff	put_fat@val+2,postinc2
 12085  003E48  C044  FFDE         	movff	put_fat@val+3,postinc2
 12086  003E4C                     l4129:
 12087                           
 12088                           ;ff.c: 917: fs->wflag = 1;
 12089  003E4C  EE20 F004          	lfsr	2,4
 12090  003E50  503B               	movf	put_fat@fs,w,c
 12091  003E52  26D9               	addwf	fsr2l,f,c
 12092  003E54  503C               	movf	put_fat@fs+1,w,c
 12093  003E56  22DA               	addwfc	fsr2h,f,c
 12094  003E58  0E01               	movlw	1
 12095  003E5A  6EDF               	movwf	indf2,c
 12096                           
 12097                           ;ff.c: 918: break;
 12098  003E5C  D013               	goto	l4135
 12099  003E5E                     l4131:
 12100                           
 12101                           ;ff.c: 921: res = FR_INT_ERR;
 12102  003E5E  0E02               	movlw	2
 12103  003E60  6E53               	movwf	put_fat@res,c
 12104                           
 12105                           ;ff.c: 922: }
 12106  003E62  D010               	goto	l4135
 12107  003E64                     l4133:
 12108  003E64  C03B  FFD9         	movff	put_fat@fs,fsr2l
 12109  003E68  C03C  FFDA         	movff	put_fat@fs+1,fsr2h
 12110  003E6C  50DF               	movf	indf2,w,c
 12111                           
 12112                           ; Switch size 1, requested type "space"
 12113                           ; Number of cases is 3, Range of values is 1 to 3
 12114                           ; switch strategies available:
 12115                           ; Name         Instructions Cycles
 12116                           ; simple_byte           10     6 (average)
 12117                           ;	Chosen strategy is simple_byte
 12118  003E6E  0A01               	xorlw	1	; case 1
 12119  003E70  B4D8               	btfsc	status,2,c
 12120  003E72  D619               	goto	l381
 12121  003E74  0A03               	xorlw	3	; case 2
 12122  003E76  B4D8               	btfsc	status,2,c
 12123  003E78  D71B               	goto	l4109
 12124  003E7A  0A01               	xorlw	1	; case 3
 12125  003E7C  B4D8               	btfsc	status,2,c
 12126  003E7E  D76F               	goto	l4119
 12127  003E80  D7EE               	goto	l4131
 12128  003E82  D000               	goto	l4135
 12129  003E84                     l4135:
 12130                           
 12131                           ;ff.c: 923: }
 12132                           ;ff.c: 925: return res;
 12133  003E84  5053               	movf	put_fat@res,w,c
 12134  003E86  0012               	return	
 12135  003E88  0012               	return		;funcret
 12136  003E8A                     __end_of_put_fat:
 12137                           	opt stack 0
 12138                           tblptru	equ	0xFF8
 12139                           tblptrh	equ	0xFF7
 12140                           tblptrl	equ	0xFF6
 12141                           tablat	equ	0xFF5
 12142                           prodh	equ	0xFF4
 12143                           prodl	equ	0xFF3
 12144                           indf0	equ	0xFEF
 12145                           postinc0	equ	0xFEE
 12146                           fsr0h	equ	0xFEA
 12147                           fsr0l	equ	0xFE9
 12148                           wreg	equ	0xFE8
 12149                           indf1	equ	0xFE7
 12150                           postinc1	equ	0xFE6
 12151                           postdec1	equ	0xFE5
 12152                           fsr1h	equ	0xFE2
 12153                           fsr1l	equ	0xFE1
 12154                           indf2	equ	0xFDF
 12155                           postinc2	equ	0xFDE
 12156                           postdec2	equ	0xFDD
 12157                           plusw2	equ	0xFDB
 12158                           fsr2h	equ	0xFDA
 12159                           fsr2l	equ	0xFD9
 12160                           status	equ	0xFD8
 12161                           
 12162 ;; *************** function _get_fat *****************
 12163 ;; Defined at:
 12164 ;;		line 818 in file "ff.c"
 12165 ;; Parameters:    Size  Location     Type
 12166 ;;  fs              2   58[COMRAM] PTR struct .
 12167 ;;		 -> FatFs(558), NULL(0), 
 12168 ;;  clst            4   60[COMRAM] unsigned long 
 12169 ;; Auto vars:     Size  Location     Type
 12170 ;;  val             4   74[COMRAM] unsigned long 
 12171 ;;  bc              2   82[COMRAM] unsigned int 
 12172 ;;  p               2   80[COMRAM] PTR unsigned char 
 12173 ;;		 -> FatFs.win(512), FatFs(558), NULL(0), 
 12174 ;;  wc              2   78[COMRAM] unsigned int 
 12175 ;; Return value:  Size  Location     Type
 12176 ;;                  4   58[COMRAM] unsigned long 
 12177 ;; Registers used:
 12178 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12179 ;; Tracked objects:
 12180 ;;		On entry : 0/0
 12181 ;;		On exit  : 0/0
 12182 ;;		Unchanged: 0/0
 12183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12184 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12185 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12186 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12187 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12188 ;;Total ram usage:       26 bytes
 12189 ;; Hardware stack levels used:    1
 12190 ;; Hardware stack levels required when called:    8
 12191 ;; This function calls:
 12192 ;;		_move_window
 12193 ;; This function is called by:
 12194 ;;		_remove_chain
 12195 ;;		_create_chain
 12196 ;;		_dir_sdi
 12197 ;;		_dir_next
 12198 ;;		_f_lseek
 12199 ;;		_f_read
 12200 ;; This function uses a non-reentrant model
 12201 ;;
 12202                           
 12203                           	psect	text24
 12204  004240                     __ptext24:
 12205                           	opt stack 0
 12206  004240                     _get_fat:
 12207                           	opt stack 20
 12208                           
 12209                           ;ff.c: 823: UINT wc, bc;
 12210                           ;ff.c: 824: BYTE *p;
 12211                           ;ff.c: 825: DWORD val;
 12212                           ;ff.c: 828: if (clst < 2 || clst >= fs->n_fatent) {
 12213                           
 12214                           ;incstack = 0
 12215  004240  5040               	movf	get_fat@clst+3,w,c
 12216  004242  103F               	iorwf	get_fat@clst+2,w,c
 12217  004244  103E               	iorwf	get_fat@clst+1,w,c
 12218  004246  E104               	bnz	u5080
 12219  004248  0E02               	movlw	2
 12220  00424A  5C3D               	subwf	get_fat@clst,w,c
 12221  00424C  A0D8               	btfss	status,0,c
 12222  00424E  D19A               	goto	l4061
 12223  004250                     u5080:
 12224  004250  EE20 F012          	lfsr	2,18
 12225  004254  503B               	movf	get_fat@fs,w,c
 12226  004256  26D9               	addwf	fsr2l,f,c
 12227  004258  503C               	movf	get_fat@fs+1,w,c
 12228  00425A  22DA               	addwfc	fsr2h,f,c
 12229  00425C  50DE               	movf	postinc2,w,c
 12230  00425E  5C3D               	subwf	get_fat@clst,w,c
 12231  004260  50DE               	movf	postinc2,w,c
 12232  004262  583E               	subwfb	get_fat@clst+1,w,c
 12233  004264  50DE               	movf	postinc2,w,c
 12234  004266  583F               	subwfb	get_fat@clst+2,w,c
 12235  004268  50DE               	movf	postinc2,w,c
 12236  00426A  5840               	subwfb	get_fat@clst+3,w,c
 12237  00426C  B0D8               	btfsc	status,0,c
 12238  00426E  D18A               	goto	l4061
 12239                           
 12240                           ;ff.c: 832: val = 0xFFFFFFFF;
 12241                           
 12242                           ;ff.c: 831: } else {
 12243                           
 12244                           ;ff.c: 829: val = 1;
 12245  004270  684B               	setf	get_fat@val,c
 12246  004272  684C               	setf	get_fat@val+1,c
 12247  004274  684D               	setf	get_fat@val+2,c
 12248  004276  684E               	setf	get_fat@val+3,c
 12249                           
 12250                           ;ff.c: 834: switch (fs->fs_type) {
 12251  004278  D18E               	goto	l4063
 12252  00427A                     l360:
 12253                           
 12254                           ;ff.c: 836: bc = (UINT)clst; bc += bc / 2;
 12255  00427A  C03D  F053         	movff	get_fat@clst,get_fat@bc
 12256  00427E  C03E  F054         	movff	get_fat@clst+1,get_fat@bc+1
 12257  004282  90D8               	bcf	status,0,c
 12258  004284  3054               	rrcf	get_fat@bc+1,w,c
 12259  004286  6E42               	movwf	(??_get_fat+1)& (0+255),c
 12260  004288  3053               	rrcf	get_fat@bc,w,c
 12261  00428A  6E41               	movwf	??_get_fat& (0+255),c
 12262  00428C  5041               	movf	??_get_fat,w,c
 12263  00428E  2653               	addwf	get_fat@bc,f,c
 12264  004290  5042               	movf	??_get_fat+1,w,c
 12265  004292  2254               	addwfc	get_fat@bc+1,f,c
 12266                           
 12267                           ;ff.c: 837: if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 12268  004294  C03B  F030         	movff	get_fat@fs,move_window@fs
 12269  004298  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 12270  00429C  EE20 F01E          	lfsr	2,30
 12271  0042A0  503B               	movf	get_fat@fs,w,c
 12272  0042A2  26D9               	addwf	fsr2l,f,c
 12273  0042A4  503C               	movf	get_fat@fs+1,w,c
 12274  0042A6  22DA               	addwfc	fsr2h,f,c
 12275  0042A8  CFDE F041          	movff	postinc2,??_get_fat
 12276  0042AC  CFDE F042          	movff	postinc2,??_get_fat+1
 12277  0042B0  CFDE F043          	movff	postinc2,??_get_fat+2
 12278  0042B4  CFDE F044          	movff	postinc2,??_get_fat+3
 12279  0042B8  C053  F045         	movff	get_fat@bc,??_get_fat+4
 12280  0042BC  C054  F046         	movff	get_fat@bc+1,??_get_fat+5
 12281  0042C0  0E09               	movlw	9
 12282  0042C2  6E47               	movwf	(??_get_fat+6)& (0+255),c
 12283  0042C4                     u5105:
 12284  0042C4  90D8               	bcf	status,0,c
 12285  0042C6  3246               	rrcf	??_get_fat+5,f,c
 12286  0042C8  3245               	rrcf	??_get_fat+4,f,c
 12287  0042CA  2E47               	decfsz	(??_get_fat+6)& (0+255),f,c
 12288  0042CC  D7FB               	goto	u5105
 12289  0042CE  5045               	movf	??_get_fat+4,w,c
 12290  0042D0  2441               	addwf	??_get_fat,w,c
 12291  0042D2  6E32               	movwf	move_window@sector,c
 12292  0042D4  5046               	movf	??_get_fat+5,w,c
 12293  0042D6  2042               	addwfc	??_get_fat+1,w,c
 12294  0042D8  6E33               	movwf	move_window@sector+1,c
 12295  0042DA  0E00               	movlw	0
 12296  0042DC  2043               	addwfc	??_get_fat+2,w,c
 12297  0042DE  6E34               	movwf	move_window@sector+2,c
 12298  0042E0  0E00               	movlw	0
 12299  0042E2  2044               	addwfc	??_get_fat+3,w,c
 12300  0042E4  6E35               	movwf	move_window@sector+3,c
 12301  0042E6  ECE9  F02F         	call	_move_window	;wreg free
 12302  0042EA  0900               	iorlw	0
 12303  0042EC  A4D8               	btfss	status,2,c
 12304  0042EE  D162               	goto	l358
 12305  0042F0  D001               	goto	l4027
 12306  0042F2  D160               	goto	l358
 12307  0042F4                     l4027:
 12308                           
 12309                           ;ff.c: 838: wc = fs->win[bc++ % ((UINT)512)];
 12310  0042F4  0EFF               	movlw	255
 12311  0042F6  6E41               	movwf	??_get_fat& (0+255),c
 12312  0042F8  0E01               	movlw	1
 12313  0042FA  6E42               	movwf	(??_get_fat+1)& (0+255),c
 12314  0042FC  C053  F043         	movff	get_fat@bc,??_get_fat+2
 12315  004300  C054  F044         	movff	get_fat@bc+1,??_get_fat+3
 12316  004304  5041               	movf	??_get_fat,w,c
 12317  004306  1643               	andwf	??_get_fat+2,f,c
 12318  004308  5042               	movf	??_get_fat+1,w,c
 12319  00430A  1644               	andwf	??_get_fat+3,f,c
 12320  00430C  0E2E               	movlw	46
 12321  00430E  2643               	addwf	??_get_fat+2,f,c
 12322  004310  0E00               	movlw	0
 12323  004312  2244               	addwfc	??_get_fat+3,f,c
 12324  004314  5043               	movf	??_get_fat+2,w,c
 12325  004316  243B               	addwf	get_fat@fs,w,c
 12326  004318  6ED9               	movwf	fsr2l,c
 12327  00431A  5044               	movf	??_get_fat+3,w,c
 12328  00431C  203C               	addwfc	get_fat@fs+1,w,c
 12329  00431E  6EDA               	movwf	fsr2h,c
 12330  004320  50DF               	movf	indf2,w,c
 12331  004322  6E45               	movwf	(??_get_fat+4)& (0+255),c
 12332  004324  5045               	movf	??_get_fat+4,w,c
 12333  004326  6E4F               	movwf	get_fat@wc,c
 12334  004328  6A50               	clrf	get_fat@wc+1,c
 12335  00432A  4A53               	infsnz	get_fat@bc,f,c
 12336  00432C  2A54               	incf	get_fat@bc+1,f,c
 12337                           
 12338                           ;ff.c: 839: if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 12339  00432E  C03B  F030         	movff	get_fat@fs,move_window@fs
 12340  004332  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 12341  004336  EE20 F01E          	lfsr	2,30
 12342  00433A  503B               	movf	get_fat@fs,w,c
 12343  00433C  26D9               	addwf	fsr2l,f,c
 12344  00433E  503C               	movf	get_fat@fs+1,w,c
 12345  004340  22DA               	addwfc	fsr2h,f,c
 12346  004342  CFDE F041          	movff	postinc2,??_get_fat
 12347  004346  CFDE F042          	movff	postinc2,??_get_fat+1
 12348  00434A  CFDE F043          	movff	postinc2,??_get_fat+2
 12349  00434E  CFDE F044          	movff	postinc2,??_get_fat+3
 12350  004352  C053  F045         	movff	get_fat@bc,??_get_fat+4
 12351  004356  C054  F046         	movff	get_fat@bc+1,??_get_fat+5
 12352  00435A  0E09               	movlw	9
 12353  00435C  6E47               	movwf	(??_get_fat+6)& (0+255),c
 12354  00435E                     u5125:
 12355  00435E  90D8               	bcf	status,0,c
 12356  004360  3246               	rrcf	??_get_fat+5,f,c
 12357  004362  3245               	rrcf	??_get_fat+4,f,c
 12358  004364  2E47               	decfsz	(??_get_fat+6)& (0+255),f,c
 12359  004366  D7FB               	goto	u5125
 12360  004368  5045               	movf	??_get_fat+4,w,c
 12361  00436A  2441               	addwf	??_get_fat,w,c
 12362  00436C  6E32               	movwf	move_window@sector,c
 12363  00436E  5046               	movf	??_get_fat+5,w,c
 12364  004370  2042               	addwfc	??_get_fat+1,w,c
 12365  004372  6E33               	movwf	move_window@sector+1,c
 12366  004374  0E00               	movlw	0
 12367  004376  2043               	addwfc	??_get_fat+2,w,c
 12368  004378  6E34               	movwf	move_window@sector+2,c
 12369  00437A  0E00               	movlw	0
 12370  00437C  2044               	addwfc	??_get_fat+3,w,c
 12371  00437E  6E35               	movwf	move_window@sector+3,c
 12372  004380  ECE9  F02F         	call	_move_window	;wreg free
 12373  004384  0900               	iorlw	0
 12374  004386  A4D8               	btfss	status,2,c
 12375  004388  D115               	goto	l358
 12376  00438A  D001               	goto	l4035
 12377  00438C  D113               	goto	l358
 12378  00438E                     l4035:
 12379                           
 12380                           ;ff.c: 840: wc |= fs->win[bc % ((UINT)512)] << 8;
 12381  00438E  0EFF               	movlw	255
 12382  004390  6E41               	movwf	??_get_fat& (0+255),c
 12383  004392  0E01               	movlw	1
 12384  004394  6E42               	movwf	(??_get_fat+1)& (0+255),c
 12385  004396  C053  F043         	movff	get_fat@bc,??_get_fat+2
 12386  00439A  C054  F044         	movff	get_fat@bc+1,??_get_fat+3
 12387  00439E  5041               	movf	??_get_fat,w,c
 12388  0043A0  1643               	andwf	??_get_fat+2,f,c
 12389  0043A2  5042               	movf	??_get_fat+1,w,c
 12390  0043A4  1644               	andwf	??_get_fat+3,f,c
 12391  0043A6  0E2E               	movlw	46
 12392  0043A8  2643               	addwf	??_get_fat+2,f,c
 12393  0043AA  0E00               	movlw	0
 12394  0043AC  2244               	addwfc	??_get_fat+3,f,c
 12395  0043AE  5043               	movf	??_get_fat+2,w,c
 12396  0043B0  243B               	addwf	get_fat@fs,w,c
 12397  0043B2  6ED9               	movwf	fsr2l,c
 12398  0043B4  5044               	movf	??_get_fat+3,w,c
 12399  0043B6  203C               	addwfc	get_fat@fs+1,w,c
 12400  0043B8  6EDA               	movwf	fsr2h,c
 12401  0043BA  50DF               	movf	indf2,w,c
 12402  0043BC  6E45               	movwf	(??_get_fat+4)& (0+255),c
 12403  0043BE  5045               	movf	??_get_fat+4,w,c
 12404  0043C0  6E47               	movwf	(??_get_fat+6)& (0+255),c
 12405  0043C2  6A46               	clrf	(??_get_fat+5)& (0+255),c
 12406  0043C4  5046               	movf	??_get_fat+5,w,c
 12407  0043C6  124F               	iorwf	get_fat@wc,f,c
 12408  0043C8  5047               	movf	??_get_fat+6,w,c
 12409  0043CA  1250               	iorwf	get_fat@wc+1,f,c
 12410                           
 12411                           ;ff.c: 841: val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 12412  0043CC  B03D               	btfsc	get_fat@clst,0,c
 12413  0043CE  D007               	goto	l4041
 12414  0043D0  0EFF               	movlw	255
 12415  0043D2  144F               	andwf	get_fat@wc,w,c
 12416  0043D4  6E49               	movwf	_get_fat$741,c
 12417  0043D6  0E0F               	movlw	15
 12418  0043D8  1450               	andwf	get_fat@wc+1,w,c
 12419  0043DA  6E4A               	movwf	_get_fat$741+1,c
 12420  0043DC  D010               	goto	l4043
 12421  0043DE                     l4041:
 12422  0043DE  C04F  F041         	movff	get_fat@wc,??_get_fat
 12423  0043E2  C050  F042         	movff	get_fat@wc+1,??_get_fat+1
 12424  0043E6  0E04               	movlw	4
 12425  0043E8  6E43               	movwf	(??_get_fat+2)& (0+255),c
 12426  0043EA                     u5155:
 12427  0043EA  90D8               	bcf	status,0,c
 12428  0043EC  3242               	rrcf	??_get_fat+1,f,c
 12429  0043EE  3241               	rrcf	??_get_fat,f,c
 12430  0043F0  2E43               	decfsz	(??_get_fat+2)& (0+255),f,c
 12431  0043F2  D7FB               	goto	u5155
 12432  0043F4  C041  F049         	movff	??_get_fat,_get_fat$741
 12433  0043F8  C042  F04A         	movff	??_get_fat+1,_get_fat$741+1
 12434  0043FC  D000               	goto	l4043
 12435  0043FE                     l4043:
 12436  0043FE  C049  F04B         	movff	_get_fat$741,get_fat@val
 12437  004402  C04A  F04C         	movff	_get_fat$741+1,get_fat@val+1
 12438  004406  D059               	goto	L15
 12439  004408                     l4045:
 12440                           
 12441                           ;ff.c: 845: if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2))) != FR_OK) brea
      +                          k;
 12442  004408  C03B  F030         	movff	get_fat@fs,move_window@fs
 12443  00440C  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 12444  004410  EE20 F01E          	lfsr	2,30
 12445  004414  503B               	movf	get_fat@fs,w,c
 12446  004416  26D9               	addwf	fsr2l,f,c
 12447  004418  503C               	movf	get_fat@fs+1,w,c
 12448  00441A  22DA               	addwfc	fsr2h,f,c
 12449  00441C  CFDE F041          	movff	postinc2,??_get_fat
 12450  004420  CFDE F042          	movff	postinc2,??_get_fat+1
 12451  004424  CFDE F043          	movff	postinc2,??_get_fat+2
 12452  004428  CFDE F044          	movff	postinc2,??_get_fat+3
 12453  00442C  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 12454  004430  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 12455  004434  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 12456  004438  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 12457  00443C  C046  F045         	movff	??_get_fat+5,??_get_fat+4
 12458  004440  C047  F046         	movff	??_get_fat+6,??_get_fat+5
 12459  004444  C048  F047         	movff	??_get_fat+7,??_get_fat+6
 12460  004448  6A48               	clrf	??_get_fat+7,c
 12461  00444A  5041               	movf	??_get_fat,w,c
 12462  00444C  2445               	addwf	??_get_fat+4,w,c
 12463  00444E  6E32               	movwf	move_window@sector,c
 12464  004450  5042               	movf	??_get_fat+1,w,c
 12465  004452  2046               	addwfc	??_get_fat+5,w,c
 12466  004454  6E33               	movwf	move_window@sector+1,c
 12467  004456  5043               	movf	??_get_fat+2,w,c
 12468  004458  2047               	addwfc	??_get_fat+6,w,c
 12469  00445A  6E34               	movwf	move_window@sector+2,c
 12470  00445C  5044               	movf	??_get_fat+3,w,c
 12471  00445E  2048               	addwfc	??_get_fat+7,w,c
 12472  004460  6E35               	movwf	move_window@sector+3,c
 12473  004462  ECE9  F02F         	call	_move_window	;wreg free
 12474  004466  0900               	iorlw	0
 12475  004468  A4D8               	btfss	status,2,c
 12476  00446A  D0A4               	goto	l358
 12477  00446C  D001               	goto	l4049
 12478  00446E  D0A2               	goto	l358
 12479  004470                     l4049:
 12480                           
 12481                           ;ff.c: 846: p = &fs->win[clst * 2 % ((UINT)512)];
 12482  004470  0EFF               	movlw	255
 12483  004472  6E41               	movwf	??_get_fat& (0+255),c
 12484  004474  0E01               	movlw	1
 12485  004476  6E42               	movwf	(??_get_fat+1)& (0+255),c
 12486  004478  C03D  F043         	movff	get_fat@clst,??_get_fat+2
 12487  00447C  C03E  F044         	movff	get_fat@clst+1,??_get_fat+3
 12488  004480  90D8               	bcf	status,0,c
 12489  004482  3643               	rlcf	??_get_fat+2,f,c
 12490  004484  3644               	rlcf	??_get_fat+3,f,c
 12491  004486  5041               	movf	??_get_fat,w,c
 12492  004488  1643               	andwf	??_get_fat+2,f,c
 12493  00448A  5042               	movf	??_get_fat+1,w,c
 12494  00448C  1644               	andwf	??_get_fat+3,f,c
 12495  00448E  0E2E               	movlw	46
 12496  004490  2643               	addwf	??_get_fat+2,f,c
 12497  004492  0E00               	movlw	0
 12498  004494  2244               	addwfc	??_get_fat+3,f,c
 12499  004496  5043               	movf	??_get_fat+2,w,c
 12500  004498  243B               	addwf	get_fat@fs,w,c
 12501  00449A  6E51               	movwf	get_fat@p,c
 12502  00449C  5044               	movf	??_get_fat+3,w,c
 12503  00449E  203C               	addwfc	get_fat@fs+1,w,c
 12504  0044A0  6E52               	movwf	get_fat@p+1,c
 12505                           
 12506                           ;ff.c: 847: val = (WORD)(*(WORD*)(BYTE*)(p));
 12507  0044A2  C051  FFD9         	movff	get_fat@p,fsr2l
 12508  0044A6  C052  FFDA         	movff	get_fat@p+1,fsr2h
 12509  0044AA  CFDE F041          	movff	postinc2,??_get_fat
 12510  0044AE  CFDD F042          	movff	postdec2,??_get_fat+1
 12511  0044B2  C041  F04B         	movff	??_get_fat,get_fat@val
 12512  0044B6  C042  F04C         	movff	??_get_fat+1,get_fat@val+1
 12513  0044BA                     L15:
 12514  0044BA  6A4D               	clrf	get_fat@val+2,c
 12515  0044BC  6A4E               	clrf	get_fat@val+3,c
 12516                           
 12517                           ;ff.c: 848: break;
 12518  0044BE  D07A               	goto	l358
 12519  0044C0                     l4053:
 12520                           
 12521                           ;ff.c: 851: if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4))) != FR_OK) brea
      +                          k;
 12522  0044C0  C03B  F030         	movff	get_fat@fs,move_window@fs
 12523  0044C4  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 12524  0044C8  EE20 F01E          	lfsr	2,30
 12525  0044CC  503B               	movf	get_fat@fs,w,c
 12526  0044CE  26D9               	addwf	fsr2l,f,c
 12527  0044D0  503C               	movf	get_fat@fs+1,w,c
 12528  0044D2  22DA               	addwfc	fsr2h,f,c
 12529  0044D4  CFDE F041          	movff	postinc2,??_get_fat
 12530  0044D8  CFDE F042          	movff	postinc2,??_get_fat+1
 12531  0044DC  CFDE F043          	movff	postinc2,??_get_fat+2
 12532  0044E0  CFDE F044          	movff	postinc2,??_get_fat+3
 12533  0044E4  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 12534  0044E8  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 12535  0044EC  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 12536  0044F0  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 12537  0044F4  0E08               	movlw	8
 12538  0044F6  D005               	goto	u5170
 12539  0044F8                     u5175:
 12540  0044F8  90D8               	bcf	status,0,c
 12541  0044FA  3248               	rrcf	??_get_fat+7,f,c
 12542  0044FC  3247               	rrcf	??_get_fat+6,f,c
 12543  0044FE  3246               	rrcf	??_get_fat+5,f,c
 12544  004500  3245               	rrcf	??_get_fat+4,f,c
 12545  004502                     u5170:
 12546  004502  2EE8               	decfsz	wreg,f,c
 12547  004504  D7F9               	goto	u5175
 12548  004506  5041               	movf	??_get_fat,w,c
 12549  004508  2445               	addwf	??_get_fat+4,w,c
 12550  00450A  6E32               	movwf	move_window@sector,c
 12551  00450C  5042               	movf	??_get_fat+1,w,c
 12552  00450E  2046               	addwfc	??_get_fat+5,w,c
 12553  004510  6E33               	movwf	move_window@sector+1,c
 12554  004512  5043               	movf	??_get_fat+2,w,c
 12555  004514  2047               	addwfc	??_get_fat+6,w,c
 12556  004516  6E34               	movwf	move_window@sector+2,c
 12557  004518  5044               	movf	??_get_fat+3,w,c
 12558  00451A  2048               	addwfc	??_get_fat+7,w,c
 12559  00451C  6E35               	movwf	move_window@sector+3,c
 12560  00451E  ECE9  F02F         	call	_move_window	;wreg free
 12561  004522  0900               	iorlw	0
 12562  004524  A4D8               	btfss	status,2,c
 12563  004526  D046               	goto	l358
 12564  004528  D001               	goto	l4057
 12565  00452A  D044               	goto	l358
 12566  00452C                     l4057:
 12567                           
 12568                           ;ff.c: 852: p = &fs->win[clst * 4 % ((UINT)512)];
 12569  00452C  0EFF               	movlw	255
 12570  00452E  6E41               	movwf	??_get_fat& (0+255),c
 12571  004530  0E01               	movlw	1
 12572  004532  6E42               	movwf	(??_get_fat+1)& (0+255),c
 12573  004534  C03D  F043         	movff	get_fat@clst,??_get_fat+2
 12574  004538  C03E  F044         	movff	get_fat@clst+1,??_get_fat+3
 12575  00453C  90D8               	bcf	status,0,c
 12576  00453E  3643               	rlcf	??_get_fat+2,f,c
 12577  004540  3644               	rlcf	??_get_fat+3,f,c
 12578  004542  90D8               	bcf	status,0,c
 12579  004544  3643               	rlcf	??_get_fat+2,f,c
 12580  004546  3644               	rlcf	??_get_fat+3,f,c
 12581  004548  5041               	movf	??_get_fat,w,c
 12582  00454A  1643               	andwf	??_get_fat+2,f,c
 12583  00454C  5042               	movf	??_get_fat+1,w,c
 12584  00454E  1644               	andwf	??_get_fat+3,f,c
 12585  004550  0E2E               	movlw	46
 12586  004552  2643               	addwf	??_get_fat+2,f,c
 12587  004554  0E00               	movlw	0
 12588  004556  2244               	addwfc	??_get_fat+3,f,c
 12589  004558  5043               	movf	??_get_fat+2,w,c
 12590  00455A  243B               	addwf	get_fat@fs,w,c
 12591  00455C  6E51               	movwf	get_fat@p,c
 12592  00455E  5044               	movf	??_get_fat+3,w,c
 12593  004560  203C               	addwfc	get_fat@fs+1,w,c
 12594  004562  6E52               	movwf	get_fat@p+1,c
 12595                           
 12596                           ;ff.c: 853: val = (DWORD)(*(DWORD*)(BYTE*)(p)) & 0x0FFFFFFF;
 12597  004564  C051  FFD9         	movff	get_fat@p,fsr2l
 12598  004568  C052  FFDA         	movff	get_fat@p+1,fsr2h
 12599  00456C  0EFF               	movlw	255
 12600  00456E  14DE               	andwf	postinc2,w,c
 12601  004570  6E4B               	movwf	get_fat@val,c
 12602  004572  0EFF               	movlw	255
 12603  004574  14DE               	andwf	postinc2,w,c
 12604  004576  6E4C               	movwf	get_fat@val+1,c
 12605  004578  0EFF               	movlw	255
 12606  00457A  14DE               	andwf	postinc2,w,c
 12607  00457C  6E4D               	movwf	get_fat@val+2,c
 12608  00457E  0E0F               	movlw	15
 12609  004580  14DE               	andwf	postinc2,w,c
 12610  004582  D007               	goto	L16
 12611  004584                     l4061:
 12612                           
 12613                           ;ff.c: 857: val = 1;
 12614  004584  0E01               	movlw	1
 12615  004586  6E4B               	movwf	get_fat@val,c
 12616  004588  0E00               	movlw	0
 12617  00458A  6E4C               	movwf	get_fat@val+1,c
 12618  00458C  0E00               	movlw	0
 12619  00458E  6E4D               	movwf	get_fat@val+2,c
 12620  004590  0E00               	movlw	0
 12621  004592                     L16:
 12622  004592  6E4E               	movwf	get_fat@val+3,c
 12623                           
 12624                           ;ff.c: 858: }
 12625  004594  D00F               	goto	l358
 12626  004596                     l4063:
 12627  004596  C03B  FFD9         	movff	get_fat@fs,fsr2l
 12628  00459A  C03C  FFDA         	movff	get_fat@fs+1,fsr2h
 12629  00459E  50DF               	movf	indf2,w,c
 12630                           
 12631                           ; Switch size 1, requested type "space"
 12632                           ; Number of cases is 3, Range of values is 1 to 3
 12633                           ; switch strategies available:
 12634                           ; Name         Instructions Cycles
 12635                           ; simple_byte           10     6 (average)
 12636                           ;	Chosen strategy is simple_byte
 12637  0045A0  0A01               	xorlw	1	; case 1
 12638  0045A2  B4D8               	btfsc	status,2,c
 12639  0045A4  D66A               	goto	l360
 12640  0045A6  0A03               	xorlw	3	; case 2
 12641  0045A8  B4D8               	btfsc	status,2,c
 12642  0045AA  D72E               	goto	l4045
 12643  0045AC  0A01               	xorlw	1	; case 3
 12644  0045AE  B4D8               	btfsc	status,2,c
 12645  0045B0  D787               	goto	l4053
 12646  0045B2  D7E8               	goto	l4061
 12647  0045B4                     l358:
 12648                           
 12649                           ;ff.c: 859: }
 12650                           ;ff.c: 861: return val;
 12651  0045B4  C04B  F03B         	movff	get_fat@val,?_get_fat
 12652  0045B8  C04C  F03C         	movff	get_fat@val+1,?_get_fat+1
 12653  0045BC  C04D  F03D         	movff	get_fat@val+2,?_get_fat+2
 12654  0045C0  C04E  F03E         	movff	get_fat@val+3,?_get_fat+3
 12655  0045C4  0012               	return		;funcret
 12656  0045C6                     __end_of_get_fat:
 12657                           	opt stack 0
 12658                           tblptru	equ	0xFF8
 12659                           tblptrh	equ	0xFF7
 12660                           tblptrl	equ	0xFF6
 12661                           tablat	equ	0xFF5
 12662                           prodh	equ	0xFF4
 12663                           prodl	equ	0xFF3
 12664                           indf0	equ	0xFEF
 12665                           postinc0	equ	0xFEE
 12666                           fsr0h	equ	0xFEA
 12667                           fsr0l	equ	0xFE9
 12668                           wreg	equ	0xFE8
 12669                           indf1	equ	0xFE7
 12670                           postinc1	equ	0xFE6
 12671                           postdec1	equ	0xFE5
 12672                           fsr1h	equ	0xFE2
 12673                           fsr1l	equ	0xFE1
 12674                           indf2	equ	0xFDF
 12675                           postinc2	equ	0xFDE
 12676                           postdec2	equ	0xFDD
 12677                           plusw2	equ	0xFDB
 12678                           fsr2h	equ	0xFDA
 12679                           fsr2l	equ	0xFD9
 12680                           status	equ	0xFD8
 12681                           
 12682 ;; *************** function _clust2sect *****************
 12683 ;; Defined at:
 12684 ;;		line 800 in file "ff.c"
 12685 ;; Parameters:    Size  Location     Type
 12686 ;;  fs              2   12[COMRAM] PTR struct .
 12687 ;;		 -> FatFs(558), NULL(0), 
 12688 ;;  clst            4   14[COMRAM] unsigned long 
 12689 ;; Auto vars:     Size  Location     Type
 12690 ;;		None
 12691 ;; Return value:  Size  Location     Type
 12692 ;;                  4   12[COMRAM] unsigned long 
 12693 ;; Registers used:
 12694 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12695 ;; Tracked objects:
 12696 ;;		On entry : 0/0
 12697 ;;		On exit  : 0/0
 12698 ;;		Unchanged: 0/0
 12699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12700 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12702 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12703 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12704 ;;Total ram usage:       11 bytes
 12705 ;; Hardware stack levels used:    1
 12706 ;; Hardware stack levels required when called:    1
 12707 ;; This function calls:
 12708 ;;		___lmul
 12709 ;; This function is called by:
 12710 ;;		_dir_sdi
 12711 ;;		_dir_next
 12712 ;;		_f_write
 12713 ;;		_f_lseek
 12714 ;;		_f_read
 12715 ;; This function uses a non-reentrant model
 12716 ;;
 12717                           
 12718                           	psect	text25
 12719  005E60                     __ptext25:
 12720                           	opt stack 0
 12721  005E60                     _clust2sect:
 12722                           	opt stack 28
 12723                           
 12724                           ;ff.c: 805: clst -= 2;
 12725                           
 12726                           ;incstack = 0
 12727  005E60  0E02               	movlw	2
 12728  005E62  5E0F               	subwf	clust2sect@clst,f,c
 12729  005E64  0E00               	movlw	0
 12730  005E66  5A10               	subwfb	clust2sect@clst+1,f,c
 12731  005E68  5A11               	subwfb	clust2sect@clst+2,f,c
 12732  005E6A  5A12               	subwfb	clust2sect@clst+3,f,c
 12733                           
 12734                           ;ff.c: 806: if (clst >= fs->n_fatent - 2) return 0;
 12735  005E6C  EE20 F012          	lfsr	2,18
 12736  005E70  500D               	movf	clust2sect@fs,w,c
 12737  005E72  26D9               	addwf	fsr2l,f,c
 12738  005E74  500E               	movf	clust2sect@fs+1,w,c
 12739  005E76  22DA               	addwfc	fsr2h,f,c
 12740  005E78  0EFE               	movlw	254
 12741  005E7A  24DE               	addwf	postinc2,w,c
 12742  005E7C  6E13               	movwf	??_clust2sect& (0+255),c
 12743  005E7E  0EFF               	movlw	255
 12744  005E80  20DE               	addwfc	postinc2,w,c
 12745  005E82  6E14               	movwf	(??_clust2sect+1)& (0+255),c
 12746  005E84  0EFF               	movlw	255
 12747  005E86  20DE               	addwfc	postinc2,w,c
 12748  005E88  6E15               	movwf	(??_clust2sect+2)& (0+255),c
 12749  005E8A  0EFF               	movlw	255
 12750  005E8C  20DE               	addwfc	postinc2,w,c
 12751  005E8E  6E16               	movwf	(??_clust2sect+3)& (0+255),c
 12752  005E90  5013               	movf	??_clust2sect,w,c
 12753  005E92  5C0F               	subwf	clust2sect@clst,w,c
 12754  005E94  5014               	movf	??_clust2sect+1,w,c
 12755  005E96  5810               	subwfb	clust2sect@clst+1,w,c
 12756  005E98  5015               	movf	??_clust2sect+2,w,c
 12757  005E9A  5811               	subwfb	clust2sect@clst+2,w,c
 12758  005E9C  5016               	movf	??_clust2sect+3,w,c
 12759  005E9E  5812               	subwfb	clust2sect@clst+3,w,c
 12760  005EA0  A0D8               	btfss	status,0,c
 12761  005EA2  D009               	goto	l4165
 12762  005EA4  0E00               	movlw	0
 12763  005EA6  6E0D               	movwf	?_clust2sect,c
 12764  005EA8  0E00               	movlw	0
 12765  005EAA  6E0E               	movwf	?_clust2sect+1,c
 12766  005EAC  0E00               	movlw	0
 12767  005EAE  6E0F               	movwf	?_clust2sect+2,c
 12768  005EB0  0E00               	movlw	0
 12769  005EB2  6E10               	movwf	?_clust2sect+3,c
 12770  005EB4  0012               	return	
 12771  005EB6                     l4165:
 12772                           
 12773                           ;ff.c: 807: return clst * fs->csize + fs->database;
 12774  005EB6  EE20 F026          	lfsr	2,38
 12775  005EBA  500D               	movf	clust2sect@fs,w,c
 12776  005EBC  26D9               	addwf	fsr2l,f,c
 12777  005EBE  500E               	movf	clust2sect@fs+1,w,c
 12778  005EC0  22DA               	addwfc	fsr2h,f,c
 12779  005EC2  CFDE F013          	movff	postinc2,??_clust2sect
 12780  005EC6  CFDE F014          	movff	postinc2,??_clust2sect+1
 12781  005ECA  CFDE F015          	movff	postinc2,??_clust2sect+2
 12782  005ECE  CFDE F016          	movff	postinc2,??_clust2sect+3
 12783  005ED2  EE20 F002          	lfsr	2,2
 12784  005ED6  500D               	movf	clust2sect@fs,w,c
 12785  005ED8  26D9               	addwf	fsr2l,f,c
 12786  005EDA  500E               	movf	clust2sect@fs+1,w,c
 12787  005EDC  22DA               	addwfc	fsr2h,f,c
 12788  005EDE  50DF               	movf	indf2,w,c
 12789  005EE0  6E17               	movwf	(??_clust2sect+4)& (0+255),c
 12790  005EE2  5017               	movf	??_clust2sect+4,w,c
 12791  005EE4  6E01               	movwf	___lmul@multiplier,c
 12792  005EE6  6A02               	clrf	___lmul@multiplier+1,c
 12793  005EE8  6A03               	clrf	___lmul@multiplier+2,c
 12794  005EEA  6A04               	clrf	___lmul@multiplier+3,c
 12795  005EEC  C00F  F005         	movff	clust2sect@clst,___lmul@multiplicand
 12796  005EF0  C010  F006         	movff	clust2sect@clst+1,___lmul@multiplicand+1
 12797  005EF4  C011  F007         	movff	clust2sect@clst+2,___lmul@multiplicand+2
 12798  005EF8  C012  F008         	movff	clust2sect@clst+3,___lmul@multiplicand+3
 12799  005EFC  EC13  F032         	call	___lmul	;wreg free
 12800  005F00  5013               	movf	??_clust2sect,w,c
 12801  005F02  2401               	addwf	?___lmul,w,c
 12802  005F04  6E0D               	movwf	?_clust2sect,c
 12803  005F06  5014               	movf	??_clust2sect+1,w,c
 12804  005F08  2002               	addwfc	?___lmul+1,w,c
 12805  005F0A  6E0E               	movwf	?_clust2sect+1,c
 12806  005F0C  5015               	movf	??_clust2sect+2,w,c
 12807  005F0E  2003               	addwfc	?___lmul+2,w,c
 12808  005F10  6E0F               	movwf	?_clust2sect+2,c
 12809  005F12  5016               	movf	??_clust2sect+3,w,c
 12810  005F14  2004               	addwfc	?___lmul+3,w,c
 12811  005F16  6E10               	movwf	?_clust2sect+3,c
 12812  005F18  0012               	return	
 12813  005F1A  0012               	return		;funcret
 12814  005F1C                     __end_of_clust2sect:
 12815                           	opt stack 0
 12816                           tblptru	equ	0xFF8
 12817                           tblptrh	equ	0xFF7
 12818                           tblptrl	equ	0xFF6
 12819                           tablat	equ	0xFF5
 12820                           prodh	equ	0xFF4
 12821                           prodl	equ	0xFF3
 12822                           indf0	equ	0xFEF
 12823                           postinc0	equ	0xFEE
 12824                           fsr0h	equ	0xFEA
 12825                           fsr0l	equ	0xFE9
 12826                           wreg	equ	0xFE8
 12827                           indf1	equ	0xFE7
 12828                           postinc1	equ	0xFE6
 12829                           postdec1	equ	0xFE5
 12830                           fsr1h	equ	0xFE2
 12831                           fsr1l	equ	0xFE1
 12832                           indf2	equ	0xFDF
 12833                           postinc2	equ	0xFDE
 12834                           postdec2	equ	0xFDD
 12835                           plusw2	equ	0xFDB
 12836                           fsr2h	equ	0xFDA
 12837                           fsr2l	equ	0xFD9
 12838                           status	equ	0xFD8
 12839                           
 12840 ;; *************** function ___lmul *****************
 12841 ;; Defined at:
 12842 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul32.c"
 12843 ;; Parameters:    Size  Location     Type
 12844 ;;  multiplier      4    0[COMRAM] unsigned long 
 12845 ;;  multiplicand    4    4[COMRAM] unsigned long 
 12846 ;; Auto vars:     Size  Location     Type
 12847 ;;  product         4    8[COMRAM] unsigned long 
 12848 ;; Return value:  Size  Location     Type
 12849 ;;                  4    0[COMRAM] unsigned long 
 12850 ;; Registers used:
 12851 ;;		wreg, status,2, status,0
 12852 ;; Tracked objects:
 12853 ;;		On entry : 0/0
 12854 ;;		On exit  : 0/0
 12855 ;;		Unchanged: 0/0
 12856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12857 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12858 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12860 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12861 ;;Total ram usage:       12 bytes
 12862 ;; Hardware stack levels used:    1
 12863 ;; This function calls:
 12864 ;;		Nothing
 12865 ;; This function is called by:
 12866 ;;		_clust2sect
 12867 ;;		_find_volume
 12868 ;; This function uses a non-reentrant model
 12869 ;;
 12870                           
 12871                           	psect	text26
 12872  006426                     __ptext26:
 12873                           	opt stack 0
 12874  006426                     ___lmul:
 12875                           	opt stack 28
 12876                           
 12877                           ;incstack = 0
 12878  006426  0E00               	movlw	0
 12879  006428  6E09               	movwf	___lmul@product,c
 12880  00642A  0E00               	movlw	0
 12881  00642C  6E0A               	movwf	___lmul@product+1,c
 12882  00642E  0E00               	movlw	0
 12883  006430  6E0B               	movwf	___lmul@product+2,c
 12884  006432  0E00               	movlw	0
 12885  006434  6E0C               	movwf	___lmul@product+3,c
 12886  006436  D000               	goto	l4141
 12887  006438                     l4141:
 12888  006438  A001               	btfss	___lmul@multiplier,0,c
 12889  00643A  D009               	goto	l4145
 12890  00643C  5005               	movf	___lmul@multiplicand,w,c
 12891  00643E  2609               	addwf	___lmul@product,f,c
 12892  006440  5006               	movf	___lmul@multiplicand+1,w,c
 12893  006442  220A               	addwfc	___lmul@product+1,f,c
 12894  006444  5007               	movf	___lmul@multiplicand+2,w,c
 12895  006446  220B               	addwfc	___lmul@product+2,f,c
 12896  006448  5008               	movf	___lmul@multiplicand+3,w,c
 12897  00644A  220C               	addwfc	___lmul@product+3,f,c
 12898  00644C  D000               	goto	l4145
 12899  00644E                     l4145:
 12900  00644E  90D8               	bcf	status,0,c
 12901  006450  3605               	rlcf	___lmul@multiplicand,f,c
 12902  006452  3606               	rlcf	___lmul@multiplicand+1,f,c
 12903  006454  3607               	rlcf	___lmul@multiplicand+2,f,c
 12904  006456  3608               	rlcf	___lmul@multiplicand+3,f,c
 12905  006458  90D8               	bcf	status,0,c
 12906  00645A  3204               	rrcf	___lmul@multiplier+3,f,c
 12907  00645C  3203               	rrcf	___lmul@multiplier+2,f,c
 12908  00645E  3202               	rrcf	___lmul@multiplier+1,f,c
 12909  006460  3201               	rrcf	___lmul@multiplier,f,c
 12910  006462  5001               	movf	___lmul@multiplier,w,c
 12911  006464  1002               	iorwf	___lmul@multiplier+1,w,c
 12912  006466  1003               	iorwf	___lmul@multiplier+2,w,c
 12913  006468  1004               	iorwf	___lmul@multiplier+3,w,c
 12914  00646A  A4D8               	btfss	status,2,c
 12915  00646C  D7E5               	goto	l4141
 12916  00646E  C009  F001         	movff	___lmul@product,?___lmul
 12917  006472  C00A  F002         	movff	___lmul@product+1,?___lmul+1
 12918  006476  C00B  F003         	movff	___lmul@product+2,?___lmul+2
 12919  00647A  C00C  F004         	movff	___lmul@product+3,?___lmul+3
 12920  00647E  0012               	return		;funcret
 12921  006480                     __end_of___lmul:
 12922                           	opt stack 0
 12923                           tblptru	equ	0xFF8
 12924                           tblptrh	equ	0xFF7
 12925                           tblptrl	equ	0xFF6
 12926                           tablat	equ	0xFF5
 12927                           prodh	equ	0xFF4
 12928                           prodl	equ	0xFF3
 12929                           indf0	equ	0xFEF
 12930                           postinc0	equ	0xFEE
 12931                           fsr0h	equ	0xFEA
 12932                           fsr0l	equ	0xFE9
 12933                           wreg	equ	0xFE8
 12934                           indf1	equ	0xFE7
 12935                           postinc1	equ	0xFE6
 12936                           postdec1	equ	0xFE5
 12937                           fsr1h	equ	0xFE2
 12938                           fsr1l	equ	0xFE1
 12939                           indf2	equ	0xFDF
 12940                           postinc2	equ	0xFDE
 12941                           postdec2	equ	0xFDD
 12942                           plusw2	equ	0xFDB
 12943                           fsr2h	equ	0xFDA
 12944                           fsr2l	equ	0xFD9
 12945                           status	equ	0xFD8
 12946                           
 12947 ;; *************** function ___lldiv *****************
 12948 ;; Defined at:
 12949 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
 12950 ;; Parameters:    Size  Location     Type
 12951 ;;  dividend        4    0[COMRAM] unsigned long 
 12952 ;;  divisor         4    4[COMRAM] unsigned long 
 12953 ;; Auto vars:     Size  Location     Type
 12954 ;;  quotient        4    8[COMRAM] unsigned long 
 12955 ;;  counter         1   12[COMRAM] unsigned char 
 12956 ;; Return value:  Size  Location     Type
 12957 ;;                  4    0[COMRAM] unsigned long 
 12958 ;; Registers used:
 12959 ;;		wreg, status,2, status,0
 12960 ;; Tracked objects:
 12961 ;;		On entry : 0/0
 12962 ;;		On exit  : 0/0
 12963 ;;		Unchanged: 0/0
 12964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12965 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12966 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12968 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12969 ;;Total ram usage:       13 bytes
 12970 ;; Hardware stack levels used:    1
 12971 ;; This function calls:
 12972 ;;		Nothing
 12973 ;; This function is called by:
 12974 ;;		_find_volume
 12975 ;;		_f_lseek
 12976 ;; This function uses a non-reentrant model
 12977 ;;
 12978                           
 12979                           	psect	text27
 12980  006232                     __ptext27:
 12981                           	opt stack 0
 12982  006232                     ___lldiv:
 12983                           	opt stack 28
 12984                           
 12985                           ;incstack = 0
 12986  006232  0E00               	movlw	0
 12987  006234  6E09               	movwf	___lldiv@quotient,c
 12988  006236  0E00               	movlw	0
 12989  006238  6E0A               	movwf	___lldiv@quotient+1,c
 12990  00623A  0E00               	movlw	0
 12991  00623C  6E0B               	movwf	___lldiv@quotient+2,c
 12992  00623E  0E00               	movlw	0
 12993  006240  6E0C               	movwf	___lldiv@quotient+3,c
 12994  006242  5005               	movf	___lldiv@divisor,w,c
 12995  006244  1006               	iorwf	___lldiv@divisor+1,w,c
 12996  006246  1007               	iorwf	___lldiv@divisor+2,w,c
 12997  006248  1008               	iorwf	___lldiv@divisor+3,w,c
 12998  00624A  B4D8               	btfsc	status,2,c
 12999  00624C  D02F               	goto	l1279
 13000  00624E  0E01               	movlw	1
 13001  006250  6E0D               	movwf	___lldiv@counter,c
 13002  006252  D007               	goto	l5035
 13003  006254                     l5033:
 13004  006254  90D8               	bcf	status,0,c
 13005  006256  3605               	rlcf	___lldiv@divisor,f,c
 13006  006258  3606               	rlcf	___lldiv@divisor+1,f,c
 13007  00625A  3607               	rlcf	___lldiv@divisor+2,f,c
 13008  00625C  3608               	rlcf	___lldiv@divisor+3,f,c
 13009  00625E  2A0D               	incf	___lldiv@counter,f,c
 13010  006260  D000               	goto	l5035
 13011  006262                     l5035:
 13012  006262  BE08               	btfsc	___lldiv@divisor+3,7,c
 13013  006264  D002               	goto	l5037
 13014  006266  D7F6               	goto	l5033
 13015  006268  D000               	goto	l5037
 13016  00626A                     l5037:
 13017  00626A  90D8               	bcf	status,0,c
 13018  00626C  3609               	rlcf	___lldiv@quotient,f,c
 13019  00626E  360A               	rlcf	___lldiv@quotient+1,f,c
 13020  006270  360B               	rlcf	___lldiv@quotient+2,f,c
 13021  006272  360C               	rlcf	___lldiv@quotient+3,f,c
 13022  006274  5005               	movf	___lldiv@divisor,w,c
 13023  006276  5C01               	subwf	___lldiv@dividend,w,c
 13024  006278  5006               	movf	___lldiv@divisor+1,w,c
 13025  00627A  5802               	subwfb	___lldiv@dividend+1,w,c
 13026  00627C  5007               	movf	___lldiv@divisor+2,w,c
 13027  00627E  5803               	subwfb	___lldiv@dividend+2,w,c
 13028  006280  5008               	movf	___lldiv@divisor+3,w,c
 13029  006282  5804               	subwfb	___lldiv@dividend+3,w,c
 13030  006284  A0D8               	btfss	status,0,c
 13031  006286  D00A               	goto	l5045
 13032  006288  5005               	movf	___lldiv@divisor,w,c
 13033  00628A  5E01               	subwf	___lldiv@dividend,f,c
 13034  00628C  5006               	movf	___lldiv@divisor+1,w,c
 13035  00628E  5A02               	subwfb	___lldiv@dividend+1,f,c
 13036  006290  5007               	movf	___lldiv@divisor+2,w,c
 13037  006292  5A03               	subwfb	___lldiv@dividend+2,f,c
 13038  006294  5008               	movf	___lldiv@divisor+3,w,c
 13039  006296  5A04               	subwfb	___lldiv@dividend+3,f,c
 13040  006298  8009               	bsf	___lldiv@quotient,0,c
 13041  00629A  D000               	goto	l5045
 13042  00629C                     l5045:
 13043  00629C  90D8               	bcf	status,0,c
 13044  00629E  3208               	rrcf	___lldiv@divisor+3,f,c
 13045  0062A0  3207               	rrcf	___lldiv@divisor+2,f,c
 13046  0062A2  3206               	rrcf	___lldiv@divisor+1,f,c
 13047  0062A4  3205               	rrcf	___lldiv@divisor,f,c
 13048  0062A6  2E0D               	decfsz	___lldiv@counter,f,c
 13049  0062A8  D7E0               	goto	l5037
 13050  0062AA  D000               	goto	l1279
 13051  0062AC                     l1279:
 13052  0062AC  C009  F001         	movff	___lldiv@quotient,?___lldiv
 13053  0062B0  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 13054  0062B4  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 13055  0062B8  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 13056  0062BC  0012               	return		;funcret
 13057  0062BE                     __end_of___lldiv:
 13058                           	opt stack 0
 13059                           tblptru	equ	0xFF8
 13060                           tblptrh	equ	0xFF7
 13061                           tblptrl	equ	0xFF6
 13062                           tablat	equ	0xFF5
 13063                           prodh	equ	0xFF4
 13064                           prodl	equ	0xFF3
 13065                           indf0	equ	0xFEF
 13066                           postinc0	equ	0xFEE
 13067                           fsr0h	equ	0xFEA
 13068                           fsr0l	equ	0xFE9
 13069                           wreg	equ	0xFE8
 13070                           indf1	equ	0xFE7
 13071                           postinc1	equ	0xFE6
 13072                           postdec1	equ	0xFE5
 13073                           fsr1h	equ	0xFE2
 13074                           fsr1l	equ	0xFE1
 13075                           indf2	equ	0xFDF
 13076                           postinc2	equ	0xFDE
 13077                           postdec2	equ	0xFDD
 13078                           plusw2	equ	0xFDB
 13079                           fsr2h	equ	0xFDA
 13080                           fsr2l	equ	0xFD9
 13081                           status	equ	0xFD8
 13082                           
 13083 ;; *************** function _f_close *****************
 13084 ;; Defined at:
 13085 ;;		line 2861 in file "ff.c"
 13086 ;; Parameters:    Size  Location     Type
 13087 ;;  fp              2   77[COMRAM] PTR struct .
 13088 ;;		 -> Fil(32), 
 13089 ;; Auto vars:     Size  Location     Type
 13090 ;;  res             1   79[COMRAM] enum E88
 13091 ;; Return value:  Size  Location     Type
 13092 ;;                  1    wreg      enum E88
 13093 ;; Registers used:
 13094 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13095 ;; Tracked objects:
 13096 ;;		On entry : 0/0
 13097 ;;		On exit  : 0/0
 13098 ;;		Unchanged: 0/0
 13099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13100 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13101 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13103 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13104 ;;Total ram usage:        3 bytes
 13105 ;; Hardware stack levels used:    1
 13106 ;; Hardware stack levels required when called:    9
 13107 ;; This function calls:
 13108 ;;		_f_sync
 13109 ;;		_validate
 13110 ;; This function is called by:
 13111 ;;		_main
 13112 ;; This function uses a non-reentrant model
 13113 ;;
 13114                           
 13115                           	psect	text28
 13116  0065A6                     __ptext28:
 13117                           	opt stack 0
 13118  0065A6                     _f_close:
 13119                           	opt stack 21
 13120                           
 13121                           ;ff.c: 2865: FRESULT res;
 13122                           ;ff.c: 2869: res = f_sync(fp);
 13123                           
 13124                           ;incstack = 0
 13125  0065A6  C04E  F045         	movff	f_close@fp,f_sync@fp
 13126  0065AA  C04F  F046         	movff	f_close@fp+1,f_sync@fp+1
 13127  0065AE  EC12  F02A         	call	_f_sync	;wreg free
 13128  0065B2  6E50               	movwf	f_close@res,c
 13129                           
 13130                           ;ff.c: 2870: if (res == FR_OK)
 13131  0065B4  5050               	movf	f_close@res,w,c
 13132  0065B6  A4D8               	btfss	status,2,c
 13133  0065B8  0012               	return	
 13134                           
 13135                           ;ff.c: 2872: {
 13136                           ;ff.c: 2873: res = validate(fp);
 13137  0065BA  C04E  F002         	movff	f_close@fp,validate@obj
 13138  0065BE  C04F  F003         	movff	f_close@fp+1,validate@obj+1
 13139  0065C2  EC3F  F030         	call	_validate	;wreg free
 13140  0065C6  6E50               	movwf	f_close@res,c
 13141                           
 13142                           ;ff.c: 2874: if (res == FR_OK) {
 13143  0065C8  5050               	movf	f_close@res,w,c
 13144  0065CA  A4D8               	btfss	status,2,c
 13145  0065CC  0012               	return	
 13146                           
 13147                           ;ff.c: 2882: fp->fs = 0;
 13148  0065CE  C04E  FFD9         	movff	f_close@fp,fsr2l
 13149  0065D2  C04F  FFDA         	movff	f_close@fp+1,fsr2h
 13150  0065D6  0E00               	movlw	0
 13151  0065D8  6EDE               	movwf	postinc2,c
 13152  0065DA  0E00               	movlw	0
 13153  0065DC  6EDD               	movwf	postdec2,c
 13154  0065DE  0012               	return	
 13155                           
 13156                           ;ff.c: 2886: }
 13157                           ;ff.c: 2887: }
 13158                           ;ff.c: 2888: return res;
 13159                           ;	Return value of _f_close is never used
 13160  0065E0  0012               	return		;funcret
 13161  0065E2                     __end_of_f_close:
 13162                           	opt stack 0
 13163                           tblptru	equ	0xFF8
 13164                           tblptrh	equ	0xFF7
 13165                           tblptrl	equ	0xFF6
 13166                           tablat	equ	0xFF5
 13167                           prodh	equ	0xFF4
 13168                           prodl	equ	0xFF3
 13169                           indf0	equ	0xFEF
 13170                           postinc0	equ	0xFEE
 13171                           fsr0h	equ	0xFEA
 13172                           fsr0l	equ	0xFE9
 13173                           wreg	equ	0xFE8
 13174                           indf1	equ	0xFE7
 13175                           postinc1	equ	0xFE6
 13176                           postdec1	equ	0xFE5
 13177                           fsr1h	equ	0xFE2
 13178                           fsr1l	equ	0xFE1
 13179                           indf2	equ	0xFDF
 13180                           postinc2	equ	0xFDE
 13181                           postdec2	equ	0xFDD
 13182                           plusw2	equ	0xFDB
 13183                           fsr2h	equ	0xFDA
 13184                           fsr2l	equ	0xFD9
 13185                           status	equ	0xFD8
 13186                           
 13187 ;; *************** function _f_sync *****************
 13188 ;; Defined at:
 13189 ;;		line 2813 in file "ff.c"
 13190 ;; Parameters:    Size  Location     Type
 13191 ;;  fp              2   68[COMRAM] PTR struct .
 13192 ;;		 -> Fil(32), 
 13193 ;; Auto vars:     Size  Location     Type
 13194 ;;  tm              4   70[COMRAM] unsigned long 
 13195 ;;  dir             2   75[COMRAM] PTR unsigned char 
 13196 ;;		 -> FatFs(558), NULL(0), 
 13197 ;;  res             1   74[COMRAM] enum E88
 13198 ;; Return value:  Size  Location     Type
 13199 ;;                  1    wreg      enum E88
 13200 ;; Registers used:
 13201 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13202 ;; Tracked objects:
 13203 ;;		On entry : 0/0
 13204 ;;		On exit  : 0/0
 13205 ;;		Unchanged: 0/0
 13206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13207 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13208 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13210 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13211 ;;Total ram usage:        9 bytes
 13212 ;; Hardware stack levels used:    1
 13213 ;; Hardware stack levels required when called:    8
 13214 ;; This function calls:
 13215 ;;		_move_window
 13216 ;;		_st_clust
 13217 ;;		_sync_fs
 13218 ;;		_validate
 13219 ;; This function is called by:
 13220 ;;		_f_close
 13221 ;; This function uses a non-reentrant model
 13222 ;;
 13223                           
 13224                           	psect	text29
 13225  005424                     __ptext29:
 13226                           	opt stack 0
 13227  005424                     _f_sync:
 13228                           	opt stack 21
 13229                           
 13230                           ;ff.c: 2817: FRESULT res;
 13231                           ;ff.c: 2818: DWORD tm;
 13232                           ;ff.c: 2819: BYTE *dir;
 13233                           ;ff.c: 2822: res = validate(fp);
 13234                           
 13235                           ;incstack = 0
 13236  005424  C045  F002         	movff	f_sync@fp,validate@obj
 13237  005428  C046  F003         	movff	f_sync@fp+1,validate@obj+1
 13238  00542C  EC3F  F030         	call	_validate	;wreg free
 13239  005430  6E4B               	movwf	f_sync@res,c
 13240                           
 13241                           ;ff.c: 2823: if (res == FR_OK) {
 13242  005432  504B               	movf	f_sync@res,w,c
 13243  005434  A4D8               	btfss	status,2,c
 13244  005436  D09E               	goto	l5461
 13245                           
 13246                           ;ff.c: 2824: if (fp->flag & 0x20) {
 13247  005438  EE20 F004          	lfsr	2,4
 13248  00543C  5045               	movf	f_sync@fp,w,c
 13249  00543E  26D9               	addwf	fsr2l,f,c
 13250  005440  5046               	movf	f_sync@fp+1,w,c
 13251  005442  22DA               	addwfc	fsr2h,f,c
 13252  005444  AADF               	btfss	indf2,5,c
 13253  005446  D096               	goto	l5461
 13254                           
 13255                           ;ff.c: 2833: res = move_window(fp->fs, fp->dir_sect);
 13256  005448  C045  FFD9         	movff	f_sync@fp,fsr2l
 13257  00544C  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 13258  005450  CFDE F030          	movff	postinc2,move_window@fs
 13259  005454  CFDD F031          	movff	postdec2,move_window@fs+1
 13260  005458  EE20 F01A          	lfsr	2,26
 13261  00545C  5045               	movf	f_sync@fp,w,c
 13262  00545E  26D9               	addwf	fsr2l,f,c
 13263  005460  5046               	movf	f_sync@fp+1,w,c
 13264  005462  22DA               	addwfc	fsr2h,f,c
 13265  005464  CFDE F032          	movff	postinc2,move_window@sector
 13266  005468  CFDE F033          	movff	postinc2,move_window@sector+1
 13267  00546C  CFDE F034          	movff	postinc2,move_window@sector+2
 13268  005470  CFDE F035          	movff	postinc2,move_window@sector+3
 13269  005474  ECE9  F02F         	call	_move_window	;wreg free
 13270  005478  6E4B               	movwf	f_sync@res,c
 13271                           
 13272                           ;ff.c: 2834: if (res == FR_OK) {
 13273  00547A  504B               	movf	f_sync@res,w,c
 13274  00547C  A4D8               	btfss	status,2,c
 13275  00547E  D07A               	goto	l5461
 13276                           
 13277                           ;ff.c: 2835: dir = fp->dir_ptr;
 13278  005480  EE20 F01E          	lfsr	2,30
 13279  005484  5045               	movf	f_sync@fp,w,c
 13280  005486  26D9               	addwf	fsr2l,f,c
 13281  005488  5046               	movf	f_sync@fp+1,w,c
 13282  00548A  22DA               	addwfc	fsr2h,f,c
 13283  00548C  CFDE F04C          	movff	postinc2,f_sync@dir
 13284  005490  CFDD F04D          	movff	postdec2,f_sync@dir+1
 13285                           
 13286                           ;ff.c: 2836: dir[11] |= 0x20;
 13287  005494  EE20 F00B          	lfsr	2,11
 13288  005498  504C               	movf	f_sync@dir,w,c
 13289  00549A  26D9               	addwf	fsr2l,f,c
 13290  00549C  504D               	movf	f_sync@dir+1,w,c
 13291  00549E  22DA               	addwfc	fsr2h,f,c
 13292  0054A0  0E00               	movlw	0
 13293  0054A2  8ADB               	bsf	plusw2,5,c
 13294                           
 13295                           ;ff.c: 2837: *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(fp->fsize);
 13296  0054A4  EE20 F00A          	lfsr	2,10
 13297  0054A8  5045               	movf	f_sync@fp,w,c
 13298  0054AA  26D9               	addwf	fsr2l,f,c
 13299  0054AC  5046               	movf	f_sync@fp+1,w,c
 13300  0054AE  22DA               	addwfc	fsr2h,f,c
 13301  0054B0  EE10 F01C          	lfsr	1,28
 13302  0054B4  504C               	movf	f_sync@dir,w,c
 13303  0054B6  26E1               	addwf	fsr1l,f,c
 13304  0054B8  504D               	movf	f_sync@dir+1,w,c
 13305  0054BA  22E2               	addwfc	fsr1h,f,c
 13306  0054BC  CFDE FFE6          	movff	postinc2,postinc1
 13307  0054C0  CFDE FFE6          	movff	postinc2,postinc1
 13308  0054C4  CFDE FFE6          	movff	postinc2,postinc1
 13309  0054C8  CFDE FFE6          	movff	postinc2,postinc1
 13310                           
 13311                           ;ff.c: 2838: st_clust(dir, fp->sclust);
 13312  0054CC  C04C  F001         	movff	f_sync@dir,st_clust@dir
 13313  0054D0  C04D  F002         	movff	f_sync@dir+1,st_clust@dir+1
 13314  0054D4  EE20 F00E          	lfsr	2,14
 13315  0054D8  5045               	movf	f_sync@fp,w,c
 13316  0054DA  26D9               	addwf	fsr2l,f,c
 13317  0054DC  5046               	movf	f_sync@fp+1,w,c
 13318  0054DE  22DA               	addwfc	fsr2h,f,c
 13319  0054E0  CFDE F003          	movff	postinc2,st_clust@cl
 13320  0054E4  CFDE F004          	movff	postinc2,st_clust@cl+1
 13321  0054E8  CFDE F005          	movff	postinc2,st_clust@cl+2
 13322  0054EC  CFDE F006          	movff	postinc2,st_clust@cl+3
 13323  0054F0  EC24  F033         	call	_st_clust	;wreg free
 13324                           
 13325                           ;ff.c: 2839: tm = ((DWORD)(2015 - 1980) << 25 | (DWORD)1 << 21 | (DWORD)1 << 16);
 13326  0054F4  0E00               	movlw	0
 13327  0054F6  6E47               	movwf	f_sync@tm,c
 13328  0054F8  0E00               	movlw	0
 13329  0054FA  6E48               	movwf	f_sync@tm+1,c
 13330  0054FC  0E21               	movlw	33
 13331  0054FE  6E49               	movwf	f_sync@tm+2,c
 13332  005500  0E46               	movlw	70
 13333  005502  6E4A               	movwf	f_sync@tm+3,c
 13334                           
 13335                           ;ff.c: 2840: *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(tm);
 13336  005504  EE20 F016          	lfsr	2,22
 13337  005508  504C               	movf	f_sync@dir,w,c
 13338  00550A  26D9               	addwf	fsr2l,f,c
 13339  00550C  504D               	movf	f_sync@dir+1,w,c
 13340  00550E  22DA               	addwfc	fsr2h,f,c
 13341  005510  C047  FFDE         	movff	f_sync@tm,postinc2
 13342  005514  C048  FFDE         	movff	f_sync@tm+1,postinc2
 13343  005518  C049  FFDE         	movff	f_sync@tm+2,postinc2
 13344  00551C  C04A  FFDE         	movff	f_sync@tm+3,postinc2
 13345                           
 13346                           ;ff.c: 2841: *(WORD*)(BYTE*)(dir + 18)=(WORD)(0);
 13347  005520  EE20 F012          	lfsr	2,18
 13348  005524  504C               	movf	f_sync@dir,w,c
 13349  005526  26D9               	addwf	fsr2l,f,c
 13350  005528  504D               	movf	f_sync@dir+1,w,c
 13351  00552A  22DA               	addwfc	fsr2h,f,c
 13352  00552C  0E00               	movlw	0
 13353  00552E  6EDE               	movwf	postinc2,c
 13354  005530  0E00               	movlw	0
 13355  005532  6EDD               	movwf	postdec2,c
 13356                           
 13357                           ;ff.c: 2842: fp->flag &= ~0x20;
 13358  005534  EE20 F004          	lfsr	2,4
 13359  005538  5045               	movf	f_sync@fp,w,c
 13360  00553A  26D9               	addwf	fsr2l,f,c
 13361  00553C  5046               	movf	f_sync@fp+1,w,c
 13362  00553E  22DA               	addwfc	fsr2h,f,c
 13363  005540  0EDF               	movlw	223
 13364  005542  16DF               	andwf	indf2,f,c
 13365                           
 13366                           ;ff.c: 2843: fp->fs->wflag = 1;
 13367  005544  C045  FFD9         	movff	f_sync@fp,fsr2l
 13368  005548  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 13369  00554C  EE10 F004          	lfsr	1,4
 13370  005550  50DE               	movf	postinc2,w,c
 13371  005552  26E1               	addwf	fsr1l,f,c
 13372  005554  50DD               	movf	postdec2,w,c
 13373  005556  22E2               	addwfc	fsr1h,f,c
 13374  005558  0E01               	movlw	1
 13375  00555A  6EE7               	movwf	indf1,c
 13376                           
 13377                           ;ff.c: 2844: res = sync_fs(fp->fs);
 13378  00555C  C045  FFD9         	movff	f_sync@fp,fsr2l
 13379  005560  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 13380  005564  CFDE F03A          	movff	postinc2,sync_fs@fs
 13381  005568  CFDD F03B          	movff	postdec2,sync_fs@fs+1
 13382  00556C  ECD8  F026         	call	_sync_fs	;wreg free
 13383  005570  6E4B               	movwf	f_sync@res,c
 13384  005572  D000               	goto	l5461
 13385  005574                     l5461:
 13386                           
 13387                           ;ff.c: 2845: }
 13388                           ;ff.c: 2846: }
 13389                           ;ff.c: 2847: }
 13390                           ;ff.c: 2849: return res;
 13391  005574  504B               	movf	f_sync@res,w,c
 13392  005576  0012               	return	
 13393  005578  0012               	return		;funcret
 13394  00557A                     __end_of_f_sync:
 13395                           	opt stack 0
 13396                           tblptru	equ	0xFF8
 13397                           tblptrh	equ	0xFF7
 13398                           tblptrl	equ	0xFF6
 13399                           tablat	equ	0xFF5
 13400                           prodh	equ	0xFF4
 13401                           prodl	equ	0xFF3
 13402                           indf0	equ	0xFEF
 13403                           postinc0	equ	0xFEE
 13404                           fsr0h	equ	0xFEA
 13405                           fsr0l	equ	0xFE9
 13406                           wreg	equ	0xFE8
 13407                           indf1	equ	0xFE7
 13408                           postinc1	equ	0xFE6
 13409                           postdec1	equ	0xFE5
 13410                           fsr1h	equ	0xFE2
 13411                           fsr1l	equ	0xFE1
 13412                           indf2	equ	0xFDF
 13413                           postinc2	equ	0xFDE
 13414                           postdec2	equ	0xFDD
 13415                           plusw2	equ	0xFDB
 13416                           fsr2h	equ	0xFDA
 13417                           fsr2l	equ	0xFD9
 13418                           status	equ	0xFD8
 13419                           
 13420 ;; *************** function _validate *****************
 13421 ;; Defined at:
 13422 ;;		line 2372 in file "ff.c"
 13423 ;; Parameters:    Size  Location     Type
 13424 ;;  obj             2    1[COMRAM] PTR void 
 13425 ;;		 -> Fil(32), 
 13426 ;; Auto vars:     Size  Location     Type
 13427 ;;  fil             2    7[COMRAM] PTR struct .
 13428 ;;		 -> Fil(32), 
 13429 ;; Return value:  Size  Location     Type
 13430 ;;                  1    wreg      enum E88
 13431 ;; Registers used:
 13432 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13433 ;; Tracked objects:
 13434 ;;		On entry : 0/0
 13435 ;;		On exit  : 0/0
 13436 ;;		Unchanged: 0/0
 13437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13438 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13439 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13440 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13441 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13442 ;;Total ram usage:        8 bytes
 13443 ;; Hardware stack levels used:    1
 13444 ;; Hardware stack levels required when called:    1
 13445 ;; This function calls:
 13446 ;;		_disk_status
 13447 ;; This function is called by:
 13448 ;;		_f_write
 13449 ;;		_f_sync
 13450 ;;		_f_close
 13451 ;;		_f_lseek
 13452 ;;		_f_read
 13453 ;; This function uses a non-reentrant model
 13454 ;;
 13455                           
 13456                           	psect	text30
 13457  00607E                     __ptext30:
 13458                           	opt stack 0
 13459  00607E                     _validate:
 13460                           	opt stack 28
 13461                           
 13462                           ;ff.c: 2376: FIL *fil = (FIL*)obj;
 13463                           
 13464                           ;incstack = 0
 13465  00607E  C002  F008         	movff	validate@obj,validate@fil
 13466  006082  C003  F009         	movff	validate@obj+1,validate@fil+1
 13467                           
 13468                           ;ff.c: 2379: if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (dis
      +                          k_status(fil->fs->drv) & 0x01))
 13469  006086  5008               	movf	validate@fil,w,c
 13470  006088  1009               	iorwf	validate@fil+1,w,c
 13471  00608A  B4D8               	btfsc	status,2,c
 13472  00608C  D03E               	goto	l5019
 13473  00608E  C008  FFD9         	movff	validate@fil,fsr2l
 13474  006092  C009  FFDA         	movff	validate@fil+1,fsr2h
 13475  006096  50DE               	movf	postinc2,w,c
 13476  006098  10DE               	iorwf	postinc2,w,c
 13477  00609A  B4D8               	btfsc	status,2,c
 13478  00609C  D036               	goto	l5019
 13479  00609E  C008  FFD9         	movff	validate@fil,fsr2l
 13480  0060A2  C009  FFDA         	movff	validate@fil+1,fsr2h
 13481  0060A6  CFDE F004          	movff	postinc2,??_validate
 13482  0060AA  CFDD F005          	movff	postdec2,??_validate+1
 13483  0060AE  C004  FFD9         	movff	??_validate,fsr2l
 13484  0060B2  C005  FFDA         	movff	??_validate+1,fsr2h
 13485  0060B6  50DF               	movf	indf2,w,c
 13486  0060B8  B4D8               	btfsc	status,2,c
 13487  0060BA  D027               	goto	l5019
 13488  0060BC  EE20 F002          	lfsr	2,2
 13489  0060C0  5008               	movf	validate@fil,w,c
 13490  0060C2  26D9               	addwf	fsr2l,f,c
 13491  0060C4  5009               	movf	validate@fil+1,w,c
 13492  0060C6  22DA               	addwfc	fsr2h,f,c
 13493  0060C8  C008  FFE1         	movff	validate@fil,fsr1l
 13494  0060CC  C009  FFE2         	movff	validate@fil+1,fsr1h
 13495  0060D0  EE00 F006          	lfsr	0,6
 13496  0060D4  50E6               	movf	postinc1,w,c
 13497  0060D6  26E9               	addwf	fsr0l,f,c
 13498  0060D8  50E5               	movf	postdec1,w,c
 13499  0060DA  22EA               	addwfc	fsr0h,f,c
 13500  0060DC  50DE               	movf	postinc2,w,c
 13501  0060DE  18EE               	xorwf	postinc0,w,c
 13502  0060E0  E114               	bnz	l5019
 13503  0060E2  50DE               	movf	postinc2,w,c
 13504  0060E4  18EE               	xorwf	postinc0,w,c
 13505  0060E6  A4D8               	btfss	status,2,c
 13506  0060E8  D010               	goto	l5019
 13507  0060EA  C008  FFD9         	movff	validate@fil,fsr2l
 13508  0060EE  C009  FFDA         	movff	validate@fil+1,fsr2h
 13509  0060F2  EE10 F001          	lfsr	1,1
 13510  0060F6  50DE               	movf	postinc2,w,c
 13511  0060F8  26E1               	addwf	fsr1l,f,c
 13512  0060FA  50DD               	movf	postdec2,w,c
 13513  0060FC  22E2               	addwfc	fsr1h,f,c
 13514  0060FE  50E7               	movf	indf1,w,c
 13515  006100  EC5E  F033         	call	_disk_status
 13516  006104  6E04               	movwf	??_validate& (0+255),c
 13517  006106  A004               	btfss	??_validate,0,c
 13518  006108  D002               	goto	l5023
 13519  00610A                     l5019:
 13520                           
 13521                           ;ff.c: 2380: return FR_INVALID_OBJECT;
 13522  00610A  0E09               	movlw	9
 13523  00610C  0012               	return	
 13524  00610E                     l5023:
 13525                           
 13526                           ;ff.c: 2382: ;
 13527                           ;ff.c: 2384: return FR_OK;
 13528  00610E  0E00               	movlw	0
 13529  006110  0012               	return	
 13530  006112  0012               	return		;funcret
 13531  006114                     __end_of_validate:
 13532                           	opt stack 0
 13533                           tblptru	equ	0xFF8
 13534                           tblptrh	equ	0xFF7
 13535                           tblptrl	equ	0xFF6
 13536                           tablat	equ	0xFF5
 13537                           prodh	equ	0xFF4
 13538                           prodl	equ	0xFF3
 13539                           indf0	equ	0xFEF
 13540                           postinc0	equ	0xFEE
 13541                           fsr0h	equ	0xFEA
 13542                           fsr0l	equ	0xFE9
 13543                           wreg	equ	0xFE8
 13544                           indf1	equ	0xFE7
 13545                           postinc1	equ	0xFE6
 13546                           postdec1	equ	0xFE5
 13547                           fsr1h	equ	0xFE2
 13548                           fsr1l	equ	0xFE1
 13549                           indf2	equ	0xFDF
 13550                           postinc2	equ	0xFDE
 13551                           postdec2	equ	0xFDD
 13552                           plusw2	equ	0xFDB
 13553                           fsr2h	equ	0xFDA
 13554                           fsr2l	equ	0xFD9
 13555                           status	equ	0xFD8
 13556                           
 13557 ;; *************** function _disk_status *****************
 13558 ;; Defined at:
 13559 ;;		line 366 in file "diskio.c"
 13560 ;; Parameters:    Size  Location     Type
 13561 ;;  pdrv            1    wreg     unsigned char 
 13562 ;; Auto vars:     Size  Location     Type
 13563 ;;  pdrv            1    0[COMRAM] unsigned char 
 13564 ;; Return value:  Size  Location     Type
 13565 ;;                  1    wreg      unsigned char 
 13566 ;; Registers used:
 13567 ;;		wreg, status,2
 13568 ;; Tracked objects:
 13569 ;;		On entry : 0/0
 13570 ;;		On exit  : 0/0
 13571 ;;		Unchanged: 0/0
 13572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13574 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13576 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13577 ;;Total ram usage:        1 bytes
 13578 ;; Hardware stack levels used:    1
 13579 ;; This function calls:
 13580 ;;		Nothing
 13581 ;; This function is called by:
 13582 ;;		_find_volume
 13583 ;;		_validate
 13584 ;; This function uses a non-reentrant model
 13585 ;;
 13586                           
 13587                           	psect	text31
 13588  0066BC                     __ptext31:
 13589                           	opt stack 0
 13590  0066BC                     _disk_status:
 13591                           	opt stack 28
 13592                           
 13593                           ;incstack = 0
 13594                           ;disk_status@pdrv stored from wreg
 13595  0066BC  6E01               	movwf	disk_status@pdrv,c
 13596                           
 13597                           ;diskio.c: 370: if (pdrv) return 0x01;
 13598  0066BE  5001               	movf	disk_status@pdrv,w,c
 13599  0066C0  B4D8               	btfsc	status,2,c
 13600  0066C2  D002               	goto	l4257
 13601  0066C4  0E01               	movlw	1
 13602  0066C6  0012               	return	
 13603  0066C8                     l4257:
 13604                           
 13605                           ;diskio.c: 371: return Stat;
 13606  0066C8  0100               	movlb	0	; () banked
 13607  0066CA  51F7               	movf	_Stat& (0+255),w,b
 13608  0066CC  0012               	return	
 13609                           
 13610                           ; BSR set to: 0
 13611  0066CE  0012               	return		;funcret
 13612  0066D0                     __end_of_disk_status:
 13613                           	opt stack 0
 13614                           tblptru	equ	0xFF8
 13615                           tblptrh	equ	0xFF7
 13616                           tblptrl	equ	0xFF6
 13617                           tablat	equ	0xFF5
 13618                           prodh	equ	0xFF4
 13619                           prodl	equ	0xFF3
 13620                           indf0	equ	0xFEF
 13621                           postinc0	equ	0xFEE
 13622                           fsr0h	equ	0xFEA
 13623                           fsr0l	equ	0xFE9
 13624                           wreg	equ	0xFE8
 13625                           indf1	equ	0xFE7
 13626                           postinc1	equ	0xFE6
 13627                           postdec1	equ	0xFE5
 13628                           fsr1h	equ	0xFE2
 13629                           fsr1l	equ	0xFE1
 13630                           indf2	equ	0xFDF
 13631                           postinc2	equ	0xFDE
 13632                           postdec2	equ	0xFDD
 13633                           plusw2	equ	0xFDB
 13634                           fsr2h	equ	0xFDA
 13635                           fsr2l	equ	0xFD9
 13636                           status	equ	0xFD8
 13637                           
 13638 ;; *************** function _sync_fs *****************
 13639 ;; Defined at:
 13640 ;;		line 760 in file "ff.c"
 13641 ;; Parameters:    Size  Location     Type
 13642 ;;  fs              2   57[COMRAM] PTR struct .
 13643 ;;		 -> FatFs(558), NULL(0), 
 13644 ;; Auto vars:     Size  Location     Type
 13645 ;;  res             1   67[COMRAM] enum E88
 13646 ;; Return value:  Size  Location     Type
 13647 ;;                  1    wreg      enum E88
 13648 ;; Registers used:
 13649 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13650 ;; Tracked objects:
 13651 ;;		On entry : 0/0
 13652 ;;		On exit  : 0/0
 13653 ;;		Unchanged: 0/0
 13654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13655 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13656 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13657 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13658 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13659 ;;Total ram usage:       11 bytes
 13660 ;; Hardware stack levels used:    1
 13661 ;; Hardware stack levels required when called:    7
 13662 ;; This function calls:
 13663 ;;		_disk_ioctl
 13664 ;;		_disk_write
 13665 ;;		_mem_set
 13666 ;;		_sync_window
 13667 ;; This function is called by:
 13668 ;;		_f_sync
 13669 ;; This function uses a non-reentrant model
 13670 ;;
 13671                           
 13672                           	psect	text32
 13673  004DB0                     __ptext32:
 13674                           	opt stack 0
 13675  004DB0                     _sync_fs:
 13676                           	opt stack 21
 13677                           
 13678                           ;ff.c: 764: FRESULT res;
 13679                           ;ff.c: 767: res = sync_window(fs);
 13680                           
 13681                           ;incstack = 0
 13682  004DB0  C03A  F01B         	movff	sync_fs@fs,sync_window@fs
 13683  004DB4  C03B  F01C         	movff	sync_fs@fs+1,sync_window@fs+1
 13684  004DB8  EC58  F029         	call	_sync_window	;wreg free
 13685  004DBC  6E44               	movwf	sync_fs@res,c
 13686                           
 13687                           ;ff.c: 768: if (res == FR_OK) {
 13688  004DBE  5044               	movf	sync_fs@res,w,c
 13689  004DC0  A4D8               	btfss	status,2,c
 13690  004DC2  D0D6               	goto	l345
 13691                           
 13692                           ;ff.c: 770: if (fs->fs_type == 3 && fs->fsi_flag == 1) {
 13693  004DC4  C03A  FFD9         	movff	sync_fs@fs,fsr2l
 13694  004DC8  C03B  FFDA         	movff	sync_fs@fs+1,fsr2h
 13695  004DCC  0E03               	movlw	3
 13696  004DCE  18DE               	xorwf	postinc2,w,c
 13697  004DD0  A4D8               	btfss	status,2,c
 13698  004DD2  D0B9               	goto	l4715
 13699  004DD4  EE20 F005          	lfsr	2,5
 13700  004DD8  503A               	movf	sync_fs@fs,w,c
 13701  004DDA  26D9               	addwf	fsr2l,f,c
 13702  004DDC  503B               	movf	sync_fs@fs+1,w,c
 13703  004DDE  22DA               	addwfc	fsr2h,f,c
 13704  004DE0  04DE               	decf	postinc2,w,c
 13705  004DE2  A4D8               	btfss	status,2,c
 13706  004DE4  D0B0               	goto	l4715
 13707                           
 13708                           ;ff.c: 772: mem_set(fs->win, 0, ((UINT)512));
 13709  004DE6  0E2E               	movlw	46
 13710  004DE8  243A               	addwf	sync_fs@fs,w,c
 13711  004DEA  6E01               	movwf	mem_set@dst,c
 13712  004DEC  0E00               	movlw	0
 13713  004DEE  203B               	addwfc	sync_fs@fs+1,w,c
 13714  004DF0  6E02               	movwf	mem_set@dst+1,c
 13715  004DF2  0E00               	movlw	0
 13716  004DF4  6E04               	movwf	mem_set@val+1,c
 13717  004DF6  0E00               	movlw	0
 13718  004DF8  6E03               	movwf	mem_set@val,c
 13719  004DFA  0E02               	movlw	2
 13720  004DFC  6E06               	movwf	mem_set@cnt+1,c
 13721  004DFE  0E00               	movlw	0
 13722  004E00  6E05               	movwf	mem_set@cnt,c
 13723  004E02  EC0D  F033         	call	_mem_set	;wreg free
 13724                           
 13725                           ;ff.c: 773: *(WORD*)(BYTE*)(fs->win + 510)=(WORD)(0xAA55);
 13726  004E06  EE22 F02C          	lfsr	2,556
 13727  004E0A  503A               	movf	sync_fs@fs,w,c
 13728  004E0C  26D9               	addwf	fsr2l,f,c
 13729  004E0E  503B               	movf	sync_fs@fs+1,w,c
 13730  004E10  22DA               	addwfc	fsr2h,f,c
 13731  004E12  0E55               	movlw	85
 13732  004E14  6EDE               	movwf	postinc2,c
 13733  004E16  0EAA               	movlw	170
 13734  004E18  6EDD               	movwf	postdec2,c
 13735                           
 13736                           ;ff.c: 774: *(DWORD*)(BYTE*)(fs->win + 0)=(DWORD)(0x41615252);
 13737  004E1A  EE20 F02E          	lfsr	2,46
 13738  004E1E  503A               	movf	sync_fs@fs,w,c
 13739  004E20  26D9               	addwf	fsr2l,f,c
 13740  004E22  503B               	movf	sync_fs@fs+1,w,c
 13741  004E24  22DA               	addwfc	fsr2h,f,c
 13742  004E26  0E52               	movlw	82
 13743  004E28  6EDE               	movwf	postinc2,c
 13744  004E2A  0E52               	movlw	82
 13745  004E2C  6EDE               	movwf	postinc2,c
 13746  004E2E  0E61               	movlw	97
 13747  004E30  6EDE               	movwf	postinc2,c
 13748  004E32  0E41               	movlw	65
 13749  004E34  6EDD               	movwf	postdec2,c
 13750                           
 13751                           ;ff.c: 775: *(DWORD*)(BYTE*)(fs->win + 484)=(DWORD)(0x61417272);
 13752  004E36  EE22 F012          	lfsr	2,530
 13753  004E3A  503A               	movf	sync_fs@fs,w,c
 13754  004E3C  26D9               	addwf	fsr2l,f,c
 13755  004E3E  503B               	movf	sync_fs@fs+1,w,c
 13756  004E40  22DA               	addwfc	fsr2h,f,c
 13757  004E42  0E72               	movlw	114
 13758  004E44  6EDE               	movwf	postinc2,c
 13759  004E46  0E72               	movlw	114
 13760  004E48  6EDE               	movwf	postinc2,c
 13761  004E4A  0E41               	movlw	65
 13762  004E4C  6EDE               	movwf	postinc2,c
 13763  004E4E  0E61               	movlw	97
 13764  004E50  6EDD               	movwf	postdec2,c
 13765                           
 13766                           ;ff.c: 776: *(DWORD*)(BYTE*)(fs->win + 488)=(DWORD)(fs->free_clust);
 13767  004E52  EE20 F00E          	lfsr	2,14
 13768  004E56  503A               	movf	sync_fs@fs,w,c
 13769  004E58  26D9               	addwf	fsr2l,f,c
 13770  004E5A  503B               	movf	sync_fs@fs+1,w,c
 13771  004E5C  22DA               	addwfc	fsr2h,f,c
 13772  004E5E  EE12 F016          	lfsr	1,534
 13773  004E62  503A               	movf	sync_fs@fs,w,c
 13774  004E64  26E1               	addwf	fsr1l,f,c
 13775  004E66  503B               	movf	sync_fs@fs+1,w,c
 13776  004E68  22E2               	addwfc	fsr1h,f,c
 13777  004E6A  CFDE FFE6          	movff	postinc2,postinc1
 13778  004E6E  CFDE FFE6          	movff	postinc2,postinc1
 13779  004E72  CFDE FFE6          	movff	postinc2,postinc1
 13780  004E76  CFDE FFE6          	movff	postinc2,postinc1
 13781                           
 13782                           ;ff.c: 777: *(DWORD*)(BYTE*)(fs->win + 492)=(DWORD)(fs->last_clust);
 13783  004E7A  EE20 F00A          	lfsr	2,10
 13784  004E7E  503A               	movf	sync_fs@fs,w,c
 13785  004E80  26D9               	addwf	fsr2l,f,c
 13786  004E82  503B               	movf	sync_fs@fs+1,w,c
 13787  004E84  22DA               	addwfc	fsr2h,f,c
 13788  004E86  EE12 F01A          	lfsr	1,538
 13789  004E8A  503A               	movf	sync_fs@fs,w,c
 13790  004E8C  26E1               	addwf	fsr1l,f,c
 13791  004E8E  503B               	movf	sync_fs@fs+1,w,c
 13792  004E90  22E2               	addwfc	fsr1h,f,c
 13793  004E92  CFDE FFE6          	movff	postinc2,postinc1
 13794  004E96  CFDE FFE6          	movff	postinc2,postinc1
 13795  004E9A  CFDE FFE6          	movff	postinc2,postinc1
 13796  004E9E  CFDE FFE6          	movff	postinc2,postinc1
 13797                           
 13798                           ;ff.c: 779: fs->winsect = fs->volbase + 1;
 13799  004EA2  EE20 F01A          	lfsr	2,26
 13800  004EA6  503A               	movf	sync_fs@fs,w,c
 13801  004EA8  26D9               	addwf	fsr2l,f,c
 13802  004EAA  503B               	movf	sync_fs@fs+1,w,c
 13803  004EAC  22DA               	addwfc	fsr2h,f,c
 13804  004EAE  CFDE F03C          	movff	postinc2,??_sync_fs
 13805  004EB2  CFDE F03D          	movff	postinc2,??_sync_fs+1
 13806  004EB6  CFDE F03E          	movff	postinc2,??_sync_fs+2
 13807  004EBA  CFDE F03F          	movff	postinc2,??_sync_fs+3
 13808  004EBE  0E01               	movlw	1
 13809  004EC0  243C               	addwf	??_sync_fs,w,c
 13810  004EC2  6E40               	movwf	(??_sync_fs+4)& (0+255),c
 13811  004EC4  0E00               	movlw	0
 13812  004EC6  203D               	addwfc	??_sync_fs+1,w,c
 13813  004EC8  6E41               	movwf	(??_sync_fs+5)& (0+255),c
 13814  004ECA  0E00               	movlw	0
 13815  004ECC  203E               	addwfc	??_sync_fs+2,w,c
 13816  004ECE  6E42               	movwf	(??_sync_fs+6)& (0+255),c
 13817  004ED0  0E00               	movlw	0
 13818  004ED2  203F               	addwfc	??_sync_fs+3,w,c
 13819  004ED4  6E43               	movwf	(??_sync_fs+7)& (0+255),c
 13820  004ED6  EE20 F02A          	lfsr	2,42
 13821  004EDA  503A               	movf	sync_fs@fs,w,c
 13822  004EDC  26D9               	addwf	fsr2l,f,c
 13823  004EDE  503B               	movf	sync_fs@fs+1,w,c
 13824  004EE0  22DA               	addwfc	fsr2h,f,c
 13825  004EE2  C040  FFDE         	movff	??_sync_fs+4,postinc2
 13826  004EE6  C041  FFDE         	movff	??_sync_fs+5,postinc2
 13827  004EEA  C042  FFDE         	movff	??_sync_fs+6,postinc2
 13828  004EEE  C043  FFDE         	movff	??_sync_fs+7,postinc2
 13829                           
 13830                           ;ff.c: 780: disk_write(fs->drv, fs->win, fs->winsect, 1);
 13831  004EF2  0E2E               	movlw	46
 13832  004EF4  243A               	addwf	sync_fs@fs,w,c
 13833  004EF6  6E11               	movwf	disk_write@buff,c
 13834  004EF8  0E00               	movlw	0
 13835  004EFA  203B               	addwfc	sync_fs@fs+1,w,c
 13836  004EFC  6E12               	movwf	disk_write@buff+1,c
 13837  004EFE  EE20 F02A          	lfsr	2,42
 13838  004F02  503A               	movf	sync_fs@fs,w,c
 13839  004F04  26D9               	addwf	fsr2l,f,c
 13840  004F06  503B               	movf	sync_fs@fs+1,w,c
 13841  004F08  22DA               	addwfc	fsr2h,f,c
 13842  004F0A  CFDE F013          	movff	postinc2,disk_write@sector
 13843  004F0E  CFDE F014          	movff	postinc2,disk_write@sector+1
 13844  004F12  CFDE F015          	movff	postinc2,disk_write@sector+2
 13845  004F16  CFDE F016          	movff	postinc2,disk_write@sector+3
 13846  004F1A  0E00               	movlw	0
 13847  004F1C  6E18               	movwf	disk_write@count+1,c
 13848  004F1E  0E01               	movlw	1
 13849  004F20  6E17               	movwf	disk_write@count,c
 13850  004F22  EE20 F001          	lfsr	2,1
 13851  004F26  503A               	movf	sync_fs@fs,w,c
 13852  004F28  26D9               	addwf	fsr2l,f,c
 13853  004F2A  503B               	movf	sync_fs@fs+1,w,c
 13854  004F2C  22DA               	addwfc	fsr2h,f,c
 13855  004F2E  50DF               	movf	indf2,w,c
 13856  004F30  ECBD  F02A         	call	_disk_write
 13857                           
 13858                           ;ff.c: 781: fs->fsi_flag = 0;
 13859  004F34  EE20 F005          	lfsr	2,5
 13860  004F38  503A               	movf	sync_fs@fs,w,c
 13861  004F3A  26D9               	addwf	fsr2l,f,c
 13862  004F3C  503B               	movf	sync_fs@fs+1,w,c
 13863  004F3E  22DA               	addwfc	fsr2h,f,c
 13864  004F40  0E00               	movlw	0
 13865  004F42  6EDF               	movwf	indf2,c
 13866  004F44  D000               	goto	l4715
 13867  004F46                     l4715:
 13868                           
 13869                           ;ff.c: 782: }
 13870                           ;ff.c: 784: if (disk_ioctl(fs->drv, 0, 0) != RES_OK)
 13871  004F46  0E00               	movlw	0
 13872  004F48  6E11               	movwf	disk_ioctl@cmd,c
 13873  004F4A  0E00               	movlw	0
 13874  004F4C  6E12               	movwf	disk_ioctl@buff,c
 13875  004F4E  0E00               	movlw	0
 13876  004F50  6E13               	movwf	disk_ioctl@buff+1,c
 13877  004F52  EE20 F001          	lfsr	2,1
 13878  004F56  503A               	movf	sync_fs@fs,w,c
 13879  004F58  26D9               	addwf	fsr2l,f,c
 13880  004F5A  503B               	movf	sync_fs@fs+1,w,c
 13881  004F5C  22DA               	addwfc	fsr2h,f,c
 13882  004F5E  50DF               	movf	indf2,w,c
 13883  004F60  ECB0  F018         	call	_disk_ioctl
 13884  004F64  0900               	iorlw	0
 13885  004F66  B4D8               	btfsc	status,2,c
 13886  004F68  D003               	goto	l345
 13887                           
 13888                           ;ff.c: 785: res = FR_DISK_ERR;
 13889  004F6A  0E01               	movlw	1
 13890  004F6C  6E44               	movwf	sync_fs@res,c
 13891  004F6E  D000               	goto	l345
 13892  004F70                     l345:
 13893                           
 13894                           ;ff.c: 786: }
 13895                           ;ff.c: 788: return res;
 13896  004F70  5044               	movf	sync_fs@res,w,c
 13897  004F72  0012               	return	
 13898  004F74  0012               	return		;funcret
 13899  004F76                     __end_of_sync_fs:
 13900                           	opt stack 0
 13901                           tblptru	equ	0xFF8
 13902                           tblptrh	equ	0xFF7
 13903                           tblptrl	equ	0xFF6
 13904                           tablat	equ	0xFF5
 13905                           prodh	equ	0xFF4
 13906                           prodl	equ	0xFF3
 13907                           indf0	equ	0xFEF
 13908                           postinc0	equ	0xFEE
 13909                           fsr0h	equ	0xFEA
 13910                           fsr0l	equ	0xFE9
 13911                           wreg	equ	0xFE8
 13912                           indf1	equ	0xFE7
 13913                           postinc1	equ	0xFE6
 13914                           postdec1	equ	0xFE5
 13915                           fsr1h	equ	0xFE2
 13916                           fsr1l	equ	0xFE1
 13917                           indf2	equ	0xFDF
 13918                           postinc2	equ	0xFDE
 13919                           postdec2	equ	0xFDD
 13920                           plusw2	equ	0xFDB
 13921                           fsr2h	equ	0xFDA
 13922                           fsr2l	equ	0xFD9
 13923                           status	equ	0xFD8
 13924                           
 13925 ;; *************** function _mem_set *****************
 13926 ;; Defined at:
 13927 ;;		line 524 in file "ff.c"
 13928 ;; Parameters:    Size  Location     Type
 13929 ;;  dst             2    0[COMRAM] PTR void 
 13930 ;;		 -> FatFs(558), f_open@sfn(12), NULL(0), 
 13931 ;;  val             2    2[COMRAM] int 
 13932 ;;  cnt             2    4[COMRAM] unsigned int 
 13933 ;; Auto vars:     Size  Location     Type
 13934 ;;  d               2    6[COMRAM] PTR unsigned char 
 13935 ;;		 -> FatFs(558), f_open@sfn(12), NULL(0), 
 13936 ;; Return value:  Size  Location     Type
 13937 ;;		None               void
 13938 ;; Registers used:
 13939 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13940 ;; Tracked objects:
 13941 ;;		On entry : 0/0
 13942 ;;		On exit  : 0/0
 13943 ;;		Unchanged: 0/0
 13944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13945 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13946 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13948 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13949 ;;Total ram usage:        8 bytes
 13950 ;; Hardware stack levels used:    1
 13951 ;; This function calls:
 13952 ;;		Nothing
 13953 ;; This function is called by:
 13954 ;;		_sync_fs
 13955 ;;		_dir_next
 13956 ;;		_dir_register
 13957 ;;		_create_name
 13958 ;; This function uses a non-reentrant model
 13959 ;;
 13960                           
 13961                           	psect	text33
 13962  00661A                     __ptext33:
 13963                           	opt stack 0
 13964  00661A                     _mem_set:
 13965                           	opt stack 26
 13966                           
 13967                           ;ff.c: 525: BYTE *d = (BYTE*)dst;
 13968                           
 13969                           ;incstack = 0
 13970  00661A  C001  F007         	movff	mem_set@dst,mem_set@d
 13971  00661E  C002  F008         	movff	mem_set@dst+1,mem_set@d+1
 13972                           
 13973                           ;ff.c: 527: while (cnt--)
 13974  006622  D009               	goto	l4155
 13975  006624                     l4151:
 13976                           
 13977                           ;ff.c: 528: *d++ = (BYTE)val;
 13978  006624  C007  FFD9         	movff	mem_set@d,fsr2l
 13979  006628  C008  FFDA         	movff	mem_set@d+1,fsr2h
 13980  00662C  C003  FFDF         	movff	mem_set@val,indf2
 13981  006630  4A07               	infsnz	mem_set@d,f,c
 13982  006632  2A08               	incf	mem_set@d+1,f,c
 13983  006634  D000               	goto	l4155
 13984  006636                     l4155:
 13985  006636  0605               	decf	mem_set@cnt,f,c
 13986  006638  A0D8               	btfss	status,0,c
 13987  00663A  0606               	decf	mem_set@cnt+1,f,c
 13988  00663C  2805               	incf	mem_set@cnt,w,c
 13989  00663E  E1F2               	bnz	l4151
 13990  006640  2806               	incf	mem_set@cnt+1,w,c
 13991  006642  A4D8               	btfss	status,2,c
 13992  006644  D7EF               	goto	l4151
 13993  006646  0012               	return		;funcret
 13994  006648                     __end_of_mem_set:
 13995                           	opt stack 0
 13996                           tblptru	equ	0xFF8
 13997                           tblptrh	equ	0xFF7
 13998                           tblptrl	equ	0xFF6
 13999                           tablat	equ	0xFF5
 14000                           prodh	equ	0xFF4
 14001                           prodl	equ	0xFF3
 14002                           indf0	equ	0xFEF
 14003                           postinc0	equ	0xFEE
 14004                           fsr0h	equ	0xFEA
 14005                           fsr0l	equ	0xFE9
 14006                           wreg	equ	0xFE8
 14007                           indf1	equ	0xFE7
 14008                           postinc1	equ	0xFE6
 14009                           postdec1	equ	0xFE5
 14010                           fsr1h	equ	0xFE2
 14011                           fsr1l	equ	0xFE1
 14012                           indf2	equ	0xFDF
 14013                           postinc2	equ	0xFDE
 14014                           postdec2	equ	0xFDD
 14015                           plusw2	equ	0xFDB
 14016                           fsr2h	equ	0xFDA
 14017                           fsr2l	equ	0xFD9
 14018                           status	equ	0xFD8
 14019                           
 14020 ;; *************** function _disk_ioctl *****************
 14021 ;; Defined at:
 14022 ;;		line 456 in file "diskio.c"
 14023 ;; Parameters:    Size  Location     Type
 14024 ;;  pdrv            1    wreg     unsigned char 
 14025 ;;  cmd             1   16[COMRAM] unsigned char 
 14026 ;;  buff            2   17[COMRAM] PTR void 
 14027 ;;		 -> NULL(0), 
 14028 ;; Auto vars:     Size  Location     Type
 14029 ;;  pdrv            1   48[COMRAM] unsigned char 
 14030 ;;  csd            16   32[COMRAM] unsigned char [16]
 14031 ;;  csize           4   49[COMRAM] unsigned long 
 14032 ;;  ptr             2   55[COMRAM] PTR unsigned char 
 14033 ;;		 -> NULL(0), 
 14034 ;;  n               1   54[COMRAM] unsigned char 
 14035 ;;  res             1   53[COMRAM] enum E38
 14036 ;; Return value:  Size  Location     Type
 14037 ;;                  1    wreg      enum E38
 14038 ;; Registers used:
 14039 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14040 ;; Tracked objects:
 14041 ;;		On entry : 0/0
 14042 ;;		On exit  : 0/0
 14043 ;;		Unchanged: 0/0
 14044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14045 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14046 ;;      Locals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14047 ;;      Temps:         13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14048 ;;      Totals:        41       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14049 ;;Total ram usage:       41 bytes
 14050 ;; Hardware stack levels used:    1
 14051 ;; Hardware stack levels required when called:    5
 14052 ;; This function calls:
 14053 ;;		_SPI1_Exchange8bit
 14054 ;;		___wmul
 14055 ;;		_deselect
 14056 ;;		_rcvr_datablock
 14057 ;;		_select
 14058 ;;		_send_cmd
 14059 ;; This function is called by:
 14060 ;;		_sync_fs
 14061 ;; This function uses a non-reentrant model
 14062 ;;
 14063                           
 14064                           	psect	text34
 14065  003160                     __ptext34:
 14066                           	opt stack 0
 14067  003160                     _disk_ioctl:
 14068                           	opt stack 22
 14069                           
 14070                           ;incstack = 0
 14071                           ;disk_ioctl@pdrv stored from wreg
 14072  003160  6E31               	movwf	disk_ioctl@pdrv,c
 14073                           
 14074                           ;diskio.c: 462: DRESULT res;
 14075                           ;diskio.c: 463: BYTE n, csd[16], *ptr = buff;
 14076  003162  C012  F038         	movff	disk_ioctl@buff,disk_ioctl@ptr
 14077  003166  C013  F039         	movff	disk_ioctl@buff+1,disk_ioctl@ptr+1
 14078                           
 14079                           ;diskio.c: 464: DWORD csize;
 14080                           ;diskio.c: 467: if (pdrv) return RES_PARERR;
 14081  00316A  5031               	movf	disk_ioctl@pdrv,w,c
 14082  00316C  B4D8               	btfsc	status,2,c
 14083  00316E  D002               	goto	l4269
 14084  003170  0E04               	movlw	4
 14085  003172  0012               	return	
 14086  003174                     l4269:
 14087                           
 14088                           ;diskio.c: 469: res = RES_ERROR;
 14089  003174  0E01               	movlw	1
 14090  003176  6E36               	movwf	disk_ioctl@res,c
 14091                           
 14092                           ;diskio.c: 471: if (Stat & 0x01) return RES_NOTRDY;
 14093  003178  0100               	movlb	0	; () banked
 14094  00317A  A1F7               	btfss	_Stat& (0+255),0,b
 14095  00317C  D233               	goto	l4367
 14096                           
 14097                           ; BSR set to: 0
 14098  00317E  0E03               	movlw	3
 14099                           
 14100                           ; BSR set to: 0
 14101  003180  0012               	return	
 14102                           
 14103                           ; BSR set to: 0
 14104                           ;diskio.c: 473: switch (cmd) {
 14105  003182  D230               	goto	l4367
 14106  003184                     l4277:
 14107                           
 14108                           ;diskio.c: 475: if (select()) res = RES_OK;
 14109  003184  EC4D  F033         	call	_select	;wreg free
 14110  003188  D224               	goto	L20
 14111                           
 14112                           ;diskio.c: 476: break;
 14113  00318A  D246               	goto	l4369
 14114  00318C                     l4281:
 14115                           
 14116                           ;diskio.c: 479: if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 14117  00318C  0E00               	movlw	0
 14118  00318E  6E0B               	movwf	send_cmd@arg,c
 14119  003190  0E00               	movlw	0
 14120  003192  6E0C               	movwf	send_cmd@arg+1,c
 14121  003194  0E00               	movlw	0
 14122  003196  6E0D               	movwf	send_cmd@arg+2,c
 14123  003198  0E00               	movlw	0
 14124  00319A  6E0E               	movwf	send_cmd@arg+3,c
 14125  00319C  0E09               	movlw	9
 14126  00319E  EC8F  F032         	call	_send_cmd
 14127  0031A2  0900               	iorlw	0
 14128  0031A4  A4D8               	btfss	status,2,c
 14129  0031A6  D238               	goto	l4369
 14130  0031A8  0E21               	movlw	low disk_ioctl@csd
 14131  0031AA  6E02               	movwf	rcvr_datablock@buff,c
 14132  0031AC  0E00               	movlw	high disk_ioctl@csd
 14133  0031AE  6E03               	movwf	rcvr_datablock@buff+1,c
 14134  0031B0  0E00               	movlw	0
 14135  0031B2  6E05               	movwf	rcvr_datablock@btr+1,c
 14136  0031B4  0E10               	movlw	16
 14137  0031B6  6E04               	movwf	rcvr_datablock@btr,c
 14138  0031B8  ECA0  F031         	call	_rcvr_datablock	;wreg free
 14139  0031BC  0900               	iorlw	0
 14140  0031BE  B4D8               	btfsc	status,2,c
 14141  0031C0  D22B               	goto	l4369
 14142                           
 14143                           ;diskio.c: 480: if ((csd[0] >> 6) == 1) {
 14144  0031C2  4421               	rlncf	disk_ioctl@csd,w,c
 14145  0031C4  46E8               	rlncf	wreg,f,c
 14146  0031C6  0B03               	andlw	3
 14147  0031C8  06E8               	decf	wreg,f,c
 14148  0031CA  A4D8               	btfss	status,2,c
 14149  0031CC  D04E               	goto	l4291
 14150                           
 14151                           ;diskio.c: 481: csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 14152  0031CE  C028  F014         	movff	disk_ioctl@csd+7,??_disk_ioctl
 14153  0031D2  0E3F               	movlw	63
 14154  0031D4  1614               	andwf	??_disk_ioctl,f,c
 14155  0031D6  C014  F015         	movff	??_disk_ioctl,??_disk_ioctl+1
 14156  0031DA  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 14157  0031DC  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 14158  0031DE  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 14159  0031E0  C016  F018         	movff	??_disk_ioctl+2,??_disk_ioctl+4
 14160  0031E4  C015  F017         	movff	??_disk_ioctl+1,??_disk_ioctl+3
 14161  0031E8  6A16               	clrf	??_disk_ioctl+2,c
 14162  0031EA  6A15               	clrf	??_disk_ioctl+1,c
 14163  0031EC  5029               	movf	disk_ioctl@csd+8,w,c
 14164  0031EE  6E1A               	movwf	(??_disk_ioctl+6)& (0+255),c
 14165  0031F0  6A19               	clrf	(??_disk_ioctl+5)& (0+255),c
 14166  0031F2  502A               	movf	disk_ioctl@csd+9,w,c
 14167  0031F4  6E1B               	movwf	(??_disk_ioctl+7)& (0+255),c
 14168  0031F6  6A1C               	clrf	(??_disk_ioctl+8)& (0+255),c
 14169  0031F8  5019               	movf	??_disk_ioctl+5,w,c
 14170  0031FA  261B               	addwf	??_disk_ioctl+7,f,c
 14171  0031FC  501A               	movf	??_disk_ioctl+6,w,c
 14172  0031FE  221C               	addwfc	??_disk_ioctl+8,f,c
 14173  003200  501B               	movf	??_disk_ioctl+7,w,c
 14174  003202  2415               	addwf	??_disk_ioctl+1,w,c
 14175  003204  6E1D               	movwf	(??_disk_ioctl+9)& (0+255),c
 14176  003206  501C               	movf	??_disk_ioctl+8,w,c
 14177  003208  2016               	addwfc	??_disk_ioctl+2,w,c
 14178  00320A  6E1E               	movwf	(??_disk_ioctl+10)& (0+255),c
 14179  00320C  0E00               	movlw	0
 14180  00320E  2017               	addwfc	??_disk_ioctl+3,w,c
 14181  003210  6E1F               	movwf	(??_disk_ioctl+11)& (0+255),c
 14182  003212  0E00               	movlw	0
 14183  003214  2018               	addwfc	??_disk_ioctl+4,w,c
 14184  003216  6E20               	movwf	(??_disk_ioctl+12)& (0+255),c
 14185  003218  0E01               	movlw	1
 14186  00321A  241D               	addwf	??_disk_ioctl+9,w,c
 14187  00321C  6E32               	movwf	disk_ioctl@csize,c
 14188  00321E  0E00               	movlw	0
 14189  003220  201E               	addwfc	??_disk_ioctl+10,w,c
 14190  003222  6E33               	movwf	disk_ioctl@csize+1,c
 14191  003224  0E00               	movlw	0
 14192  003226  201F               	addwfc	??_disk_ioctl+11,w,c
 14193  003228  6E34               	movwf	disk_ioctl@csize+2,c
 14194  00322A  0E00               	movlw	0
 14195  00322C  2020               	addwfc	??_disk_ioctl+12,w,c
 14196  00322E  6E35               	movwf	disk_ioctl@csize+3,c
 14197                           
 14198                           ;diskio.c: 482: *(DWORD*)buff = csize << 10;
 14199  003230  C032  F014         	movff	disk_ioctl@csize,??_disk_ioctl
 14200  003234  C033  F015         	movff	disk_ioctl@csize+1,??_disk_ioctl+1
 14201  003238  C034  F016         	movff	disk_ioctl@csize+2,??_disk_ioctl+2
 14202  00323C  C035  F017         	movff	disk_ioctl@csize+3,??_disk_ioctl+3
 14203  003240  0E0A               	movlw	10
 14204  003242                     u5595:
 14205  003242  90D8               	bcf	status,0,c
 14206  003244  3614               	rlcf	??_disk_ioctl,f,c
 14207  003246  3615               	rlcf	??_disk_ioctl+1,f,c
 14208  003248  3616               	rlcf	??_disk_ioctl+2,f,c
 14209  00324A  3617               	rlcf	??_disk_ioctl+3,f,c
 14210  00324C  2EE8               	decfsz	wreg,f,c
 14211  00324E  D7F9               	goto	u5595
 14212  003250  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 14213  003254  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 14214  003258  C014  FFDE         	movff	??_disk_ioctl,postinc2
 14215  00325C  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 14216  003260  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 14217  003264  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 14218                           
 14219                           ;diskio.c: 483: } else {
 14220  003268  D1B7               	goto	l4363
 14221  00326A                     l4291:
 14222                           
 14223                           ;diskio.c: 484: n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 14224  00326A  C02A  F014         	movff	disk_ioctl@csd+9,??_disk_ioctl
 14225  00326E  0E03               	movlw	3
 14226  003270  1614               	andwf	??_disk_ioctl,f,c
 14227  003272  90D8               	bcf	status,0,c
 14228  003274  3414               	rlcf	??_disk_ioctl,w,c
 14229  003276  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 14230  003278  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 14231  00327A  AE2B               	btfss	disk_ioctl@csd+10,7,c
 14232  00327C  D001               	bra	u5605
 14233  00327E  2A16               	incf	(??_disk_ioctl+2)& (0+255),f,c
 14234  003280                     u5605:
 14235  003280  0E01               	movlw	1
 14236  003282  1616               	andwf	??_disk_ioctl+2,f,c
 14237  003284  5026               	movf	disk_ioctl@csd+5,w,c
 14238  003286  0B0F               	andlw	15
 14239  003288  2416               	addwf	??_disk_ioctl+2,w,c
 14240  00328A  2415               	addwf	??_disk_ioctl+1,w,c
 14241  00328C  0F02               	addlw	2
 14242  00328E  6E37               	movwf	disk_ioctl@n,c
 14243                           
 14244                           ;diskio.c: 485: csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10)
      +                           + 1;
 14245  003290  5027               	movf	disk_ioctl@csd+6,w,c
 14246  003292  0B03               	andlw	3
 14247  003294  6E14               	movwf	??_disk_ioctl& (0+255),c
 14248  003296  6A15               	clrf	(??_disk_ioctl+1)& (0+255),c
 14249  003298  0E0A               	movlw	10
 14250  00329A                     u5615:
 14251  00329A  90D8               	bcf	status,0,c
 14252  00329C  3614               	rlcf	??_disk_ioctl,f,c
 14253  00329E  3615               	rlcf	??_disk_ioctl+1,f,c
 14254  0032A0  2EE8               	decfsz	wreg,f,c
 14255  0032A2  D7FB               	goto	u5615
 14256  0032A4  5028               	movf	disk_ioctl@csd+7,w,c
 14257  0032A6  6E16               	movwf	(??_disk_ioctl+2)& (0+255),c
 14258  0032A8  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 14259  0032AA  90D8               	bcf	status,0,c
 14260  0032AC  3616               	rlcf	??_disk_ioctl+2,f,c
 14261  0032AE  3617               	rlcf	??_disk_ioctl+3,f,c
 14262  0032B0  90D8               	bcf	status,0,c
 14263  0032B2  3616               	rlcf	??_disk_ioctl+2,f,c
 14264  0032B4  3617               	rlcf	??_disk_ioctl+3,f,c
 14265  0032B6  4429               	rlncf	disk_ioctl@csd+8,w,c
 14266  0032B8  46E8               	rlncf	wreg,f,c
 14267  0032BA  0B03               	andlw	3
 14268  0032BC  6E18               	movwf	(??_disk_ioctl+4)& (0+255),c
 14269  0032BE  6A19               	clrf	(??_disk_ioctl+5)& (0+255),c
 14270  0032C0  5016               	movf	??_disk_ioctl+2,w,c
 14271  0032C2  2618               	addwf	??_disk_ioctl+4,f,c
 14272  0032C4  5017               	movf	??_disk_ioctl+3,w,c
 14273  0032C6  2219               	addwfc	??_disk_ioctl+5,f,c
 14274  0032C8  5014               	movf	??_disk_ioctl,w,c
 14275  0032CA  2618               	addwf	??_disk_ioctl+4,f,c
 14276  0032CC  5015               	movf	??_disk_ioctl+1,w,c
 14277  0032CE  2219               	addwfc	??_disk_ioctl+5,f,c
 14278  0032D0  0E01               	movlw	1
 14279  0032D2  2618               	addwf	??_disk_ioctl+4,f,c
 14280  0032D4  0E00               	movlw	0
 14281  0032D6  2219               	addwfc	??_disk_ioctl+5,f,c
 14282  0032D8  C018  F032         	movff	??_disk_ioctl+4,disk_ioctl@csize
 14283  0032DC  C019  F033         	movff	??_disk_ioctl+5,disk_ioctl@csize+1
 14284  0032E0  6A34               	clrf	disk_ioctl@csize+2,c
 14285  0032E2  6A35               	clrf	disk_ioctl@csize+3,c
 14286                           
 14287                           ;diskio.c: 486: *(DWORD*)buff = csize << (n - 9);
 14288  0032E4  C037  F014         	movff	disk_ioctl@n,??_disk_ioctl
 14289  0032E8  0EF7               	movlw	-9
 14290  0032EA  2614               	addwf	??_disk_ioctl,f,c
 14291  0032EC  C032  F015         	movff	disk_ioctl@csize,??_disk_ioctl+1
 14292  0032F0  C033  F016         	movff	disk_ioctl@csize+1,??_disk_ioctl+2
 14293  0032F4  C034  F017         	movff	disk_ioctl@csize+2,??_disk_ioctl+3
 14294  0032F8  C035  F018         	movff	disk_ioctl@csize+3,??_disk_ioctl+4
 14295  0032FC  2A14               	incf	??_disk_ioctl,f,c
 14296  0032FE  D005               	goto	u5620
 14297  003300                     u5625:
 14298  003300  90D8               	bcf	status,0,c
 14299  003302  3615               	rlcf	??_disk_ioctl+1,f,c
 14300  003304  3616               	rlcf	??_disk_ioctl+2,f,c
 14301  003306  3617               	rlcf	??_disk_ioctl+3,f,c
 14302  003308  3618               	rlcf	??_disk_ioctl+4,f,c
 14303  00330A                     u5620:
 14304  00330A  2E14               	decfsz	??_disk_ioctl,f,c
 14305  00330C  D7F9               	goto	u5625
 14306  00330E  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 14307  003312  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 14308  003316  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 14309  00331A  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 14310  00331E  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 14311  003322  C018  FFDE         	movff	??_disk_ioctl+4,postinc2
 14312  003326  D158               	goto	l4363
 14313  003328  D157               	goto	l4363
 14314                           
 14315                           ;diskio.c: 489: }
 14316                           ;diskio.c: 490: break;
 14317                           
 14318                           ;diskio.c: 487: }
 14319                           ;diskio.c: 488: res = RES_OK;
 14320  00332A  D176               	goto	l4369
 14321  00332C                     l258:
 14322                           
 14323                           ;diskio.c: 493: if (CardType & 0x04) {
 14324  00332C  0100               	movlb	0	; () banked
 14325  00332E  A5D6               	btfss	_CardType& (0+255),2,b
 14326  003330  D04A               	goto	l4315
 14327                           
 14328                           ; BSR set to: 0
 14329                           ;diskio.c: 494: if (send_cmd((0x80+13), 0) == 0) {
 14330  003332  0E00               	movlw	0
 14331  003334  6E0B               	movwf	send_cmd@arg,c
 14332  003336  0E00               	movlw	0
 14333  003338  6E0C               	movwf	send_cmd@arg+1,c
 14334  00333A  0E00               	movlw	0
 14335  00333C  6E0D               	movwf	send_cmd@arg+2,c
 14336  00333E  0E00               	movlw	0
 14337  003340  6E0E               	movwf	send_cmd@arg+3,c
 14338  003342  0E8D               	movlw	141
 14339  003344  EC8F  F032         	call	_send_cmd
 14340  003348  0900               	iorlw	0
 14341  00334A  A4D8               	btfss	status,2,c
 14342  00334C  D165               	goto	l4369
 14343                           
 14344                           ;diskio.c: 495: SPI1_Exchange8bit(0xFF);
 14345  00334E  0EFF               	movlw	255
 14346  003350  EC68  F033         	call	_SPI1_Exchange8bit
 14347                           
 14348                           ;diskio.c: 496: if (rcvr_datablock(csd, 16)) {
 14349  003354  0E21               	movlw	low disk_ioctl@csd
 14350  003356  6E02               	movwf	rcvr_datablock@buff,c
 14351  003358  0E00               	movlw	high disk_ioctl@csd
 14352  00335A  6E03               	movwf	rcvr_datablock@buff+1,c
 14353  00335C  0E00               	movlw	0
 14354  00335E  6E05               	movwf	rcvr_datablock@btr+1,c
 14355  003360  0E10               	movlw	16
 14356  003362  6E04               	movwf	rcvr_datablock@btr,c
 14357  003364  ECA0  F031         	call	_rcvr_datablock	;wreg free
 14358  003368  0900               	iorlw	0
 14359  00336A  B4D8               	btfsc	status,2,c
 14360  00336C  D155               	goto	l4369
 14361                           
 14362                           ;diskio.c: 497: for (n = 64 - 16; n; n--) SPI1_Exchange8bit(0xFF);
 14363  00336E  0E30               	movlw	48
 14364  003370  6E37               	movwf	disk_ioctl@n,c
 14365  003372  D005               	goto	l4309
 14366  003374                     l4305:
 14367  003374  0EFF               	movlw	255
 14368  003376  EC68  F033         	call	_SPI1_Exchange8bit
 14369  00337A  0637               	decf	disk_ioctl@n,f,c
 14370  00337C  D000               	goto	l4309
 14371  00337E                     l4309:
 14372  00337E  5037               	movf	disk_ioctl@n,w,c
 14373  003380  A4D8               	btfss	status,2,c
 14374  003382  D7F8               	goto	l4305
 14375                           
 14376                           ;diskio.c: 498: *(DWORD*)buff = 16UL << (csd[10] >> 4);
 14377  003384  C02B  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 14378  003388  3A14               	swapf	??_disk_ioctl,f,c
 14379  00338A  0E0F               	movlw	15
 14380  00338C  1614               	andwf	??_disk_ioctl,f,c
 14381  00338E  0E10               	movlw	16
 14382  003390  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 14383  003392  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 14384  003394  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 14385  003396  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 14386  003398  2A14               	incf	??_disk_ioctl,f,c
 14387  00339A  D005               	goto	u5670
 14388  00339C                     u5675:
 14389  00339C  90D8               	bcf	status,0,c
 14390  00339E  3615               	rlcf	??_disk_ioctl+1,f,c
 14391  0033A0  3616               	rlcf	??_disk_ioctl+2,f,c
 14392  0033A2  3617               	rlcf	??_disk_ioctl+3,f,c
 14393  0033A4  3618               	rlcf	??_disk_ioctl+4,f,c
 14394  0033A6                     u5670:
 14395  0033A6  2E14               	decfsz	??_disk_ioctl,f,c
 14396  0033A8  D7F9               	goto	u5675
 14397  0033AA  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 14398  0033AE  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 14399  0033B2  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 14400  0033B6  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 14401  0033BA  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 14402  0033BE  C018  FFDE         	movff	??_disk_ioctl+4,postinc2
 14403  0033C2  D10A               	goto	l4363
 14404                           
 14405                           ;diskio.c: 500: }
 14406                           ;diskio.c: 501: }
 14407                           ;diskio.c: 502: } else {
 14408                           
 14409                           ;diskio.c: 499: res = RES_OK;
 14410  0033C4  D129               	goto	l4369
 14411  0033C6                     l4315:
 14412                           
 14413                           ;diskio.c: 503: if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 14414  0033C6  0E00               	movlw	0
 14415  0033C8  6E0B               	movwf	send_cmd@arg,c
 14416  0033CA  0E00               	movlw	0
 14417  0033CC  6E0C               	movwf	send_cmd@arg+1,c
 14418  0033CE  0E00               	movlw	0
 14419  0033D0  6E0D               	movwf	send_cmd@arg+2,c
 14420  0033D2  0E00               	movlw	0
 14421  0033D4  6E0E               	movwf	send_cmd@arg+3,c
 14422  0033D6  0E09               	movlw	9
 14423  0033D8  EC8F  F032         	call	_send_cmd
 14424  0033DC  0900               	iorlw	0
 14425  0033DE  A4D8               	btfss	status,2,c
 14426  0033E0  D11B               	goto	l4369
 14427  0033E2  0E21               	movlw	low disk_ioctl@csd
 14428  0033E4  6E02               	movwf	rcvr_datablock@buff,c
 14429  0033E6  0E00               	movlw	high disk_ioctl@csd
 14430  0033E8  6E03               	movwf	rcvr_datablock@buff+1,c
 14431  0033EA  0E00               	movlw	0
 14432  0033EC  6E05               	movwf	rcvr_datablock@btr+1,c
 14433  0033EE  0E10               	movlw	16
 14434  0033F0  6E04               	movwf	rcvr_datablock@btr,c
 14435  0033F2  ECA0  F031         	call	_rcvr_datablock	;wreg free
 14436  0033F6  0900               	iorlw	0
 14437  0033F8  B4D8               	btfsc	status,2,c
 14438  0033FA  D10E               	goto	l4369
 14439                           
 14440                           ;diskio.c: 504: if (CardType & 0x02) {
 14441  0033FC  0100               	movlb	0	; () banked
 14442  0033FE  A3D6               	btfss	_CardType& (0+255),1,b
 14443  003400  D02A               	goto	l4323
 14444                           
 14445                           ; BSR set to: 0
 14446                           ;diskio.c: 505: *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 
      +                          1) << ((csd[13] >> 6) - 1);
 14447  003402  C02E  F014         	movff	disk_ioctl@csd+13,??_disk_ioctl
 14448  003406  0E06               	movlw	6
 14449  003408  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 14450  00340A                     u5715:
 14451  00340A  90D8               	bcf	status,0,c
 14452  00340C  3214               	rrcf	??_disk_ioctl,f,c
 14453  00340E  2E15               	decfsz	(??_disk_ioctl+1)& (0+255),f,c
 14454  003410  D7FC               	goto	u5715
 14455  003412  0EFF               	movlw	-1
 14456  003414  2614               	addwf	??_disk_ioctl,f,c
 14457  003416  502B               	movf	disk_ioctl@csd+10,w,c
 14458  003418  0B3F               	andlw	63
 14459  00341A  6E16               	movwf	(??_disk_ioctl+2)& (0+255),c
 14460  00341C  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 14461  00341E  90D8               	bcf	status,0,c
 14462  003420  3616               	rlcf	??_disk_ioctl+2,f,c
 14463  003422  3617               	rlcf	??_disk_ioctl+3,f,c
 14464  003424  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 14465  003426  AE2C               	btfss	disk_ioctl@csd+11,7,c
 14466  003428  D001               	bra	u5725
 14467  00342A  2A18               	incf	(??_disk_ioctl+4)& (0+255),f,c
 14468  00342C                     u5725:
 14469  00342C  0E01               	movlw	1
 14470  00342E  1618               	andwf	??_disk_ioctl+4,f,c
 14471  003430  5018               	movf	??_disk_ioctl+4,w,c
 14472  003432  2616               	addwf	??_disk_ioctl+2,f,c
 14473  003434  0E00               	movlw	0
 14474  003436  2217               	addwfc	??_disk_ioctl+3,f,c
 14475  003438  0E01               	movlw	1
 14476  00343A  2616               	addwf	??_disk_ioctl+2,f,c
 14477  00343C  0E00               	movlw	0
 14478  00343E  2217               	addwfc	??_disk_ioctl+3,f,c
 14479  003440  2A14               	incf	??_disk_ioctl,f,c
 14480  003442  D003               	goto	u5734
 14481  003444                     u5735:
 14482  003444  90D8               	bcf	status,0,c
 14483  003446  3616               	rlcf	??_disk_ioctl+2,f,c
 14484  003448  3617               	rlcf	??_disk_ioctl+3,f,c
 14485  00344A                     u5734:
 14486  00344A  2E14               	decfsz	??_disk_ioctl,f,c
 14487  00344C  D7FB               	goto	u5735
 14488  00344E  5016               	movf	??_disk_ioctl+2,w,c
 14489  003450  6E19               	movwf	(??_disk_ioctl+5)& (0+255),c
 14490  003452  5017               	movf	??_disk_ioctl+3,w,c
 14491  003454  D034               	goto	L17
 14492  003456                     l4323:
 14493                           
 14494                           ;diskio.c: 507: *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 
      +                          3) + ((csd[11] & 224) >> 5) + 1);
 14495  003456  C02B  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 14496  00345A  90D8               	bcf	status,0,c
 14497  00345C  3214               	rrcf	??_disk_ioctl,f,c
 14498  00345E  90D8               	bcf	status,0,c
 14499  003460  3214               	rrcf	??_disk_ioctl,f,c
 14500  003462  0E1F               	movlw	31
 14501  003464  1614               	andwf	??_disk_ioctl,f,c
 14502  003466  0E01               	movlw	1
 14503  003468  2414               	addwf	??_disk_ioctl,w,c
 14504  00346A  6E01               	movwf	___wmul@multiplier,c
 14505  00346C  6A02               	clrf	___wmul@multiplier+1,c
 14506  00346E  0E00               	movlw	0
 14507  003470  2202               	addwfc	___wmul@multiplier+1,f,c
 14508  003472  502C               	movf	disk_ioctl@csd+11,w,c
 14509  003474  0B03               	andlw	3
 14510  003476  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 14511  003478  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 14512  00347A  90D8               	bcf	status,0,c
 14513  00347C  3615               	rlcf	??_disk_ioctl+1,f,c
 14514  00347E  3616               	rlcf	??_disk_ioctl+2,f,c
 14515  003480  90D8               	bcf	status,0,c
 14516  003482  3615               	rlcf	??_disk_ioctl+1,f,c
 14517  003484  3616               	rlcf	??_disk_ioctl+2,f,c
 14518  003486  90D8               	bcf	status,0,c
 14519  003488  3615               	rlcf	??_disk_ioctl+1,f,c
 14520  00348A  3616               	rlcf	??_disk_ioctl+2,f,c
 14521  00348C  C02C  F017         	movff	disk_ioctl@csd+11,??_disk_ioctl+3
 14522  003490  0E05               	movlw	5
 14523  003492  6E18               	movwf	(??_disk_ioctl+4)& (0+255),c
 14524  003494                     u5745:
 14525  003494  90D8               	bcf	status,0,c
 14526  003496  3217               	rrcf	??_disk_ioctl+3,f,c
 14527  003498  2E18               	decfsz	(??_disk_ioctl+4)& (0+255),f,c
 14528  00349A  D7FC               	goto	u5745
 14529  00349C  0E07               	movlw	7
 14530  00349E  1617               	andwf	??_disk_ioctl+3,f,c
 14531  0034A0  5017               	movf	??_disk_ioctl+3,w,c
 14532  0034A2  2615               	addwf	??_disk_ioctl+1,f,c
 14533  0034A4  0E00               	movlw	0
 14534  0034A6  2216               	addwfc	??_disk_ioctl+2,f,c
 14535  0034A8  0E01               	movlw	1
 14536  0034AA  2415               	addwf	??_disk_ioctl+1,w,c
 14537  0034AC  6E03               	movwf	___wmul@multiplicand,c
 14538  0034AE  0E00               	movlw	0
 14539  0034B0  2016               	addwfc	??_disk_ioctl+2,w,c
 14540  0034B2  6E04               	movwf	___wmul@multiplicand+1,c
 14541  0034B4  EC39  F033         	call	___wmul	;wreg free
 14542  0034B8  5001               	movf	?___wmul,w,c
 14543  0034BA  6E19               	movwf	(??_disk_ioctl+5)& (0+255),c
 14544  0034BC  5002               	movf	?___wmul+1,w,c
 14545  0034BE                     L17:
 14546  0034BE  6E1A               	movwf	(??_disk_ioctl+6)& (0+255),c
 14547  0034C0  6A1B               	clrf	(??_disk_ioctl+7)& (0+255),c
 14548  0034C2  6A1C               	clrf	(??_disk_ioctl+8)& (0+255),c
 14549  0034C4  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 14550  0034C8  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 14551  0034CC  C019  FFDE         	movff	??_disk_ioctl+5,postinc2
 14552  0034D0  C01A  FFDE         	movff	??_disk_ioctl+6,postinc2
 14553  0034D4  C01B  FFDE         	movff	??_disk_ioctl+7,postinc2
 14554  0034D8  C01C  FFDE         	movff	??_disk_ioctl+8,postinc2
 14555  0034DC  D07D               	goto	l4363
 14556  0034DE  D07C               	goto	l4363
 14557                           
 14558                           ;diskio.c: 510: }
 14559                           ;diskio.c: 511: }
 14560                           ;diskio.c: 512: break;
 14561                           
 14562                           ;diskio.c: 508: }
 14563                           ;diskio.c: 509: res = RES_OK;
 14564  0034E0  D09B               	goto	l4369
 14565  0034E2                     l4327:
 14566                           
 14567                           ;diskio.c: 517: *ptr = CardType;
 14568  0034E2  C038  FFD9         	movff	disk_ioctl@ptr,fsr2l
 14569  0034E6  C039  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 14570  0034EA  C0D6  FFDF         	movff	_CardType,indf2
 14571  0034EE  D074               	goto	l4363
 14572  0034F0                     l4331:
 14573                           
 14574                           ;diskio.c: 522: if (send_cmd((9), 0) == 0
 14575                           ;diskio.c: 523: && rcvr_datablock(ptr, 16))
 14576  0034F0  0E00               	movlw	0
 14577  0034F2  6E0B               	movwf	send_cmd@arg,c
 14578  0034F4  0E00               	movlw	0
 14579  0034F6  6E0C               	movwf	send_cmd@arg+1,c
 14580  0034F8  0E00               	movlw	0
 14581  0034FA  6E0D               	movwf	send_cmd@arg+2,c
 14582  0034FC  0E00               	movlw	0
 14583  0034FE  6E0E               	movwf	send_cmd@arg+3,c
 14584  003500  0E09               	movlw	9
 14585  003502  EC8F  F032         	call	_send_cmd
 14586  003506  0900               	iorlw	0
 14587  003508  A4D8               	btfss	status,2,c
 14588  00350A  D086               	goto	l4369
 14589  00350C  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 14590  003510  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 14591  003514  0E00               	movlw	0
 14592  003516  6E05               	movwf	rcvr_datablock@btr+1,c
 14593  003518  0E10               	movlw	16
 14594  00351A  6E04               	movwf	rcvr_datablock@btr,c
 14595  00351C  ECA0  F031         	call	_rcvr_datablock	;wreg free
 14596  003520  D058               	goto	L20
 14597                           
 14598                           ;diskio.c: 525: break;
 14599                           
 14600                           ;diskio.c: 524: res = RES_OK;
 14601  003522  D07A               	goto	l4369
 14602  003524                     l4337:
 14603                           
 14604                           ;diskio.c: 528: if (send_cmd((10), 0) == 0
 14605                           ;diskio.c: 529: && rcvr_datablock(ptr, 16))
 14606  003524  0E00               	movlw	0
 14607  003526  6E0B               	movwf	send_cmd@arg,c
 14608  003528  0E00               	movlw	0
 14609  00352A  6E0C               	movwf	send_cmd@arg+1,c
 14610  00352C  0E00               	movlw	0
 14611  00352E  6E0D               	movwf	send_cmd@arg+2,c
 14612  003530  0E00               	movlw	0
 14613  003532  6E0E               	movwf	send_cmd@arg+3,c
 14614  003534  0E0A               	movlw	10
 14615  003536  EC8F  F032         	call	_send_cmd
 14616  00353A  0900               	iorlw	0
 14617  00353C  A4D8               	btfss	status,2,c
 14618  00353E  D06C               	goto	l4369
 14619  003540  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 14620  003544  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 14621  003548  0E00               	movlw	0
 14622  00354A  6E05               	movwf	rcvr_datablock@btr+1,c
 14623  00354C  0E10               	movlw	16
 14624  00354E  6E04               	movwf	rcvr_datablock@btr,c
 14625  003550  ECA0  F031         	call	_rcvr_datablock	;wreg free
 14626  003554  D03E               	goto	L20
 14627                           
 14628                           ;diskio.c: 531: break;
 14629                           
 14630                           ;diskio.c: 530: res = RES_OK;
 14631  003556  D060               	goto	l4369
 14632  003558                     l4343:
 14633                           
 14634                           ;diskio.c: 534: if (send_cmd((58), 0) == 0) {
 14635  003558  0E00               	movlw	0
 14636  00355A  6E0B               	movwf	send_cmd@arg,c
 14637  00355C  0E00               	movlw	0
 14638  00355E  6E0C               	movwf	send_cmd@arg+1,c
 14639  003560  0E00               	movlw	0
 14640  003562  6E0D               	movwf	send_cmd@arg+2,c
 14641  003564  0E00               	movlw	0
 14642  003566  6E0E               	movwf	send_cmd@arg+3,c
 14643  003568  0E3A               	movlw	58
 14644  00356A  EC8F  F032         	call	_send_cmd
 14645  00356E  0900               	iorlw	0
 14646  003570  A4D8               	btfss	status,2,c
 14647  003572  D052               	goto	l4369
 14648                           
 14649                           ;diskio.c: 535: for (n = 4; n; n--) *ptr++ = SPI1_Exchange8bit(0xFF);
 14650  003574  0E04               	movlw	4
 14651  003576  6E37               	movwf	disk_ioctl@n,c
 14652  003578  D00C               	goto	l4353
 14653  00357A                     l4347:
 14654  00357A  0EFF               	movlw	255
 14655  00357C  EC68  F033         	call	_SPI1_Exchange8bit
 14656  003580  C038  FFD9         	movff	disk_ioctl@ptr,fsr2l
 14657  003584  C039  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 14658  003588  6EDF               	movwf	indf2,c
 14659  00358A  4A38               	infsnz	disk_ioctl@ptr,f,c
 14660  00358C  2A39               	incf	disk_ioctl@ptr+1,f,c
 14661  00358E  0637               	decf	disk_ioctl@n,f,c
 14662  003590  D000               	goto	l4353
 14663  003592                     l4353:
 14664  003592  5037               	movf	disk_ioctl@n,w,c
 14665  003594  A4D8               	btfss	status,2,c
 14666  003596  D7F1               	goto	l4347
 14667  003598  D01F               	goto	l4363
 14668                           
 14669                           ;diskio.c: 537: }
 14670                           ;diskio.c: 538: break;
 14671                           
 14672                           ;diskio.c: 536: res = RES_OK;
 14673  00359A  D03E               	goto	l4369
 14674  00359C                     l4357:
 14675                           
 14676                           ;diskio.c: 541: if (send_cmd((0x80+13), 0) == 0) {
 14677  00359C  0E00               	movlw	0
 14678  00359E  6E0B               	movwf	send_cmd@arg,c
 14679  0035A0  0E00               	movlw	0
 14680  0035A2  6E0C               	movwf	send_cmd@arg+1,c
 14681  0035A4  0E00               	movlw	0
 14682  0035A6  6E0D               	movwf	send_cmd@arg+2,c
 14683  0035A8  0E00               	movlw	0
 14684  0035AA  6E0E               	movwf	send_cmd@arg+3,c
 14685  0035AC  0E8D               	movlw	141
 14686  0035AE  EC8F  F032         	call	_send_cmd
 14687  0035B2  0900               	iorlw	0
 14688  0035B4  A4D8               	btfss	status,2,c
 14689  0035B6  D030               	goto	l4369
 14690                           
 14691                           ;diskio.c: 542: SPI1_Exchange8bit(0xFF);
 14692  0035B8  0EFF               	movlw	255
 14693  0035BA  EC68  F033         	call	_SPI1_Exchange8bit
 14694                           
 14695                           ;diskio.c: 543: if (rcvr_datablock(ptr, 64))
 14696  0035BE  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 14697  0035C2  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 14698  0035C6  0E00               	movlw	0
 14699  0035C8  6E05               	movwf	rcvr_datablock@btr+1,c
 14700  0035CA  0E40               	movlw	64
 14701  0035CC  6E04               	movwf	rcvr_datablock@btr,c
 14702  0035CE  ECA0  F031         	call	_rcvr_datablock	;wreg free
 14703  0035D2                     L20:
 14704  0035D2  0900               	iorlw	0
 14705  0035D4  B4D8               	btfsc	status,2,c
 14706  0035D6  D020               	goto	l4369
 14707  0035D8                     l4363:
 14708                           
 14709                           ;diskio.c: 544: res = RES_OK;
 14710  0035D8  0E00               	movlw	0
 14711  0035DA  D002               	goto	L18
 14712                           
 14713                           ;diskio.c: 545: }
 14714                           ;diskio.c: 546: break;
 14715  0035DC  D01D               	goto	l4369
 14716  0035DE                     l4365:
 14717                           
 14718                           ;diskio.c: 549: res = RES_PARERR;
 14719  0035DE  0E04               	movlw	4
 14720  0035E0                     L18:
 14721  0035E0  6E36               	movwf	disk_ioctl@res,c
 14722                           
 14723                           ;diskio.c: 550: }
 14724  0035E2  D01A               	goto	l4369
 14725  0035E4                     l4367:
 14726  0035E4  5011               	movf	disk_ioctl@cmd,w,c
 14727                           
 14728                           ; Switch size 1, requested type "space"
 14729                           ; Number of cases is 8, Range of values is 0 to 14
 14730                           ; switch strategies available:
 14731                           ; Name         Instructions Cycles
 14732                           ; simple_byte           25    13 (average)
 14733                           ;	Chosen strategy is simple_byte
 14734  0035E6  0A00               	xorlw	0	; case 0
 14735  0035E8  B4D8               	btfsc	status,2,c
 14736  0035EA  D5CC               	goto	l4277
 14737  0035EC  0A01               	xorlw	1	; case 1
 14738  0035EE  B4D8               	btfsc	status,2,c
 14739  0035F0  D5CD               	goto	l4281
 14740  0035F2  0A02               	xorlw	2	; case 3
 14741  0035F4  B4D8               	btfsc	status,2,c
 14742  0035F6  D69A               	goto	l258
 14743  0035F8  0A09               	xorlw	9	; case 10
 14744  0035FA  B4D8               	btfsc	status,2,c
 14745  0035FC  D772               	goto	l4327
 14746  0035FE  0A01               	xorlw	1	; case 11
 14747  003600  B4D8               	btfsc	status,2,c
 14748  003602  D776               	goto	l4331
 14749  003604  0A07               	xorlw	7	; case 12
 14750  003606  B4D8               	btfsc	status,2,c
 14751  003608  D78D               	goto	l4337
 14752  00360A  0A01               	xorlw	1	; case 13
 14753  00360C  B4D8               	btfsc	status,2,c
 14754  00360E  D7A4               	goto	l4343
 14755  003610  0A03               	xorlw	3	; case 14
 14756  003612  B4D8               	btfsc	status,2,c
 14757  003614  D7C3               	goto	l4357
 14758  003616  D7E3               	goto	l4365
 14759  003618                     l4369:
 14760                           
 14761                           ;diskio.c: 552: deselect();
 14762  003618  EC8D  F033         	call	_deselect	;wreg free
 14763                           
 14764                           ;diskio.c: 554: return res;
 14765  00361C  5036               	movf	disk_ioctl@res,w,c
 14766  00361E  0012               	return	
 14767  003620  0012               	return		;funcret
 14768  003622                     __end_of_disk_ioctl:
 14769                           	opt stack 0
 14770                           tblptru	equ	0xFF8
 14771                           tblptrh	equ	0xFF7
 14772                           tblptrl	equ	0xFF6
 14773                           tablat	equ	0xFF5
 14774                           prodh	equ	0xFF4
 14775                           prodl	equ	0xFF3
 14776                           indf0	equ	0xFEF
 14777                           postinc0	equ	0xFEE
 14778                           fsr0h	equ	0xFEA
 14779                           fsr0l	equ	0xFE9
 14780                           wreg	equ	0xFE8
 14781                           indf1	equ	0xFE7
 14782                           postinc1	equ	0xFE6
 14783                           postdec1	equ	0xFE5
 14784                           fsr1h	equ	0xFE2
 14785                           fsr1l	equ	0xFE1
 14786                           indf2	equ	0xFDF
 14787                           postinc2	equ	0xFDE
 14788                           postdec2	equ	0xFDD
 14789                           plusw2	equ	0xFDB
 14790                           fsr2h	equ	0xFDA
 14791                           fsr2l	equ	0xFD9
 14792                           status	equ	0xFD8
 14793                           
 14794 ;; *************** function ___wmul *****************
 14795 ;; Defined at:
 14796 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 14797 ;; Parameters:    Size  Location     Type
 14798 ;;  multiplier      2    0[COMRAM] unsigned int 
 14799 ;;  multiplicand    2    2[COMRAM] unsigned int 
 14800 ;; Auto vars:     Size  Location     Type
 14801 ;;  product         2    4[COMRAM] unsigned int 
 14802 ;; Return value:  Size  Location     Type
 14803 ;;                  2    0[COMRAM] unsigned int 
 14804 ;; Registers used:
 14805 ;;		wreg, status,2, status,0, prodl, prodh
 14806 ;; Tracked objects:
 14807 ;;		On entry : 0/0
 14808 ;;		On exit  : 0/0
 14809 ;;		Unchanged: 0/0
 14810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14811 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14812 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14814 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14815 ;;Total ram usage:        6 bytes
 14816 ;; Hardware stack levels used:    1
 14817 ;; This function calls:
 14818 ;;		Nothing
 14819 ;; This function is called by:
 14820 ;;		_disk_ioctl
 14821 ;; This function uses a non-reentrant model
 14822 ;;
 14823                           
 14824                           	psect	text35
 14825  006672                     __ptext35:
 14826                           	opt stack 0
 14827  006672                     ___wmul:
 14828                           	opt stack 26
 14829                           
 14830                           ;incstack = 0
 14831  006672  5001               	movf	___wmul@multiplier,w,c
 14832  006674  0203               	mulwf	___wmul@multiplicand,c
 14833  006676  CFF3 F005          	movff	prodl,___wmul@product
 14834  00667A  CFF4 F006          	movff	prodh,___wmul@product+1
 14835  00667E  5001               	movf	___wmul@multiplier,w,c
 14836  006680  0204               	mulwf	___wmul@multiplicand+1,c
 14837  006682  50F3               	movf	prodl,w,c
 14838  006684  2606               	addwf	___wmul@product+1,f,c
 14839  006686  5002               	movf	___wmul@multiplier+1,w,c
 14840  006688  0203               	mulwf	___wmul@multiplicand,c
 14841  00668A  50F3               	movf	prodl,w,c
 14842  00668C  2606               	addwf	___wmul@product+1,f,c
 14843  00668E  C005  F001         	movff	___wmul@product,?___wmul
 14844  006692  C006  F002         	movff	___wmul@product+1,?___wmul+1
 14845  006696  0012               	return	
 14846  006698  0012               	return		;funcret
 14847  00669A                     __end_of___wmul:
 14848                           	opt stack 0
 14849                           tblptru	equ	0xFF8
 14850                           tblptrh	equ	0xFF7
 14851                           tblptrl	equ	0xFF6
 14852                           tablat	equ	0xFF5
 14853                           prodh	equ	0xFF4
 14854                           prodl	equ	0xFF3
 14855                           indf0	equ	0xFEF
 14856                           postinc0	equ	0xFEE
 14857                           fsr0h	equ	0xFEA
 14858                           fsr0l	equ	0xFE9
 14859                           wreg	equ	0xFE8
 14860                           indf1	equ	0xFE7
 14861                           postinc1	equ	0xFE6
 14862                           postdec1	equ	0xFE5
 14863                           fsr1h	equ	0xFE2
 14864                           fsr1l	equ	0xFE1
 14865                           indf2	equ	0xFDF
 14866                           postinc2	equ	0xFDE
 14867                           postdec2	equ	0xFDD
 14868                           plusw2	equ	0xFDB
 14869                           fsr2h	equ	0xFDA
 14870                           fsr2l	equ	0xFD9
 14871                           status	equ	0xFD8
 14872                           
 14873 ;; *************** function _st_clust *****************
 14874 ;; Defined at:
 14875 ;;		line 1252 in file "ff.c"
 14876 ;; Parameters:    Size  Location     Type
 14877 ;;  dir             2    0[COMRAM] PTR unsigned char 
 14878 ;;		 -> FatFs(558), NULL(0), 
 14879 ;;  cl              4    2[COMRAM] unsigned long 
 14880 ;; Auto vars:     Size  Location     Type
 14881 ;;		None
 14882 ;; Return value:  Size  Location     Type
 14883 ;;		None               void
 14884 ;; Registers used:
 14885 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14886 ;; Tracked objects:
 14887 ;;		On entry : 0/0
 14888 ;;		On exit  : 0/0
 14889 ;;		Unchanged: 0/0
 14890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14891 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14894 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14895 ;;Total ram usage:        6 bytes
 14896 ;; Hardware stack levels used:    1
 14897 ;; This function calls:
 14898 ;;		Nothing
 14899 ;; This function is called by:
 14900 ;;		_f_open
 14901 ;;		_f_sync
 14902 ;; This function uses a non-reentrant model
 14903 ;;
 14904                           
 14905                           	psect	text36
 14906  006648                     __ptext36:
 14907                           	opt stack 0
 14908  006648                     _st_clust:
 14909                           	opt stack 29
 14910                           
 14911                           ;ff.c: 1257: *(WORD*)(BYTE*)(dir + 26)=(WORD)(cl);
 14912                           
 14913                           ;incstack = 0
 14914  006648  EE20 F01A          	lfsr	2,26
 14915  00664C  5001               	movf	st_clust@dir,w,c
 14916  00664E  26D9               	addwf	fsr2l,f,c
 14917  006650  5002               	movf	st_clust@dir+1,w,c
 14918  006652  22DA               	addwfc	fsr2h,f,c
 14919  006654  C003  FFDE         	movff	st_clust@cl,postinc2
 14920  006658  C004  FFDD         	movff	st_clust@cl+1,postdec2
 14921                           
 14922                           ;ff.c: 1258: *(WORD*)(BYTE*)(dir + 20)=(WORD)(cl >> 16);
 14923  00665C  EE20 F014          	lfsr	2,20
 14924  006660  5001               	movf	st_clust@dir,w,c
 14925  006662  26D9               	addwf	fsr2l,f,c
 14926  006664  5002               	movf	st_clust@dir+1,w,c
 14927  006666  22DA               	addwfc	fsr2h,f,c
 14928  006668  C005  FFDE         	movff	st_clust@cl+2,postinc2
 14929  00666C  C006  FFDD         	movff	st_clust@cl+3,postdec2
 14930  006670  0012               	return		;funcret
 14931  006672                     __end_of_st_clust:
 14932                           	opt stack 0
 14933                           tblptru	equ	0xFF8
 14934                           tblptrh	equ	0xFF7
 14935                           tblptrl	equ	0xFF6
 14936                           tablat	equ	0xFF5
 14937                           prodh	equ	0xFF4
 14938                           prodl	equ	0xFF3
 14939                           indf0	equ	0xFEF
 14940                           postinc0	equ	0xFEE
 14941                           fsr0h	equ	0xFEA
 14942                           fsr0l	equ	0xFE9
 14943                           wreg	equ	0xFE8
 14944                           indf1	equ	0xFE7
 14945                           postinc1	equ	0xFE6
 14946                           postdec1	equ	0xFE5
 14947                           fsr1h	equ	0xFE2
 14948                           fsr1l	equ	0xFE1
 14949                           indf2	equ	0xFDF
 14950                           postinc2	equ	0xFDE
 14951                           postdec2	equ	0xFDD
 14952                           plusw2	equ	0xFDB
 14953                           fsr2h	equ	0xFDA
 14954                           fsr2l	equ	0xFD9
 14955                           status	equ	0xFD8
 14956                           
 14957 ;; *************** function _move_window *****************
 14958 ;; Defined at:
 14959 ;;		line 729 in file "ff.c"
 14960 ;; Parameters:    Size  Location     Type
 14961 ;;  fs              2   47[COMRAM] PTR struct .
 14962 ;;		 -> FatFs(558), NULL(0), 
 14963 ;;  sector          4   49[COMRAM] unsigned long 
 14964 ;; Auto vars:     Size  Location     Type
 14965 ;;  res             1   57[COMRAM] enum E88
 14966 ;; Return value:  Size  Location     Type
 14967 ;;                  1    wreg      enum E88
 14968 ;; Registers used:
 14969 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14970 ;; Tracked objects:
 14971 ;;		On entry : 0/0
 14972 ;;		On exit  : 0/0
 14973 ;;		Unchanged: 0/0
 14974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14975 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14976 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14977 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14978 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14979 ;;Total ram usage:       11 bytes
 14980 ;; Hardware stack levels used:    1
 14981 ;; Hardware stack levels required when called:    7
 14982 ;; This function calls:
 14983 ;;		_disk_read
 14984 ;;		_sync_window
 14985 ;; This function is called by:
 14986 ;;		_get_fat
 14987 ;;		_put_fat
 14988 ;;		_dir_alloc
 14989 ;;		_dir_find
 14990 ;;		_dir_register
 14991 ;;		_check_fs
 14992 ;;		_find_volume
 14993 ;;		_f_open
 14994 ;;		_f_write
 14995 ;;		_f_sync
 14996 ;;		_f_read
 14997 ;; This function uses a non-reentrant model
 14998 ;;
 14999                           
 15000                           	psect	text37
 15001  005FD2                     __ptext37:
 15002                           	opt stack 0
 15003  005FD2                     _move_window:
 15004                           	opt stack 22
 15005                           
 15006                           ;ff.c: 734: FRESULT res = FR_OK;
 15007                           
 15008                           ;incstack = 0
 15009  005FD2  0E00               	movlw	0
 15010  005FD4  6E3A               	movwf	move_window@res,c
 15011                           
 15012                           ;ff.c: 737: if (sector != fs->winsect) {
 15013  005FD6  EE20 F02A          	lfsr	2,42
 15014  005FDA  5030               	movf	move_window@fs,w,c
 15015  005FDC  26D9               	addwf	fsr2l,f,c
 15016  005FDE  5031               	movf	move_window@fs+1,w,c
 15017  005FE0  22DA               	addwfc	fsr2h,f,c
 15018  005FE2  5032               	movf	move_window@sector,w,c
 15019  005FE4  18DE               	xorwf	postinc2,w,c
 15020  005FE6  E10A               	bnz	u5050
 15021  005FE8  5033               	movf	move_window@sector+1,w,c
 15022  005FEA  18DE               	xorwf	postinc2,w,c
 15023  005FEC  E107               	bnz	u5050
 15024  005FEE  5034               	movf	move_window@sector+2,w,c
 15025  005FF0  18DE               	xorwf	postinc2,w,c
 15026  005FF2  E104               	bnz	u5050
 15027  005FF4  5035               	movf	move_window@sector+3,w,c
 15028  005FF6  18DE               	xorwf	postinc2,w,c
 15029  005FF8  B4D8               	btfsc	status,2,c
 15030  005FFA  D03E               	goto	l4011
 15031  005FFC                     u5050:
 15032                           
 15033                           ;ff.c: 739: res = sync_window(fs);
 15034  005FFC  C030  F01B         	movff	move_window@fs,sync_window@fs
 15035  006000  C031  F01C         	movff	move_window@fs+1,sync_window@fs+1
 15036  006004  EC58  F029         	call	_sync_window	;wreg free
 15037  006008  6E3A               	movwf	move_window@res,c
 15038                           
 15039                           ;ff.c: 741: if (res == FR_OK) {
 15040  00600A  503A               	movf	move_window@res,w,c
 15041  00600C  A4D8               	btfss	status,2,c
 15042  00600E  D034               	goto	l4011
 15043                           
 15044                           ;ff.c: 742: if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 15045  006010  0E2E               	movlw	46
 15046  006012  2430               	addwf	move_window@fs,w,c
 15047  006014  6E11               	movwf	disk_read@buff,c
 15048  006016  0E00               	movlw	0
 15049  006018  2031               	addwfc	move_window@fs+1,w,c
 15050  00601A  6E12               	movwf	disk_read@buff+1,c
 15051  00601C  C032  F013         	movff	move_window@sector,disk_read@sector
 15052  006020  C033  F014         	movff	move_window@sector+1,disk_read@sector+1
 15053  006024  C034  F015         	movff	move_window@sector+2,disk_read@sector+2
 15054  006028  C035  F016         	movff	move_window@sector+3,disk_read@sector+3
 15055  00602C  0E00               	movlw	0
 15056  00602E  6E18               	movwf	disk_read@count+1,c
 15057  006030  0E01               	movlw	1
 15058  006032  6E17               	movwf	disk_read@count,c
 15059  006034  EE20 F001          	lfsr	2,1
 15060  006038  5030               	movf	move_window@fs,w,c
 15061  00603A  26D9               	addwf	fsr2l,f,c
 15062  00603C  5031               	movf	move_window@fs+1,w,c
 15063  00603E  22DA               	addwfc	fsr2h,f,c
 15064  006040  50DF               	movf	indf2,w,c
 15065  006042  ECF9  F02D         	call	_disk_read
 15066  006046  0900               	iorlw	0
 15067  006048  B4D8               	btfsc	status,2,c
 15068  00604A  D007               	goto	l4009
 15069                           
 15070                           ;ff.c: 743: sector = 0xFFFFFFFF;
 15071  00604C  6832               	setf	move_window@sector,c
 15072  00604E  6833               	setf	move_window@sector+1,c
 15073  006050  6834               	setf	move_window@sector+2,c
 15074  006052  6835               	setf	move_window@sector+3,c
 15075                           
 15076                           ;ff.c: 744: res = FR_DISK_ERR;
 15077  006054  0E01               	movlw	1
 15078  006056  6E3A               	movwf	move_window@res,c
 15079  006058  D000               	goto	l4009
 15080  00605A                     l4009:
 15081                           
 15082                           ;ff.c: 745: }
 15083                           ;ff.c: 746: fs->winsect = sector;
 15084  00605A  EE20 F02A          	lfsr	2,42
 15085  00605E  5030               	movf	move_window@fs,w,c
 15086  006060  26D9               	addwf	fsr2l,f,c
 15087  006062  5031               	movf	move_window@fs+1,w,c
 15088  006064  22DA               	addwfc	fsr2h,f,c
 15089  006066  C032  FFDE         	movff	move_window@sector,postinc2
 15090  00606A  C033  FFDE         	movff	move_window@sector+1,postinc2
 15091  00606E  C034  FFDE         	movff	move_window@sector+2,postinc2
 15092  006072  C035  FFDE         	movff	move_window@sector+3,postinc2
 15093  006076  D000               	goto	l4011
 15094  006078                     l4011:
 15095                           
 15096                           ;ff.c: 747: }
 15097                           ;ff.c: 748: }
 15098                           ;ff.c: 749: return res;
 15099  006078  503A               	movf	move_window@res,w,c
 15100  00607A  0012               	return	
 15101  00607C  0012               	return		;funcret
 15102  00607E                     __end_of_move_window:
 15103                           	opt stack 0
 15104                           tblptru	equ	0xFF8
 15105                           tblptrh	equ	0xFF7
 15106                           tblptrl	equ	0xFF6
 15107                           tablat	equ	0xFF5
 15108                           prodh	equ	0xFF4
 15109                           prodl	equ	0xFF3
 15110                           indf0	equ	0xFEF
 15111                           postinc0	equ	0xFEE
 15112                           fsr0h	equ	0xFEA
 15113                           fsr0l	equ	0xFE9
 15114                           wreg	equ	0xFE8
 15115                           indf1	equ	0xFE7
 15116                           postinc1	equ	0xFE6
 15117                           postdec1	equ	0xFE5
 15118                           fsr1h	equ	0xFE2
 15119                           fsr1l	equ	0xFE1
 15120                           indf2	equ	0xFDF
 15121                           postinc2	equ	0xFDE
 15122                           postdec2	equ	0xFDD
 15123                           plusw2	equ	0xFDB
 15124                           fsr2h	equ	0xFDA
 15125                           fsr2l	equ	0xFD9
 15126                           status	equ	0xFD8
 15127                           
 15128 ;; *************** function _sync_window *****************
 15129 ;; Defined at:
 15130 ;;		line 700 in file "ff.c"
 15131 ;; Parameters:    Size  Location     Type
 15132 ;;  fs              2   26[COMRAM] PTR struct .
 15133 ;;		 -> FatFs(558), NULL(0), 
 15134 ;; Auto vars:     Size  Location     Type
 15135 ;;  wsect           4   43[COMRAM] unsigned long 
 15136 ;;  nf              2   41[COMRAM] unsigned int 
 15137 ;;  res             1   40[COMRAM] enum E88
 15138 ;; Return value:  Size  Location     Type
 15139 ;;                  1    wreg      enum E88
 15140 ;; Registers used:
 15141 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15142 ;; Tracked objects:
 15143 ;;		On entry : 0/0
 15144 ;;		On exit  : 0/0
 15145 ;;		Unchanged: 0/0
 15146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15147 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15148 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15149 ;;      Temps:         12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15150 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15151 ;;Total ram usage:       21 bytes
 15152 ;; Hardware stack levels used:    1
 15153 ;; Hardware stack levels required when called:    6
 15154 ;; This function calls:
 15155 ;;		_disk_write
 15156 ;; This function is called by:
 15157 ;;		_move_window
 15158 ;;		_sync_fs
 15159 ;;		_dir_next
 15160 ;;		_f_write
 15161 ;; This function uses a non-reentrant model
 15162 ;;
 15163                           
 15164                           	psect	text38
 15165  0052B0                     __ptext38:
 15166                           	opt stack 0
 15167  0052B0                     _sync_window:
 15168                           	opt stack 23
 15169                           
 15170                           ;ff.c: 704: DWORD wsect;
 15171                           ;ff.c: 705: UINT nf;
 15172                           ;ff.c: 706: FRESULT res = FR_OK;
 15173                           
 15174                           ;incstack = 0
 15175  0052B0  0E00               	movlw	0
 15176  0052B2  6E29               	movwf	sync_window@res,c
 15177                           
 15178                           ;ff.c: 709: if (fs->wflag) {
 15179  0052B4  EE20 F004          	lfsr	2,4
 15180  0052B8  501B               	movf	sync_window@fs,w,c
 15181  0052BA  26D9               	addwf	fsr2l,f,c
 15182  0052BC  501C               	movf	sync_window@fs+1,w,c
 15183  0052BE  22DA               	addwfc	fsr2h,f,c
 15184  0052C0  50DF               	movf	indf2,w,c
 15185  0052C2  B4D8               	btfsc	status,2,c
 15186  0052C4  D0AC               	goto	l3991
 15187                           
 15188                           ;ff.c: 710: wsect = fs->winsect;
 15189  0052C6  EE20 F02A          	lfsr	2,42
 15190  0052CA  501B               	movf	sync_window@fs,w,c
 15191  0052CC  26D9               	addwf	fsr2l,f,c
 15192  0052CE  501C               	movf	sync_window@fs+1,w,c
 15193  0052D0  22DA               	addwfc	fsr2h,f,c
 15194  0052D2  CFDE F02C          	movff	postinc2,sync_window@wsect
 15195  0052D6  CFDE F02D          	movff	postinc2,sync_window@wsect+1
 15196  0052DA  CFDE F02E          	movff	postinc2,sync_window@wsect+2
 15197  0052DE  CFDE F02F          	movff	postinc2,sync_window@wsect+3
 15198                           
 15199                           ;ff.c: 711: if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 15200  0052E2  0E2E               	movlw	46
 15201  0052E4  241B               	addwf	sync_window@fs,w,c
 15202  0052E6  6E11               	movwf	disk_write@buff,c
 15203  0052E8  0E00               	movlw	0
 15204  0052EA  201C               	addwfc	sync_window@fs+1,w,c
 15205  0052EC  6E12               	movwf	disk_write@buff+1,c
 15206  0052EE  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 15207  0052F2  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 15208  0052F6  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 15209  0052FA  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 15210  0052FE  0E00               	movlw	0
 15211  005300  6E18               	movwf	disk_write@count+1,c
 15212  005302  0E01               	movlw	1
 15213  005304  6E17               	movwf	disk_write@count,c
 15214  005306  EE20 F001          	lfsr	2,1
 15215  00530A  501B               	movf	sync_window@fs,w,c
 15216  00530C  26D9               	addwf	fsr2l,f,c
 15217  00530E  501C               	movf	sync_window@fs+1,w,c
 15218  005310  22DA               	addwfc	fsr2h,f,c
 15219  005312  50DF               	movf	indf2,w,c
 15220  005314  ECBD  F02A         	call	_disk_write
 15221  005318  0900               	iorlw	0
 15222  00531A  B4D8               	btfsc	status,2,c
 15223  00531C  D003               	goto	l3973
 15224                           
 15225                           ;ff.c: 712: res = FR_DISK_ERR;
 15226  00531E  0E01               	movlw	1
 15227  005320  6E29               	movwf	sync_window@res,c
 15228                           
 15229                           ;ff.c: 713: } else {
 15230  005322  D07D               	goto	l3991
 15231  005324                     l3973:
 15232                           
 15233                           ;ff.c: 714: fs->wflag = 0;
 15234  005324  EE20 F004          	lfsr	2,4
 15235  005328  501B               	movf	sync_window@fs,w,c
 15236  00532A  26D9               	addwf	fsr2l,f,c
 15237  00532C  501C               	movf	sync_window@fs+1,w,c
 15238  00532E  22DA               	addwfc	fsr2h,f,c
 15239  005330  0E00               	movlw	0
 15240  005332  6EDF               	movwf	indf2,c
 15241                           
 15242                           ;ff.c: 715: if (wsect - fs->fatbase < fs->fsize) {
 15243  005334  EE20 F016          	lfsr	2,22
 15244  005338  501B               	movf	sync_window@fs,w,c
 15245  00533A  26D9               	addwf	fsr2l,f,c
 15246  00533C  501C               	movf	sync_window@fs+1,w,c
 15247  00533E  22DA               	addwfc	fsr2h,f,c
 15248  005340  EE10 F01E          	lfsr	1,30
 15249  005344  501B               	movf	sync_window@fs,w,c
 15250  005346  26E1               	addwf	fsr1l,f,c
 15251  005348  501C               	movf	sync_window@fs+1,w,c
 15252  00534A  22E2               	addwfc	fsr1h,f,c
 15253  00534C  CFE6 F021          	movff	postinc1,??_sync_window+4
 15254  005350  CFE6 F022          	movff	postinc1,??_sync_window+5
 15255  005354  CFE6 F023          	movff	postinc1,??_sync_window+6
 15256  005358  CFE6 F024          	movff	postinc1,??_sync_window+7
 15257  00535C  1E21               	comf	??_sync_window+4,f,c
 15258  00535E  1E22               	comf	??_sync_window+5,f,c
 15259  005360  1E23               	comf	??_sync_window+6,f,c
 15260  005362  1E24               	comf	??_sync_window+7,f,c
 15261  005364  2A21               	incf	??_sync_window+4,f,c
 15262  005366  0E00               	movlw	0
 15263  005368  2222               	addwfc	??_sync_window+5,f,c
 15264  00536A  2223               	addwfc	??_sync_window+6,f,c
 15265  00536C  2224               	addwfc	??_sync_window+7,f,c
 15266  00536E  502C               	movf	sync_window@wsect,w,c
 15267  005370  2421               	addwf	??_sync_window+4,w,c
 15268  005372  6E25               	movwf	(??_sync_window+8)& (0+255),c
 15269  005374  502D               	movf	sync_window@wsect+1,w,c
 15270  005376  2022               	addwfc	??_sync_window+5,w,c
 15271  005378  6E26               	movwf	(??_sync_window+9)& (0+255),c
 15272  00537A  502E               	movf	sync_window@wsect+2,w,c
 15273  00537C  2023               	addwfc	??_sync_window+6,w,c
 15274  00537E  6E27               	movwf	(??_sync_window+10)& (0+255),c
 15275  005380  502F               	movf	sync_window@wsect+3,w,c
 15276  005382  2024               	addwfc	??_sync_window+7,w,c
 15277  005384  6E28               	movwf	(??_sync_window+11)& (0+255),c
 15278  005386  50DE               	movf	postinc2,w,c
 15279  005388  5C25               	subwf	??_sync_window+8,w,c
 15280  00538A  50DE               	movf	postinc2,w,c
 15281  00538C  5826               	subwfb	??_sync_window+9,w,c
 15282  00538E  50DE               	movf	postinc2,w,c
 15283  005390  5827               	subwfb	??_sync_window+10,w,c
 15284  005392  50DE               	movf	postinc2,w,c
 15285  005394  5828               	subwfb	??_sync_window+11,w,c
 15286  005396  B0D8               	btfsc	status,0,c
 15287  005398  D042               	goto	l3991
 15288                           
 15289                           ;ff.c: 716: for (nf = fs->n_fats; nf >= 2; nf--) {
 15290  00539A  EE20 F003          	lfsr	2,3
 15291  00539E  501B               	movf	sync_window@fs,w,c
 15292  0053A0  26D9               	addwf	fsr2l,f,c
 15293  0053A2  501C               	movf	sync_window@fs+1,w,c
 15294  0053A4  22DA               	addwfc	fsr2h,f,c
 15295  0053A6  50DF               	movf	indf2,w,c
 15296  0053A8  6E1D               	movwf	??_sync_window& (0+255),c
 15297  0053AA  501D               	movf	??_sync_window,w,c
 15298  0053AC  6E2A               	movwf	sync_window@nf,c
 15299  0053AE  6A2B               	clrf	sync_window@nf+1,c
 15300  0053B0                     l3979:
 15301  0053B0  502B               	movf	sync_window@nf+1,w,c
 15302  0053B2  E106               	bnz	l3983
 15303  0053B4  0E02               	movlw	2
 15304  0053B6  5C2A               	subwf	sync_window@nf,w,c
 15305  0053B8  A0D8               	btfss	status,0,c
 15306  0053BA  D031               	goto	l3991
 15307  0053BC  D001               	goto	l3983
 15308  0053BE  D02F               	goto	l3991
 15309  0053C0                     l3983:
 15310                           
 15311                           ;ff.c: 717: wsect += fs->fsize;
 15312  0053C0  EE20 F016          	lfsr	2,22
 15313  0053C4  501B               	movf	sync_window@fs,w,c
 15314  0053C6  26D9               	addwf	fsr2l,f,c
 15315  0053C8  501C               	movf	sync_window@fs+1,w,c
 15316  0053CA  22DA               	addwfc	fsr2h,f,c
 15317  0053CC  50DE               	movf	postinc2,w,c
 15318  0053CE  262C               	addwf	sync_window@wsect,f,c
 15319  0053D0  50DE               	movf	postinc2,w,c
 15320  0053D2  222D               	addwfc	sync_window@wsect+1,f,c
 15321  0053D4  50DE               	movf	postinc2,w,c
 15322  0053D6  222E               	addwfc	sync_window@wsect+2,f,c
 15323  0053D8  50DD               	movf	postdec2,w,c
 15324  0053DA  222F               	addwfc	sync_window@wsect+3,f,c
 15325                           
 15326                           ;ff.c: 718: disk_write(fs->drv, fs->win, wsect, 1);
 15327  0053DC  0E2E               	movlw	46
 15328  0053DE  241B               	addwf	sync_window@fs,w,c
 15329  0053E0  6E11               	movwf	disk_write@buff,c
 15330  0053E2  0E00               	movlw	0
 15331  0053E4  201C               	addwfc	sync_window@fs+1,w,c
 15332  0053E6  6E12               	movwf	disk_write@buff+1,c
 15333  0053E8  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 15334  0053EC  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 15335  0053F0  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 15336  0053F4  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 15337  0053F8  0E00               	movlw	0
 15338  0053FA  6E18               	movwf	disk_write@count+1,c
 15339  0053FC  0E01               	movlw	1
 15340  0053FE  6E17               	movwf	disk_write@count,c
 15341  005400  EE20 F001          	lfsr	2,1
 15342  005404  501B               	movf	sync_window@fs,w,c
 15343  005406  26D9               	addwf	fsr2l,f,c
 15344  005408  501C               	movf	sync_window@fs+1,w,c
 15345  00540A  22DA               	addwfc	fsr2h,f,c
 15346  00540C  50DF               	movf	indf2,w,c
 15347  00540E  ECBD  F02A         	call	_disk_write
 15348  005412  062A               	decf	sync_window@nf,f,c
 15349  005414  A0D8               	btfss	status,0,c
 15350  005416  062B               	decf	sync_window@nf+1,f,c
 15351  005418  D7CB               	goto	l3979
 15352  00541A  D7D2               	goto	l3983
 15353  00541C  D000               	goto	l3991
 15354  00541E                     l3991:
 15355                           
 15356                           ;ff.c: 719: }
 15357                           ;ff.c: 720: }
 15358                           ;ff.c: 721: }
 15359                           ;ff.c: 722: }
 15360                           ;ff.c: 723: return res;
 15361  00541E  5029               	movf	sync_window@res,w,c
 15362  005420  0012               	return	
 15363  005422  0012               	return		;funcret
 15364  005424                     __end_of_sync_window:
 15365                           	opt stack 0
 15366                           tblptru	equ	0xFF8
 15367                           tblptrh	equ	0xFF7
 15368                           tblptrl	equ	0xFF6
 15369                           tablat	equ	0xFF5
 15370                           prodh	equ	0xFF4
 15371                           prodl	equ	0xFF3
 15372                           indf0	equ	0xFEF
 15373                           postinc0	equ	0xFEE
 15374                           fsr0h	equ	0xFEA
 15375                           fsr0l	equ	0xFE9
 15376                           wreg	equ	0xFE8
 15377                           indf1	equ	0xFE7
 15378                           postinc1	equ	0xFE6
 15379                           postdec1	equ	0xFE5
 15380                           fsr1h	equ	0xFE2
 15381                           fsr1l	equ	0xFE1
 15382                           indf2	equ	0xFDF
 15383                           postinc2	equ	0xFDE
 15384                           postdec2	equ	0xFDD
 15385                           plusw2	equ	0xFDB
 15386                           fsr2h	equ	0xFDA
 15387                           fsr2l	equ	0xFD9
 15388                           status	equ	0xFD8
 15389                           
 15390 ;; *************** function _disk_write *****************
 15391 ;; Defined at:
 15392 ;;		line 415 in file "diskio.c"
 15393 ;; Parameters:    Size  Location     Type
 15394 ;;  pdrv            1    wreg     unsigned char 
 15395 ;;  buff            2   16[COMRAM] PTR const unsigned char 
 15396 ;;		 -> FatFs.win(512), STR_4(15), FatFs(558), NULL(0), 
 15397 ;;  sector          4   18[COMRAM] unsigned long 
 15398 ;;  count           2   22[COMRAM] unsigned int 
 15399 ;; Auto vars:     Size  Location     Type
 15400 ;;  pdrv            1   25[COMRAM] unsigned char 
 15401 ;; Return value:  Size  Location     Type
 15402 ;;                  1    wreg      enum E38
 15403 ;; Registers used:
 15404 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15405 ;; Tracked objects:
 15406 ;;		On entry : 0/0
 15407 ;;		On exit  : 0/0
 15408 ;;		Unchanged: 0/0
 15409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15410 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15411 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15412 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15413 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15414 ;;Total ram usage:       10 bytes
 15415 ;; Hardware stack levels used:    1
 15416 ;; Hardware stack levels required when called:    5
 15417 ;; This function calls:
 15418 ;;		_deselect
 15419 ;;		_send_cmd
 15420 ;;		_xmit_datablock
 15421 ;; This function is called by:
 15422 ;;		_sync_window
 15423 ;;		_sync_fs
 15424 ;;		_f_write
 15425 ;; This function uses a non-reentrant model
 15426 ;;
 15427                           
 15428                           	psect	text39
 15429  00557A                     __ptext39:
 15430                           	opt stack 0
 15431  00557A                     _disk_write:
 15432                           	opt stack 23
 15433                           
 15434                           ;incstack = 0
 15435                           ;disk_write@pdrv stored from wreg
 15436  00557A  6E1A               	movwf	disk_write@pdrv,c
 15437                           
 15438                           ;diskio.c: 422: if (pdrv || !count) return RES_PARERR;
 15439  00557C  501A               	movf	disk_write@pdrv,w,c
 15440  00557E  A4D8               	btfss	status,2,c
 15441  005580  D004               	goto	l3885
 15442  005582  5017               	movf	disk_write@count,w,c
 15443  005584  1018               	iorwf	disk_write@count+1,w,c
 15444  005586  A4D8               	btfss	status,2,c
 15445  005588  D002               	goto	l229
 15446  00558A                     l3885:
 15447  00558A  0E04               	movlw	4
 15448  00558C  0012               	return	
 15449  00558E                     l229:
 15450                           
 15451                           ;diskio.c: 423: if (Stat & 0x01) return RES_NOTRDY;
 15452  00558E  0100               	movlb	0	; () banked
 15453  005590  A1F7               	btfss	_Stat& (0+255),0,b
 15454  005592  D002               	goto	l233
 15455                           
 15456                           ; BSR set to: 0
 15457  005594  0E03               	movlw	3
 15458                           
 15459                           ; BSR set to: 0
 15460  005596  0012               	return	
 15461  005598                     l233:
 15462                           
 15463                           ; BSR set to: 0
 15464                           ;diskio.c: 424: if (Stat & 0x04) return RES_WRPRT;
 15465  005598  0100               	movlb	0	; () banked
 15466  00559A  A5F7               	btfss	_Stat& (0+255),2,b
 15467  00559C  D002               	goto	l234
 15468                           
 15469                           ; BSR set to: 0
 15470  00559E  0E02               	movlw	2
 15471                           
 15472                           ; BSR set to: 0
 15473  0055A0  0012               	return	
 15474  0055A2                     l234:
 15475                           
 15476                           ; BSR set to: 0
 15477                           ;diskio.c: 426: if (!(CardType & 0x08)) sector *= 512;
 15478  0055A2  0100               	movlb	0	; () banked
 15479  0055A4  B7D6               	btfsc	_CardType& (0+255),3,b
 15480  0055A6  D008               	goto	l235
 15481                           
 15482                           ; BSR set to: 0
 15483  0055A8  0E09               	movlw	9
 15484  0055AA                     u4755:
 15485  0055AA  90D8               	bcf	status,0,c
 15486  0055AC  3613               	rlcf	disk_write@sector,f,c
 15487  0055AE  3614               	rlcf	disk_write@sector+1,f,c
 15488  0055B0  3615               	rlcf	disk_write@sector+2,f,c
 15489  0055B2  3616               	rlcf	disk_write@sector+3,f,c
 15490  0055B4  2EE8               	decfsz	wreg,f,c
 15491  0055B6  D7F9               	goto	u4755
 15492  0055B8                     l235:
 15493                           
 15494                           ; BSR set to: 0
 15495                           ;diskio.c: 428: if (count == 1) {
 15496  0055B8  0417               	decf	disk_write@count,w,c
 15497  0055BA  1018               	iorwf	disk_write@count+1,w,c
 15498  0055BC  A4D8               	btfss	status,2,c
 15499  0055BE  D026               	goto	l3905
 15500                           
 15501                           ; BSR set to: 0
 15502                           ;diskio.c: 429: if ((send_cmd((24), sector) == 0)
 15503                           ;diskio.c: 430: && xmit_datablock(buff, 0xFE))
 15504  0055C0  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 15505  0055C4  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 15506  0055C8  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 15507  0055CC  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 15508  0055D0  0E18               	movlw	24
 15509  0055D2  EC8F  F032         	call	_send_cmd
 15510  0055D6  0900               	iorlw	0
 15511  0055D8  A4D8               	btfss	status,2,c
 15512  0055DA  D065               	goto	l3919
 15513  0055DC  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 15514  0055E0  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 15515  0055E4  6A06               	clrf	xmit_datablock@buff+2,c
 15516  0055E6  5004               	movf	xmit_datablock@buff,w,c
 15517  0055E8  1005               	iorwf	xmit_datablock@buff+1,w,c
 15518  0055EA  B4D8               	btfsc	status,2,c
 15519  0055EC  D003               	goto	u4781
 15520  0055EE  0E0F               	movlw	(high __ramtop+-1)
 15521  0055F0  6412               	cpfsgt	disk_write@buff+1,c
 15522  0055F2  8A06               	bsf	xmit_datablock@buff+2,5,c
 15523  0055F4                     u4781:
 15524  0055F4  0EFE               	movlw	254
 15525  0055F6  6E07               	movwf	xmit_datablock@token,c
 15526  0055F8  ECD2  F030         	call	_xmit_datablock	;wreg free
 15527  0055FC  0900               	iorlw	0
 15528  0055FE  B4D8               	btfsc	status,2,c
 15529  005600  D052               	goto	l3919
 15530                           
 15531                           ;diskio.c: 431: count = 0;
 15532  005602  0E00               	movlw	0
 15533  005604  6E18               	movwf	disk_write@count+1,c
 15534  005606  0E00               	movlw	0
 15535  005608  D04C               	goto	L21
 15536                           
 15537                           ;diskio.c: 432: }
 15538  00560A  D04D               	goto	l3919
 15539  00560C                     l3905:
 15540                           
 15541                           ;diskio.c: 433: else {
 15542                           ;diskio.c: 434: if (CardType & (0x02|0x04)) send_cmd((0x80+23), count);
 15543  00560C  C0D6  F019         	movff	_CardType,??_disk_write
 15544  005610  0E06               	movlw	6
 15545  005612  1619               	andwf	??_disk_write,f,c
 15546  005614  B4D8               	btfsc	status,2,c
 15547  005616  D009               	goto	l239
 15548  005618  C017  F00B         	movff	disk_write@count,send_cmd@arg
 15549  00561C  C018  F00C         	movff	disk_write@count+1,send_cmd@arg+1
 15550  005620  6A0D               	clrf	send_cmd@arg+2,c
 15551  005622  6A0E               	clrf	send_cmd@arg+3,c
 15552  005624  0E97               	movlw	151
 15553  005626  EC8F  F032         	call	_send_cmd
 15554  00562A                     l239:
 15555                           
 15556                           ;diskio.c: 435: if (send_cmd((25), sector) == 0) {
 15557  00562A  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 15558  00562E  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 15559  005632  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 15560  005636  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 15561  00563A  0E19               	movlw	25
 15562  00563C  EC8F  F032         	call	_send_cmd
 15563  005640  0900               	iorlw	0
 15564  005642  A4D8               	btfss	status,2,c
 15565  005644  D030               	goto	l3919
 15566  005646                     l3909:
 15567                           
 15568                           ;diskio.c: 437: if (!xmit_datablock(buff, 0xFC)) break;
 15569  005646  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 15570  00564A  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 15571  00564E  6A06               	clrf	xmit_datablock@buff+2,c
 15572  005650  5004               	movf	xmit_datablock@buff,w,c
 15573  005652  1005               	iorwf	xmit_datablock@buff+1,w,c
 15574  005654  B4D8               	btfsc	status,2,c
 15575  005656  D003               	goto	u4821
 15576  005658  0E0F               	movlw	(high __ramtop+-1)
 15577  00565A  6412               	cpfsgt	disk_write@buff+1,c
 15578  00565C  8A06               	bsf	xmit_datablock@buff+2,5,c
 15579  00565E                     u4821:
 15580  00565E  0EFC               	movlw	252
 15581  005660  6E07               	movwf	xmit_datablock@token,c
 15582  005662  ECD2  F030         	call	_xmit_datablock	;wreg free
 15583  005666  0900               	iorlw	0
 15584  005668  B4D8               	btfsc	status,2,c
 15585  00566A  D00B               	goto	l3915
 15586  00566C  D001               	goto	l3913
 15587  00566E  D009               	goto	l3915
 15588  005670                     l3913:
 15589                           
 15590                           ;diskio.c: 438: buff += 512;
 15591  005670  0E02               	movlw	2
 15592  005672  2612               	addwf	disk_write@buff+1,f,c
 15593                           
 15594                           ;diskio.c: 439: } while (--count);
 15595  005674  0617               	decf	disk_write@count,f,c
 15596  005676  A0D8               	btfss	status,0,c
 15597  005678  0618               	decf	disk_write@count+1,f,c
 15598  00567A  5017               	movf	disk_write@count,w,c
 15599  00567C  1018               	iorwf	disk_write@count+1,w,c
 15600  00567E  A4D8               	btfss	status,2,c
 15601  005680  D7E2               	goto	l3909
 15602  005682                     l3915:
 15603                           
 15604                           ;diskio.c: 440: if (!xmit_datablock(0, 0xFD))
 15605  005682  0E00               	movlw	0
 15606  005684  6E04               	movwf	xmit_datablock@buff,c
 15607  005686  0E00               	movlw	0
 15608  005688  6E05               	movwf	xmit_datablock@buff+1,c
 15609  00568A  0E00               	movlw	0
 15610  00568C  6E06               	movwf	xmit_datablock@buff+2,c
 15611  00568E  0EFD               	movlw	253
 15612  005690  6E07               	movwf	xmit_datablock@token,c
 15613  005692  ECD2  F030         	call	_xmit_datablock	;wreg free
 15614  005696  0900               	iorlw	0
 15615  005698  A4D8               	btfss	status,2,c
 15616  00569A  D005               	goto	l3919
 15617                           
 15618                           ;diskio.c: 441: count = 1;
 15619  00569C  0E00               	movlw	0
 15620  00569E  6E18               	movwf	disk_write@count+1,c
 15621  0056A0  0E01               	movlw	1
 15622  0056A2                     L21:
 15623  0056A2  6E17               	movwf	disk_write@count,c
 15624  0056A4  D000               	goto	l3919
 15625  0056A6                     l3919:
 15626                           
 15627                           ;diskio.c: 442: }
 15628                           ;diskio.c: 443: }
 15629                           ;diskio.c: 444: deselect();
 15630  0056A6  EC8D  F033         	call	_deselect	;wreg free
 15631                           
 15632                           ;diskio.c: 446: return count ? RES_ERROR : RES_OK;
 15633  0056AA  5017               	movf	disk_write@count,w,c
 15634  0056AC  1018               	iorwf	disk_write@count+1,w,c
 15635  0056AE  B4D8               	btfsc	status,2,c
 15636  0056B0  D002               	goto	u4860
 15637  0056B2  0E01               	movlw	1
 15638  0056B4  0012               	return	
 15639  0056B6                     u4860:
 15640  0056B6  0E00               	movlw	0
 15641  0056B8  0012               	return	
 15642  0056BA  0012               	return		;funcret
 15643  0056BC                     __end_of_disk_write:
 15644                           	opt stack 0
 15645                           tblptru	equ	0xFF8
 15646                           tblptrh	equ	0xFF7
 15647                           tblptrl	equ	0xFF6
 15648                           tablat	equ	0xFF5
 15649                           prodh	equ	0xFF4
 15650                           prodl	equ	0xFF3
 15651                           indf0	equ	0xFEF
 15652                           postinc0	equ	0xFEE
 15653                           fsr0h	equ	0xFEA
 15654                           fsr0l	equ	0xFE9
 15655                           wreg	equ	0xFE8
 15656                           indf1	equ	0xFE7
 15657                           postinc1	equ	0xFE6
 15658                           postdec1	equ	0xFE5
 15659                           fsr1h	equ	0xFE2
 15660                           fsr1l	equ	0xFE1
 15661                           indf2	equ	0xFDF
 15662                           postinc2	equ	0xFDE
 15663                           postdec2	equ	0xFDD
 15664                           plusw2	equ	0xFDB
 15665                           fsr2h	equ	0xFDA
 15666                           fsr2l	equ	0xFD9
 15667                           status	equ	0xFD8
 15668                           
 15669 ;; *************** function _xmit_datablock *****************
 15670 ;; Defined at:
 15671 ;;		line 165 in file "diskio.c"
 15672 ;; Parameters:    Size  Location     Type
 15673 ;;  buff            3    3[COMRAM] PTR const unsigned char 
 15674 ;;		 -> FatFs.win(512), STR_4(15), FatFs(558), ROM(65535), 
 15675 ;;		 -> NULL(0), 
 15676 ;;  token           1    6[COMRAM] unsigned char 
 15677 ;; Auto vars:     Size  Location     Type
 15678 ;;  i               2    7[COMRAM] unsigned int 
 15679 ;;  resp            1    9[COMRAM] unsigned char 
 15680 ;; Return value:  Size  Location     Type
 15681 ;;                  1    wreg      unsigned char 
 15682 ;; Registers used:
 15683 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15684 ;; Tracked objects:
 15685 ;;		On entry : 0/0
 15686 ;;		On exit  : 0/0
 15687 ;;		Unchanged: 0/0
 15688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15689 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15690 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15692 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15693 ;;Total ram usage:        7 bytes
 15694 ;; Hardware stack levels used:    1
 15695 ;; Hardware stack levels required when called:    2
 15696 ;; This function calls:
 15697 ;;		_SPI1_Exchange8bit
 15698 ;;		_wait_ready
 15699 ;; This function is called by:
 15700 ;;		_disk_write
 15701 ;; This function uses a non-reentrant model
 15702 ;;
 15703                           
 15704                           	psect	text40
 15705  0061A4                     __ptext40:
 15706                           	opt stack 0
 15707  0061A4                     _xmit_datablock:
 15708                           	opt stack 25
 15709                           
 15710                           ;diskio.c: 170: BYTE resp;
 15711                           ;diskio.c: 171: WORD i;
 15712                           ;diskio.c: 174: if (!wait_ready()) return 0;
 15713                           
 15714                           ;incstack = 0
 15715  0061A4  ECB2  F032         	call	_wait_ready	;wreg free
 15716  0061A8  0900               	iorlw	0
 15717  0061AA  A4D8               	btfss	status,2,c
 15718  0061AC  D002               	goto	l3811
 15719  0061AE  0E00               	movlw	0
 15720  0061B0  0012               	return	
 15721  0061B2                     l3811:
 15722                           
 15723                           ;diskio.c: 176: SPI1_Exchange8bit(token);
 15724  0061B2  5007               	movf	xmit_datablock@token,w,c
 15725  0061B4  EC68  F033         	call	_SPI1_Exchange8bit
 15726                           
 15727                           ;diskio.c: 177: if (token != 0xFD) {
 15728  0061B8  0EFD               	movlw	253
 15729  0061BA  1807               	xorwf	xmit_datablock@token,w,c
 15730  0061BC  B4D8               	btfsc	status,2,c
 15731  0061BE  D036               	goto	l3831
 15732                           
 15733                           ;diskio.c: 178: i = 512;
 15734  0061C0  0E02               	movlw	2
 15735  0061C2  6E09               	movwf	xmit_datablock@i+1,c
 15736  0061C4  0E00               	movlw	0
 15737  0061C6  6E08               	movwf	xmit_datablock@i,c
 15738  0061C8  D000               	goto	l3817
 15739  0061CA                     l3817:
 15740                           
 15741                           ;diskio.c: 180: SPI1_Exchange8bit(*buff++);
 15742  0061CA  C004  FFF6         	movff	xmit_datablock@buff,tblptrl
 15743  0061CE  C005  FFF7         	movff	xmit_datablock@buff+1,tblptrh
 15744  0061D2  C006  FFF8         	movff	xmit_datablock@buff+2,tblptru
 15745  0061D6  BAF8               	btfsc	tblptru,5,c
 15746  0061D8  D003               	bra	u4617
 15747  0061DA  0008               	tblrd		*
 15748  0061DC  50F5               	movf	tablat,w,c
 15749  0061DE  D005               	bra	u4610
 15750  0061E0                     u4617:
 15751  0061E0  CFF6 FFE9          	movff	tblptrl,fsr0l
 15752  0061E4  CFF7 FFEA          	movff	tblptrh,fsr0h
 15753  0061E8  50EF               	movf	indf0,w,c
 15754  0061EA                     u4610:
 15755  0061EA  EC68  F033         	call	_SPI1_Exchange8bit
 15756  0061EE  0E01               	movlw	1
 15757  0061F0  2604               	addwf	xmit_datablock@buff,f,c
 15758  0061F2  0E00               	movlw	0
 15759  0061F4  2205               	addwfc	xmit_datablock@buff+1,f,c
 15760  0061F6  0E00               	movlw	0
 15761  0061F8  2206               	addwfc	xmit_datablock@buff+2,f,c
 15762                           
 15763                           ;diskio.c: 181: while (--i);
 15764  0061FA  0608               	decf	xmit_datablock@i,f,c
 15765  0061FC  A0D8               	btfss	status,0,c
 15766  0061FE  0609               	decf	xmit_datablock@i+1,f,c
 15767  006200  5008               	movf	xmit_datablock@i,w,c
 15768  006202  1009               	iorwf	xmit_datablock@i+1,w,c
 15769  006204  A4D8               	btfss	status,2,c
 15770  006206  D7E1               	goto	l3817
 15771                           
 15772                           ;diskio.c: 182: SPI1_Exchange8bit(0xFF);
 15773  006208  0EFF               	movlw	255
 15774  00620A  EC68  F033         	call	_SPI1_Exchange8bit
 15775                           
 15776                           ;diskio.c: 183: SPI1_Exchange8bit(0xFF);
 15777  00620E  0EFF               	movlw	255
 15778  006210  EC68  F033         	call	_SPI1_Exchange8bit
 15779                           
 15780                           ;diskio.c: 184: resp = SPI1_Exchange8bit(0xFF);
 15781  006214  0EFF               	movlw	255
 15782  006216  EC68  F033         	call	_SPI1_Exchange8bit
 15783  00621A  6E0A               	movwf	xmit_datablock@resp,c
 15784                           
 15785                           ;diskio.c: 185: if ((resp & 0x1F) != 0x05)
 15786  00621C  500A               	movf	xmit_datablock@resp,w,c
 15787  00621E  0B1F               	andlw	31
 15788  006220  0A05               	xorlw	5
 15789  006222  B4D8               	btfsc	status,2,c
 15790  006224  D003               	goto	l3831
 15791                           
 15792                           ;diskio.c: 186: return 0;
 15793  006226  0E00               	movlw	0
 15794  006228  0012               	return	
 15795  00622A  D000               	goto	l3831
 15796  00622C                     l3831:
 15797                           
 15798                           ;diskio.c: 187: }
 15799                           ;diskio.c: 189: return 1;
 15800  00622C  0E01               	movlw	1
 15801  00622E  0012               	return	
 15802  006230  0012               	return		;funcret
 15803  006232                     __end_of_xmit_datablock:
 15804                           	opt stack 0
 15805                           tblptru	equ	0xFF8
 15806                           tblptrh	equ	0xFF7
 15807                           tblptrl	equ	0xFF6
 15808                           tablat	equ	0xFF5
 15809                           prodh	equ	0xFF4
 15810                           prodl	equ	0xFF3
 15811                           indf0	equ	0xFEF
 15812                           postinc0	equ	0xFEE
 15813                           fsr0h	equ	0xFEA
 15814                           fsr0l	equ	0xFE9
 15815                           wreg	equ	0xFE8
 15816                           indf1	equ	0xFE7
 15817                           postinc1	equ	0xFE6
 15818                           postdec1	equ	0xFE5
 15819                           fsr1h	equ	0xFE2
 15820                           fsr1l	equ	0xFE1
 15821                           indf2	equ	0xFDF
 15822                           postinc2	equ	0xFDE
 15823                           postdec2	equ	0xFDD
 15824                           plusw2	equ	0xFDB
 15825                           fsr2h	equ	0xFDA
 15826                           fsr2l	equ	0xFD9
 15827                           status	equ	0xFD8
 15828                           
 15829 ;; *************** function _disk_read *****************
 15830 ;; Defined at:
 15831 ;;		line 380 in file "diskio.c"
 15832 ;; Parameters:    Size  Location     Type
 15833 ;;  pdrv            1    wreg     unsigned char 
 15834 ;;  buff            2   16[COMRAM] PTR unsigned char 
 15835 ;;		 -> FatFs(558), NULL(0), 
 15836 ;;  sector          4   18[COMRAM] unsigned long 
 15837 ;;  count           2   22[COMRAM] unsigned int 
 15838 ;; Auto vars:     Size  Location     Type
 15839 ;;  pdrv            1   24[COMRAM] unsigned char 
 15840 ;;  cmd             1   27[COMRAM] unsigned char 
 15841 ;; Return value:  Size  Location     Type
 15842 ;;                  1    wreg      enum E38
 15843 ;; Registers used:
 15844 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15845 ;; Tracked objects:
 15846 ;;		On entry : 0/0
 15847 ;;		On exit  : 0/0
 15848 ;;		Unchanged: 0/0
 15849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15850 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15851 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15853 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15854 ;;Total ram usage:       12 bytes
 15855 ;; Hardware stack levels used:    1
 15856 ;; Hardware stack levels required when called:    5
 15857 ;; This function calls:
 15858 ;;		_deselect
 15859 ;;		_rcvr_datablock
 15860 ;;		_send_cmd
 15861 ;; This function is called by:
 15862 ;;		_move_window
 15863 ;;		_f_read
 15864 ;; This function uses a non-reentrant model
 15865 ;;
 15866                           
 15867                           	psect	text41
 15868  005BF2                     __ptext41:
 15869                           	opt stack 0
 15870  005BF2                     _disk_read:
 15871                           	opt stack 23
 15872                           
 15873                           ;incstack = 0
 15874                           ;disk_read@pdrv stored from wreg
 15875  005BF2  6E19               	movwf	disk_read@pdrv,c
 15876                           
 15877                           ;diskio.c: 387: BYTE cmd;
 15878                           ;diskio.c: 390: if (pdrv || !count) return RES_PARERR;
 15879  005BF4  5019               	movf	disk_read@pdrv,w,c
 15880  005BF6  A4D8               	btfss	status,2,c
 15881  005BF8  D004               	goto	l3929
 15882  005BFA  5017               	movf	disk_read@count,w,c
 15883  005BFC  1018               	iorwf	disk_read@count+1,w,c
 15884  005BFE  A4D8               	btfss	status,2,c
 15885  005C00  D002               	goto	l212
 15886  005C02                     l3929:
 15887  005C02  0E04               	movlw	4
 15888  005C04  0012               	return	
 15889  005C06                     l212:
 15890                           
 15891                           ;diskio.c: 391: if (Stat & 0x01) return RES_NOTRDY;
 15892  005C06  0100               	movlb	0	; () banked
 15893  005C08  A1F7               	btfss	_Stat& (0+255),0,b
 15894  005C0A  D002               	goto	l216
 15895                           
 15896                           ; BSR set to: 0
 15897  005C0C  0E03               	movlw	3
 15898                           
 15899                           ; BSR set to: 0
 15900  005C0E  0012               	return	
 15901  005C10                     l216:
 15902                           
 15903                           ; BSR set to: 0
 15904                           ;diskio.c: 393: if (!(CardType & 0x08)) sector *= 512;
 15905  005C10  0100               	movlb	0	; () banked
 15906  005C12  B7D6               	btfsc	_CardType& (0+255),3,b
 15907  005C14  D008               	goto	l217
 15908                           
 15909                           ; BSR set to: 0
 15910  005C16  0E09               	movlw	9
 15911  005C18                     u4925:
 15912  005C18  90D8               	bcf	status,0,c
 15913  005C1A  3613               	rlcf	disk_read@sector,f,c
 15914  005C1C  3614               	rlcf	disk_read@sector+1,f,c
 15915  005C1E  3615               	rlcf	disk_read@sector+2,f,c
 15916  005C20  3616               	rlcf	disk_read@sector+3,f,c
 15917  005C22  2EE8               	decfsz	wreg,f,c
 15918  005C24  D7F9               	goto	u4925
 15919  005C26                     l217:
 15920                           
 15921                           ; BSR set to: 0
 15922                           ;diskio.c: 395: cmd = count > 1 ? (18) : (17);
 15923  005C26  5018               	movf	disk_read@count+1,w,c
 15924  005C28  E108               	bnz	l3941
 15925  005C2A  0E02               	movlw	2
 15926  005C2C  5C17               	subwf	disk_read@count,w,c
 15927  005C2E  B0D8               	btfsc	status,0,c
 15928  005C30  D004               	goto	l3941
 15929                           
 15930                           ; BSR set to: 0
 15931  005C32  0E00               	movlw	0
 15932  005C34  6E1B               	movwf	_disk_read$510+1,c
 15933  005C36  0E11               	movlw	17
 15934  005C38  D003               	goto	L22
 15935  005C3A                     l3941:
 15936                           
 15937                           ; BSR set to: 0
 15938  005C3A  0E00               	movlw	0
 15939  005C3C  6E1B               	movwf	_disk_read$510+1,c
 15940  005C3E  0E12               	movlw	18
 15941  005C40                     L22:
 15942  005C40  6E1A               	movwf	_disk_read$510,c
 15943  005C42  D000               	goto	l3943
 15944  005C44                     l3943:
 15945                           
 15946                           ; BSR set to: 0
 15947  005C44  C01A  F01C         	movff	_disk_read$510,disk_read@cmd
 15948                           
 15949                           ; BSR set to: 0
 15950                           ;diskio.c: 396: if (send_cmd(cmd, sector) == 0) {
 15951  005C48  C013  F00B         	movff	disk_read@sector,send_cmd@arg
 15952  005C4C  C014  F00C         	movff	disk_read@sector+1,send_cmd@arg+1
 15953  005C50  C015  F00D         	movff	disk_read@sector+2,send_cmd@arg+2
 15954  005C54  C016  F00E         	movff	disk_read@sector+3,send_cmd@arg+3
 15955  005C58  501C               	movf	disk_read@cmd,w,c
 15956  005C5A  EC8F  F032         	call	_send_cmd
 15957  005C5E  0900               	iorlw	0
 15958  005C60  A4D8               	btfss	status,2,c
 15959  005C62  D028               	goto	l3957
 15960  005C64                     l3947:
 15961                           
 15962                           ;diskio.c: 398: if (!rcvr_datablock(buff, 512)) break;
 15963  005C64  C011  F002         	movff	disk_read@buff,rcvr_datablock@buff
 15964  005C68  C012  F003         	movff	disk_read@buff+1,rcvr_datablock@buff+1
 15965  005C6C  0E02               	movlw	2
 15966  005C6E  6E05               	movwf	rcvr_datablock@btr+1,c
 15967  005C70  0E00               	movlw	0
 15968  005C72  6E04               	movwf	rcvr_datablock@btr,c
 15969  005C74  ECA0  F031         	call	_rcvr_datablock	;wreg free
 15970  005C78  0900               	iorlw	0
 15971  005C7A  B4D8               	btfsc	status,2,c
 15972  005C7C  D00B               	goto	l3953
 15973  005C7E  D001               	goto	l3951
 15974  005C80  D009               	goto	l3953
 15975  005C82                     l3951:
 15976                           
 15977                           ;diskio.c: 399: buff += 512;
 15978  005C82  0E02               	movlw	2
 15979  005C84  2612               	addwf	disk_read@buff+1,f,c
 15980                           
 15981                           ;diskio.c: 400: } while (--count);
 15982  005C86  0617               	decf	disk_read@count,f,c
 15983  005C88  A0D8               	btfss	status,0,c
 15984  005C8A  0618               	decf	disk_read@count+1,f,c
 15985  005C8C  5017               	movf	disk_read@count,w,c
 15986  005C8E  1018               	iorwf	disk_read@count+1,w,c
 15987  005C90  A4D8               	btfss	status,2,c
 15988  005C92  D7E8               	goto	l3947
 15989  005C94                     l3953:
 15990                           
 15991                           ;diskio.c: 401: if (cmd == (18)) send_cmd((12), 0);
 15992  005C94  0E12               	movlw	18
 15993  005C96  181C               	xorwf	disk_read@cmd,w,c
 15994  005C98  A4D8               	btfss	status,2,c
 15995  005C9A  D00C               	goto	l3957
 15996  005C9C  0E00               	movlw	0
 15997  005C9E  6E0B               	movwf	send_cmd@arg,c
 15998  005CA0  0E00               	movlw	0
 15999  005CA2  6E0C               	movwf	send_cmd@arg+1,c
 16000  005CA4  0E00               	movlw	0
 16001  005CA6  6E0D               	movwf	send_cmd@arg+2,c
 16002  005CA8  0E00               	movlw	0
 16003  005CAA  6E0E               	movwf	send_cmd@arg+3,c
 16004  005CAC  0E0C               	movlw	12
 16005  005CAE  EC8F  F032         	call	_send_cmd
 16006  005CB2  D000               	goto	l3957
 16007  005CB4                     l3957:
 16008                           
 16009                           ;diskio.c: 402: }
 16010                           ;diskio.c: 403: deselect();
 16011  005CB4  EC8D  F033         	call	_deselect	;wreg free
 16012                           
 16013                           ;diskio.c: 405: return count ? RES_ERROR : RES_OK;
 16014  005CB8  5017               	movf	disk_read@count,w,c
 16015  005CBA  1018               	iorwf	disk_read@count+1,w,c
 16016  005CBC  B4D8               	btfsc	status,2,c
 16017  005CBE  D002               	goto	u4980
 16018  005CC0  0E01               	movlw	1
 16019  005CC2  0012               	return	
 16020  005CC4                     u4980:
 16021  005CC4  0E00               	movlw	0
 16022  005CC6  0012               	return	
 16023  005CC8  0012               	return		;funcret
 16024  005CCA                     __end_of_disk_read:
 16025                           	opt stack 0
 16026                           tblptru	equ	0xFF8
 16027                           tblptrh	equ	0xFF7
 16028                           tblptrl	equ	0xFF6
 16029                           tablat	equ	0xFF5
 16030                           prodh	equ	0xFF4
 16031                           prodl	equ	0xFF3
 16032                           indf0	equ	0xFEF
 16033                           postinc0	equ	0xFEE
 16034                           fsr0h	equ	0xFEA
 16035                           fsr0l	equ	0xFE9
 16036                           wreg	equ	0xFE8
 16037                           indf1	equ	0xFE7
 16038                           postinc1	equ	0xFE6
 16039                           postdec1	equ	0xFE5
 16040                           fsr1h	equ	0xFE2
 16041                           fsr1l	equ	0xFE1
 16042                           indf2	equ	0xFDF
 16043                           postinc2	equ	0xFDE
 16044                           postdec2	equ	0xFDD
 16045                           plusw2	equ	0xFDB
 16046                           fsr2h	equ	0xFDA
 16047                           fsr2l	equ	0xFD9
 16048                           status	equ	0xFD8
 16049                           
 16050 ;; *************** function _send_cmd *****************
 16051 ;; Defined at:
 16052 ;;		line 241 in file "diskio.c"
 16053 ;; Parameters:    Size  Location     Type
 16054 ;;  cmd             1    wreg     unsigned char 
 16055 ;;  arg             4   10[COMRAM] unsigned long 
 16056 ;; Auto vars:     Size  Location     Type
 16057 ;;  cmd             1   14[COMRAM] unsigned char 
 16058 ;;  res             1   15[COMRAM] unsigned char 
 16059 ;; Return value:  Size  Location     Type
 16060 ;;                  1    wreg      unsigned char 
 16061 ;; Registers used:
 16062 ;;		wreg, status,2, status,0, cstack
 16063 ;; Tracked objects:
 16064 ;;		On entry : 0/0
 16065 ;;		On exit  : 0/0
 16066 ;;		Unchanged: 0/0
 16067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16068 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16069 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16071 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16072 ;;Total ram usage:        6 bytes
 16073 ;; Hardware stack levels used:    1
 16074 ;; Hardware stack levels required when called:    4
 16075 ;; This function calls:
 16076 ;;		___send_cmd
 16077 ;; This function is called by:
 16078 ;;		_disk_initialize
 16079 ;;		_disk_read
 16080 ;;		_disk_write
 16081 ;;		_disk_ioctl
 16082 ;; This function uses a non-reentrant model
 16083 ;;
 16084                           
 16085                           	psect	text42
 16086  00651E                     __ptext42:
 16087                           	opt stack 0
 16088  00651E                     _send_cmd:
 16089                           	opt stack 23
 16090                           
 16091                           ;incstack = 0
 16092                           ;send_cmd@cmd stored from wreg
 16093  00651E  6E0F               	movwf	send_cmd@cmd,c
 16094                           
 16095                           ;diskio.c: 249: BYTE res;
 16096                           ;diskio.c: 252: if (cmd & 0x80) {
 16097  006520  AE0F               	btfss	send_cmd@cmd,7,c
 16098  006522  D013               	goto	l3847
 16099                           
 16100                           ;diskio.c: 253: cmd &= 0x7F;
 16101  006524  9E0F               	bcf	send_cmd@cmd,7,c
 16102                           
 16103                           ;diskio.c: 255: res = __send_cmd((55), 0);
 16104  006526  0E00               	movlw	0
 16105  006528  6E04               	movwf	___send_cmd@arg,c
 16106  00652A  0E00               	movlw	0
 16107  00652C  6E05               	movwf	___send_cmd@arg+1,c
 16108  00652E  0E00               	movlw	0
 16109  006530  6E06               	movwf	___send_cmd@arg+2,c
 16110  006532  0E00               	movlw	0
 16111  006534  6E07               	movwf	___send_cmd@arg+3,c
 16112  006536  0E37               	movlw	55
 16113  006538  EC8A  F030         	call	___send_cmd
 16114  00653C  6E10               	movwf	send_cmd@res,c
 16115                           
 16116                           ;diskio.c: 259: if (res > 1) return res;
 16117  00653E  0E01               	movlw	1
 16118  006540  6410               	cpfsgt	send_cmd@res,c
 16119  006542  D003               	goto	l3847
 16120  006544  5010               	movf	send_cmd@res,w,c
 16121  006546  0012               	return	
 16122  006548  D000               	goto	l3847
 16123  00654A                     l3847:
 16124                           
 16125                           ;diskio.c: 260: }
 16126                           ;diskio.c: 263: return __send_cmd(cmd, arg);
 16127  00654A  C00B  F004         	movff	send_cmd@arg,___send_cmd@arg
 16128  00654E  C00C  F005         	movff	send_cmd@arg+1,___send_cmd@arg+1
 16129  006552  C00D  F006         	movff	send_cmd@arg+2,___send_cmd@arg+2
 16130  006556  C00E  F007         	movff	send_cmd@arg+3,___send_cmd@arg+3
 16131  00655A  500F               	movf	send_cmd@cmd,w,c
 16132  00655C  EC8A  F030         	call	___send_cmd
 16133  006560  0012               	return	
 16134  006562  0012               	return		;funcret
 16135  006564                     __end_of_send_cmd:
 16136                           	opt stack 0
 16137                           tblptru	equ	0xFF8
 16138                           tblptrh	equ	0xFF7
 16139                           tblptrl	equ	0xFF6
 16140                           tablat	equ	0xFF5
 16141                           prodh	equ	0xFF4
 16142                           prodl	equ	0xFF3
 16143                           indf0	equ	0xFEF
 16144                           postinc0	equ	0xFEE
 16145                           fsr0h	equ	0xFEA
 16146                           fsr0l	equ	0xFE9
 16147                           wreg	equ	0xFE8
 16148                           indf1	equ	0xFE7
 16149                           postinc1	equ	0xFE6
 16150                           postdec1	equ	0xFE5
 16151                           fsr1h	equ	0xFE2
 16152                           fsr1l	equ	0xFE1
 16153                           indf2	equ	0xFDF
 16154                           postinc2	equ	0xFDE
 16155                           postdec2	equ	0xFDD
 16156                           plusw2	equ	0xFDB
 16157                           fsr2h	equ	0xFDA
 16158                           fsr2l	equ	0xFD9
 16159                           status	equ	0xFD8
 16160                           
 16161 ;; *************** function ___send_cmd *****************
 16162 ;; Defined at:
 16163 ;;		line 204 in file "diskio.c"
 16164 ;; Parameters:    Size  Location     Type
 16165 ;;  cmd             1    wreg     unsigned char 
 16166 ;;  arg             4    3[COMRAM] unsigned long 
 16167 ;; Auto vars:     Size  Location     Type
 16168 ;;  cmd             1    9[COMRAM] unsigned char 
 16169 ;;  n               1    8[COMRAM] unsigned char 
 16170 ;;  res             1    7[COMRAM] unsigned char 
 16171 ;; Return value:  Size  Location     Type
 16172 ;;                  1    wreg      unsigned char 
 16173 ;; Registers used:
 16174 ;;		wreg, status,2, status,0, cstack
 16175 ;; Tracked objects:
 16176 ;;		On entry : 0/0
 16177 ;;		On exit  : 0/0
 16178 ;;		Unchanged: 0/0
 16179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16180 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16181 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16183 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16184 ;;Total ram usage:        7 bytes
 16185 ;; Hardware stack levels used:    1
 16186 ;; Hardware stack levels required when called:    3
 16187 ;; This function calls:
 16188 ;;		_SPI1_Exchange8bit
 16189 ;;		_deselect
 16190 ;;		_select
 16191 ;; This function is called by:
 16192 ;;		_send_cmd
 16193 ;; This function uses a non-reentrant model
 16194 ;;
 16195                           
 16196                           	psect	text43
 16197  006114                     __ptext43:
 16198                           	opt stack 0
 16199  006114                     ___send_cmd:
 16200                           	opt stack 23
 16201                           
 16202                           ;incstack = 0
 16203                           ;___send_cmd@cmd stored from wreg
 16204  006114  6E0A               	movwf	___send_cmd@cmd,c
 16205                           
 16206                           ;diskio.c: 209: BYTE n, res;
 16207                           ;diskio.c: 213: if (cmd != (12)) {
 16208  006116  0E0C               	movlw	12
 16209  006118  180A               	xorwf	___send_cmd@cmd,w,c
 16210  00611A  B4D8               	btfsc	status,2,c
 16211  00611C  D00A               	goto	l3767
 16212                           
 16213                           ;diskio.c: 214: deselect();
 16214  00611E  EC8D  F033         	call	_deselect	;wreg free
 16215                           
 16216                           ;diskio.c: 215: if (!select()) return 0xFF;
 16217  006122  EC4D  F033         	call	_select	;wreg free
 16218  006126  0900               	iorlw	0
 16219  006128  A4D8               	btfss	status,2,c
 16220  00612A  D003               	goto	l3767
 16221  00612C  0EFF               	movlw	255
 16222  00612E  0012               	return	
 16223  006130  D000               	goto	l3767
 16224  006132                     l3767:
 16225                           
 16226                           ;diskio.c: 216: }
 16227                           ;diskio.c: 219: SPI1_Exchange8bit(0x40 | cmd);
 16228  006132  500A               	movf	___send_cmd@cmd,w,c
 16229  006134  0940               	iorlw	64
 16230  006136  EC68  F033         	call	_SPI1_Exchange8bit
 16231                           
 16232                           ;diskio.c: 220: SPI1_Exchange8bit((BYTE)(arg >> 24));
 16233  00613A  5007               	movf	___send_cmd@arg+3,w,c
 16234  00613C  EC68  F033         	call	_SPI1_Exchange8bit
 16235                           
 16236                           ;diskio.c: 221: SPI1_Exchange8bit((BYTE)(arg >> 16));
 16237  006140  5006               	movf	___send_cmd@arg+2,w,c
 16238  006142  EC68  F033         	call	_SPI1_Exchange8bit
 16239                           
 16240                           ;diskio.c: 222: SPI1_Exchange8bit((BYTE)(arg >> 8));
 16241  006146  5005               	movf	___send_cmd@arg+1,w,c
 16242  006148  EC68  F033         	call	_SPI1_Exchange8bit
 16243                           
 16244                           ;diskio.c: 223: SPI1_Exchange8bit((BYTE)arg);
 16245  00614C  5004               	movf	___send_cmd@arg,w,c
 16246  00614E  EC68  F033         	call	_SPI1_Exchange8bit
 16247                           
 16248                           ;diskio.c: 224: n = 0x01;
 16249  006152  0E01               	movlw	1
 16250  006154  6E09               	movwf	___send_cmd@n,c
 16251                           
 16252                           ;diskio.c: 225: if (cmd == (0)) n = 0x95;
 16253  006156  500A               	movf	___send_cmd@cmd,w,c
 16254  006158  A4D8               	btfss	status,2,c
 16255  00615A  D003               	goto	l3783
 16256  00615C  0E95               	movlw	149
 16257  00615E  6E09               	movwf	___send_cmd@n,c
 16258  006160  D000               	goto	l3783
 16259  006162                     l3783:
 16260                           
 16261                           ;diskio.c: 226: if (cmd == (8)) n = 0x87;
 16262  006162  0E08               	movlw	8
 16263  006164  180A               	xorwf	___send_cmd@cmd,w,c
 16264  006166  A4D8               	btfss	status,2,c
 16265  006168  D003               	goto	l3787
 16266  00616A  0E87               	movlw	135
 16267  00616C  6E09               	movwf	___send_cmd@n,c
 16268  00616E  D000               	goto	l3787
 16269  006170                     l3787:
 16270                           
 16271                           ;diskio.c: 227: SPI1_Exchange8bit(n);
 16272  006170  5009               	movf	___send_cmd@n,w,c
 16273  006172  EC68  F033         	call	_SPI1_Exchange8bit
 16274                           
 16275                           ;diskio.c: 230: if (cmd == (12)) SPI1_Exchange8bit(0xFF);
 16276  006176  0E0C               	movlw	12
 16277  006178  180A               	xorwf	___send_cmd@cmd,w,c
 16278  00617A  A4D8               	btfss	status,2,c
 16279  00617C  D004               	goto	l3793
 16280  00617E  0EFF               	movlw	255
 16281  006180  EC68  F033         	call	_SPI1_Exchange8bit
 16282  006184  D000               	goto	l3793
 16283  006186                     l3793:
 16284                           
 16285                           ;diskio.c: 231: n = 10;
 16286  006186  0E0A               	movlw	10
 16287  006188  6E09               	movwf	___send_cmd@n,c
 16288  00618A  D000               	goto	l3795
 16289  00618C                     l3795:
 16290                           
 16291                           ;diskio.c: 233: res = SPI1_Exchange8bit(0xFF);
 16292  00618C  0EFF               	movlw	255
 16293  00618E  EC68  F033         	call	_SPI1_Exchange8bit
 16294  006192  6E08               	movwf	___send_cmd@res,c
 16295                           
 16296                           ;diskio.c: 234: while ((res & 0x80) && --n);
 16297  006194  AE08               	btfss	___send_cmd@res,7,c
 16298  006196  D003               	goto	l3801
 16299  006198  2E09               	decfsz	___send_cmd@n,f,c
 16300  00619A  D7F8               	goto	l3795
 16301  00619C  D000               	goto	l3801
 16302  00619E                     l3801:
 16303                           
 16304                           ;diskio.c: 236: return res;
 16305  00619E  5008               	movf	___send_cmd@res,w,c
 16306  0061A0  0012               	return	
 16307  0061A2  0012               	return		;funcret
 16308  0061A4                     __end_of___send_cmd:
 16309                           	opt stack 0
 16310                           tblptru	equ	0xFF8
 16311                           tblptrh	equ	0xFF7
 16312                           tblptrl	equ	0xFF6
 16313                           tablat	equ	0xFF5
 16314                           prodh	equ	0xFF4
 16315                           prodl	equ	0xFF3
 16316                           indf0	equ	0xFEF
 16317                           postinc0	equ	0xFEE
 16318                           fsr0h	equ	0xFEA
 16319                           fsr0l	equ	0xFE9
 16320                           wreg	equ	0xFE8
 16321                           indf1	equ	0xFE7
 16322                           postinc1	equ	0xFE6
 16323                           postdec1	equ	0xFE5
 16324                           fsr1h	equ	0xFE2
 16325                           fsr1l	equ	0xFE1
 16326                           indf2	equ	0xFDF
 16327                           postinc2	equ	0xFDE
 16328                           postdec2	equ	0xFDD
 16329                           plusw2	equ	0xFDB
 16330                           fsr2h	equ	0xFDA
 16331                           fsr2l	equ	0xFD9
 16332                           status	equ	0xFD8
 16333                           
 16334 ;; *************** function _select *****************
 16335 ;; Defined at:
 16336 ;;		line 115 in file "diskio.c"
 16337 ;; Parameters:    Size  Location     Type
 16338 ;;		None
 16339 ;; Auto vars:     Size  Location     Type
 16340 ;;		None
 16341 ;; Return value:  Size  Location     Type
 16342 ;;                  1    wreg      unsigned char 
 16343 ;; Registers used:
 16344 ;;		wreg, status,2, status,0, cstack
 16345 ;; Tracked objects:
 16346 ;;		On entry : 0/0
 16347 ;;		On exit  : 0/0
 16348 ;;		Unchanged: 0/0
 16349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16353 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16354 ;;Total ram usage:        0 bytes
 16355 ;; Hardware stack levels used:    1
 16356 ;; Hardware stack levels required when called:    2
 16357 ;; This function calls:
 16358 ;;		_SPI1_Exchange8bit
 16359 ;;		_deselect
 16360 ;;		_wait_ready
 16361 ;; This function is called by:
 16362 ;;		___send_cmd
 16363 ;;		_disk_ioctl
 16364 ;; This function uses a non-reentrant model
 16365 ;;
 16366                           
 16367                           	psect	text44
 16368  00669A                     __ptext44:
 16369                           	opt stack 0
 16370  00669A                     _select:
 16371                           	opt stack 23
 16372                           
 16373                           ;incstack = 0
 16374                           ;diskio.c: 117: do { LATC0 = 0; } while(0);
 16375  00669A  908B               	bcf	3979,0,c	;volatile
 16376  00669C  D000               	goto	l3743
 16377  00669E                     l3743:
 16378                           
 16379                           ;diskio.c: 118: SPI1_Exchange8bit(0xFF);
 16380  00669E  0EFF               	movlw	255
 16381  0066A0  EC68  F033         	call	_SPI1_Exchange8bit
 16382                           
 16383                           ;diskio.c: 119: if (wait_ready()) return 1;
 16384  0066A4  ECB2  F032         	call	_wait_ready	;wreg free
 16385  0066A8  0900               	iorlw	0
 16386  0066AA  B4D8               	btfsc	status,2,c
 16387  0066AC  D002               	goto	l3751
 16388  0066AE  0E01               	movlw	1
 16389  0066B0  0012               	return	
 16390  0066B2                     l3751:
 16391                           
 16392                           ;diskio.c: 121: deselect();
 16393  0066B2  EC8D  F033         	call	_deselect	;wreg free
 16394                           
 16395                           ;diskio.c: 122: return 0;
 16396  0066B6  0E00               	movlw	0
 16397  0066B8  0012               	return	
 16398  0066BA  0012               	return		;funcret
 16399  0066BC                     __end_of_select:
 16400                           	opt stack 0
 16401                           tblptru	equ	0xFF8
 16402                           tblptrh	equ	0xFF7
 16403                           tblptrl	equ	0xFF6
 16404                           tablat	equ	0xFF5
 16405                           prodh	equ	0xFF4
 16406                           prodl	equ	0xFF3
 16407                           indf0	equ	0xFEF
 16408                           postinc0	equ	0xFEE
 16409                           fsr0h	equ	0xFEA
 16410                           fsr0l	equ	0xFE9
 16411                           wreg	equ	0xFE8
 16412                           indf1	equ	0xFE7
 16413                           postinc1	equ	0xFE6
 16414                           postdec1	equ	0xFE5
 16415                           fsr1h	equ	0xFE2
 16416                           fsr1l	equ	0xFE1
 16417                           indf2	equ	0xFDF
 16418                           postinc2	equ	0xFDE
 16419                           postdec2	equ	0xFDD
 16420                           plusw2	equ	0xFDB
 16421                           fsr2h	equ	0xFDA
 16422                           fsr2l	equ	0xFD9
 16423                           status	equ	0xFD8
 16424                           
 16425 ;; *************** function _wait_ready *****************
 16426 ;; Defined at:
 16427 ;;		line 82 in file "diskio.c"
 16428 ;; Parameters:    Size  Location     Type
 16429 ;;		None
 16430 ;; Auto vars:     Size  Location     Type
 16431 ;;  tmr             2    1[COMRAM] unsigned int 
 16432 ;; Return value:  Size  Location     Type
 16433 ;;                  1    wreg      unsigned char 
 16434 ;; Registers used:
 16435 ;;		wreg, status,2, status,0, cstack
 16436 ;; Tracked objects:
 16437 ;;		On entry : 0/0
 16438 ;;		On exit  : 0/0
 16439 ;;		Unchanged: 0/0
 16440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16442 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16444 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16445 ;;Total ram usage:        2 bytes
 16446 ;; Hardware stack levels used:    1
 16447 ;; Hardware stack levels required when called:    1
 16448 ;; This function calls:
 16449 ;;		_SPI1_Exchange8bit
 16450 ;; This function is called by:
 16451 ;;		_select
 16452 ;;		_xmit_datablock
 16453 ;; This function uses a non-reentrant model
 16454 ;;
 16455                           
 16456                           	psect	text45
 16457  006564                     __ptext45:
 16458                           	opt stack 0
 16459  006564                     _wait_ready:
 16460                           	opt stack 25
 16461                           
 16462                           ;diskio.c: 84: UINT tmr;
 16463                           ;diskio.c: 87: for (tmr = 5000; tmr; tmr--) {
 16464                           
 16465                           ;incstack = 0
 16466  006564  0E13               	movlw	19
 16467  006566  6E03               	movwf	wait_ready@tmr+1,c
 16468  006568  0E88               	movlw	136
 16469  00656A  6E02               	movwf	wait_ready@tmr,c
 16470  00656C  D00F               	goto	l120
 16471  00656E                     l3729:
 16472                           
 16473                           ;diskio.c: 88: if (SPI1_Exchange8bit(0xFF) == 0xFF) break;
 16474  00656E  0EFF               	movlw	255
 16475  006570  EC68  F033         	call	_SPI1_Exchange8bit
 16476  006574  0AFF               	xorlw	255
 16477  006576  B4D8               	btfsc	status,2,c
 16478  006578  D00D               	goto	l3737
 16479  00657A  D001               	goto	l3733
 16480  00657C  D00B               	goto	l3737
 16481  00657E                     l3733:
 16482                           
 16483                           ;diskio.c: 89: _delay((unsigned long)((100)*(16000000/4000000.0)));
 16484  00657E  0E85               	movlw	133
 16485  006580                     u8957:
 16486  006580  2EE8               	decfsz	wreg,f,c
 16487  006582  D7FE               	goto	u8957
 16488  006584  F000               	nop	
 16489  006586  0602               	decf	wait_ready@tmr,f,c
 16490  006588  A0D8               	btfss	status,0,c
 16491  00658A  0603               	decf	wait_ready@tmr+1,f,c
 16492  00658C                     l120:
 16493  00658C  5002               	movf	wait_ready@tmr,w,c
 16494  00658E  1003               	iorwf	wait_ready@tmr+1,w,c
 16495  006590  A4D8               	btfss	status,2,c
 16496  006592  D7ED               	goto	l3729
 16497  006594                     l3737:
 16498                           
 16499                           ;diskio.c: 90: }
 16500                           ;diskio.c: 92: return tmr ? 1 : 0;
 16501  006594  5002               	movf	wait_ready@tmr,w,c
 16502  006596  1003               	iorwf	wait_ready@tmr+1,w,c
 16503  006598  B4D8               	btfsc	status,2,c
 16504  00659A  D002               	goto	u4500
 16505  00659C  0E01               	movlw	1
 16506  00659E  0012               	return	
 16507  0065A0                     u4500:
 16508  0065A0  0E00               	movlw	0
 16509  0065A2  0012               	return	
 16510  0065A4  0012               	return		;funcret
 16511  0065A6                     __end_of_wait_ready:
 16512                           	opt stack 0
 16513                           tblptru	equ	0xFF8
 16514                           tblptrh	equ	0xFF7
 16515                           tblptrl	equ	0xFF6
 16516                           tablat	equ	0xFF5
 16517                           prodh	equ	0xFF4
 16518                           prodl	equ	0xFF3
 16519                           indf0	equ	0xFEF
 16520                           postinc0	equ	0xFEE
 16521                           fsr0h	equ	0xFEA
 16522                           fsr0l	equ	0xFE9
 16523                           wreg	equ	0xFE8
 16524                           indf1	equ	0xFE7
 16525                           postinc1	equ	0xFE6
 16526                           postdec1	equ	0xFE5
 16527                           fsr1h	equ	0xFE2
 16528                           fsr1l	equ	0xFE1
 16529                           indf2	equ	0xFDF
 16530                           postinc2	equ	0xFDE
 16531                           postdec2	equ	0xFDD
 16532                           plusw2	equ	0xFDB
 16533                           fsr2h	equ	0xFDA
 16534                           fsr2l	equ	0xFD9
 16535                           status	equ	0xFD8
 16536                           
 16537 ;; *************** function _deselect *****************
 16538 ;; Defined at:
 16539 ;;		line 102 in file "diskio.c"
 16540 ;; Parameters:    Size  Location     Type
 16541 ;;		None
 16542 ;; Auto vars:     Size  Location     Type
 16543 ;;		None
 16544 ;; Return value:  Size  Location     Type
 16545 ;;		None               void
 16546 ;; Registers used:
 16547 ;;		wreg, status,2, cstack
 16548 ;; Tracked objects:
 16549 ;;		On entry : 0/0
 16550 ;;		On exit  : 0/0
 16551 ;;		Unchanged: 0/0
 16552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16556 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16557 ;;Total ram usage:        0 bytes
 16558 ;; Hardware stack levels used:    1
 16559 ;; Hardware stack levels required when called:    1
 16560 ;; This function calls:
 16561 ;;		_SPI1_Exchange8bit
 16562 ;; This function is called by:
 16563 ;;		_select
 16564 ;;		___send_cmd
 16565 ;;		_disk_initialize
 16566 ;;		_disk_read
 16567 ;;		_disk_write
 16568 ;;		_disk_ioctl
 16569 ;; This function uses a non-reentrant model
 16570 ;;
 16571                           
 16572                           	psect	text46
 16573  00671A                     __ptext46:
 16574                           	opt stack 0
 16575  00671A                     _deselect:
 16576                           	opt stack 23
 16577                           
 16578                           ;incstack = 0
 16579                           ;diskio.c: 104: do { LATC0 = 1; } while(0);
 16580  00671A  808B               	bsf	3979,0,c	;volatile
 16581  00671C  D000               	goto	l3741
 16582  00671E                     l3741:
 16583                           
 16584                           ;diskio.c: 105: SPI1_Exchange8bit(0xFF);
 16585  00671E  0EFF               	movlw	255
 16586  006720  EC68  F033         	call	_SPI1_Exchange8bit
 16587  006724  0012               	return		;funcret
 16588  006726                     __end_of_deselect:
 16589                           	opt stack 0
 16590                           tblptru	equ	0xFF8
 16591                           tblptrh	equ	0xFF7
 16592                           tblptrl	equ	0xFF6
 16593                           tablat	equ	0xFF5
 16594                           prodh	equ	0xFF4
 16595                           prodl	equ	0xFF3
 16596                           indf0	equ	0xFEF
 16597                           postinc0	equ	0xFEE
 16598                           fsr0h	equ	0xFEA
 16599                           fsr0l	equ	0xFE9
 16600                           wreg	equ	0xFE8
 16601                           indf1	equ	0xFE7
 16602                           postinc1	equ	0xFE6
 16603                           postdec1	equ	0xFE5
 16604                           fsr1h	equ	0xFE2
 16605                           fsr1l	equ	0xFE1
 16606                           indf2	equ	0xFDF
 16607                           postinc2	equ	0xFDE
 16608                           postdec2	equ	0xFDD
 16609                           plusw2	equ	0xFDB
 16610                           fsr2h	equ	0xFDA
 16611                           fsr2l	equ	0xFD9
 16612                           status	equ	0xFD8
 16613                           
 16614 ;; *************** function _rcvr_datablock *****************
 16615 ;; Defined at:
 16616 ;;		line 132 in file "diskio.c"
 16617 ;; Parameters:    Size  Location     Type
 16618 ;;  buff            2    1[COMRAM] PTR unsigned char 
 16619 ;;		 -> FatFs(558), disk_ioctl@csd(16), NULL(0), 
 16620 ;;  btr             2    3[COMRAM] unsigned int 
 16621 ;; Auto vars:     Size  Location     Type
 16622 ;;  tmr             2    5[COMRAM] unsigned int 
 16623 ;;  token           1    7[COMRAM] unsigned char 
 16624 ;; Return value:  Size  Location     Type
 16625 ;;                  1    wreg      unsigned char 
 16626 ;; Registers used:
 16627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16628 ;; Tracked objects:
 16629 ;;		On entry : 0/0
 16630 ;;		On exit  : 0/0
 16631 ;;		Unchanged: 0/0
 16632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16633 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16634 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16636 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16637 ;;Total ram usage:        7 bytes
 16638 ;; Hardware stack levels used:    1
 16639 ;; Hardware stack levels required when called:    1
 16640 ;; This function calls:
 16641 ;;		_SPI1_Exchange8bit
 16642 ;; This function is called by:
 16643 ;;		_disk_read
 16644 ;;		_disk_ioctl
 16645 ;; This function uses a non-reentrant model
 16646 ;;
 16647                           
 16648                           	psect	text47
 16649  006340                     __ptext47:
 16650                           	opt stack 0
 16651  006340                     _rcvr_datablock:
 16652                           	opt stack 26
 16653                           
 16654                           ;diskio.c: 137: BYTE token;
 16655                           ;diskio.c: 138: UINT tmr;
 16656                           ;diskio.c: 141: for (tmr = 2000; tmr; tmr--) {
 16657                           
 16658                           ;incstack = 0
 16659  006340  0E07               	movlw	7
 16660  006342  6E07               	movwf	rcvr_datablock@tmr+1,c
 16661  006344  0ED0               	movlw	208
 16662  006346  6E06               	movwf	rcvr_datablock@tmr,c
 16663  006348  D010               	goto	l138
 16664  00634A                     l3853:
 16665                           
 16666                           ;diskio.c: 142: token = SPI1_Exchange8bit(0xFF);
 16667  00634A  0EFF               	movlw	255
 16668  00634C  EC68  F033         	call	_SPI1_Exchange8bit
 16669  006350  6E08               	movwf	rcvr_datablock@token,c
 16670                           
 16671                           ;diskio.c: 143: if (token != 0xFF) break;
 16672  006352  2808               	incf	rcvr_datablock@token,w,c
 16673  006354  A4D8               	btfss	status,2,c
 16674  006356  D00D               	goto	l3863
 16675  006358  D001               	goto	l3859
 16676  00635A  D00B               	goto	l3863
 16677  00635C                     l3859:
 16678                           
 16679                           ;diskio.c: 144: _delay((unsigned long)((100)*(16000000/4000000.0)));
 16680  00635C  0E85               	movlw	133
 16681  00635E                     u8967:
 16682  00635E  2EE8               	decfsz	wreg,f,c
 16683  006360  D7FE               	goto	u8967
 16684  006362  F000               	nop	
 16685  006364  0606               	decf	rcvr_datablock@tmr,f,c
 16686  006366  A0D8               	btfss	status,0,c
 16687  006368  0607               	decf	rcvr_datablock@tmr+1,f,c
 16688  00636A                     l138:
 16689  00636A  5006               	movf	rcvr_datablock@tmr,w,c
 16690  00636C  1007               	iorwf	rcvr_datablock@tmr+1,w,c
 16691  00636E  A4D8               	btfss	status,2,c
 16692  006370  D7EC               	goto	l3853
 16693  006372                     l3863:
 16694                           
 16695                           ;diskio.c: 145: }
 16696                           ;diskio.c: 146: if (token != 0xFE) return 0;
 16697  006372  0EFE               	movlw	254
 16698  006374  1808               	xorwf	rcvr_datablock@token,w,c
 16699  006376  B4D8               	btfsc	status,2,c
 16700  006378  D003               	goto	l3869
 16701  00637A  0E00               	movlw	0
 16702  00637C  0012               	return	
 16703  00637E  D000               	goto	l3869
 16704  006380                     l3869:
 16705                           
 16706                           ;diskio.c: 149: *buff++ = SPI1_Exchange8bit(0xFF);
 16707  006380  0EFF               	movlw	255
 16708  006382  EC68  F033         	call	_SPI1_Exchange8bit
 16709  006386  C002  FFD9         	movff	rcvr_datablock@buff,fsr2l
 16710  00638A  C003  FFDA         	movff	rcvr_datablock@buff+1,fsr2h
 16711  00638E  6EDF               	movwf	indf2,c
 16712  006390  4A02               	infsnz	rcvr_datablock@buff,f,c
 16713  006392  2A03               	incf	rcvr_datablock@buff+1,f,c
 16714                           
 16715                           ;diskio.c: 150: while (--btr);
 16716  006394  0604               	decf	rcvr_datablock@btr,f,c
 16717  006396  A0D8               	btfss	status,0,c
 16718  006398  0605               	decf	rcvr_datablock@btr+1,f,c
 16719  00639A  5004               	movf	rcvr_datablock@btr,w,c
 16720  00639C  1005               	iorwf	rcvr_datablock@btr+1,w,c
 16721  00639E  A4D8               	btfss	status,2,c
 16722  0063A0  D7EF               	goto	l3869
 16723                           
 16724                           ;diskio.c: 151: SPI1_Exchange8bit(0xFF);
 16725  0063A2  0EFF               	movlw	255
 16726  0063A4  EC68  F033         	call	_SPI1_Exchange8bit
 16727                           
 16728                           ;diskio.c: 152: SPI1_Exchange8bit(0xFF);
 16729  0063A8  0EFF               	movlw	255
 16730  0063AA  EC68  F033         	call	_SPI1_Exchange8bit
 16731                           
 16732                           ;diskio.c: 154: return 1;
 16733  0063AE  0E01               	movlw	1
 16734  0063B0  0012               	return	
 16735  0063B2  0012               	return		;funcret
 16736  0063B4                     __end_of_rcvr_datablock:
 16737                           	opt stack 0
 16738                           tblptru	equ	0xFF8
 16739                           tblptrh	equ	0xFF7
 16740                           tblptrl	equ	0xFF6
 16741                           tablat	equ	0xFF5
 16742                           prodh	equ	0xFF4
 16743                           prodl	equ	0xFF3
 16744                           indf0	equ	0xFEF
 16745                           postinc0	equ	0xFEE
 16746                           fsr0h	equ	0xFEA
 16747                           fsr0l	equ	0xFE9
 16748                           wreg	equ	0xFE8
 16749                           indf1	equ	0xFE7
 16750                           postinc1	equ	0xFE6
 16751                           postdec1	equ	0xFE5
 16752                           fsr1h	equ	0xFE2
 16753                           fsr1l	equ	0xFE1
 16754                           indf2	equ	0xFDF
 16755                           postinc2	equ	0xFDE
 16756                           postdec2	equ	0xFDD
 16757                           plusw2	equ	0xFDB
 16758                           fsr2h	equ	0xFDA
 16759                           fsr2l	equ	0xFD9
 16760                           status	equ	0xFD8
 16761                           
 16762 ;; *************** function _SPI1_Exchange8bit *****************
 16763 ;; Defined at:
 16764 ;;		line 90 in file "mcc_generated_files/spi1.c"
 16765 ;; Parameters:    Size  Location     Type
 16766 ;;  data            1    wreg     unsigned char 
 16767 ;; Auto vars:     Size  Location     Type
 16768 ;;  data            1    0[COMRAM] unsigned char 
 16769 ;; Return value:  Size  Location     Type
 16770 ;;                  1    wreg      unsigned char 
 16771 ;; Registers used:
 16772 ;;		wreg, status,2
 16773 ;; Tracked objects:
 16774 ;;		On entry : 0/0
 16775 ;;		On exit  : 0/0
 16776 ;;		Unchanged: 0/0
 16777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16779 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16781 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16782 ;;Total ram usage:        1 bytes
 16783 ;; Hardware stack levels used:    1
 16784 ;; This function calls:
 16785 ;;		Nothing
 16786 ;; This function is called by:
 16787 ;;		_wait_ready
 16788 ;;		_deselect
 16789 ;;		_select
 16790 ;;		_rcvr_datablock
 16791 ;;		_xmit_datablock
 16792 ;;		___send_cmd
 16793 ;;		_disk_initialize
 16794 ;;		_disk_ioctl
 16795 ;;		_SPI1_Exchange8bitBuffer
 16796 ;; This function uses a non-reentrant model
 16797 ;;
 16798                           
 16799                           	psect	text48
 16800  0066D0                     __ptext48:
 16801                           	opt stack 0
 16802  0066D0                     _SPI1_Exchange8bit:
 16803                           	opt stack 25
 16804                           
 16805                           ;incstack = 0
 16806                           ;SPI1_Exchange8bit@data stored from wreg
 16807  0066D0  6E01               	movwf	SPI1_Exchange8bit@data,c
 16808                           
 16809                           ;spi1.c: 92: SSP1CON1bits.WCOL = 0;
 16810  0066D2  9EC6               	bcf	4038,7,c	;volatile
 16811                           
 16812                           ;spi1.c: 94: SSP1BUF = data;
 16813  0066D4  C001  FFC9         	movff	SPI1_Exchange8bit@data,4041	;volatile
 16814                           
 16815                           ;spi1.c: 96: while (SSP1STATbits.BF == 0x0) {
 16816  0066D8  D000               	goto	l21
 16817  0066DA                     l21:
 16818  0066DA  A0C7               	btfss	4039,0,c	;volatile
 16819  0066DC  D7FE               	goto	l21
 16820                           
 16821                           ;spi1.c: 97: }
 16822                           ;spi1.c: 99: return (SSP1BUF);
 16823  0066DE  50C9               	movf	4041,w,c	;volatile
 16824  0066E0  0012               	return		;funcret
 16825  0066E2                     __end_of_SPI1_Exchange8bit:
 16826                           	opt stack 0
 16827                           tblptru	equ	0xFF8
 16828                           tblptrh	equ	0xFF7
 16829                           tblptrl	equ	0xFF6
 16830                           tablat	equ	0xFF5
 16831                           prodh	equ	0xFF4
 16832                           prodl	equ	0xFF3
 16833                           indf0	equ	0xFEF
 16834                           postinc0	equ	0xFEE
 16835                           fsr0h	equ	0xFEA
 16836                           fsr0l	equ	0xFE9
 16837                           wreg	equ	0xFE8
 16838                           indf1	equ	0xFE7
 16839                           postinc1	equ	0xFE6
 16840                           postdec1	equ	0xFE5
 16841                           fsr1h	equ	0xFE2
 16842                           fsr1l	equ	0xFE1
 16843                           indf2	equ	0xFDF
 16844                           postinc2	equ	0xFDE
 16845                           postdec2	equ	0xFDD
 16846                           plusw2	equ	0xFDB
 16847                           fsr2h	equ	0xFDA
 16848                           fsr2l	equ	0xFD9
 16849                           status	equ	0xFD8
 16850                           
 16851 ;; *************** function _SYSTEM_Initialize *****************
 16852 ;; Defined at:
 16853 ;;		line 112 in file "mcc_generated_files/mcc.c"
 16854 ;; Parameters:    Size  Location     Type
 16855 ;;		None
 16856 ;; Auto vars:     Size  Location     Type
 16857 ;;		None
 16858 ;; Return value:  Size  Location     Type
 16859 ;;		None               void
 16860 ;; Registers used:
 16861 ;;		wreg, status,2, cstack
 16862 ;; Tracked objects:
 16863 ;;		On entry : 0/0
 16864 ;;		On exit  : 0/0
 16865 ;;		Unchanged: 0/0
 16866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16870 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16871 ;;Total ram usage:        0 bytes
 16872 ;; Hardware stack levels used:    1
 16873 ;; Hardware stack levels required when called:    1
 16874 ;; This function calls:
 16875 ;;		_OSCILLATOR_Initialize
 16876 ;;		_PIN_MANAGER_Initialize
 16877 ;;		_SPI1_Initialize
 16878 ;; This function is called by:
 16879 ;;		_main
 16880 ;; This function uses a non-reentrant model
 16881 ;;
 16882                           
 16883                           	psect	text49
 16884  0066F0                     __ptext49:
 16885                           	opt stack 0
 16886  0066F0                     _SYSTEM_Initialize:
 16887                           	opt stack 29
 16888                           
 16889                           ;mcc.c: 113: OSCILLATOR_Initialize();
 16890                           
 16891                           ;incstack = 0
 16892  0066F0  EC86  F033         	call	_OSCILLATOR_Initialize	;wreg free
 16893                           
 16894                           ;mcc.c: 114: PIN_MANAGER_Initialize();
 16895  0066F4  EC6B  F032         	call	_PIN_MANAGER_Initialize	;wreg free
 16896                           
 16897                           ;mcc.c: 115: SPI1_Initialize();
 16898  0066F8  EC7F  F033         	call	_SPI1_Initialize	;wreg free
 16899  0066FC  0012               	return		;funcret
 16900  0066FE                     __end_of_SYSTEM_Initialize:
 16901                           	opt stack 0
 16902                           tblptru	equ	0xFF8
 16903                           tblptrh	equ	0xFF7
 16904                           tblptrl	equ	0xFF6
 16905                           tablat	equ	0xFF5
 16906                           prodh	equ	0xFF4
 16907                           prodl	equ	0xFF3
 16908                           indf0	equ	0xFEF
 16909                           postinc0	equ	0xFEE
 16910                           fsr0h	equ	0xFEA
 16911                           fsr0l	equ	0xFE9
 16912                           wreg	equ	0xFE8
 16913                           indf1	equ	0xFE7
 16914                           postinc1	equ	0xFE6
 16915                           postdec1	equ	0xFE5
 16916                           fsr1h	equ	0xFE2
 16917                           fsr1l	equ	0xFE1
 16918                           indf2	equ	0xFDF
 16919                           postinc2	equ	0xFDE
 16920                           postdec2	equ	0xFDD
 16921                           plusw2	equ	0xFDB
 16922                           fsr2h	equ	0xFDA
 16923                           fsr2l	equ	0xFD9
 16924                           status	equ	0xFD8
 16925                           
 16926 ;; *************** function _SPI1_Initialize *****************
 16927 ;; Defined at:
 16928 ;;		line 64 in file "mcc_generated_files/spi1.c"
 16929 ;; Parameters:    Size  Location     Type
 16930 ;;		None
 16931 ;; Auto vars:     Size  Location     Type
 16932 ;;		None
 16933 ;; Return value:  Size  Location     Type
 16934 ;;		None               void
 16935 ;; Registers used:
 16936 ;;		wreg, status,2
 16937 ;; Tracked objects:
 16938 ;;		On entry : 0/0
 16939 ;;		On exit  : 0/0
 16940 ;;		Unchanged: 0/0
 16941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16946 ;;Total ram usage:        0 bytes
 16947 ;; Hardware stack levels used:    1
 16948 ;; This function calls:
 16949 ;;		Nothing
 16950 ;; This function is called by:
 16951 ;;		_SYSTEM_Initialize
 16952 ;;		_disk_initialize
 16953 ;; This function uses a non-reentrant model
 16954 ;;
 16955                           
 16956                           	psect	text50
 16957  0066FE                     __ptext50:
 16958                           	opt stack 0
 16959  0066FE                     _SPI1_Initialize:
 16960                           	opt stack 27
 16961                           
 16962                           ;spi1.c: 68: SSP1STAT = 0x40;
 16963                           
 16964                           ;incstack = 0
 16965  0066FE  0E40               	movlw	64
 16966  006700  6EC7               	movwf	4039,c	;volatile
 16967                           
 16968                           ;spi1.c: 71: SSP1CON1 = 0x22;
 16969  006702  0E22               	movlw	34
 16970  006704  6EC6               	movwf	4038,c	;volatile
 16971                           
 16972                           ;spi1.c: 74: SSP1ADD = 0x00;
 16973  006706  0E00               	movlw	0
 16974  006708  6EC8               	movwf	4040,c	;volatile
 16975  00670A  0012               	return		;funcret
 16976  00670C                     __end_of_SPI1_Initialize:
 16977                           	opt stack 0
 16978                           tblptru	equ	0xFF8
 16979                           tblptrh	equ	0xFF7
 16980                           tblptrl	equ	0xFF6
 16981                           tablat	equ	0xFF5
 16982                           prodh	equ	0xFF4
 16983                           prodl	equ	0xFF3
 16984                           indf0	equ	0xFEF
 16985                           postinc0	equ	0xFEE
 16986                           fsr0h	equ	0xFEA
 16987                           fsr0l	equ	0xFE9
 16988                           wreg	equ	0xFE8
 16989                           indf1	equ	0xFE7
 16990                           postinc1	equ	0xFE6
 16991                           postdec1	equ	0xFE5
 16992                           fsr1h	equ	0xFE2
 16993                           fsr1l	equ	0xFE1
 16994                           indf2	equ	0xFDF
 16995                           postinc2	equ	0xFDE
 16996                           postdec2	equ	0xFDD
 16997                           plusw2	equ	0xFDB
 16998                           fsr2h	equ	0xFDA
 16999                           fsr2l	equ	0xFD9
 17000                           status	equ	0xFD8
 17001                           
 17002 ;; *************** function _PIN_MANAGER_Initialize *****************
 17003 ;; Defined at:
 17004 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
 17005 ;; Parameters:    Size  Location     Type
 17006 ;;		None
 17007 ;; Auto vars:     Size  Location     Type
 17008 ;;		None
 17009 ;; Return value:  Size  Location     Type
 17010 ;;		None               void
 17011 ;; Registers used:
 17012 ;;		wreg, status,2
 17013 ;; Tracked objects:
 17014 ;;		On entry : 0/0
 17015 ;;		On exit  : 0/0
 17016 ;;		Unchanged: 0/0
 17017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17021 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17022 ;;Total ram usage:        0 bytes
 17023 ;; Hardware stack levels used:    1
 17024 ;; This function calls:
 17025 ;;		Nothing
 17026 ;; This function is called by:
 17027 ;;		_SYSTEM_Initialize
 17028 ;; This function uses a non-reentrant model
 17029 ;;
 17030                           
 17031                           	psect	text51
 17032  0064D6                     __ptext51:
 17033                           	opt stack 0
 17034  0064D6                     _PIN_MANAGER_Initialize:
 17035                           	opt stack 29
 17036                           
 17037                           ;pin_manager.c: 51: LATA = 0x00;
 17038                           
 17039                           ;incstack = 0
 17040  0064D6  0E00               	movlw	0
 17041  0064D8  6E89               	movwf	3977,c	;volatile
 17042                           
 17043                           ;pin_manager.c: 52: TRISA = 0xFF;
 17044  0064DA  6892               	setf	3986,c	;volatile
 17045                           
 17046                           ;pin_manager.c: 53: ANSELA = 0x2F;
 17047  0064DC  0E2F               	movlw	47
 17048  0064DE  010F               	movlb	15	; () banked
 17049  0064E0  6F38               	movwf	56,b	;volatile
 17050                           
 17051                           ;pin_manager.c: 55: LATB = 0x01;
 17052  0064E2  0E01               	movlw	1
 17053  0064E4  6E8A               	movwf	3978,c	;volatile
 17054                           
 17055                           ;pin_manager.c: 56: TRISB = 0xFE;
 17056  0064E6  0EFE               	movlw	254
 17057  0064E8  6E93               	movwf	3987,c	;volatile
 17058                           
 17059                           ;pin_manager.c: 57: ANSELB = 0x3E;
 17060  0064EA  0E3E               	movlw	62
 17061  0064EC  010F               	movlb	15	; () banked
 17062  0064EE  6F39               	movwf	57,b	;volatile
 17063                           
 17064                           ;pin_manager.c: 58: WPUB = 0x00;
 17065  0064F0  0E00               	movlw	0
 17066  0064F2  6E61               	movwf	3937,c	;volatile
 17067                           
 17068                           ;pin_manager.c: 60: LATC = 0x01;
 17069  0064F4  0E01               	movlw	1
 17070  0064F6  6E8B               	movwf	3979,c	;volatile
 17071                           
 17072                           ;pin_manager.c: 61: TRISC = 0xD6;
 17073  0064F8  0ED6               	movlw	214
 17074  0064FA  6E94               	movwf	3988,c	;volatile
 17075                           
 17076                           ;pin_manager.c: 62: ANSELC = 0xC4;
 17077  0064FC  0EC4               	movlw	196
 17078  0064FE  010F               	movlb	15	; () banked
 17079  006500  6F3A               	movwf	58,b	;volatile
 17080                           
 17081                           ;pin_manager.c: 64: LATD = 0x00;
 17082  006502  0E00               	movlw	0
 17083  006504  6E8C               	movwf	3980,c	;volatile
 17084                           
 17085                           ; BSR set to: 15
 17086                           ;pin_manager.c: 65: TRISD = 0xFF;
 17087  006506  6895               	setf	3989,c	;volatile
 17088                           
 17089                           ; BSR set to: 15
 17090                           ;pin_manager.c: 66: ANSELD = 0xFF;
 17091  006508  010F               	movlb	15	; () banked
 17092  00650A  693B               	setf	59,b	;volatile
 17093                           
 17094                           ;pin_manager.c: 68: LATE = 0x00;
 17095  00650C  0E00               	movlw	0
 17096  00650E  6E8D               	movwf	3981,c	;volatile
 17097                           
 17098                           ;pin_manager.c: 69: TRISE = 0x07;
 17099  006510  0E07               	movlw	7
 17100  006512  6E96               	movwf	3990,c	;volatile
 17101                           
 17102                           ;pin_manager.c: 70: ANSELE = 0x07;
 17103  006514  0E07               	movlw	7
 17104  006516  010F               	movlb	15	; () banked
 17105  006518  6F3C               	movwf	60,b	;volatile
 17106                           
 17107                           ; BSR set to: 15
 17108                           ;pin_manager.c: 72: INTCON2bits.nRBPU = 0x01;
 17109  00651A  8EF1               	bsf	intcon2,7,c	;volatile
 17110                           
 17111                           ; BSR set to: 15
 17112  00651C  0012               	return		;funcret
 17113  00651E                     __end_of_PIN_MANAGER_Initialize:
 17114                           	opt stack 0
 17115                           tblptru	equ	0xFF8
 17116                           tblptrh	equ	0xFF7
 17117                           tblptrl	equ	0xFF6
 17118                           tablat	equ	0xFF5
 17119                           prodh	equ	0xFF4
 17120                           prodl	equ	0xFF3
 17121                           intcon2	equ	0xFF1
 17122                           indf0	equ	0xFEF
 17123                           postinc0	equ	0xFEE
 17124                           fsr0h	equ	0xFEA
 17125                           fsr0l	equ	0xFE9
 17126                           wreg	equ	0xFE8
 17127                           indf1	equ	0xFE7
 17128                           postinc1	equ	0xFE6
 17129                           postdec1	equ	0xFE5
 17130                           fsr1h	equ	0xFE2
 17131                           fsr1l	equ	0xFE1
 17132                           indf2	equ	0xFDF
 17133                           postinc2	equ	0xFDE
 17134                           postdec2	equ	0xFDD
 17135                           plusw2	equ	0xFDB
 17136                           fsr2h	equ	0xFDA
 17137                           fsr2l	equ	0xFD9
 17138                           status	equ	0xFD8
 17139                           
 17140 ;; *************** function _OSCILLATOR_Initialize *****************
 17141 ;; Defined at:
 17142 ;;		line 118 in file "mcc_generated_files/mcc.c"
 17143 ;; Parameters:    Size  Location     Type
 17144 ;;		None
 17145 ;; Auto vars:     Size  Location     Type
 17146 ;;		None
 17147 ;; Return value:  Size  Location     Type
 17148 ;;		None               void
 17149 ;; Registers used:
 17150 ;;		wreg, status,2
 17151 ;; Tracked objects:
 17152 ;;		On entry : 0/0
 17153 ;;		On exit  : 0/0
 17154 ;;		Unchanged: 0/0
 17155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17160 ;;Total ram usage:        0 bytes
 17161 ;; Hardware stack levels used:    1
 17162 ;; This function calls:
 17163 ;;		Nothing
 17164 ;; This function is called by:
 17165 ;;		_SYSTEM_Initialize
 17166 ;; This function uses a non-reentrant model
 17167 ;;
 17168                           
 17169                           	psect	text52
 17170  00670C                     __ptext52:
 17171                           	opt stack 0
 17172  00670C                     _OSCILLATOR_Initialize:
 17173                           	opt stack 29
 17174                           
 17175                           ;mcc.c: 120: OSCCON = 0x72;
 17176                           
 17177                           ; BSR set to: 15
 17178                           ;incstack = 0
 17179  00670C  0E72               	movlw	114
 17180  00670E  6ED3               	movwf	4051,c	;volatile
 17181                           
 17182                           ;mcc.c: 122: OSCCON2 = 0x04;
 17183  006710  0E04               	movlw	4
 17184  006712  6ED2               	movwf	4050,c	;volatile
 17185                           
 17186                           ;mcc.c: 124: OSCTUNE = 0x00;
 17187  006714  0E00               	movlw	0
 17188  006716  6E9B               	movwf	3995,c	;volatile
 17189  006718  0012               	return		;funcret
 17190  00671A                     __end_of_OSCILLATOR_Initialize:
 17191                           	opt stack 0
 17192                           tblptru	equ	0xFF8
 17193                           tblptrh	equ	0xFF7
 17194                           tblptrl	equ	0xFF6
 17195                           tablat	equ	0xFF5
 17196                           prodh	equ	0xFF4
 17197                           prodl	equ	0xFF3
 17198                           intcon2	equ	0xFF1
 17199                           indf0	equ	0xFEF
 17200                           postinc0	equ	0xFEE
 17201                           fsr0h	equ	0xFEA
 17202                           fsr0l	equ	0xFE9
 17203                           wreg	equ	0xFE8
 17204                           indf1	equ	0xFE7
 17205                           postinc1	equ	0xFE6
 17206                           postdec1	equ	0xFE5
 17207                           fsr1h	equ	0xFE2
 17208                           fsr1l	equ	0xFE1
 17209                           indf2	equ	0xFDF
 17210                           postinc2	equ	0xFDE
 17211                           postdec2	equ	0xFDD
 17212                           plusw2	equ	0xFDB
 17213                           fsr2h	equ	0xFDA
 17214                           fsr2l	equ	0xFD9
 17215                           status	equ	0xFD8
 17216                           tblptru	equ	0xFF8
 17217                           tblptrh	equ	0xFF7
 17218                           tblptrl	equ	0xFF6
 17219                           tablat	equ	0xFF5
 17220                           prodh	equ	0xFF4
 17221                           prodl	equ	0xFF3
 17222                           intcon2	equ	0xFF1
 17223                           indf0	equ	0xFEF
 17224                           postinc0	equ	0xFEE
 17225                           fsr0h	equ	0xFEA
 17226                           fsr0l	equ	0xFE9
 17227                           wreg	equ	0xFE8
 17228                           indf1	equ	0xFE7
 17229                           postinc1	equ	0xFE6
 17230                           postdec1	equ	0xFE5
 17231                           fsr1h	equ	0xFE2
 17232                           fsr1l	equ	0xFE1
 17233                           indf2	equ	0xFDF
 17234                           postinc2	equ	0xFDE
 17235                           postdec2	equ	0xFDD
 17236                           plusw2	equ	0xFDB
 17237                           fsr2h	equ	0xFDA
 17238                           fsr2l	equ	0xFD9
 17239                           status	equ	0xFD8
 17240                           
 17241                           	psect	rparam
 17242  0000                     tblptru	equ	0xFF8
 17243                           tblptrh	equ	0xFF7
 17244                           tblptrl	equ	0xFF6
 17245                           tablat	equ	0xFF5
 17246                           prodh	equ	0xFF4
 17247                           prodl	equ	0xFF3
 17248                           intcon2	equ	0xFF1
 17249                           indf0	equ	0xFEF
 17250                           postinc0	equ	0xFEE
 17251                           fsr0h	equ	0xFEA
 17252                           fsr0l	equ	0xFE9
 17253                           wreg	equ	0xFE8
 17254                           indf1	equ	0xFE7
 17255                           postinc1	equ	0xFE6
 17256                           postdec1	equ	0xFE5
 17257                           fsr1h	equ	0xFE2
 17258                           fsr1l	equ	0xFE1
 17259                           indf2	equ	0xFDF
 17260                           postinc2	equ	0xFDE
 17261                           postdec2	equ	0xFDD
 17262                           plusw2	equ	0xFDB
 17263                           fsr2h	equ	0xFDA
 17264                           fsr2l	equ	0xFD9
 17265                           status	equ	0xFD8


Data Sizes:
    Strings     40
    Constant    0
    Data        1
    BSS         595
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160    114     152
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    Fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    Fil.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_lseek@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_lseek@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_close@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_close@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_sync@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_sync@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_write@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_write@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_write@bw	PTR unsigned int  size(2) Largest target is 2
		 -> main@bw(BANK0[2]), 

    f_write@buff	PTR const void  size(2) Largest target is 15
		 -> STR_4(CODE[15]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_4(CODE[15]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_read@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_3(CODE[10]), STR_2(CODE[1]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_open@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_open@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dj.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dj.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_mount@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_mount@cfs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_mount@path	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_3(CODE[10]), STR_2(CODE[1]), 

    f_mount@rp	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_3(CODE[10]), STR_2(CODE[1]), 

    S588$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    validate@fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    S588$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    validate@fil.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    validate@obj	PTR void  size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    validate@fil	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    find_volume@pt	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    ff@FatFs	PTR struct .[1] size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    find_volume@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    find_volume@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), 

    find_volume@rfs	PTR PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), f_mount@fs(COMRAM[2]), 

    check_fs@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    get_ldnumber@tp	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_3(CODE[10]), STR_2(CODE[1]), 

    get_ldnumber@tt	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_3(CODE[10]), STR_2(CODE[1]), 

    get_ldnumber@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), f_mount@rp(COMRAM[2]), 

    follow_path@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    follow_path@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    follow_path@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    follow_path@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    follow_path@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_3(CODE[10]), STR_2(CODE[1]), 

    create_name@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    create_name@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    create_name@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> follow_path@path(BANK0[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_3(CODE[10]), STR_2(CODE[1]), 

    dir_register@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_register@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_register@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_register@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_find@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_find@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_find@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_find@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_find@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    st_clust@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    ld_clust@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    ld_clust@dir	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_alloc@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_alloc@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_alloc@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_alloc@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_next@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_next@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_next@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_next@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    S577$fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_sdi@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    S577$dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_sdi@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    S577$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_sdi@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_sdi@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_chain@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    remove_chain@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    put_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    put_fat@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    get_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    get_fat@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    clust2sect@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    sync_fs@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    move_window@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    sync_window@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    chk_chr@str	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_1(CODE[15]), 

    mem_cmp@src	PTR const void  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@s	PTR const unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    mem_set@dst	PTR void  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), f_open@sfn(BANK0[12]), NULL(NULL[0]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), f_open@sfn(BANK0[12]), NULL(NULL[0]), 

    mem_cpy@src	PTR const void  size(2) Largest target is 558
		 -> f_open@dj.win(COMRAM[512]), STR_4(CODE[15]), FatFs(BIGRAM[558]), f_open@sfn(BANK0[12]), 
		 -> NULL(NULL[0]), 

    mem_cpy@s	PTR const unsigned char  size(2) Largest target is 558
		 -> f_open@dj.win(COMRAM[512]), STR_4(CODE[15]), FatFs(BIGRAM[558]), f_open@sfn(BANK0[12]), 
		 -> NULL(NULL[0]), 

    mem_cpy@dst	PTR void  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    mem_cpy@d	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_ioctl@ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), STR_4(CODE[15]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    xmit_datablock@buff	PTR const unsigned char  size(3) Largest target is 65535
		 -> FatFs.win(BIGRAM[512]), STR_4(CODE[15]), FatFs(BIGRAM[558]), ROM(CODE[65535]), 
		 -> NULL(NULL[0]), 

    rcvr_datablock@buff	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), disk_ioctl@csd(COMRAM[16]), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _f_write->_create_chain
    _f_open->_remove_chain
    _remove_chain->_put_fat
    _follow_path->_dir_sdi
    _dir_find->_dir_sdi
    _create_name->_mem_set
    _dir_alloc->_dir_sdi
    _dir_sdi->_get_fat
    _dir_next->_create_chain
    _f_mount->_find_volume
    _find_volume->_check_fs
    _disk_initialize->_send_cmd
    _check_fs->_move_window
    _f_lseek->_create_chain
    _create_chain->_put_fat
    _put_fat->_move_window
    _get_fat->_move_window
    _clust2sect->___lmul
    _f_close->_f_sync
    _f_sync->_sync_fs
    _validate->_disk_status
    _sync_fs->_disk_ioctl
    _disk_ioctl->_send_cmd
    _move_window->_sync_window
    _sync_window->_disk_write
    _disk_write->_send_cmd
    _xmit_datablock->_wait_ready
    _disk_read->_send_cmd
    _send_cmd->___send_cmd
    _select->_wait_ready
    _wait_ready->_SPI1_Exchange8bit
    _deselect->_SPI1_Exchange8bit
    _rcvr_datablock->_SPI1_Exchange8bit

Critical Paths under _main in BANK0

    _main->_f_open
    _f_write->_create_chain
    _f_open->_find_volume
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_register->_dir_alloc
    _dir_alloc->_dir_next
    _dir_next->_create_chain
    _f_mount->_find_volume
    _f_lseek->_create_chain

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  381219
                                            112 BANK0      2     2      0
                  _SYSTEM_Initialize
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                            _f_write
 ---------------------------------------------------------------------------------
 (1) _f_write                                             40    32      8   48706
                                             13 BANK0     40    32      8
                         _clust2sect
                       _create_chain
                         _disk_write
                            _mem_cpy
                        _move_window
                        _sync_window
                           _validate
 ---------------------------------------------------------------------------------
 (1) _f_open                                              54    49      5  235991
                                             58 BANK0     54    49      5
                       _dir_register
                        _find_volume
                        _follow_path
                           _ld_clust
                        _move_window
                       _remove_chain
                           _st_clust
 ---------------------------------------------------------------------------------
 (2) _remove_chain                                        15     9      6   24374
                                             85 COMRAM    10     4      6
                                              0 BANK0      5     5      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (2) _follow_path                                          8     4      4   88296
                                             38 BANK0      8     4      4
                        _create_name
                           _dir_find
                            _dir_sdi
                           _ld_clust
 ---------------------------------------------------------------------------------
 (2) _ld_clust                                            14    10      4     474
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) _dir_find                                             6     4      2   70327
                                             32 BANK0      6     4      2
                           _dir_next
                            _dir_sdi
                            _mem_cmp
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _mem_cmp                                             15     9      6     328
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) _create_name                                         23    19      4    2440
                                              8 COMRAM    23    19      4
                            _chk_chr
                            _mem_set
 ---------------------------------------------------------------------------------
 (4) _chk_chr                                              6     2      4     217
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _dir_register                                         3     1      2   82540
                                             42 BANK0      3     1      2
                          _dir_alloc
                            _mem_cpy
                            _mem_set
                        _move_window
 ---------------------------------------------------------------------------------
 (2) _mem_cpy                                             12     6      6    1143
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) _dir_alloc                                           10     6      4   70019
                                             32 BANK0     10     6      4
                           _dir_next
                            _dir_sdi
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _dir_sdi                                             21    17      4   14365
                                             84 COMRAM    11     7      4
                                              0 BANK0     10    10      0
                         _clust2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (4) _dir_next                                            19    15      4   45000
                                             13 BANK0     19    15      4
                         _clust2sect
                       _create_chain
                            _get_fat
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (1) _f_mount                                             12     7      5   28988
                                             81 COMRAM    12     7      5
                        _find_volume
                       _get_ldnumber
 ---------------------------------------------------------------------------------
 (2) _find_volume                                         71    66      5   27936
                                             68 COMRAM    13     8      5
                                              0 BANK0     58    58      0
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                       _get_ldnumber
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _get_ldnumber                                        14    12      2     512
                                              0 COMRAM    14    12      2
 ---------------------------------------------------------------------------------
 (3) _disk_initialize                                     13    13      0    2434
                                             16 COMRAM    13    13      0
                  _SPI1_Exchange8bit
                    _SPI1_Initialize
                          _SPI1_Open
                           _deselect
                           _send_cmd
 ---------------------------------------------------------------------------------
 (4) _SPI1_Open                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _check_fs                                            10     4      6   10644
                                             58 COMRAM    10     4      6
                        _move_window
 ---------------------------------------------------------------------------------
 (1) _f_lseek                                             35    29      6   41425
                                             13 BANK0     35    29      6
                            ___lldiv
                         _clust2sect
                       _create_chain
                            _get_fat
                           _validate
 ---------------------------------------------------------------------------------
 (2) _create_chain                                        23    17      6   25419
                                             85 COMRAM    10     4      6
                                              0 BANK0     13    13      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (3) _put_fat                                             27    17     10   11972
                                             58 COMRAM    27    17     10
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _get_fat                                             26    20      6   11871
                                             58 COMRAM    26    20      6
                        _move_window
 ---------------------------------------------------------------------------------
 (2) _clust2sect                                          11     5      6    1355
                                             12 COMRAM    11     5      6
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     476
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     512
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _f_close                                              3     1      2   26083
                                             77 COMRAM     3     1      2
                             _f_sync
                           _validate
 ---------------------------------------------------------------------------------
 (2) _f_sync                                               9     7      2   25404
                                             68 COMRAM     9     7      2
                        _move_window
                           _st_clust
                            _sync_fs
                           _validate
 ---------------------------------------------------------------------------------
 (2) _validate                                             8     6      2     497
                                              1 COMRAM     8     6      2
                        _disk_status
 ---------------------------------------------------------------------------------
 (3) _disk_status                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _sync_fs                                             11     9      2   13842
                                             57 COMRAM    11     9      2
                         _disk_ioctl
                         _disk_write
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (5) _mem_set                                              8     2      6     858
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (4) _disk_ioctl                                          41    38      3    4706
                                             16 COMRAM    41    38      3
                  _SPI1_Exchange8bit
                             ___wmul
                           _deselect
                     _rcvr_datablock
                             _select
                           _send_cmd
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     591
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _st_clust                                             6     0      6     344
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (2) _move_window                                         11     5      6   10234
                                             47 COMRAM    11     5      6
                          _disk_read
                        _sync_window
 ---------------------------------------------------------------------------------
 (2) _sync_window                                         21    19      2    4268
                                             26 COMRAM    21    19      2
                         _disk_write
 ---------------------------------------------------------------------------------
 (3) _disk_write                                          10     2      8    3504
                                             16 COMRAM    10     2      8
                           _deselect
                           _send_cmd
                     _xmit_datablock
 ---------------------------------------------------------------------------------
 (4) _xmit_datablock                                       7     3      4     587
                                              3 COMRAM     7     3      4
                  _SPI1_Exchange8bit
                         _wait_ready
 ---------------------------------------------------------------------------------
 (3) _disk_read                                           12     4      8    3566
                                             16 COMRAM    12     4      8
                           _deselect
                     _rcvr_datablock
                           _send_cmd
 ---------------------------------------------------------------------------------
 (4) _send_cmd                                             6     2      4    1903
                                             10 COMRAM     6     2      4
                         ___send_cmd
 ---------------------------------------------------------------------------------
 (5) ___send_cmd                                           7     3      4     575
                                              3 COMRAM     7     3      4
                  _SPI1_Exchange8bit
                           _deselect
                             _select
 ---------------------------------------------------------------------------------
 (6) _select                                               0     0      0     112
                  _SPI1_Exchange8bit
                           _deselect
                         _wait_ready
 ---------------------------------------------------------------------------------
 (5) _wait_ready                                           2     2      0      68
                                              1 COMRAM     2     2      0
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (7) _deselect                                             0     0      0      22
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _rcvr_datablock                                       7     3      4    1032
                                              1 COMRAM     7     3      4
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (6) _SPI1_Exchange8bit                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
 ---------------------------------------------------------------------------------
 (4) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI1_Initialize
   _f_close
     _f_sync
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _st_clust
       _sync_fs
         _disk_ioctl
           _SPI1_Exchange8bit
           ___wmul
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _select
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _disk_write
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
           _xmit_datablock
             _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
         _mem_set
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _validate
         _disk_status
     _validate
       _disk_status
   _f_lseek
     ___lldiv
     _clust2sect
       ___lmul
     _create_chain
       _get_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _put_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
     _get_fat
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
     _validate
       _disk_status
   _f_mount
     _find_volume
       ___lldiv
       ___lmul
       _check_fs
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _disk_initialize
         _SPI1_Exchange8bit
         _SPI1_Initialize
         _SPI1_Open
         _deselect
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _disk_status
       _get_ldnumber
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
     _get_ldnumber
   _f_open
     _dir_register
       _dir_alloc
         _dir_next
           _clust2sect
             ___lmul
           _create_chain
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _put_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
           _mem_set
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _dir_sdi
           _clust2sect
             ___lmul
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _mem_cpy
       _mem_set
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
     _find_volume
       ___lldiv
       ___lmul
       _check_fs
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _disk_initialize
         _SPI1_Exchange8bit
         _SPI1_Initialize
         _SPI1_Open
         _deselect
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _disk_status
       _get_ldnumber
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
     _follow_path
       _create_name
         _chk_chr
         _mem_set
       _dir_find
         _dir_next
           _clust2sect
             ___lmul
           _create_chain
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _put_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
           _mem_set
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _dir_sdi
           _clust2sect
             ___lmul
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
         _mem_cmp
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _dir_sdi
         _clust2sect
           ___lmul
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _ld_clust
     _ld_clust
     _move_window
       _disk_read
         _deselect
           _SPI1_Exchange8bit
         _rcvr_datablock
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _sync_window
         _disk_write
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
           _xmit_datablock
             _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
     _remove_chain
       _get_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _put_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
     _st_clust
   _f_write
     _clust2sect
       ___lmul
     _create_chain
       _get_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _put_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
     _disk_write
       _deselect
         _SPI1_Exchange8bit
       _send_cmd
         ___send_cmd
           _SPI1_Exchange8bit
           _deselect
             _SPI1_Exchange8bit
           _select
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
       _xmit_datablock
         _SPI1_Exchange8bit
         _wait_ready
           _SPI1_Exchange8bit
     _mem_cpy
     _move_window
       _disk_read
         _deselect
           _SPI1_Exchange8bit
         _rcvr_datablock
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _sync_window
         _disk_write
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
           _xmit_datablock
             _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
     _sync_window
       _disk_write
         _deselect
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
         _xmit_datablock
           _SPI1_Exchange8bit
           _wait_ready
             _SPI1_Exchange8bit
     _validate
       _disk_status

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0     22E      37       14.3%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     72      98       5       95.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F7      12        0.0%
DATA                 0      0     325       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Jul 25 05:14:57 2019

              _SPI1_Exchange8bit 66D0                      get_fat@clst 003D  
                   create_name@b 0015                     create_name@c 001F  
                   create_name@d 001A                     create_name@i 001D  
                   create_name@p 0018               ?_SPI1_Exchange8bit 0001  
               get_ldnumber@path 0001                               l21 66DA  
                    disk_ioctl@n 0037              ___wmul@multiplicand 0003  
                 ??_dir_register 0060                 disk_write@sector 0013  
                   __CFG_CP0$OFF 000000                     __CFG_CP1$OFF 000000  
                  create_name@dp 0009                    create_name@ni 0016  
                   __CFG_CP2$OFF 000000                    create_name@si 0013  
                 create_chain@cs 0069                     __CFG_CP3$OFF 000000  
                 create_chain@fs 0056                              l120 658C  
                            l212 5C06                              l216 5C10  
                            l217 5C26                              l233 5598  
                            l138 636A                              l234 55A2  
                            l235 55B8                              l420 3FCE  
                            l229 558E                              l173 4BA8  
                            l405 5284                              l190 4CD4  
                            l318 641C                              l239 562A  
                            l360 427A                              l432 40D2  
                            l424 3FBE                              l184 4C80  
                            l345 4F70                              l258 332C  
                            l452 47C6                              l381 3AA6  
                            l437 422E                              l358 45B4  
                            l198 4D5E                              l439 4222  
                            l623 1208                              l535 49F8  
                            l650 19AC                              l642 1568  
                            l636 139A                              l572 50BC  
                            l494 57DE                              l574 50AE  
                            l559 4B6A                              l770 2584  
                            l691 391C                              l819 5D96  
                            l684 373E                              l693 38FA  
                            l685 3730                              l774 28A2  
                   __CFG_CPB$OFF 000000                     __CFG_CPD$OFF 000000  
                            _Fil 00D7              ??_SPI1_Exchange8bit 0001  
                   disk_read@cmd 001C                              prod 000FF3  
                 ??_create_chain 005C                              wreg 000FE8  
              disk_initialize@ty 001A                   create_name@sfn 001B  
                create_chain@ncl 0065                  create_chain@scl 0061  
                create_chain@res 0060                      ld_clust@dir 0003  
                   __CFG_LVP$OFF 000000                             l4011 6078  
                           l1279 62AC                             l4009 605A  
                           l4041 43DE                             l4105 3C78  
                           l4043 43FE                             l4035 438E  
                           l4027 42F4                             l4131 3E5E  
                           l4115 3D1A                             l4107 3CA2  
                           l4141 6438                             l4061 4584  
                           l4053 44C0                             l4045 4408  
                           l4125 3DCC                             l4109 3CB0  
                           l4133 3E64                             l4213 40A4  
                           l5005 5B04                             l4151 6624  
                           l5023 610E                             l4063 4596  
                           l4119 3D5E                             l4135 3E84  
                           l4231 419A                             l4223 4122  
                           l4207 4060                             l4305 3374  
                           l5033 6254                             l4145 644E  
                           l4057 452C                             l4049 4470  
                           l4129 3E4C                             l4217 40E4  
                           l4401 463A                             l5113 5BEA  
                           l5121 4F9E                             l4331 34F0  
                           l4323 3456                             l4315 33C6  
                           l4155 6636                             l5019 610A  
                           l5035 6262                             l4411 4698  
                           l5131 5000                             l5123 4FA6  
                           l4309 337E                             l5045 629C  
                           l5037 626A                             l4165 5EB6  
                           l4237 4206                             l5221 1118  
                           l5205 10D2                             l4501 2E98  
                           l4421 46F6                             l4405 463E  
                           l6013 5D56                             l6005 5CF0  
                           l4343 3558                             l4327 34E2  
                           l4087 3B5E                             l4079 3B22  
                           l4191 3F84                             l5311 1406  
                           l4431 476E                             l4423 471C  
                           l6015 5D8A                             l3801 619E  
                           l4353 3592                             l4337 3524  
                           l4281 318C                             l4257 66C8  
                           l4089 3B94                             l4177 3EEE  
                           l5401 1972                             l5241 1170  
                           l5209 10D8                             l4521 2F28  
                           l5161 50C6                             l5137 5026  
                           l3811 61B2                             l4363 35D8  
                           l4347 357A                             l4291 326A  
                           l4099 3C12                             l4195 3FE0  
                           l4187 3F58                             l4179 3F02  
                           l5331 1512                             l5323 14C4  
                           l5251 11EA                             l4515 2F0A  
                           l4451 4840                             l4435 47B6  
                           l4443 480C                             l4419 46D0  
                           l5163 50F0                             l5155 50AA  
                           l5083 51F0                             l5075 51B6  
                           l3741 671E                             l3733 657E  
                           l4365 35DE                             l4357 359C  
                           l4277 3184                             l4269 3174  
                           l4613 4C88                             l4605 4C4A  
                           l5245 1184                             l5229 1128  
                           l5181 1058                             l4541 3004  
                           l4533 2FCE                             l4509 2EF2  
                           l5165 50F4                             l5093 5274  
                           l5077 51CA                             l5069 5172  
                           l3751 66B2                             l3743 669E  
                           l3831 622C                             l4367 35E4  
                           l4631 4CE0                             l4623 4CB4  
                           l5407 1A04                             l5351 161A  
                           l5343 158E                             l5319 14C0  
                           l5271 12E2                             l5263 1266  
                           l5239 1166                             l4527 2F46  
                           l4463 2CEC                             l4439 47BA  
                           l4391 64C0                             l5167 5132  
                           l5079 51CE                             l5095 52A8  
                           l3737 6594                             l3729 656E  
                           l3817 61CA                             l3913 5670  
                           l3905 560C                             l4369 3618  
                           l4641 4D28                             l4633 4CEA  
                           l4609 4C6A                             l5425 1B80  
                           l5257 1246                             l4545 302A  
                           l4553 30E2                             l4385 6482  
                           l4801 48F6                             l5089 522E  
                           l3915 5682                             l4715 4F46  
                           l4627 4CCE                             l4635 4CF0  
                           l4571 4BB4                             l5283 1318  
                           l4467 2CF0                             l4387 6488  
                           l4803 48FC                             l4379 63CE  
                           l5611 3A6A                             l5507 3632  
                           l3853 634A                             l3941 5C3A  
                           l3909 5646                             l5461 5574  
                           l4653 4D8A                             l4645 4D48  
                           l5365 16CC                             l5269 12BA  
                           l5277 130A                             l5189 1086  
                           l4549 3080                             l4493 2E58  
                           l4477 2D6C                             l4741 579A  
                           l4733 572E                             l5541 370E  
                           l5701 20AA                             l3863 6372  
                           l3783 6162                             l3767 6132  
                           l3847 654A                             l3951 5C82  
                           l3943 5C44                             l3919 56A6  
                           l4639 4D16                             l4655 4D90  
                           l4575 4BBE                             l5359 16A4  
                           l5295 1344                             l4487 2E3A  
                           l4743 57A6                             l4727 56EA  
                           l4671 5DAE                             l4815 4970  
                           l3793 6186                             l3953 5C94  
                           l3929 5C02                             l4665 4DA8  
                           l4649 4D66                             l4593 4C16  
                           l5385 17F6                             l5369 16EE  
                           l5289 1326                             l4737 5778  
                           l4681 5E18                             l4905 4B20  
                           l4833 49D0                             l4841 49EE  
                           l4825 49AA                             l5537 3700  
                           l5529 36C8                             l5721 22C8  
                           l5633 1C14                             l5625 1BE4  
                           l3859 635C                             l3795 618C  
                           l3787 6170                             l3947 5C64  
                           l5811 2854                             l4579 4BC8  
                           l5395 187C                             l5491 5FAE  
                           l5483 5F70                             l4747 57CE  
                           l4915 4B3A                             l4907 4B2A  
                           l4851 4A14                             l4771 5810  
                           l5707 2204                             l5651 1DAC  
                           l3869 6380                             l3957 5CB4  
                           l3885 558A                             l3973 5324  
                           l5821 28C2                             l4589 4C0E  
                           l4941 5926                             l5389 1862  
                           l5477 5F40                             l4925 4B78  
                           l4837 49D4                             l4829 49BE  
                           l4757 632C                             l5733 2382  
                           l5717 2282                             l5709 2224  
                           l5653 1DF0                             l5637 1C94  
                           l5629 1BFC                             l3983 53C0  
                           l3991 541E                             l4599 4C32  
                           l4951 5974                             l4943 592C  
                           l5495 5FB2                             l5487 5F86  
                           l4687 5E4E                             l4679 5E08  
                           l4919 4B58                             l4863 4A50  
                           l4847 4A06                             l4791 58D4  
                           l5591 3932                             l5751 24CC  
                           l5727 2336                             l5719 22A8  
                           l5663 1E30                             l5833 294A  
                           l5825 28DA                             l4929 4B86  
                           l4881 4ABC                             l4865 4A74  
                           l4785 588A                             l4777 5854  
                           l5577 38D8                             l5737 2410  
                           l5681 1F20                             l5657 1E08  
                           l5673 1EB6                             l5745 2462  
                           l3979 53B0                             l5843 29B0  
                           l5835 2980                             l5819 2884  
                           l4947 593E                             l4859 4A42  
                           l4875 4A9E                             l4795 58F8  
                           l5595 3976                             l5747 246E  
                           l5853 2A0E                             l5781 2528  
                           l4973 5A02                             l4869 4A78  
                           l5669 1E5E                             l5847 29F8  
                           l5775 2502                             l4975 5A0C  
                           l4895 4AE0                             l4887 4ACC  
                           l5695 2056                             l5881 2C24  
                           l5873 2B4C                             l5857 2A6E  
                           l4993 5A88                             l4969 59F8  
                           l4897 4AF0                             l5689 1F8A  
                           l5859 2A92                             l5875 2B92  
                           l4987 5A6A                             l4899 4AF6  
                           l5797 27C4                             l5887 2C94  
                           l4999 5AC6                             STR_1 1010  
                           STR_2 100F                             STR_3 101F  
                           STR_4 1001                             _LATA 000F89  
                           _LATB 000F8A                             _LATC 000F8B  
                           _LATD 000F8C                             _LATE 000F8D  
                           u5105 42C4                             u5050 5FFC  
                           u4500 65A0                             u5125 435E  
                           u5215 3AF0                             u5080 4250  
                           u7000 5A84                             u4610 61EA  
                           u5170 4502                             u5155 43EA  
                           u5500 41DE                             u5245 3BE0  
                           u5270 3C96                             u5190 3A82  
                           u7110 514A                             u5175 44F8  
                           u6055 2D7A                             u5440 40BE  
                           u6400 5DDE                             u4617 61E0  
                           u5290 3DA0                             u5275 3C8C  
                           u5620 330A                             u6420 5E42  
                           u4821 565E                             u5605 3280  
                           u5461 410C                             u8110 1D04  
                           u5615 329A                             u5295 3D96  
                           u6175 310E                             u6407 5DCE  
                           u5625 3300                             u7170 524C  
                           u4755 55AA                             u5715 340A  
                           u6427 5E38                             u8115 1CF8  
                           u4860 56B6                             u4925 5C18  
                           u4781 55F4                             u5725 342C  
                           u5734 344A                             u5670 33A6  
                           u7510 1340                             u5830 63DE  
                           u5735 3444                             u5745 3494  
                           u8225 1FA8                             u5675 339C  
                           u5595 3242                             u4980 5CC4  
                           u7700 19DA                             u5940 4786  
                           u7605 15A8                             u7630 16C4  
                           u8520 29C8                             u7640 16E6  
                           u8425 260E                             u7705 19D0  
                           u8275 21BE                             u8285 220E  
                           u5985 484C                             u8570 2B6C  
                           u7675 1842                             u5995 48A0  
                           u8590 2C04                             u8575 2B60  
                           u8937 4C70                             u8947 4D4E  
                           u8957 6580                             u8967 635E  
                           _WPUB 000F61                             _Fsid 00D2  
                  __CFG_FCMEN$ON 000000                             _Stat 00F7  
                           _main 5CCA                     find_volume@i 0095  
                           fsr0h 000FEA                             fsr1h 000FE2  
                           indf0 000FEF                             fsr0l 000FE9  
                           fsr2h 000FDA                             indf1 000FE7  
                           fsr1l 000FE1                             indf2 000FDF  
                           fsr2l 000FD9                    __CFG_BORV$190 000000  
                  disk_ioctl@cmd 0011                    disk_ioctl@csd 0021  
                  disk_read@buff 0011                    disk_ioctl@res 0036  
                  disk_ioctl@ptr 0038                    disk_read@pdrv 0019  
                           prodh 000FF4                             prodl 000FF3  
                 ??_get_ldnumber 0003                             start 0000  
      __end_of_SPI1_Exchange8bit 66E2                    __CFG_IESO$OFF 000000  
             disk_initialize@cmd 0019                     ?_follow_path 0086  
             disk_initialize@ocr 0013                     ___param_bank 000010  
             disk_initialize@tmr 001B                  create_name@path 000B  
               create_chain@clst 0058                      _sync_window 52B0  
 __size_of_OSCILLATOR_Initialize 000E    __end_of_OSCILLATOR_Initialize 671A  
                          ?_main 0001                  __end_of___lldiv 62BE  
                          _LATB0 007C50                            _LATC0 007C58  
                 __CFG_DEBUG$OFF 000000                            _TRISA 000F92  
                          _TRISB 000F93                            _TRISC 000F94  
                          _TRISD 000F95                            _TRISE 000F96  
                __end_of_f_close 65E2                            _FatFs 0D0A  
                __end_of_chk_chr 64D6               __size_of_SPI1_Open 000E  
                __end_of_f_lseek 2C9C                    __CFG_WRT0$OFF 000000  
                  __CFG_WRT1$OFF 000000                    __CFG_WRT2$OFF 000000  
            ___lmul@multiplicand 0005                    __CFG_WRT3$OFF 000000  
                __end_of_f_mount 5FD2                   __CFG_EBTR0$OFF 000000  
                   ___send_cmd@n 0009                   __CFG_EBTR1$OFF 000000  
                 __CFG_EBTR2$OFF 000000                  __end_of_dir_sdi 48E4  
                 __CFG_EBTR3$OFF 000000                  __end_of_f_write 24E2  
                __end_of_get_fat 45C6                    __CFG_WRTB$OFF 000000  
                  __CFG_WRTC$OFF 000000                    __CFG_WRTD$OFF 000000  
                 __CFG_EBTRB$OFF 000000                  __end_of_mem_cmp 6426  
                __end_of_mem_cpy 5E60                  __end_of_mem_set 6648  
                  find_volume@br 0060                    find_volume@fs 0098  
                  find_volume@pt 007A               __CFG_MCLRE$INTMCLR 000000  
                 disk_ioctl@buff 0012                   disk_read@count 0017  
                          tablat 000FF5                   disk_ioctl@pdrv 0031  
                          plusw2 000FDB                  __end_of_put_fat 3E8A  
                          status 000FD8                   __CFG_HFOFST$ON 000000  
                __end_of_sync_fs 4F76                    get_ldnumber@i 000B  
       __size_of_SPI1_Initialize 000E                  __initialization 65E2  
            disk_initialize@pdrv 0012                     __end_of_main 5D9C  
                   clust2sect@fs 000D                           ??_main 0060  
                  __activetblptr 000003                           _ANSELA 000F38  
                         _ANSELB 000F39                           _ANSELC 000F3A  
                         _ANSELD 000F3B                           _ANSELE 000F3C  
                 __CFG_WDTEN$OFF 000000                           _OSCCON 000FD3  
           __end_of_dir_register 5BF2                 __end_of_check_fs 5B0A  
          SPI1_Exchange8bit@data 0001       __size_of_SPI1_Exchange8bit 0012  
           __size_of_create_name 02B8         __size_of_disk_initialize 0214  
               __end_of_deselect 6726                   __CFG_PWRTEN$ON 000000  
               __end_of_dir_find 5900                   __CFG_XINST$OFF 000000  
              __end_of_SPI1_Open 66F0                 __end_of_dir_next 3160  
                   ?_move_window 0030             __end_of_create_chain 4240  
               __end_of_ld_clust 6340                           ___lmul 6426  
           __size_of_find_volume 0B84             __size_of_disk_status 0014  
                         ___wmul 6672                   __CFG_STVREN$ON 000000  
                      ??___lldiv 0009                           _f_open 3622  
                         _f_sync 5424                        ??_f_close 0050  
                 find_volume@fmt 0097                           clear_0 65EA  
                         clear_1 65FC                   find_volume@rfs 0045  
                      ??_chk_chr 0005                   find_volume@vol 0080  
                         _select 669A                        ??_f_lseek 0073  
                      ??_f_mount 0057                        ??_dir_sdi 0059  
                      ??_f_write 0075                        ??_get_fat 0041  
                         main@bw 00D0                 __end_of_send_cmd 6564  
                      ??_mem_cmp 0007                        ??_mem_cpy 0007  
                      ??_mem_set 0007                  disk_ioctl@csize 0032  
               __end_of_validate 6114             __end_of_get_ldnumber 5A18  
                   __mediumconst 0000                  disk_read@sector 0013  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                 __end_of_st_clust 6672  
                      ??_put_fat 0045                  xmit_datablock@i 0008  
                      ??_sync_fs 003C               rcvr_datablock@buff 0002  
              _SYSTEM_Initialize 66F0                       __accesstop 0060  
        __end_of__initialization 6614                  __CFG_PBADEN$OFF 000000  
                 disk_write@buff 0011                   get_ldnumber@tp 0007  
                 get_ldnumber@tt 000D                   disk_write@pdrv 001A  
             ?_SYSTEM_Initialize 0001                    ___rparam_used 000001  
        __size_of_rcvr_datablock 0074                   __pcstackCOMRAM 0001  
                   __pidataBANK0 6726              ??_SYSTEM_Initialize 0001  
                     ___send_cmd 6114             __size_of_follow_path 01C4  
              ??_SPI1_Initialize 0001               __size_of_dir_alloc 012A  
             __size_of_disk_read 00D8        __end_of_SYSTEM_Initialize 66FE  
                     __pbssBANK0 00D2                  __CFG_PLLCFG$OFF 000000  
               _find_volume$1095 0070                 _find_volume$1096 0074  
             __CFG_CCP2MX$PORTC1 000000                          ?___lmul 0001  
                        ?___wmul 0001               __CFG_CCP3MX$PORTB5 000000  
                        ?_f_open 009A          __size_of_xmit_datablock 008E  
                        ?_f_sync 0045                ??_disk_initialize 0011  
                   ?_sync_window 001B                   ___lmul@product 0009  
                        ?_select 0001                        ?_check_fs 003B  
                     _disk_ioctl 3160                   follow_path@dir 008A  
                        _OSCCON2 000FD2                   follow_path@res 008D  
                     _disk_write 557A                __CFG_PRICLKEN$OFF 000000  
                        _OSCTUNE 000F9B                      send_cmd@cmd 000F  
                      ?_deselect 0001                      send_cmd@arg 000B  
                        _SSP1ADD 000FC8                      send_cmd@res 0010  
                 remove_chain@fs 0056                          _SSP1BUF 000FC9  
                      ?_dir_find 0080                        ?_dir_next 006D  
          __size_of_dir_register 00E8                        ?_ld_clust 0001  
                     _clust2sect 5E60                 sync_window@wsect 002C  
                  ?_remove_chain 0056            __size_of_create_chain 03B6  
              __end_of_dir_alloc 57E6                        ?_send_cmd 000B  
                        __Hparam 0000                   ___send_cmd@cmd 000A  
                 ___send_cmd@arg 0004                   ___send_cmd@res 0008  
                        __Lparam 0000                        ?_validate 0002  
              __end_of_disk_read 5CCA                          ff@FatFs 00D4  
                     f_close@res 0050                  __size_of___lmul 005A  
                      ?_st_clust 0001                      ?___send_cmd 0004  
                        ___lldiv 6232                  __size_of___wmul 0028  
           __size_of_move_window 00AC                       check_fs@fs 003B  
                __size_of_f_open 0450                     __psmallconst 1000  
                __size_of_f_sync 0156                          _f_close 65A6  
          __size_of_get_ldnumber 0118              _disk_initialize$500 0017  
                        __pcinit 65E2                          _chk_chr 6480  
                        _f_lseek 24E2                          __ramtop 1000  
                        _f_mount 5F1C                  __size_of_select 0022  
                        __ptext0 5CCA                          __ptext1 1BAE  
                        __ptext2 3622                          __ptext3 513A  
                        __ptext4 4F76                          __ptext5 62BE  
                        __ptext6 57E6                          __ptext7 63B4  
                        __ptext8 48E4                          __ptext9 6480  
                        _dir_sdi 45C6                      validate@fil 0008  
                        _f_write 1BAE                      validate@obj 0002  
                        _get_fat 4240                       chk_chr@chr 0003  
                   _dir_register 5B0A                       chk_chr@str 0001  
                        _mem_cmp 63B4                          _mem_cpy 5D9C  
          _OSCILLATOR_Initialize 670C                          _mem_set 661A  
                     ??_check_fs 0041                  find_volume@path 0047  
                find_volume@nrsv 0082                  find_volume@stat 008C  
       ??_PIN_MANAGER_Initialize 0001                     _create_chain 3E8A  
                     ??_deselect 0002                       ??_dir_find 0060  
                        _put_fat 3A72                       ??_dir_next 0071  
     __size_of_SYSTEM_Initialize 000E                       f_lseek@bcs 0088  
                     ??_ld_clust 0005                          _sync_fs 4DB0  
                     f_lseek@ofs 006F                       f_lseek@res 0083  
           end_of_initialization 6614                       f_open@mode 009E  
                     f_open@path 009C                   ??_remove_chain 005C  
                disk_status@pdrv 0001                   _rcvr_datablock 6340  
                ___lldiv@divisor 0005                       f_mount@cfs 0058  
                     f_mount@res 0057                       ??_send_cmd 000F  
                     f_mount@opt 0056                       f_mount@vol 005C  
                ___lldiv@counter 000D                     _get_ldnumber 5900  
                     ??_validate 0004                          postdec1 000FE5  
                        postdec2 000FDD                          postinc0 000FEE  
                        postinc1 000FE6                          postinc2 000FDE  
                     ??_st_clust 0007                   move_window@res 003A  
                      _SPI1_Open 66E2                       _wait_ready 6564  
                     dir_alloc@n 0087                 remove_chain@clst 0058  
                     dir_find@dp 0080                  _create_name$991 0011  
                     dir_sdi@idx 0057                       dir_next@dp 006D  
                    ?_disk_ioctl 0011              rcvr_datablock@token 0008  
                     f_write@btw 0071                       f_write@res 0085  
                    ?_disk_write 0011                       get_fat@val 004B  
                get_ldnumber@vol 0009                  disk_write@count 0017  
                    ?_clust2sect 000D              __size_of___send_cmd 0090  
         __end_of_rcvr_datablock 63B4                    ??_create_name 000D  
               disk_initialize@n 001D                       ld_clust@cl 000B  
                     ld_clust@fs 0001                  _SPI1_Initialize 66FE  
                  ??_find_volume 004A                    ??_disk_status 0001  
                 _xmit_datablock 61A4                       ?_SPI1_Open 0001  
                 __end_of___lmul 6480                      st_clust@dir 0001  
                 __end_of___wmul 669A                   __end_of_f_open 3A72  
                 __end_of_f_sync 557A                   clust2sect@clst 000F  
         ?_OSCILLATOR_Initialize 0001                   __end_of_select 66BC  
           __size_of_sync_window 0174              start_initialization 65E2  
__size_of_PIN_MANAGER_Initialize 0048                       mem_cmp@cnt 0005  
                     mem_cmp@dst 0001                       mem_cmp@src 0003  
                     mem_cpy@cnt 0005                      put_fat@clst 003D  
                     mem_cpy@dst 0001                       mem_cpy@src 0003  
                ?_rcvr_datablock 0002                  _disk_initialize 4B9C  
                     mem_set@cnt 0005                       mem_set@dst 0001  
                     mem_set@val 0003           __end_of_xmit_datablock 6232  
                  ??_follow_path 0060              __size_of_disk_ioctl 04C2  
            __end_of_create_name 4B9C              __size_of_disk_write 0142  
                       ??___lmul 0009                         ??___wmul 0005  
                       ??_f_open 009F                         ??_f_sync 0047  
                    ?_wait_ready 0001                      __pdataBANK0 00F7  
            __end_of_find_volume 1BAE              __end_of_disk_status 66D0  
            __size_of_clust2sect 00BC                         ??_select 0004  
           __end_of_remove_chain 52B0                rcvr_datablock@btr 0004  
              rcvr_datablock@tmr 0006                      __pbssBIGRAM 0D0A  
                  __pcstackBANK0 0060                __size_of_check_fs 00F2  
        __end_of_SPI1_Initialize 670C                     check_fs@sect 003D  
              __size_of_deselect 000C                __size_of_dir_find 011A  
              __size_of_dir_next 04C4                __size_of_ld_clust 0082  
         _PIN_MANAGER_Initialize 64D6                  ?_xmit_datablock 0004  
              __size_of_send_cmd 0046                     ??___send_cmd 0008  
                      _dir_alloc 56BC                         ?___lldiv 0001  
              __size_of_validate 0096                      ??_SPI1_Open 0001  
                       ?_f_close 004E                        _disk_read 5BF2  
                       ?_chk_chr 0001                    follow_path@dp 0086  
                       ?_f_lseek 006D                    follow_path@ns 008C  
              __size_of_st_clust 002A              __end_of_follow_path 513A  
                       ?_f_mount 0052                         ?_dir_sdi 0055  
                       ?_f_write 006D                         ?_get_fat 003B  
                    __smallconst 1000                         ?_mem_cmp 0001  
                       ?_mem_cpy 0001                         ?_mem_set 0001  
                      f_close@fp 004E                         ?_put_fat 003B  
        __end_of_disk_initialize 4DB0                         ?_sync_fs 003A  
                    _get_fat$741 0049                find_volume@fasize 008D  
            __size_of_wait_ready 0042               __end_of___send_cmd 61A4  
                    _create_name 48E4                   ___wmul@product 0005  
                      f_lseek@fp 006D                find_volume@szbfat 0076  
                      f_open@dir 00B8                        f_open@res 00B7  
                      f_open@sfn 00A3                find_volume@sysect 007C  
                    _find_volume 102A                      _disk_status 66BC  
                  ??_move_window 0036                        f_mount@fs 0052  
                      f_mount@rp 005A                  follow_path@path 0088  
                  move_window@fs 0030                 __CFG_WDTPS$32768 000000  
                       _SSP1CON1 000FC6                        dir_find@c 0082  
                     ?_dir_alloc 0080                  remove_chain@res 0060  
                remove_chain@nxt 0061                         _SSP1STAT 000FC7  
                      f_sync@dir 004C                        f_sync@res 004B  
                      dir_sdi@ic 0060                        dir_sdi@dp 0055  
                      dir_next@c 0078                        dir_next@i 007A  
                     ?_disk_read 0011                        f_write@cc 0089  
                      f_write@bw 0073                        f_write@fp 006D  
                      get_fat@bc 0053                        get_fat@fs 003B  
                      get_fat@wc 004F                ___wmul@multiplier 0001  
                       _CardType 00D6                     ??_disk_ioctl 0014  
                   ??_disk_write 0019                     f_lseek@ifptr 007F  
                   f_lseek@nsect 0084                       st_clust@cl 0003  
               ?_SPI1_Initialize 0001                     ??_clust2sect 0013  
              ___lmul@multiplier 0001                      _INTCON2bits 000FF1  
                     put_fat@res 0053                       put_fat@val 0041  
              move_window@sector 0032                  dir_next@stretch 006F  
                       __Hrparam 0000                         __Lrparam 0000  
                    _follow_path 4F76               __CFG_BOREN$SBORDIS 000000  
             __end_of_disk_ioctl 3622            __size_of_remove_chain 0176  
              __CFG_P2BMX$PORTD2 000000               __end_of_disk_write 56BC  
        ??_OSCILLATOR_Initialize 0001                 __size_of___lldiv 008C  
            __end_of_move_window 607E               __end_of_clust2sect 5F1C  
               __size_of_f_close 003C                 __size_of_chk_chr 0056  
               __size_of_f_lseek 07BA                 __size_of_f_mount 00B6  
               __size_of_dir_sdi 031E                 __size_of_f_write 0934  
               __size_of_get_fat 0386                _get_ldnumber$1015 0005  
                       _check_fs 5A18                 __size_of_mem_cmp 0072  
               __size_of_mem_cpy 00C4                 __size_of_mem_set 002E  
            xmit_datablock@token 0007                 ??_rcvr_datablock 0006  
                dir_register@res 008C                         _deselect 671A  
                       __ptext10 5B0A                         __ptext11 5D9C  
                       __ptext20 5A18                         __ptext12 56BC  
                       __ptext21 24E2                         __ptext13 45C6  
                       __ptext30 607E                         __ptext22 3E8A  
                       __ptext14 2C9C                         __ptext31 66BC  
                       __ptext23 3A72                         __ptext15 5F1C  
                       __ptext40 61A4                         __ptext32 4DB0  
                       __ptext24 4240                         __ptext16 102A  
                       __ptext41 5BF2                         __ptext33 661A  
                       __ptext25 5E60                         __ptext17 5900  
                       __ptext50 66FE                         __ptext42 651E  
                       __ptext34 3160                         __ptext26 6426  
                       __ptext18 4B9C                         __ptext51 64D6  
                       __ptext43 6114                         __ptext35 6672  
                       __ptext27 6232                         __ptext19 66E2  
                       __ptext52 670C                         __ptext44 669A  
                       __ptext36 6648                         __ptext28 65A6  
                       __ptext45 6564                         __ptext37 5FD2  
                       __ptext29 5424                         __ptext46 671A  
                       __ptext38 52B0                         __ptext47 6340  
                       __ptext39 557A                         __ptext48 66D0  
                       __ptext49 66F0                         _dir_find 57E6  
                   _SSP1CON1bits 000FC6                         _dir_next 2C9C  
                  dir_alloc@nent 0082                 ?_disk_initialize 0001  
                       _ld_clust 62BE                 __size_of_put_fat 0418  
                 sync_window@res 0029                 __size_of_sync_fs 01C6  
                  __size_of_main 00D2                       sync_fs@res 0044  
                   _remove_chain 513A                 find_volume@bsect 0091  
               find_volume@nclst 0088                 find_volume@tsect 0084  
               find_volume@wmode 0049                         f_open@dj 00BA  
                       f_open@cl 00AF                         f_open@fp 009A  
                       f_open@dw 00B3                         _send_cmd 651E  
                       _validate 607E                         f_sync@fp 0045  
                       f_sync@tm 0047                      ??_dir_alloc 0084  
                       _st_clust 6648                         get_fat@p 0051  
                   ??_wait_ready 0002                    ??_sync_window 001D  
                   _SSP1STATbits 000FC7                      ??_disk_read 0019  
                  _disk_read$510 001A                      f_lseek@clst 008C  
                       mem_cmp@d 000A                         mem_cmp@r 000E  
                       mem_cmp@s 000C                        put_fat@bc 0051  
                       mem_cpy@d 0009                        put_fat@fs 003B  
                       mem_cpy@s 000B                         mem_set@d 0007  
                  wait_ready@tmr 0002               xmit_datablock@buff 0004  
             xmit_datablock@resp 000A                   dir_register@dp 008A  
               ??_xmit_datablock 0008               __end_of_wait_ready 65A6  
               ___lldiv@dividend 0001          ?_PIN_MANAGER_Initialize 0001  
                   dir_alloc@res 0089                    sync_window@fs 001B  
                  sync_window@nf 002A                      f_mount@path 0054  
                      sync_fs@fs 003A                      _move_window 5FD2  
                       put_fat@p 0054                    ?_dir_register 008A  
                    dir_alloc@dp 0080                 ___lldiv@quotient 0009  
                    dir_find@dir 0083              __end_of_sync_window 5424  
                    dir_find@res 0085                    ?_create_chain 0056  
              __CFG_T3CMX$PORTC0 000000                     dir_next@clst 007C  
                    dir_sdi@clst 0066   __end_of_PIN_MANAGER_Initialize 651E  
                    dir_sdi@sect 0062                     ?_create_name 0009  
              __CFG_FOSC$INTIO67 000000                     f_write@csect 0088  
                   f_write@wbuff 0086                      f_write@buff 006F  
                    f_write@clst 008F                      f_write@sect 008B  
                   ?_find_volume 0045                      f_write@wcnt 0093  
                  ?_get_ldnumber 0001                     ?_disk_status 0001  
                    _put_fat$767 004D                      _put_fat$768 004F  
