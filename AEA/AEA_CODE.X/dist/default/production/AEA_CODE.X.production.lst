

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Jul 25 04:31:23 2019

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    67                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    68  0000                     
    69                           	psect	idataBANK0
    70  006748                     __pidataBANK0:
    71                           	opt stack 0
    72                           
    73                           ;initializer for _Stat
    74  006748  01                 	db	1
    75  0000                     _ANSELA	set	3896
    76  0000                     _ANSELB	set	3897
    77  0000                     _ANSELC	set	3898
    78  0000                     _ANSELD	set	3899
    79  0000                     _ANSELE	set	3900
    80  0000                     _INTCON2bits	set	4081
    81  0000                     _LATA	set	3977
    82  0000                     _LATB	set	3978
    83  0000                     _LATC	set	3979
    84  0000                     _LATD	set	3980
    85  0000                     _LATE	set	3981
    86  0000                     _OSCCON	set	4051
    87  0000                     _OSCCON2	set	4050
    88  0000                     _OSCTUNE	set	3995
    89  0000                     _SSP1ADD	set	4040
    90  0000                     _SSP1BUF	set	4041
    91  0000                     _SSP1CON1	set	4038
    92  0000                     _SSP1CON1bits	set	4038
    93  0000                     _SSP1STAT	set	4039
    94  0000                     _SSP1STATbits	set	4039
    95  0000                     _TRISA	set	3986
    96  0000                     _TRISB	set	3987
    97  0000                     _TRISC	set	3988
    98  0000                     _TRISD	set	3989
    99  0000                     _TRISE	set	3990
   100  0000                     _WPUB	set	3937
   101  0000                     _LATC0	set	31832
   102                           
   103                           	psect	smallconst
   104  001000                     __psmallconst:
   105                           	opt stack 0
   106  001000  00                 	db	0
   107  001001                     STR_3:
   108  001001  48                 	db	72	;'H'
   109  001002  65                 	db	101	;'e'
   110  001003  6C                 	db	108	;'l'
   111  001004  6C                 	db	108	;'l'
   112  001005  6F                 	db	111	;'o'
   113  001006  20                 	db	32
   114  001007  77                 	db	119	;'w'
   115  001008  6F                 	db	111	;'o'
   116  001009  72                 	db	114	;'r'
   117  00100A  6C                 	db	108	;'l'
   118  00100B  64                 	db	100	;'d'
   119  00100C  21                 	db	33
   120  00100D  20                 	db	32
   121  00100E  54                 	db	84	;'T'
   122  00100F  68                 	db	104	;'h'
   123  001010  69                 	db	105	;'i'
   124  001011  73                 	db	115	;'s'
   125  001012  20                 	db	32
   126  001013  69                 	db	105	;'i'
   127  001014  73                 	db	115	;'s'
   128  001015  20                 	db	32
   129  001016  74                 	db	116	;'t'
   130  001017  65                 	db	101	;'e'
   131  001018  78                 	db	120	;'x'
   132  001019  74                 	db	116	;'t'
   133  00101A  20                 	db	32
   134  00101B  6D                 	db	109	;'m'
   135  00101C  65                 	db	101	;'e'
   136  00101D  73                 	db	115	;'s'
   137  00101E  73                 	db	115	;'s'
   138  00101F  61                 	db	97	;'a'
   139  001020  67                 	db	103	;'g'
   140  001021  65                 	db	101	;'e'
   141  001022  20                 	db	32
   142  001023  77                 	db	119	;'w'
   143  001024  72                 	db	114	;'r'
   144  001025  69                 	db	105	;'i'
   145  001026  74                 	db	116	;'t'
   146  001027  74                 	db	116	;'t'
   147  001028  65                 	db	101	;'e'
   148  001029  6E                 	db	110	;'n'
   149  00102A  20                 	db	32
   150  00102B  74                 	db	116	;'t'
   151  00102C  6F                 	db	111	;'o'
   152  00102D  20                 	db	32
   153  00102E  73                 	db	115	;'s'
   154  00102F  64                 	db	100	;'d'
   155  001030  20                 	db	32
   156  001031  63                 	db	99	;'c'
   157  001032  61                 	db	97	;'a'
   158  001033  72                 	db	114	;'r'
   159  001034  64                 	db	100	;'d'
   160  001035  0D                 	db	13
   161  001036  0A                 	db	10
   162  001037  00                 	db	0
   163  001038                     STR_4:
   164  001038  22                 	db	34
   165  001039  2A                 	db	42
   166  00103A  2B                 	db	43
   167  00103B  2C                 	db	44
   168  00103C  3A                 	db	58	;':'
   169  00103D  3B                 	db	59	;';'
   170  00103E  3C                 	db	60	;'<'
   171  00103F  3D                 	db	61	;'='
   172  001040  3E                 	db	62	;'>'
   173  001041  3F                 	db	63	;'?'
   174  001042  5B                 	db	91	;'['
   175  001043  5D                 	db	93	;']'
   176  001044  7C                 	db	124
   177  001045  7F                 	db	127
   178  001046  00                 	db	0
   179  001047                     STR_2:
   180  001047  74                 	db	116	;'t'
   181  001048  65                 	db	101	;'e'
   182  001049  73                 	db	115	;'s'
   183  00104A  74                 	db	116	;'t'
   184  00104B  2E                 	db	46
   185  00104C  74                 	db	116	;'t'
   186  00104D  78                 	db	120	;'x'
   187  00104E  74                 	db	116	;'t'
   188  00104F  00                 	db	0
   189  0000                     
   190                           ; #config settings
   191  001050  00                 	db	0	; dummy byte at the end
   192  0000                     
   193                           	psect	cinit
   194  006604                     __pcinit:
   195                           	opt stack 0
   196  006604                     start_initialization:
   197                           	opt stack 0
   198  006604                     __initialization:
   199                           	opt stack 0
   200                           
   201                           ; Clear objects allocated to BIGRAM (558 bytes)
   202  006604  EE0D  F00A         	lfsr	0,__pbssBIGRAM
   203  006608  EE12 F02E          	lfsr	1,558
   204  00660C                     clear_0:
   205  00660C  6AEE               	clrf	postinc0,c
   206  00660E  50E5               	movf	postdec1,w,c
   207  006610  50E1               	movf	fsr1l,w,c
   208  006612  E1FC               	bnz	clear_0
   209  006614  50E2               	movf	fsr1h,w,c
   210  006616  E1FA               	bnz	clear_0
   211                           
   212                           ; Clear objects allocated to BANK0 (37 bytes)
   213  006618  EE00  F0D2         	lfsr	0,__pbssBANK0
   214  00661C  0E25               	movlw	37
   215  00661E                     clear_1:
   216  00661E  6AEE               	clrf	postinc0,c
   217  006620  06E8               	decf	wreg,f,c
   218  006622  E1FD               	bnz	clear_1
   219                           
   220                           ; Initialize objects allocated to BANK0 (1 bytes)
   221                           ; load TBLPTR registers with __pidataBANK0
   222  006624  0E48               	movlw	low __pidataBANK0
   223  006626  6EF6               	movwf	tblptrl,c
   224  006628  0E67               	movlw	high __pidataBANK0
   225  00662A  6EF7               	movwf	tblptrh,c
   226  00662C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   227  00662E  6EF8               	movwf	tblptru,c
   228  006630  0009               	tblrd		*+	;fetch initializer
   229  006632  CFF5 F0F7          	movff	tablat,__pdataBANK0
   230  006636                     end_of_initialization:
   231                           	opt stack 0
   232  006636                     __end_of__initialization:
   233                           	opt stack 0
   234  006636  0100               	movlb	0
   235  006638  EF79  F02E         	goto	_main	;jump to C main() function
   236                           tblptru	equ	0xFF8
   237                           tblptrh	equ	0xFF7
   238                           tblptrl	equ	0xFF6
   239                           tablat	equ	0xFF5
   240                           postinc0	equ	0xFEE
   241                           wreg	equ	0xFE8
   242                           postdec1	equ	0xFE5
   243                           fsr1h	equ	0xFE2
   244                           fsr1l	equ	0xFE1
   245                           
   246                           	psect	bssBANK0
   247  0000D2                     __pbssBANK0:
   248                           	opt stack 0
   249  0000D2                     _Fsid:
   250                           	opt stack 0
   251  0000D2                     	ds	2
   252  0000D4                     ff@FatFs:
   253                           	opt stack 0
   254  0000D4                     	ds	2
   255  0000D6                     _CardType:
   256                           	opt stack 0
   257  0000D6                     	ds	1
   258  0000D7                     _Fil:
   259                           	opt stack 0
   260  0000D7                     	ds	32
   261                           tblptru	equ	0xFF8
   262                           tblptrh	equ	0xFF7
   263                           tblptrl	equ	0xFF6
   264                           tablat	equ	0xFF5
   265                           postinc0	equ	0xFEE
   266                           wreg	equ	0xFE8
   267                           postdec1	equ	0xFE5
   268                           fsr1h	equ	0xFE2
   269                           fsr1l	equ	0xFE1
   270                           
   271                           	psect	dataBANK0
   272  0000F7                     __pdataBANK0:
   273                           	opt stack 0
   274  0000F7                     _Stat:
   275                           	opt stack 0
   276  0000F7                     	ds	1
   277                           tblptru	equ	0xFF8
   278                           tblptrh	equ	0xFF7
   279                           tblptrl	equ	0xFF6
   280                           tablat	equ	0xFF5
   281                           postinc0	equ	0xFEE
   282                           wreg	equ	0xFE8
   283                           postdec1	equ	0xFE5
   284                           fsr1h	equ	0xFE2
   285                           fsr1l	equ	0xFE1
   286                           
   287                           	psect	bssBIGRAM
   288  000D0A                     __pbssBIGRAM:
   289                           	opt stack 0
   290  000D0A                     _FatFs:
   291                           	opt stack 0
   292  000D0A                     	ds	558
   293                           tblptru	equ	0xFF8
   294                           tblptrh	equ	0xFF7
   295                           tblptrl	equ	0xFF6
   296                           tablat	equ	0xFF5
   297                           postinc0	equ	0xFEE
   298                           wreg	equ	0xFE8
   299                           postdec1	equ	0xFE5
   300                           fsr1h	equ	0xFE2
   301                           fsr1l	equ	0xFE1
   302                           
   303                           	psect	cstackBANK0
   304  000060                     __pcstackBANK0:
   305                           	opt stack 0
   306  000060                     remove_chain@res:
   307                           	opt stack 0
   308  000060                     create_chain@res:
   309                           	opt stack 0
   310  000060                     dir_sdi@ic:
   311                           	opt stack 0
   312  000060                     find_volume@br:
   313                           	opt stack 0
   314                           
   315                           ; 16 bytes @ 0x0
   316  000060                     	ds	1
   317  000061                     remove_chain@nxt:
   318                           	opt stack 0
   319  000061                     create_chain@scl:
   320                           	opt stack 0
   321                           
   322                           ; 4 bytes @ 0x1
   323  000061                     	ds	1
   324  000062                     dir_sdi@sect:
   325                           	opt stack 0
   326                           
   327                           ; 4 bytes @ 0x2
   328  000062                     	ds	3
   329  000065                     create_chain@ncl:
   330                           	opt stack 0
   331                           
   332                           ; 4 bytes @ 0x5
   333  000065                     	ds	1
   334  000066                     dir_sdi@clst:
   335                           	opt stack 0
   336                           
   337                           ; 4 bytes @ 0x6
   338  000066                     	ds	3
   339  000069                     create_chain@cs:
   340                           	opt stack 0
   341                           
   342                           ; 4 bytes @ 0x9
   343  000069                     	ds	4
   344  00006D                     dir_next@dp:
   345                           	opt stack 0
   346  00006D                     f_write@fp:
   347                           	opt stack 0
   348  00006D                     f_lseek@fp:
   349                           	opt stack 0
   350                           
   351                           ; 2 bytes @ 0xD
   352  00006D                     	ds	2
   353  00006F                     dir_next@stretch:
   354                           	opt stack 0
   355  00006F                     f_write@buff:
   356                           	opt stack 0
   357  00006F                     f_lseek@ofs:
   358                           	opt stack 0
   359                           
   360                           ; 4 bytes @ 0xF
   361  00006F                     	ds	1
   362  000070                     _find_volume$804:
   363                           	opt stack 0
   364                           
   365                           ; 4 bytes @ 0x10
   366  000070                     	ds	1
   367  000071                     ??_dir_next:
   368  000071                     f_write@btw:
   369                           	opt stack 0
   370                           
   371                           ; 2 bytes @ 0x11
   372  000071                     	ds	2
   373  000073                     ??_f_lseek:
   374  000073                     f_write@bw:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x13
   378  000073                     	ds	1
   379  000074                     _find_volume$805:
   380                           	opt stack 0
   381                           
   382                           ; 2 bytes @ 0x14
   383  000074                     	ds	1
   384  000075                     ??_f_write:
   385                           
   386                           ; 0 bytes @ 0x15
   387  000075                     	ds	1
   388  000076                     find_volume@szbfat:
   389                           	opt stack 0
   390                           
   391                           ; 4 bytes @ 0x16
   392  000076                     	ds	2
   393  000078                     dir_next@c:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x18
   397  000078                     	ds	2
   398  00007A                     dir_next@i:
   399                           	opt stack 0
   400  00007A                     find_volume@pt:
   401                           	opt stack 0
   402                           
   403                           ; 2 bytes @ 0x1A
   404  00007A                     	ds	2
   405  00007C                     dir_next@clst:
   406                           	opt stack 0
   407  00007C                     find_volume@sysect:
   408                           	opt stack 0
   409                           
   410                           ; 4 bytes @ 0x1C
   411  00007C                     	ds	3
   412  00007F                     f_lseek@ifptr:
   413                           	opt stack 0
   414                           
   415                           ; 4 bytes @ 0x1F
   416  00007F                     	ds	1
   417  000080                     dir_alloc@dp:
   418                           	opt stack 0
   419  000080                     dir_find@dp:
   420                           	opt stack 0
   421  000080                     find_volume@vol:
   422                           	opt stack 0
   423                           
   424                           ; 2 bytes @ 0x20
   425  000080                     	ds	2
   426  000082                     dir_find@c:
   427                           	opt stack 0
   428  000082                     dir_alloc@nent:
   429                           	opt stack 0
   430  000082                     find_volume@nrsv:
   431                           	opt stack 0
   432                           
   433                           ; 2 bytes @ 0x22
   434  000082                     	ds	1
   435  000083                     f_lseek@res:
   436                           	opt stack 0
   437  000083                     dir_find@dir:
   438                           	opt stack 0
   439                           
   440                           ; 2 bytes @ 0x23
   441  000083                     	ds	1
   442  000084                     ??_dir_alloc:
   443  000084                     find_volume@tsect:
   444                           	opt stack 0
   445  000084                     f_lseek@nsect:
   446                           	opt stack 0
   447                           
   448                           ; 4 bytes @ 0x24
   449  000084                     	ds	1
   450  000085                     dir_find@res:
   451                           	opt stack 0
   452  000085                     f_write@res:
   453                           	opt stack 0
   454                           
   455                           ; 1 bytes @ 0x25
   456  000085                     	ds	1
   457  000086                     follow_path@dp:
   458                           	opt stack 0
   459  000086                     f_write@wbuff:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0x26
   463  000086                     	ds	1
   464  000087                     dir_alloc@n:
   465                           	opt stack 0
   466                           
   467                           ; 2 bytes @ 0x27
   468  000087                     	ds	1
   469  000088                     f_write@csect:
   470                           	opt stack 0
   471  000088                     follow_path@path:
   472                           	opt stack 0
   473  000088                     find_volume@nclst:
   474                           	opt stack 0
   475  000088                     f_lseek@bcs:
   476                           	opt stack 0
   477                           
   478                           ; 4 bytes @ 0x28
   479  000088                     	ds	1
   480  000089                     dir_alloc@res:
   481                           	opt stack 0
   482  000089                     f_write@cc:
   483                           	opt stack 0
   484                           
   485                           ; 2 bytes @ 0x29
   486  000089                     	ds	1
   487  00008A                     dir_register@dp:
   488                           	opt stack 0
   489  00008A                     follow_path@dir:
   490                           	opt stack 0
   491                           
   492                           ; 2 bytes @ 0x2A
   493  00008A                     	ds	1
   494  00008B                     f_write@sect:
   495                           	opt stack 0
   496                           
   497                           ; 4 bytes @ 0x2B
   498  00008B                     	ds	1
   499  00008C                     dir_register@res:
   500                           	opt stack 0
   501  00008C                     follow_path@ns:
   502                           	opt stack 0
   503  00008C                     find_volume@stat:
   504                           	opt stack 0
   505  00008C                     f_lseek@clst:
   506                           	opt stack 0
   507                           
   508                           ; 4 bytes @ 0x2C
   509  00008C                     	ds	1
   510  00008D                     follow_path@res:
   511                           	opt stack 0
   512  00008D                     find_volume@fasize:
   513                           	opt stack 0
   514                           
   515                           ; 4 bytes @ 0x2D
   516  00008D                     	ds	2
   517  00008F                     f_write@clst:
   518                           	opt stack 0
   519                           
   520                           ; 4 bytes @ 0x2F
   521  00008F                     	ds	2
   522  000091                     find_volume@bsect:
   523                           	opt stack 0
   524                           
   525                           ; 4 bytes @ 0x31
   526  000091                     	ds	2
   527  000093                     f_write@wcnt:
   528                           	opt stack 0
   529                           
   530                           ; 2 bytes @ 0x33
   531  000093                     	ds	2
   532  000095                     find_volume@i:
   533                           	opt stack 0
   534                           
   535                           ; 2 bytes @ 0x35
   536  000095                     	ds	2
   537  000097                     find_volume@fmt:
   538                           	opt stack 0
   539                           
   540                           ; 1 bytes @ 0x37
   541  000097                     	ds	1
   542  000098                     find_volume@fs:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x38
   546  000098                     	ds	2
   547  00009A                     f_open@fp:
   548                           	opt stack 0
   549                           
   550                           ; 2 bytes @ 0x3A
   551  00009A                     	ds	2
   552  00009C                     f_open@path:
   553                           	opt stack 0
   554                           
   555                           ; 2 bytes @ 0x3C
   556  00009C                     	ds	2
   557  00009E                     f_open@mode:
   558                           	opt stack 0
   559                           
   560                           ; 1 bytes @ 0x3E
   561  00009E                     	ds	1
   562  00009F                     ??_f_open:
   563                           
   564                           ; 0 bytes @ 0x3F
   565  00009F                     	ds	4
   566  0000A3                     f_open@sfn:
   567                           	opt stack 0
   568                           
   569                           ; 12 bytes @ 0x43
   570  0000A3                     	ds	12
   571  0000AF                     f_open@cl:
   572                           	opt stack 0
   573                           
   574                           ; 4 bytes @ 0x4F
   575  0000AF                     	ds	4
   576  0000B3                     f_open@dw:
   577                           	opt stack 0
   578                           
   579                           ; 4 bytes @ 0x53
   580  0000B3                     	ds	4
   581  0000B7                     f_open@res:
   582                           	opt stack 0
   583                           
   584                           ; 1 bytes @ 0x57
   585  0000B7                     	ds	1
   586  0000B8                     f_open@dir:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0x58
   590  0000B8                     	ds	2
   591  0000BA                     f_open@dj:
   592                           	opt stack 0
   593                           
   594                           ; 22 bytes @ 0x5A
   595  0000BA                     	ds	22
   596  0000D0                     main@bw:
   597                           	opt stack 0
   598                           
   599                           ; 2 bytes @ 0x70
   600  0000D0                     	ds	2
   601                           tblptru	equ	0xFF8
   602                           tblptrh	equ	0xFF7
   603                           tblptrl	equ	0xFF6
   604                           tablat	equ	0xFF5
   605                           postinc0	equ	0xFEE
   606                           wreg	equ	0xFE8
   607                           postdec1	equ	0xFE5
   608                           fsr1h	equ	0xFE2
   609                           fsr1l	equ	0xFE1
   610                           
   611                           	psect	cstackCOMRAM
   612  000001                     __pcstackCOMRAM:
   613                           	opt stack 0
   614  000001                     ?_mem_cmp:
   615                           	opt stack 0
   616  000001                     ?_chk_chr:
   617                           	opt stack 0
   618  000001                     ?_get_ldnumber:
   619                           	opt stack 0
   620  000001                     ?___wmul:
   621                           	opt stack 0
   622  000001                     ?_ld_clust:
   623                           	opt stack 0
   624  000001                     ?___lmul:
   625                           	opt stack 0
   626  000001                     ?___lldiv:
   627                           	opt stack 0
   628  000001                     disk_status@pdrv:
   629                           	opt stack 0
   630  000001                     SPI1_Exchange8bit@data:
   631                           	opt stack 0
   632  000001                     mem_cpy@dst:
   633                           	opt stack 0
   634  000001                     mem_set@dst:
   635                           	opt stack 0
   636  000001                     mem_cmp@dst:
   637                           	opt stack 0
   638  000001                     chk_chr@str:
   639                           	opt stack 0
   640  000001                     ld_clust@fs:
   641                           	opt stack 0
   642  000001                     st_clust@dir:
   643                           	opt stack 0
   644  000001                     get_ldnumber@path:
   645                           	opt stack 0
   646  000001                     ___wmul@multiplier:
   647                           	opt stack 0
   648  000001                     ___lmul@multiplier:
   649                           	opt stack 0
   650  000001                     ___lldiv@dividend:
   651                           	opt stack 0
   652                           
   653                           ; 4 bytes @ 0x0
   654  000001                     	ds	1
   655  000002                     wait_ready@tmr:
   656                           	opt stack 0
   657  000002                     rcvr_datablock@buff:
   658                           	opt stack 0
   659  000002                     validate@obj:
   660                           	opt stack 0
   661                           
   662                           ; 2 bytes @ 0x1
   663  000002                     	ds	1
   664  000003                     ??_get_ldnumber:
   665  000003                     mem_cpy@src:
   666                           	opt stack 0
   667  000003                     mem_set@val:
   668                           	opt stack 0
   669  000003                     mem_cmp@src:
   670                           	opt stack 0
   671  000003                     chk_chr@chr:
   672                           	opt stack 0
   673  000003                     ld_clust@dir:
   674                           	opt stack 0
   675  000003                     ___wmul@multiplicand:
   676                           	opt stack 0
   677  000003                     st_clust@cl:
   678                           	opt stack 0
   679                           
   680                           ; 4 bytes @ 0x2
   681  000003                     	ds	1
   682  000004                     ??_validate:
   683  000004                     rcvr_datablock@btr:
   684                           	opt stack 0
   685  000004                     xmit_datablock@buff:
   686                           	opt stack 0
   687  000004                     ___send_cmd@arg:
   688                           	opt stack 0
   689                           
   690                           ; 4 bytes @ 0x3
   691  000004                     	ds	1
   692  000005                     ??_chk_chr:
   693  000005                     ??_ld_clust:
   694  000005                     mem_cpy@cnt:
   695                           	opt stack 0
   696  000005                     mem_set@cnt:
   697                           	opt stack 0
   698  000005                     mem_cmp@cnt:
   699                           	opt stack 0
   700  000005                     _get_ldnumber$724:
   701                           	opt stack 0
   702  000005                     ___wmul@product:
   703                           	opt stack 0
   704  000005                     ___lmul@multiplicand:
   705                           	opt stack 0
   706  000005                     ___lldiv@divisor:
   707                           	opt stack 0
   708                           
   709                           ; 4 bytes @ 0x4
   710  000005                     	ds	1
   711  000006                     rcvr_datablock@tmr:
   712                           	opt stack 0
   713                           
   714                           ; 2 bytes @ 0x5
   715  000006                     	ds	1
   716  000007                     ??_mem_cpy:
   717  000007                     ??_mem_cmp:
   718  000007                     xmit_datablock@token:
   719                           	opt stack 0
   720  000007                     mem_set@d:
   721                           	opt stack 0
   722  000007                     get_ldnumber@tp:
   723                           	opt stack 0
   724                           
   725                           ; 2 bytes @ 0x6
   726  000007                     	ds	1
   727  000008                     rcvr_datablock@token:
   728                           	opt stack 0
   729  000008                     ___send_cmd@res:
   730                           	opt stack 0
   731  000008                     xmit_datablock@i:
   732                           	opt stack 0
   733  000008                     validate@fil:
   734                           	opt stack 0
   735                           
   736                           ; 2 bytes @ 0x7
   737  000008                     	ds	1
   738  000009                     ___send_cmd@n:
   739                           	opt stack 0
   740  000009                     mem_cpy@d:
   741                           	opt stack 0
   742  000009                     create_name@dp:
   743                           	opt stack 0
   744  000009                     get_ldnumber@vol:
   745                           	opt stack 0
   746  000009                     ___lmul@product:
   747                           	opt stack 0
   748  000009                     ___lldiv@quotient:
   749                           	opt stack 0
   750                           
   751                           ; 4 bytes @ 0x8
   752  000009                     	ds	1
   753  00000A                     xmit_datablock@resp:
   754                           	opt stack 0
   755  00000A                     ___send_cmd@cmd:
   756                           	opt stack 0
   757  00000A                     mem_cmp@d:
   758                           	opt stack 0
   759                           
   760                           ; 2 bytes @ 0x9
   761  00000A                     	ds	1
   762  00000B                     mem_cpy@s:
   763                           	opt stack 0
   764  00000B                     create_name@path:
   765                           	opt stack 0
   766  00000B                     get_ldnumber@i:
   767                           	opt stack 0
   768  00000B                     send_cmd@arg:
   769                           	opt stack 0
   770  00000B                     ld_clust@cl:
   771                           	opt stack 0
   772                           
   773                           ; 4 bytes @ 0xA
   774  00000B                     	ds	1
   775  00000C                     mem_cmp@s:
   776                           	opt stack 0
   777                           
   778                           ; 2 bytes @ 0xB
   779  00000C                     	ds	1
   780  00000D                     ??_create_name:
   781  00000D                     ?_clust2sect:
   782                           	opt stack 0
   783  00000D                     ___lldiv@counter:
   784                           	opt stack 0
   785  00000D                     clust2sect@fs:
   786                           	opt stack 0
   787  00000D                     get_ldnumber@tt:
   788                           	opt stack 0
   789                           
   790                           ; 2 bytes @ 0xC
   791  00000D                     	ds	1
   792  00000E                     mem_cmp@r:
   793                           	opt stack 0
   794                           
   795                           ; 2 bytes @ 0xD
   796  00000E                     	ds	1
   797  00000F                     send_cmd@cmd:
   798                           	opt stack 0
   799  00000F                     clust2sect@clst:
   800                           	opt stack 0
   801                           
   802                           ; 4 bytes @ 0xE
   803  00000F                     	ds	1
   804  000010                     send_cmd@res:
   805                           	opt stack 0
   806                           
   807                           ; 1 bytes @ 0xF
   808  000010                     	ds	1
   809  000011                     ??_disk_initialize:
   810  000011                     disk_ioctl@cmd:
   811                           	opt stack 0
   812  000011                     disk_read@buff:
   813                           	opt stack 0
   814  000011                     disk_write@buff:
   815                           	opt stack 0
   816  000011                     _create_name$700:
   817                           	opt stack 0
   818                           
   819                           ; 2 bytes @ 0x10
   820  000011                     	ds	1
   821  000012                     disk_initialize@pdrv:
   822                           	opt stack 0
   823  000012                     disk_ioctl@buff:
   824                           	opt stack 0
   825                           
   826                           ; 2 bytes @ 0x11
   827  000012                     	ds	1
   828  000013                     ??_clust2sect:
   829  000013                     create_name@si:
   830                           	opt stack 0
   831  000013                     disk_initialize@ocr:
   832                           	opt stack 0
   833  000013                     disk_read@sector:
   834                           	opt stack 0
   835  000013                     disk_write@sector:
   836                           	opt stack 0
   837                           
   838                           ; 4 bytes @ 0x12
   839  000013                     	ds	1
   840  000014                     ??_disk_ioctl:
   841                           
   842                           ; 0 bytes @ 0x13
   843  000014                     	ds	1
   844  000015                     create_name@b:
   845                           	opt stack 0
   846                           
   847                           ; 1 bytes @ 0x14
   848  000015                     	ds	1
   849  000016                     create_name@ni:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0x15
   853  000016                     	ds	1
   854  000017                     _disk_initialize$209:
   855                           	opt stack 0
   856  000017                     disk_read@count:
   857                           	opt stack 0
   858  000017                     disk_write@count:
   859                           	opt stack 0
   860                           
   861                           ; 2 bytes @ 0x16
   862  000017                     	ds	1
   863  000018                     create_name@p:
   864                           	opt stack 0
   865                           
   866                           ; 2 bytes @ 0x17
   867  000018                     	ds	1
   868  000019                     ??_disk_write:
   869  000019                     disk_initialize@cmd:
   870                           	opt stack 0
   871  000019                     disk_read@pdrv:
   872                           	opt stack 0
   873                           
   874                           ; 1 bytes @ 0x18
   875  000019                     	ds	1
   876  00001A                     disk_initialize@ty:
   877                           	opt stack 0
   878  00001A                     disk_write@pdrv:
   879                           	opt stack 0
   880  00001A                     create_name@d:
   881                           	opt stack 0
   882  00001A                     _disk_read$218:
   883                           	opt stack 0
   884                           
   885                           ; 2 bytes @ 0x19
   886  00001A                     	ds	1
   887  00001B                     disk_initialize@tmr:
   888                           	opt stack 0
   889  00001B                     sync_window@fs:
   890                           	opt stack 0
   891  00001B                     create_name@sfn:
   892                           	opt stack 0
   893                           
   894                           ; 2 bytes @ 0x1A
   895  00001B                     	ds	1
   896  00001C                     disk_read@cmd:
   897                           	opt stack 0
   898                           
   899                           ; 1 bytes @ 0x1B
   900  00001C                     	ds	1
   901  00001D                     ??_sync_window:
   902  00001D                     disk_initialize@n:
   903                           	opt stack 0
   904  00001D                     create_name@i:
   905                           	opt stack 0
   906                           
   907                           ; 2 bytes @ 0x1C
   908  00001D                     	ds	2
   909  00001F                     create_name@c:
   910                           	opt stack 0
   911                           
   912                           ; 1 bytes @ 0x1E
   913  00001F                     	ds	2
   914  000021                     disk_ioctl@csd:
   915                           	opt stack 0
   916                           
   917                           ; 16 bytes @ 0x20
   918  000021                     	ds	8
   919  000029                     sync_window@res:
   920                           	opt stack 0
   921                           
   922                           ; 1 bytes @ 0x28
   923  000029                     	ds	1
   924  00002A                     sync_window@nf:
   925                           	opt stack 0
   926                           
   927                           ; 2 bytes @ 0x29
   928  00002A                     	ds	2
   929  00002C                     sync_window@wsect:
   930                           	opt stack 0
   931                           
   932                           ; 4 bytes @ 0x2B
   933  00002C                     	ds	4
   934  000030                     move_window@fs:
   935                           	opt stack 0
   936                           
   937                           ; 2 bytes @ 0x2F
   938  000030                     	ds	1
   939  000031                     disk_ioctl@pdrv:
   940                           	opt stack 0
   941                           
   942                           ; 1 bytes @ 0x30
   943  000031                     	ds	1
   944  000032                     disk_ioctl@csize:
   945                           	opt stack 0
   946  000032                     move_window@sector:
   947                           	opt stack 0
   948                           
   949                           ; 4 bytes @ 0x31
   950  000032                     	ds	4
   951  000036                     disk_ioctl@res:
   952                           	opt stack 0
   953                           
   954                           ; 1 bytes @ 0x35
   955  000036                     	ds	1
   956  000037                     disk_ioctl@n:
   957                           	opt stack 0
   958                           
   959                           ; 1 bytes @ 0x36
   960  000037                     	ds	1
   961  000038                     disk_ioctl@ptr:
   962                           	opt stack 0
   963                           
   964                           ; 2 bytes @ 0x37
   965  000038                     	ds	2
   966  00003A                     move_window@res:
   967                           	opt stack 0
   968  00003A                     sync_fs@fs:
   969                           	opt stack 0
   970                           
   971                           ; 2 bytes @ 0x39
   972  00003A                     	ds	1
   973  00003B                     ?_get_fat:
   974                           	opt stack 0
   975  00003B                     get_fat@fs:
   976                           	opt stack 0
   977  00003B                     put_fat@fs:
   978                           	opt stack 0
   979  00003B                     check_fs@fs:
   980                           	opt stack 0
   981                           
   982                           ; 2 bytes @ 0x3A
   983  00003B                     	ds	1
   984  00003C                     ??_sync_fs:
   985                           
   986                           ; 0 bytes @ 0x3B
   987  00003C                     	ds	1
   988  00003D                     get_fat@clst:
   989                           	opt stack 0
   990  00003D                     put_fat@clst:
   991                           	opt stack 0
   992  00003D                     check_fs@sect:
   993                           	opt stack 0
   994                           
   995                           ; 4 bytes @ 0x3C
   996  00003D                     	ds	4
   997  000041                     ??_get_fat:
   998  000041                     ??_check_fs:
   999  000041                     put_fat@val:
  1000                           	opt stack 0
  1001                           
  1002                           ; 4 bytes @ 0x40
  1003  000041                     	ds	3
  1004  000044                     sync_fs@res:
  1005                           	opt stack 0
  1006                           
  1007                           ; 1 bytes @ 0x43
  1008  000044                     	ds	1
  1009  000045                     ??_put_fat:
  1010  000045                     find_volume@rfs:
  1011                           	opt stack 0
  1012  000045                     f_sync@fp:
  1013                           	opt stack 0
  1014                           
  1015                           ; 2 bytes @ 0x44
  1016  000045                     	ds	2
  1017  000047                     find_volume@path:
  1018                           	opt stack 0
  1019  000047                     f_sync@tm:
  1020                           	opt stack 0
  1021                           
  1022                           ; 4 bytes @ 0x46
  1023  000047                     	ds	2
  1024  000049                     find_volume@wmode:
  1025                           	opt stack 0
  1026  000049                     _get_fat$450:
  1027                           	opt stack 0
  1028                           
  1029                           ; 2 bytes @ 0x48
  1030  000049                     	ds	1
  1031  00004A                     ??_find_volume:
  1032                           
  1033                           ; 0 bytes @ 0x49
  1034  00004A                     	ds	1
  1035  00004B                     f_sync@res:
  1036                           	opt stack 0
  1037  00004B                     get_fat@val:
  1038                           	opt stack 0
  1039                           
  1040                           ; 4 bytes @ 0x4A
  1041  00004B                     	ds	1
  1042  00004C                     f_sync@dir:
  1043                           	opt stack 0
  1044                           
  1045                           ; 2 bytes @ 0x4B
  1046  00004C                     	ds	1
  1047  00004D                     _put_fat$476:
  1048                           	opt stack 0
  1049                           
  1050                           ; 2 bytes @ 0x4C
  1051  00004D                     	ds	1
  1052  00004E                     f_close@fp:
  1053                           	opt stack 0
  1054                           
  1055                           ; 2 bytes @ 0x4D
  1056  00004E                     	ds	1
  1057  00004F                     get_fat@wc:
  1058                           	opt stack 0
  1059  00004F                     _put_fat$477:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0x4E
  1063  00004F                     	ds	1
  1064  000050                     f_close@res:
  1065                           	opt stack 0
  1066                           
  1067                           ; 1 bytes @ 0x4F
  1068  000050                     	ds	1
  1069  000051                     get_fat@p:
  1070                           	opt stack 0
  1071  000051                     put_fat@bc:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x50
  1075  000051                     	ds	1
  1076  000052                     f_mount@fs:
  1077                           	opt stack 0
  1078                           
  1079                           ; 2 bytes @ 0x51
  1080  000052                     	ds	1
  1081  000053                     put_fat@res:
  1082                           	opt stack 0
  1083  000053                     get_fat@bc:
  1084                           	opt stack 0
  1085                           
  1086                           ; 2 bytes @ 0x52
  1087  000053                     	ds	1
  1088  000054                     put_fat@p:
  1089                           	opt stack 0
  1090  000054                     f_mount@path:
  1091                           	opt stack 0
  1092                           
  1093                           ; 2 bytes @ 0x53
  1094  000054                     	ds	1
  1095  000055                     dir_sdi@dp:
  1096                           	opt stack 0
  1097                           
  1098                           ; 2 bytes @ 0x54
  1099  000055                     	ds	1
  1100  000056                     ?_create_chain:
  1101                           	opt stack 0
  1102  000056                     f_mount@opt:
  1103                           	opt stack 0
  1104  000056                     remove_chain@fs:
  1105                           	opt stack 0
  1106  000056                     create_chain@fs:
  1107                           	opt stack 0
  1108                           
  1109                           ; 2 bytes @ 0x55
  1110  000056                     	ds	1
  1111  000057                     f_mount@res:
  1112                           	opt stack 0
  1113  000057                     dir_sdi@idx:
  1114                           	opt stack 0
  1115                           
  1116                           ; 2 bytes @ 0x56
  1117  000057                     	ds	1
  1118  000058                     f_mount@cfs:
  1119                           	opt stack 0
  1120  000058                     remove_chain@clst:
  1121                           	opt stack 0
  1122  000058                     create_chain@clst:
  1123                           	opt stack 0
  1124                           
  1125                           ; 4 bytes @ 0x57
  1126  000058                     	ds	1
  1127  000059                     ??_dir_sdi:
  1128                           
  1129                           ; 0 bytes @ 0x58
  1130  000059                     	ds	1
  1131  00005A                     f_mount@rp:
  1132                           	opt stack 0
  1133                           
  1134                           ; 2 bytes @ 0x59
  1135  00005A                     	ds	2
  1136  00005C                     f_mount@vol:
  1137                           	opt stack 0
  1138                           
  1139                           ; 2 bytes @ 0x5B
  1140  00005C                     	ds	4
  1141  000060                     tblptru	equ	0xFF8
  1142                           tblptrh	equ	0xFF7
  1143                           tblptrl	equ	0xFF6
  1144                           tablat	equ	0xFF5
  1145                           postinc0	equ	0xFEE
  1146                           wreg	equ	0xFE8
  1147                           postdec1	equ	0xFE5
  1148                           fsr1h	equ	0xFE2
  1149                           fsr1l	equ	0xFE1
  1150                           
  1151                           ; 0 bytes @ 0x5F
  1152 ;;
  1153 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1154 ;;
  1155 ;; *************** function _main *****************
  1156 ;; Defined at:
  1157 ;;		line 58 in file "main.c"
  1158 ;; Parameters:    Size  Location     Type
  1159 ;;		None
  1160 ;; Auto vars:     Size  Location     Type
  1161 ;;  bw              2  112[BANK0 ] unsigned int 
  1162 ;; Return value:  Size  Location     Type
  1163 ;;		None               void
  1164 ;; Registers used:
  1165 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1166 ;; Tracked objects:
  1167 ;;		On entry : 0/0
  1168 ;;		On exit  : 0/0
  1169 ;;		Unchanged: 0/0
  1170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1172 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1174 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1175 ;;Total ram usage:        2 bytes
  1176 ;; Hardware stack levels required when called:   14
  1177 ;; This function calls:
  1178 ;;		_SYSTEM_Initialize
  1179 ;;		_f_close
  1180 ;;		_f_lseek
  1181 ;;		_f_mount
  1182 ;;		_f_open
  1183 ;;		_f_write
  1184 ;; This function is called by:
  1185 ;;		Startup code after reset
  1186 ;; This function uses a non-reentrant model
  1187 ;;
  1188                           
  1189                           	psect	text0
  1190  005CF2                     __ptext0:
  1191                           	opt stack 0
  1192  005CF2                     _main:
  1193                           	opt stack 17
  1194                           
  1195                           ;main.c: 59: UINT bw;
  1196                           ;main.c: 62: SYSTEM_Initialize();
  1197                           
  1198                           ;incstack = 0
  1199  005CF2  EC89  F033         	call	_SYSTEM_Initialize	;wreg free
  1200                           
  1201                           ;main.c: 64: if (f_mount(&FatFs, "", 1) == FR_OK) {
  1202  005CF6  0E0A               	movlw	low _FatFs
  1203  005CF8  6E52               	movwf	f_mount@fs,c
  1204  005CFA  0E0D               	movlw	high _FatFs
  1205  005CFC  6E53               	movwf	f_mount@fs+1,c
  1206  005CFE  0E37               	movlw	low (STR_3+54)
  1207  005D00  6E54               	movwf	f_mount@path,c
  1208  005D02  0E10               	movlw	high (STR_3+54)
  1209  005D04  6E55               	movwf	f_mount@path+1,c
  1210  005D06  0E01               	movlw	1
  1211  005D08  6E56               	movwf	f_mount@opt,c
  1212  005D0A  ECA0  F02F         	call	_f_mount	;wreg free
  1213  005D0E  0900               	iorlw	0
  1214  005D10  A4D8               	btfss	status,2,c
  1215  005D12  D053               	goto	l24
  1216                           
  1217                           ;main.c: 66: if (f_open(&Fil, "test.txt", 0x10 | 0x01 | 0x02) == FR_OK) {
  1218  005D14  0ED7               	movlw	low _Fil
  1219  005D16  0100               	movlb	0	; () banked
  1220  005D18  6F9A               	movwf	f_open@fp& (0+255),b
  1221  005D1A  0E00               	movlw	high _Fil
  1222  005D1C  0100               	movlb	0	; () banked
  1223  005D1E  6F9B               	movwf	(f_open@fp+1)& (0+255),b
  1224  005D20  0E47               	movlw	low STR_2
  1225  005D22  0100               	movlb	0	; () banked
  1226  005D24  6F9C               	movwf	f_open@path& (0+255),b
  1227  005D26  0E10               	movlw	high STR_2
  1228  005D28  0100               	movlb	0	; () banked
  1229  005D2A  6F9D               	movwf	(f_open@path+1)& (0+255),b
  1230  005D2C  0E13               	movlw	19
  1231  005D2E  0100               	movlb	0	; () banked
  1232  005D30  6F9E               	movwf	f_open@mode& (0+255),b
  1233  005D32  EC25  F01B         	call	_f_open	;wreg free
  1234  005D36  0900               	iorlw	0
  1235  005D38  A4D8               	btfss	status,2,c
  1236  005D3A  D03F               	goto	l24
  1237                           
  1238                           ;main.c: 68: if ((Fil.fsize != 0) && (f_lseek(&Fil, Fil.fsize) != FR_OK)) goto endSD;
  1239  005D3C  0100               	movlb	0	; () banked
  1240  005D3E  51E1               	movf	(_Fil+10)& (0+255),w,b
  1241  005D40  0100               	movlb	0	; () banked
  1242  005D42  11E2               	iorwf	(_Fil+11)& (0+255),w,b
  1243  005D44  0100               	movlb	0	; () banked
  1244  005D46  11E3               	iorwf	(_Fil+12)& (0+255),w,b
  1245  005D48  0100               	movlb	0	; () banked
  1246  005D4A  11E4               	iorwf	(_Fil+13)& (0+255),w,b
  1247  005D4C  B4D8               	btfsc	status,2,c
  1248  005D4E  D015               	goto	l5903
  1249                           
  1250                           ; BSR set to: 0
  1251  005D50  0ED7               	movlw	low _Fil
  1252  005D52  0100               	movlb	0	; () banked
  1253  005D54  6F6D               	movwf	f_lseek@fp& (0+255),b
  1254  005D56  0E00               	movlw	high _Fil
  1255  005D58  0100               	movlb	0	; () banked
  1256  005D5A  6F6E               	movwf	(f_lseek@fp+1)& (0+255),b
  1257  005D5C  C0E1  F06F         	movff	_Fil+10,f_lseek@ofs
  1258  005D60  C0E2  F070         	movff	_Fil+11,f_lseek@ofs+1
  1259  005D64  C0E3  F071         	movff	_Fil+12,f_lseek@ofs+2
  1260  005D68  C0E4  F072         	movff	_Fil+13,f_lseek@ofs+3
  1261  005D6C  EC85  F012         	call	_f_lseek	;wreg free
  1262  005D70  0900               	iorlw	0
  1263  005D72  A4D8               	btfss	status,2,c
  1264  005D74  D01C               	goto	l5905
  1265  005D76  D001               	goto	l5903
  1266  005D78  D01A               	goto	l5905
  1267  005D7A                     l5903:
  1268                           
  1269                           ;main.c: 70: f_write(&Fil, "Hello world! This is text message written to sd card\r\n", 5
      +                          4, &bw);
  1270  005D7A  0ED7               	movlw	low _Fil
  1271  005D7C  0100               	movlb	0	; () banked
  1272  005D7E  6F6D               	movwf	f_write@fp& (0+255),b
  1273  005D80  0E00               	movlw	high _Fil
  1274  005D82  0100               	movlb	0	; () banked
  1275  005D84  6F6E               	movwf	(f_write@fp+1)& (0+255),b
  1276  005D86  0E01               	movlw	low STR_3
  1277  005D88  0100               	movlb	0	; () banked
  1278  005D8A  6F6F               	movwf	f_write@buff& (0+255),b
  1279  005D8C  0E10               	movlw	high STR_3
  1280  005D8E  0100               	movlb	0	; () banked
  1281  005D90  6F70               	movwf	(f_write@buff+1)& (0+255),b
  1282  005D92  0E00               	movlw	0
  1283  005D94  0100               	movlb	0	; () banked
  1284  005D96  6F72               	movwf	(f_write@btw+1)& (0+255),b
  1285  005D98  0E36               	movlw	54
  1286  005D9A  6F71               	movwf	f_write@btw& (0+255),b
  1287  005D9C  0ED0               	movlw	low main@bw
  1288  005D9E  0100               	movlb	0	; () banked
  1289  005DA0  6F73               	movwf	f_write@bw& (0+255),b
  1290  005DA2  0E00               	movlw	high main@bw
  1291  005DA4  0100               	movlb	0	; () banked
  1292  005DA6  6F74               	movwf	(f_write@bw+1)& (0+255),b
  1293  005DA8  ECEB  F00D         	call	_f_write	;wreg free
  1294  005DAC  D000               	goto	l5905
  1295  005DAE                     l5905:
  1296  005DAE  0ED7               	movlw	low _Fil
  1297  005DB0  6E4E               	movwf	f_close@fp,c
  1298  005DB2  0E00               	movlw	high _Fil
  1299  005DB4  6E4F               	movwf	f_close@fp+1,c
  1300  005DB6  ECE4  F032         	call	_f_close	;wreg free
  1301  005DBA                     l24:
  1302  005DBA  D7FF               	goto	l24
  1303  005DBC  EF00  F000         	goto	start
  1304  005DC0                     __end_of_main:
  1305                           	opt stack 0
  1306                           tblptru	equ	0xFF8
  1307                           tblptrh	equ	0xFF7
  1308                           tblptrl	equ	0xFF6
  1309                           tablat	equ	0xFF5
  1310                           postinc0	equ	0xFEE
  1311                           wreg	equ	0xFE8
  1312                           postdec1	equ	0xFE5
  1313                           fsr1h	equ	0xFE2
  1314                           fsr1l	equ	0xFE1
  1315                           status	equ	0xFD8
  1316                           
  1317 ;; *************** function _f_write *****************
  1318 ;; Defined at:
  1319 ;;		line 2691 in file "../../SD_Card_FatFs/ff.c"
  1320 ;; Parameters:    Size  Location     Type
  1321 ;;  fp              2   13[BANK0 ] PTR struct .
  1322 ;;		 -> Fil(32), 
  1323 ;;  buff            2   15[BANK0 ] PTR const void 
  1324 ;;		 -> STR_3(55), 
  1325 ;;  btw             2   17[BANK0 ] unsigned int 
  1326 ;;  bw              2   19[BANK0 ] PTR unsigned int 
  1327 ;;		 -> main@bw(2), 
  1328 ;; Auto vars:     Size  Location     Type
  1329 ;;  clst            4   47[BANK0 ] unsigned long 
  1330 ;;  sect            4   43[BANK0 ] unsigned long 
  1331 ;;  wcnt            2   51[BANK0 ] unsigned int 
  1332 ;;  cc              2   41[BANK0 ] unsigned int 
  1333 ;;  wbuff           2   38[BANK0 ] PTR const unsigned char 
  1334 ;;		 -> STR_3(55), 
  1335 ;;  csect           1   40[BANK0 ] unsigned char 
  1336 ;;  res             1   37[BANK0 ] enum E88
  1337 ;; Return value:  Size  Location     Type
  1338 ;;                  1    wreg      enum E8927
  1339 ;; Registers used:
  1340 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1341 ;; Tracked objects:
  1342 ;;		On entry : 0/0
  1343 ;;		On exit  : 0/0
  1344 ;;		Unchanged: 0/0
  1345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1346 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1347 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1348 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1349 ;;      Totals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1350 ;;Total ram usage:       40 bytes
  1351 ;; Hardware stack levels used:    1
  1352 ;; Hardware stack levels required when called:   10
  1353 ;; This function calls:
  1354 ;;		_clust2sect
  1355 ;;		_create_chain
  1356 ;;		_disk_write
  1357 ;;		_mem_cpy
  1358 ;;		_move_window
  1359 ;;		_sync_window
  1360 ;;		_validate
  1361 ;; This function is called by:
  1362 ;;		_main
  1363 ;; This function uses a non-reentrant model
  1364 ;;
  1365                           
  1366                           	psect	text1
  1367  001BD6                     __ptext1:
  1368                           	opt stack 0
  1369  001BD6                     _f_write:
  1370                           	opt stack 20
  1371                           
  1372                           ;ff.c: 2698: FRESULT res;
  1373                           ;ff.c: 2699: DWORD clst, sect;
  1374                           ;ff.c: 2700: UINT wcnt, cc;
  1375                           ;ff.c: 2701: const BYTE *wbuff = (const BYTE*)buff;
  1376                           
  1377                           ;incstack = 0
  1378  001BD6  C06F  F086         	movff	f_write@buff,f_write@wbuff
  1379  001BDA  C070  F087         	movff	f_write@buff+1,f_write@wbuff+1
  1380                           
  1381                           ;ff.c: 2702: BYTE csect;
  1382                           ;ff.c: 2705: *bw = 0;
  1383  001BDE  C073  FFD9         	movff	f_write@bw,fsr2l
  1384  001BE2  C074  FFDA         	movff	f_write@bw+1,fsr2h
  1385  001BE6  0E00               	movlw	0
  1386  001BE8  6EDE               	movwf	postinc2,c
  1387  001BEA  0E00               	movlw	0
  1388  001BEC  6EDD               	movwf	postdec2,c
  1389                           
  1390                           ;ff.c: 2707: res = validate(fp);
  1391  001BEE  C06D  F002         	movff	f_write@fp,validate@obj
  1392  001BF2  C06E  F003         	movff	f_write@fp+1,validate@obj+1
  1393  001BF6  EC51  F030         	call	_validate	;wreg free
  1394  001BFA  0100               	movlb	0	; () banked
  1395  001BFC  6F85               	movwf	f_write@res& (0+255),b
  1396                           
  1397                           ; BSR set to: 0
  1398                           ;ff.c: 2708: if (res != FR_OK) return res;
  1399  001BFE  0100               	movlb	0	; () banked
  1400  001C00  5185               	movf	f_write@res& (0+255),w,b
  1401  001C02  0100               	movlb	0	; () banked
  1402  001C04  A4D8               	btfss	status,2,c
  1403  001C06  0012               	return	
  1404  001C08  D001               	goto	l5749
  1405                           
  1406                           ; BSR set to: 0
  1407                           ;	Return value of _f_write is never used
  1408  001C0A  0012               	return	
  1409  001C0C                     l5749:
  1410                           
  1411                           ; BSR set to: 0
  1412                           ;ff.c: 2709: if (fp->err)
  1413  001C0C  0100               	movlb	0	; () banked
  1414  001C0E  EE20 F005          	lfsr	2,5
  1415  001C12  516D               	movf	f_write@fp& (0+255),w,b
  1416  001C14  26D9               	addwf	fsr2l,f,c
  1417  001C16  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1418  001C18  22DA               	addwfc	fsr2h,f,c
  1419  001C1A  50DF               	movf	indf2,w,c
  1420  001C1C  A4D8               	btfss	status,2,c
  1421  001C1E  0012               	return	
  1422  001C20  D001               	goto	l5753
  1423                           
  1424                           ; BSR set to: 0
  1425                           ;ff.c: 2710: return (FRESULT)fp->err;
  1426                           ;	Return value of _f_write is never used
  1427  001C22  0012               	return	
  1428  001C24                     l5753:
  1429                           
  1430                           ; BSR set to: 0
  1431                           ;ff.c: 2711: if (!(fp->flag & 0x02))
  1432  001C24  0100               	movlb	0	; () banked
  1433  001C26  EE20 F004          	lfsr	2,4
  1434  001C2A  516D               	movf	f_write@fp& (0+255),w,b
  1435  001C2C  26D9               	addwf	fsr2l,f,c
  1436  001C2E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1437  001C30  22DA               	addwfc	fsr2h,f,c
  1438  001C32  0100               	movlb	0	; () banked
  1439  001C34  A2DF               	btfss	indf2,1,c
  1440  001C36  0012               	return	
  1441  001C38  D001               	goto	l5757
  1442                           
  1443                           ; BSR set to: 0
  1444                           ;ff.c: 2712: return FR_DENIED;
  1445                           ;	Return value of _f_write is never used
  1446  001C3A  0012               	return	
  1447  001C3C                     l5757:
  1448                           
  1449                           ; BSR set to: 0
  1450                           ;ff.c: 2713: if (fp->fptr + btw < fp->fptr) btw = 0;
  1451  001C3C  0100               	movlb	0	; () banked
  1452  001C3E  EE20 F006          	lfsr	2,6
  1453  001C42  516D               	movf	f_write@fp& (0+255),w,b
  1454  001C44  26D9               	addwf	fsr2l,f,c
  1455  001C46  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1456  001C48  22DA               	addwfc	fsr2h,f,c
  1457  001C4A  0100               	movlb	0	; () banked
  1458  001C4C  EE10 F006          	lfsr	1,6
  1459  001C50  516D               	movf	f_write@fp& (0+255),w,b
  1460  001C52  26E1               	addwf	fsr1l,f,c
  1461  001C54  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1462  001C56  22E2               	addwfc	fsr1h,f,c
  1463  001C58  CFE6 F079          	movff	postinc1,??_f_write+4
  1464  001C5C  CFE6 F07A          	movff	postinc1,??_f_write+5
  1465  001C60  CFE6 F07B          	movff	postinc1,??_f_write+6
  1466  001C64  CFE6 F07C          	movff	postinc1,??_f_write+7
  1467  001C68  0100               	movlb	0	; () banked
  1468  001C6A  5171               	movf	f_write@btw& (0+255),w,b
  1469  001C6C  0100               	movlb	0	; () banked
  1470  001C6E  2579               	addwf	(??_f_write+4)& (0+255),w,b
  1471  001C70  0100               	movlb	0	; () banked
  1472  001C72  6F7D               	movwf	(??_f_write+8)& (0+255),b
  1473  001C74  0100               	movlb	0	; () banked
  1474  001C76  5172               	movf	(f_write@btw+1)& (0+255),w,b
  1475  001C78  0100               	movlb	0	; () banked
  1476  001C7A  217A               	addwfc	(??_f_write+5)& (0+255),w,b
  1477  001C7C  0100               	movlb	0	; () banked
  1478  001C7E  6F7E               	movwf	(??_f_write+9)& (0+255),b
  1479  001C80  0E00               	movlw	0
  1480  001C82  0100               	movlb	0	; () banked
  1481  001C84  217B               	addwfc	(??_f_write+6)& (0+255),w,b
  1482  001C86  0100               	movlb	0	; () banked
  1483  001C88  6F7F               	movwf	(??_f_write+10)& (0+255),b
  1484  001C8A  0E00               	movlw	0
  1485  001C8C  0100               	movlb	0	; () banked
  1486  001C8E  217C               	addwfc	(??_f_write+7)& (0+255),w,b
  1487  001C90  0100               	movlb	0	; () banked
  1488  001C92  6F80               	movwf	(??_f_write+11)& (0+255),b
  1489  001C94  50DE               	movf	postinc2,w,c
  1490  001C96  0100               	movlb	0	; () banked
  1491  001C98  5D7D               	subwf	(??_f_write+8)& (0+255),w,b
  1492  001C9A  50DE               	movf	postinc2,w,c
  1493  001C9C  0100               	movlb	0	; () banked
  1494  001C9E  597E               	subwfb	(??_f_write+9)& (0+255),w,b
  1495  001CA0  50DE               	movf	postinc2,w,c
  1496  001CA2  0100               	movlb	0	; () banked
  1497  001CA4  597F               	subwfb	(??_f_write+10)& (0+255),w,b
  1498  001CA6  50DE               	movf	postinc2,w,c
  1499  001CA8  0100               	movlb	0	; () banked
  1500  001CAA  5980               	subwfb	(??_f_write+11)& (0+255),w,b
  1501  001CAC  B0D8               	btfsc	status,0,c
  1502  001CAE  D3ED               	goto	l5869
  1503                           
  1504                           ; BSR set to: 0
  1505  001CB0  0E00               	movlw	0
  1506  001CB2  0100               	movlb	0	; () banked
  1507  001CB4  6F72               	movwf	(f_write@btw+1)& (0+255),b
  1508  001CB6  0E00               	movlw	0
  1509  001CB8  6F71               	movwf	f_write@btw& (0+255),b
  1510                           
  1511                           ; BSR set to: 0
  1512                           ;ff.c: 2715: for ( ; btw;
  1513                           ;ff.c: 2716: wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
  1514  001CBA  D3E7               	goto	l5869
  1515  001CBC                     l5761:
  1516                           
  1517                           ; BSR set to: 0
  1518                           ;ff.c: 2717: if ((fp->fptr % ((UINT)512)) == 0) {
  1519  001CBC  0100               	movlb	0	; () banked
  1520  001CBE  EE20 F006          	lfsr	2,6
  1521  001CC2  516D               	movf	f_write@fp& (0+255),w,b
  1522  001CC4  26D9               	addwf	fsr2l,f,c
  1523  001CC6  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1524  001CC8  22DA               	addwfc	fsr2h,f,c
  1525  001CCA  0EFF               	movlw	255
  1526  001CCC  14DE               	andwf	postinc2,w,c
  1527  001CCE  0100               	movlb	0	; () banked
  1528  001CD0  6F75               	movwf	??_f_write& (0+255),b
  1529  001CD2  0E01               	movlw	1
  1530  001CD4  14DE               	andwf	postinc2,w,c
  1531  001CD6  0100               	movlb	0	; () banked
  1532  001CD8  6F76               	movwf	(??_f_write+1)& (0+255),b
  1533  001CDA  0E00               	movlw	0
  1534  001CDC  14DE               	andwf	postinc2,w,c
  1535  001CDE  0100               	movlb	0	; () banked
  1536  001CE0  6F77               	movwf	(??_f_write+2)& (0+255),b
  1537  001CE2  0E00               	movlw	0
  1538  001CE4  14DE               	andwf	postinc2,w,c
  1539  001CE6  0100               	movlb	0	; () banked
  1540  001CE8  6F78               	movwf	(??_f_write+3)& (0+255),b
  1541  001CEA  0100               	movlb	0	; () banked
  1542  001CEC  5175               	movf	??_f_write& (0+255),w,b
  1543  001CEE  0100               	movlb	0	; () banked
  1544  001CF0  1176               	iorwf	(??_f_write+1)& (0+255),w,b
  1545  001CF2  0100               	movlb	0	; () banked
  1546  001CF4  1177               	iorwf	(??_f_write+2)& (0+255),w,b
  1547  001CF6  0100               	movlb	0	; () banked
  1548  001CF8  1178               	iorwf	(??_f_write+3)& (0+255),w,b
  1549  001CFA  A4D8               	btfss	status,2,c
  1550  001CFC  D2F9               	goto	l5845
  1551                           
  1552                           ; BSR set to: 0
  1553                           ;ff.c: 2718: csect = (BYTE)(fp->fptr / ((UINT)512) & (fp->fs->csize - 1));
  1554  001CFE  0100               	movlb	0	; () banked
  1555  001D00  EE20 F006          	lfsr	2,6
  1556  001D04  516D               	movf	f_write@fp& (0+255),w,b
  1557  001D06  26D9               	addwf	fsr2l,f,c
  1558  001D08  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1559  001D0A  22DA               	addwfc	fsr2h,f,c
  1560  001D0C  CFDE F075          	movff	postinc2,??_f_write
  1561  001D10  CFDE F076          	movff	postinc2,??_f_write+1
  1562  001D14  CFDE F077          	movff	postinc2,??_f_write+2
  1563  001D18  CFDE F078          	movff	postinc2,??_f_write+3
  1564  001D1C  0E0A               	movlw	10
  1565  001D1E  D006               	goto	u8350
  1566  001D20                     u8355:
  1567  001D20  0100               	movlb	0	; () banked
  1568  001D22  90D8               	bcf	status,0,c
  1569  001D24  3378               	rrcf	(??_f_write+3)& (0+255),f,b
  1570  001D26  3377               	rrcf	(??_f_write+2)& (0+255),f,b
  1571  001D28  3376               	rrcf	(??_f_write+1)& (0+255),f,b
  1572  001D2A  3375               	rrcf	??_f_write& (0+255),f,b
  1573  001D2C                     u8350:
  1574  001D2C  2EE8               	decfsz	wreg,f,c
  1575  001D2E  D7F8               	goto	u8355
  1576  001D30  C06D  FFD9         	movff	f_write@fp,fsr2l
  1577  001D34  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1578  001D38  EE10 F002          	lfsr	1,2
  1579  001D3C  50DE               	movf	postinc2,w,c
  1580  001D3E  26E1               	addwf	fsr1l,f,c
  1581  001D40  50DD               	movf	postdec2,w,c
  1582  001D42  22E2               	addwfc	fsr1h,f,c
  1583  001D44  50E7               	movf	indf1,w,c
  1584  001D46  0100               	movlb	0	; () banked
  1585  001D48  6F79               	movwf	(??_f_write+4)& (0+255),b
  1586  001D4A  0100               	movlb	0	; () banked
  1587  001D4C  0579               	decf	(??_f_write+4)& (0+255),w,b
  1588  001D4E  0100               	movlb	0	; () banked
  1589  001D50  1575               	andwf	??_f_write& (0+255),w,b
  1590  001D52  0100               	movlb	0	; () banked
  1591  001D54  6F88               	movwf	f_write@csect& (0+255),b
  1592                           
  1593                           ; BSR set to: 0
  1594                           ;ff.c: 2719: if (!csect) {
  1595  001D56  0100               	movlb	0	; () banked
  1596  001D58  5188               	movf	f_write@csect& (0+255),w,b
  1597  001D5A  0100               	movlb	0	; () banked
  1598  001D5C  A4D8               	btfss	status,2,c
  1599  001D5E  D0BF               	goto	l5797
  1600                           
  1601                           ; BSR set to: 0
  1602                           ;ff.c: 2720: if (fp->fptr == 0) {
  1603  001D60  0100               	movlb	0	; () banked
  1604  001D62  EE20 F006          	lfsr	2,6
  1605  001D66  516D               	movf	f_write@fp& (0+255),w,b
  1606  001D68  26D9               	addwf	fsr2l,f,c
  1607  001D6A  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1608  001D6C  22DA               	addwfc	fsr2h,f,c
  1609  001D6E  50DE               	movf	postinc2,w,c
  1610  001D70  10DE               	iorwf	postinc2,w,c
  1611  001D72  10DE               	iorwf	postinc2,w,c
  1612  001D74  10DE               	iorwf	postinc2,w,c
  1613  001D76  A4D8               	btfss	status,2,c
  1614  001D78  D02D               	goto	l5775
  1615                           
  1616                           ; BSR set to: 0
  1617                           ;ff.c: 2721: clst = fp->sclust;
  1618  001D7A  0100               	movlb	0	; () banked
  1619  001D7C  EE20 F00E          	lfsr	2,14
  1620  001D80  516D               	movf	f_write@fp& (0+255),w,b
  1621  001D82  26D9               	addwf	fsr2l,f,c
  1622  001D84  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1623  001D86  22DA               	addwfc	fsr2h,f,c
  1624  001D88  CFDE F08F          	movff	postinc2,f_write@clst
  1625  001D8C  CFDE F090          	movff	postinc2,f_write@clst+1
  1626  001D90  CFDE F091          	movff	postinc2,f_write@clst+2
  1627  001D94  CFDE F092          	movff	postinc2,f_write@clst+3
  1628                           
  1629                           ; BSR set to: 0
  1630                           ;ff.c: 2722: if (clst == 0)
  1631  001D98  0100               	movlb	0	; () banked
  1632  001D9A  518F               	movf	f_write@clst& (0+255),w,b
  1633  001D9C  0100               	movlb	0	; () banked
  1634  001D9E  1190               	iorwf	(f_write@clst+1)& (0+255),w,b
  1635  001DA0  0100               	movlb	0	; () banked
  1636  001DA2  1191               	iorwf	(f_write@clst+2)& (0+255),w,b
  1637  001DA4  0100               	movlb	0	; () banked
  1638  001DA6  1192               	iorwf	(f_write@clst+3)& (0+255),w,b
  1639  001DA8  A4D8               	btfss	status,2,c
  1640  001DAA  D036               	goto	l5777
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;ff.c: 2723: clst = create_chain(fp->fs, 0);
  1644  001DAC  C06D  FFD9         	movff	f_write@fp,fsr2l
  1645  001DB0  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1646  001DB4  CFDE F056          	movff	postinc2,create_chain@fs
  1647  001DB8  CFDD F057          	movff	postdec2,create_chain@fs+1
  1648  001DBC  0E00               	movlw	0
  1649  001DBE  6E58               	movwf	create_chain@clst,c
  1650  001DC0  0E00               	movlw	0
  1651  001DC2  6E59               	movwf	create_chain@clst+1,c
  1652  001DC4  0E00               	movlw	0
  1653  001DC6  6E5A               	movwf	create_chain@clst+2,c
  1654  001DC8  0E00               	movlw	0
  1655  001DCA  6E5B               	movwf	create_chain@clst+3,c
  1656  001DCC  EC59  F01F         	call	_create_chain	;wreg free
  1657  001DD0  D01A               	goto	L1
  1658                           
  1659                           ;ff.c: 2724: } else {
  1660  001DD2  D022               	goto	l5777
  1661  001DD4                     l5775:
  1662                           
  1663                           ;ff.c: 2730: clst = create_chain(fp->fs, fp->clust);
  1664  001DD4  C06D  FFD9         	movff	f_write@fp,fsr2l
  1665  001DD8  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1666  001DDC  CFDE F056          	movff	postinc2,create_chain@fs
  1667  001DE0  CFDD F057          	movff	postdec2,create_chain@fs+1
  1668  001DE4  0100               	movlb	0	; () banked
  1669  001DE6  EE20 F012          	lfsr	2,18
  1670  001DEA  516D               	movf	f_write@fp& (0+255),w,b
  1671  001DEC  26D9               	addwf	fsr2l,f,c
  1672  001DEE  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1673  001DF0  22DA               	addwfc	fsr2h,f,c
  1674  001DF2  CFDE F058          	movff	postinc2,create_chain@clst
  1675  001DF6  CFDE F059          	movff	postinc2,create_chain@clst+1
  1676  001DFA  CFDE F05A          	movff	postinc2,create_chain@clst+2
  1677  001DFE  CFDE F05B          	movff	postinc2,create_chain@clst+3
  1678  001E02  EC59  F01F         	call	_create_chain	;wreg free
  1679  001E06                     L1:
  1680  001E06  C056  F08F         	movff	?_create_chain,f_write@clst
  1681  001E0A  C057  F090         	movff	?_create_chain+1,f_write@clst+1
  1682  001E0E  C058  F091         	movff	?_create_chain+2,f_write@clst+2
  1683  001E12  C059  F092         	movff	?_create_chain+3,f_write@clst+3
  1684  001E16  D000               	goto	l5777
  1685  001E18                     l5777:
  1686                           
  1687                           ;ff.c: 2731: }
  1688                           ;ff.c: 2732: if (clst == 0) break;
  1689  001E18  0100               	movlb	0	; () banked
  1690  001E1A  518F               	movf	f_write@clst& (0+255),w,b
  1691  001E1C  0100               	movlb	0	; () banked
  1692  001E1E  1190               	iorwf	(f_write@clst+1)& (0+255),w,b
  1693  001E20  0100               	movlb	0	; () banked
  1694  001E22  1191               	iorwf	(f_write@clst+2)& (0+255),w,b
  1695  001E24  0100               	movlb	0	; () banked
  1696  001E26  1192               	iorwf	(f_write@clst+3)& (0+255),w,b
  1697  001E28  B4D8               	btfsc	status,2,c
  1698  001E2A  D335               	goto	l5871
  1699  001E2C  D001               	goto	l5781
  1700                           
  1701                           ; BSR set to: 0
  1702  001E2E  D333               	goto	l5871
  1703  001E30                     l5781:
  1704                           
  1705                           ; BSR set to: 0
  1706                           ;ff.c: 2733: if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  1707  001E30  0100               	movlb	0	; () banked
  1708  001E32  058F               	decf	f_write@clst& (0+255),w,b
  1709  001E34  0100               	movlb	0	; () banked
  1710  001E36  1190               	iorwf	(f_write@clst+1)& (0+255),w,b
  1711  001E38  0100               	movlb	0	; () banked
  1712  001E3A  1191               	iorwf	(f_write@clst+2)& (0+255),w,b
  1713  001E3C  0100               	movlb	0	; () banked
  1714  001E3E  1192               	iorwf	(f_write@clst+3)& (0+255),w,b
  1715  001E40  A4D8               	btfss	status,2,c
  1716  001E42  D00A               	goto	l5787
  1717                           
  1718                           ; BSR set to: 0
  1719  001E44  0100               	movlb	0	; () banked
  1720  001E46  EE20 F005          	lfsr	2,5
  1721  001E4A  516D               	movf	f_write@fp& (0+255),w,b
  1722  001E4C  26D9               	addwf	fsr2l,f,c
  1723  001E4E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1724  001E50  22DA               	addwfc	fsr2h,f,c
  1725  001E52  0E02               	movlw	2
  1726  001E54  6EDF               	movwf	indf2,c
  1727                           
  1728                           ; BSR set to: 0
  1729                           ;	Return value of _f_write is never used
  1730  001E56  0012               	return	
  1731  001E58                     l5787:
  1732                           
  1733                           ; BSR set to: 0
  1734                           ;ff.c: 2734: if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR
      +                          ; };
  1735  001E58  0100               	movlb	0	; () banked
  1736  001E5A  298F               	incf	f_write@clst& (0+255),w,b
  1737  001E5C  E114               	bnz	l5793
  1738  001E5E  0100               	movlb	0	; () banked
  1739  001E60  2990               	incf	(f_write@clst+1)& (0+255),w,b
  1740  001E62  E111               	bnz	l5793
  1741  001E64  0100               	movlb	0	; () banked
  1742  001E66  2991               	incf	(f_write@clst+2)& (0+255),w,b
  1743  001E68  E10E               	bnz	l5793
  1744  001E6A  0100               	movlb	0	; () banked
  1745  001E6C  2992               	incf	(f_write@clst+3)& (0+255),w,b
  1746  001E6E  A4D8               	btfss	status,2,c
  1747  001E70  D00A               	goto	l5793
  1748                           
  1749                           ; BSR set to: 0
  1750  001E72  0100               	movlb	0	; () banked
  1751  001E74  EE20 F005          	lfsr	2,5
  1752  001E78  516D               	movf	f_write@fp& (0+255),w,b
  1753  001E7A  26D9               	addwf	fsr2l,f,c
  1754  001E7C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1755  001E7E  22DA               	addwfc	fsr2h,f,c
  1756  001E80  0E01               	movlw	1
  1757  001E82  6EDF               	movwf	indf2,c
  1758                           
  1759                           ; BSR set to: 0
  1760                           ;	Return value of _f_write is never used
  1761  001E84  0012               	return	
  1762  001E86                     l5793:
  1763                           
  1764                           ; BSR set to: 0
  1765                           ;ff.c: 2735: fp->clust = clst;
  1766  001E86  0100               	movlb	0	; () banked
  1767  001E88  EE20 F012          	lfsr	2,18
  1768  001E8C  516D               	movf	f_write@fp& (0+255),w,b
  1769  001E8E  26D9               	addwf	fsr2l,f,c
  1770  001E90  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1771  001E92  22DA               	addwfc	fsr2h,f,c
  1772  001E94  C08F  FFDE         	movff	f_write@clst,postinc2
  1773  001E98  C090  FFDE         	movff	f_write@clst+1,postinc2
  1774  001E9C  C091  FFDE         	movff	f_write@clst+2,postinc2
  1775  001EA0  C092  FFDE         	movff	f_write@clst+3,postinc2
  1776                           
  1777                           ;ff.c: 2736: if (fp->sclust == 0) fp->sclust = clst;
  1778  001EA4  0100               	movlb	0	; () banked
  1779  001EA6  EE20 F00E          	lfsr	2,14
  1780  001EAA  516D               	movf	f_write@fp& (0+255),w,b
  1781  001EAC  26D9               	addwf	fsr2l,f,c
  1782  001EAE  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1783  001EB0  22DA               	addwfc	fsr2h,f,c
  1784  001EB2  50DE               	movf	postinc2,w,c
  1785  001EB4  10DE               	iorwf	postinc2,w,c
  1786  001EB6  10DE               	iorwf	postinc2,w,c
  1787  001EB8  10DE               	iorwf	postinc2,w,c
  1788  001EBA  A4D8               	btfss	status,2,c
  1789  001EBC  D010               	goto	l5797
  1790                           
  1791                           ; BSR set to: 0
  1792  001EBE  0100               	movlb	0	; () banked
  1793  001EC0  EE20 F00E          	lfsr	2,14
  1794  001EC4  516D               	movf	f_write@fp& (0+255),w,b
  1795  001EC6  26D9               	addwf	fsr2l,f,c
  1796  001EC8  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1797  001ECA  22DA               	addwfc	fsr2h,f,c
  1798  001ECC  C08F  FFDE         	movff	f_write@clst,postinc2
  1799  001ED0  C090  FFDE         	movff	f_write@clst+1,postinc2
  1800  001ED4  C091  FFDE         	movff	f_write@clst+2,postinc2
  1801  001ED8  C092  FFDE         	movff	f_write@clst+3,postinc2
  1802                           
  1803                           ; BSR set to: 0
  1804  001EDC  D000               	goto	l5797
  1805  001EDE                     l5797:
  1806                           
  1807                           ; BSR set to: 0
  1808                           ;ff.c: 2737: }
  1809                           ;ff.c: 2739: if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))
  1810  001EDE  0100               	movlb	0	; () banked
  1811  001EE0  EE20 F016          	lfsr	2,22
  1812  001EE4  516D               	movf	f_write@fp& (0+255),w,b
  1813  001EE6  26D9               	addwf	fsr2l,f,c
  1814  001EE8  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1815  001EEA  22DA               	addwfc	fsr2h,f,c
  1816  001EEC  C06D  FFE1         	movff	f_write@fp,fsr1l
  1817  001EF0  C06E  FFE2         	movff	f_write@fp+1,fsr1h
  1818  001EF4  EE00 F02A          	lfsr	0,42
  1819  001EF8  50E6               	movf	postinc1,w,c
  1820  001EFA  26E9               	addwf	fsr0l,f,c
  1821  001EFC  50E5               	movf	postdec1,w,c
  1822  001EFE  22EA               	addwfc	fsr0h,f,c
  1823  001F00  50DE               	movf	postinc2,w,c
  1824  001F02  18EE               	xorwf	postinc0,w,c
  1825  001F04  E121               	bnz	l5805
  1826  001F06  50DE               	movf	postinc2,w,c
  1827  001F08  18EE               	xorwf	postinc0,w,c
  1828  001F0A  E11E               	bnz	l5805
  1829  001F0C  50DE               	movf	postinc2,w,c
  1830  001F0E  18EE               	xorwf	postinc0,w,c
  1831  001F10  E11B               	bnz	l5805
  1832  001F12  50DE               	movf	postinc2,w,c
  1833  001F14  18EE               	xorwf	postinc0,w,c
  1834  001F16  A4D8               	btfss	status,2,c
  1835  001F18  D017               	goto	l5805
  1836                           
  1837                           ; BSR set to: 0
  1838  001F1A  C06D  FFD9         	movff	f_write@fp,fsr2l
  1839  001F1E  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1840  001F22  CFDE F01B          	movff	postinc2,sync_window@fs
  1841  001F26  CFDD F01C          	movff	postdec2,sync_window@fs+1
  1842  001F2A  EC6C  F029         	call	_sync_window	;wreg free
  1843  001F2E  0900               	iorlw	0
  1844  001F30  B4D8               	btfsc	status,2,c
  1845  001F32  D00A               	goto	l5805
  1846                           
  1847                           ;ff.c: 2740: { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  1848  001F34  0100               	movlb	0	; () banked
  1849  001F36  EE20 F005          	lfsr	2,5
  1850  001F3A  516D               	movf	f_write@fp& (0+255),w,b
  1851  001F3C  26D9               	addwf	fsr2l,f,c
  1852  001F3E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1853  001F40  22DA               	addwfc	fsr2h,f,c
  1854  001F42  0E01               	movlw	1
  1855  001F44  6EDF               	movwf	indf2,c
  1856                           
  1857                           ; BSR set to: 0
  1858                           ;	Return value of _f_write is never used
  1859  001F46  0012               	return	
  1860  001F48                     l5805:
  1861                           
  1862                           ;ff.c: 2748: sect = clust2sect(fp->fs, fp->clust);
  1863  001F48  C06D  FFD9         	movff	f_write@fp,fsr2l
  1864  001F4C  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1865  001F50  CFDE F00D          	movff	postinc2,clust2sect@fs
  1866  001F54  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  1867  001F58  0100               	movlb	0	; () banked
  1868  001F5A  EE20 F012          	lfsr	2,18
  1869  001F5E  516D               	movf	f_write@fp& (0+255),w,b
  1870  001F60  26D9               	addwf	fsr2l,f,c
  1871  001F62  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1872  001F64  22DA               	addwfc	fsr2h,f,c
  1873  001F66  CFDE F00F          	movff	postinc2,clust2sect@clst
  1874  001F6A  CFDE F010          	movff	postinc2,clust2sect@clst+1
  1875  001F6E  CFDE F011          	movff	postinc2,clust2sect@clst+2
  1876  001F72  CFDE F012          	movff	postinc2,clust2sect@clst+3
  1877  001F76  EC42  F02F         	call	_clust2sect	;wreg free
  1878  001F7A  C00D  F08B         	movff	?_clust2sect,f_write@sect
  1879  001F7E  C00E  F08C         	movff	?_clust2sect+1,f_write@sect+1
  1880  001F82  C00F  F08D         	movff	?_clust2sect+2,f_write@sect+2
  1881  001F86  C010  F08E         	movff	?_clust2sect+3,f_write@sect+3
  1882                           
  1883                           ;ff.c: 2749: if (!sect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  1884  001F8A  0100               	movlb	0	; () banked
  1885  001F8C  518B               	movf	f_write@sect& (0+255),w,b
  1886  001F8E  0100               	movlb	0	; () banked
  1887  001F90  118C               	iorwf	(f_write@sect+1)& (0+255),w,b
  1888  001F92  0100               	movlb	0	; () banked
  1889  001F94  118D               	iorwf	(f_write@sect+2)& (0+255),w,b
  1890  001F96  0100               	movlb	0	; () banked
  1891  001F98  118E               	iorwf	(f_write@sect+3)& (0+255),w,b
  1892  001F9A  A4D8               	btfss	status,2,c
  1893  001F9C  D00A               	goto	l5813
  1894                           
  1895                           ; BSR set to: 0
  1896  001F9E  0100               	movlb	0	; () banked
  1897  001FA0  EE20 F005          	lfsr	2,5
  1898  001FA4  516D               	movf	f_write@fp& (0+255),w,b
  1899  001FA6  26D9               	addwf	fsr2l,f,c
  1900  001FA8  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1901  001FAA  22DA               	addwfc	fsr2h,f,c
  1902  001FAC  0E02               	movlw	2
  1903  001FAE  6EDF               	movwf	indf2,c
  1904                           
  1905                           ; BSR set to: 0
  1906                           ;	Return value of _f_write is never used
  1907  001FB0  0012               	return	
  1908  001FB2                     l5813:
  1909                           
  1910                           ; BSR set to: 0
  1911                           ;ff.c: 2750: sect += csect;
  1912  001FB2  0100               	movlb	0	; () banked
  1913  001FB4  5188               	movf	f_write@csect& (0+255),w,b
  1914  001FB6  0100               	movlb	0	; () banked
  1915  001FB8  278B               	addwf	f_write@sect& (0+255),f,b
  1916  001FBA  0E00               	movlw	0
  1917  001FBC  238C               	addwfc	(f_write@sect+1)& (0+255),f,b
  1918  001FBE  238D               	addwfc	(f_write@sect+2)& (0+255),f,b
  1919  001FC0  238E               	addwfc	(f_write@sect+3)& (0+255),f,b
  1920                           
  1921                           ;ff.c: 2751: cc = btw / ((UINT)512);
  1922  001FC2  C071  F075         	movff	f_write@btw,??_f_write
  1923  001FC6  C072  F076         	movff	f_write@btw+1,??_f_write+1
  1924  001FCA  0E09               	movlw	9
  1925  001FCC  0100               	movlb	0	; () banked
  1926  001FCE  6F77               	movwf	(??_f_write+2)& (0+255),b
  1927  001FD0                     u8465:
  1928  001FD0  0100               	movlb	0	; () banked
  1929  001FD2  90D8               	bcf	status,0,c
  1930  001FD4  3376               	rrcf	(??_f_write+1)& (0+255),f,b
  1931  001FD6  3375               	rrcf	??_f_write& (0+255),f,b
  1932  001FD8  0100               	movlb	0	; () banked
  1933  001FDA  2F77               	decfsz	(??_f_write+2)& (0+255),f,b
  1934  001FDC  D7F9               	goto	u8465
  1935  001FDE  C075  F089         	movff	??_f_write,f_write@cc
  1936  001FE2  C076  F08A         	movff	??_f_write+1,f_write@cc+1
  1937                           
  1938                           ;ff.c: 2752: if (cc) {
  1939  001FE6  0100               	movlb	0	; () banked
  1940  001FE8  5189               	movf	f_write@cc& (0+255),w,b
  1941  001FEA  0100               	movlb	0	; () banked
  1942  001FEC  118A               	iorwf	(f_write@cc+1)& (0+255),w,b
  1943  001FEE  B4D8               	btfsc	status,2,c
  1944  001FF0  D12D               	goto	l5833
  1945                           
  1946                           ; BSR set to: 0
  1947                           ;ff.c: 2753: if (csect + cc > fp->fs->csize)
  1948  001FF2  0100               	movlb	0	; () banked
  1949  001FF4  5188               	movf	f_write@csect& (0+255),w,b
  1950  001FF6  0100               	movlb	0	; () banked
  1951  001FF8  2589               	addwf	f_write@cc& (0+255),w,b
  1952  001FFA  0100               	movlb	0	; () banked
  1953  001FFC  6F75               	movwf	??_f_write& (0+255),b
  1954  001FFE  0E00               	movlw	0
  1955  002000  0100               	movlb	0	; () banked
  1956  002002  218A               	addwfc	(f_write@cc+1)& (0+255),w,b
  1957  002004  0100               	movlb	0	; () banked
  1958  002006  6F76               	movwf	(??_f_write+1)& (0+255),b
  1959  002008  C06D  FFD9         	movff	f_write@fp,fsr2l
  1960  00200C  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1961  002010  EE10 F002          	lfsr	1,2
  1962  002014  50DE               	movf	postinc2,w,c
  1963  002016  26E1               	addwf	fsr1l,f,c
  1964  002018  50DD               	movf	postdec2,w,c
  1965  00201A  22E2               	addwfc	fsr1h,f,c
  1966  00201C  50E7               	movf	indf1,w,c
  1967  00201E  0100               	movlb	0	; () banked
  1968  002020  6F77               	movwf	(??_f_write+2)& (0+255),b
  1969  002022  6B78               	clrf	(??_f_write+3)& (0+255),b
  1970  002024  0100               	movlb	0	; () banked
  1971  002026  5175               	movf	??_f_write& (0+255),w,b
  1972  002028  0100               	movlb	0	; () banked
  1973  00202A  5D77               	subwf	(??_f_write+2)& (0+255),w,b
  1974  00202C  0100               	movlb	0	; () banked
  1975  00202E  5176               	movf	(??_f_write+1)& (0+255),w,b
  1976  002030  0100               	movlb	0	; () banked
  1977  002032  5978               	subwfb	(??_f_write+3)& (0+255),w,b
  1978  002034  B0D8               	btfsc	status,0,c
  1979  002036  D023               	goto	l5819
  1980                           
  1981                           ; BSR set to: 0
  1982                           ;ff.c: 2754: cc = fp->fs->csize - csect;
  1983  002038  0100               	movlb	0	; () banked
  1984  00203A  5188               	movf	f_write@csect& (0+255),w,b
  1985  00203C  0100               	movlb	0	; () banked
  1986  00203E  6F75               	movwf	??_f_write& (0+255),b
  1987  002040  6B76               	clrf	(??_f_write+1)& (0+255),b
  1988  002042  0100               	movlb	0	; () banked
  1989  002044  1F75               	comf	??_f_write& (0+255),f,b
  1990  002046  1F76               	comf	(??_f_write+1)& (0+255),f,b
  1991  002048  4B75               	infsnz	??_f_write& (0+255),f,b
  1992  00204A  2B76               	incf	(??_f_write+1)& (0+255),f,b
  1993  00204C  C06D  FFD9         	movff	f_write@fp,fsr2l
  1994  002050  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1995  002054  EE10 F002          	lfsr	1,2
  1996  002058  50DE               	movf	postinc2,w,c
  1997  00205A  26E1               	addwf	fsr1l,f,c
  1998  00205C  50DD               	movf	postdec2,w,c
  1999  00205E  22E2               	addwfc	fsr1h,f,c
  2000  002060  50E7               	movf	indf1,w,c
  2001  002062  0100               	movlb	0	; () banked
  2002  002064  6F77               	movwf	(??_f_write+2)& (0+255),b
  2003  002066  0100               	movlb	0	; () banked
  2004  002068  5177               	movf	(??_f_write+2)& (0+255),w,b
  2005  00206A  0100               	movlb	0	; () banked
  2006  00206C  2575               	addwf	??_f_write& (0+255),w,b
  2007  00206E  0100               	movlb	0	; () banked
  2008  002070  6F89               	movwf	f_write@cc& (0+255),b
  2009  002072  0E00               	movlw	0
  2010  002074  0100               	movlb	0	; () banked
  2011  002076  2176               	addwfc	(??_f_write+1)& (0+255),w,b
  2012  002078  0100               	movlb	0	; () banked
  2013  00207A  6F8A               	movwf	(f_write@cc+1)& (0+255),b
  2014  00207C  D000               	goto	l5819
  2015  00207E                     l5819:
  2016                           
  2017                           ; BSR set to: 0
  2018                           ;ff.c: 2755: if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
  2019  00207E  C086  F011         	movff	f_write@wbuff,disk_write@buff
  2020  002082  C087  F012         	movff	f_write@wbuff+1,disk_write@buff+1
  2021  002086  C08B  F013         	movff	f_write@sect,disk_write@sector
  2022  00208A  C08C  F014         	movff	f_write@sect+1,disk_write@sector+1
  2023  00208E  C08D  F015         	movff	f_write@sect+2,disk_write@sector+2
  2024  002092  C08E  F016         	movff	f_write@sect+3,disk_write@sector+3
  2025  002096  C089  F017         	movff	f_write@cc,disk_write@count
  2026  00209A  C08A  F018         	movff	f_write@cc+1,disk_write@count+1
  2027  00209E  C06D  FFD9         	movff	f_write@fp,fsr2l
  2028  0020A2  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2029  0020A6  EE10 F001          	lfsr	1,1
  2030  0020AA  50DE               	movf	postinc2,w,c
  2031  0020AC  26E1               	addwf	fsr1l,f,c
  2032  0020AE  50DD               	movf	postdec2,w,c
  2033  0020B0  22E2               	addwfc	fsr1h,f,c
  2034  0020B2  50E7               	movf	indf1,w,c
  2035  0020B4  ECD1  F02A         	call	_disk_write
  2036  0020B8  0900               	iorlw	0
  2037  0020BA  B4D8               	btfsc	status,2,c
  2038  0020BC  D00A               	goto	l5825
  2039                           
  2040                           ;ff.c: 2756: { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2041  0020BE  0100               	movlb	0	; () banked
  2042  0020C0  EE20 F005          	lfsr	2,5
  2043  0020C4  516D               	movf	f_write@fp& (0+255),w,b
  2044  0020C6  26D9               	addwf	fsr2l,f,c
  2045  0020C8  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2046  0020CA  22DA               	addwfc	fsr2h,f,c
  2047  0020CC  0E01               	movlw	1
  2048  0020CE  6EDF               	movwf	indf2,c
  2049                           
  2050                           ; BSR set to: 0
  2051                           ;	Return value of _f_write is never used
  2052  0020D0  0012               	return	
  2053  0020D2                     l5825:
  2054                           
  2055                           ;ff.c: 2759: if (fp->fs->winsect - sect < cc) {
  2056  0020D2  0100               	movlb	0	; () banked
  2057  0020D4  5189               	movf	f_write@cc& (0+255),w,b
  2058  0020D6  0100               	movlb	0	; () banked
  2059  0020D8  6F75               	movwf	??_f_write& (0+255),b
  2060  0020DA  0100               	movlb	0	; () banked
  2061  0020DC  518A               	movf	(f_write@cc+1)& (0+255),w,b
  2062  0020DE  0100               	movlb	0	; () banked
  2063  0020E0  6F76               	movwf	(??_f_write+1)& (0+255),b
  2064  0020E2  0100               	movlb	0	; () banked
  2065  0020E4  6B77               	clrf	(??_f_write+2)& (0+255),b
  2066  0020E6  0100               	movlb	0	; () banked
  2067  0020E8  6B78               	clrf	(??_f_write+3)& (0+255),b
  2068  0020EA  C06D  FFD9         	movff	f_write@fp,fsr2l
  2069  0020EE  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2070  0020F2  EE10 F02A          	lfsr	1,42
  2071  0020F6  50DE               	movf	postinc2,w,c
  2072  0020F8  26E1               	addwf	fsr1l,f,c
  2073  0020FA  50DD               	movf	postdec2,w,c
  2074  0020FC  22E2               	addwfc	fsr1h,f,c
  2075  0020FE  CFE6 F079          	movff	postinc1,??_f_write+4
  2076  002102  CFE6 F07A          	movff	postinc1,??_f_write+5
  2077  002106  CFE6 F07B          	movff	postinc1,??_f_write+6
  2078  00210A  CFE6 F07C          	movff	postinc1,??_f_write+7
  2079  00210E  C08B  F07D         	movff	f_write@sect,??_f_write+8
  2080  002112  C08C  F07E         	movff	f_write@sect+1,??_f_write+9
  2081  002116  C08D  F07F         	movff	f_write@sect+2,??_f_write+10
  2082  00211A  C08E  F080         	movff	f_write@sect+3,??_f_write+11
  2083  00211E  0100               	movlb	0	; () banked
  2084  002120  1F7D               	comf	(??_f_write+8)& (0+255),f,b
  2085  002122  1F7E               	comf	(??_f_write+9)& (0+255),f,b
  2086  002124  1F7F               	comf	(??_f_write+10)& (0+255),f,b
  2087  002126  1F80               	comf	(??_f_write+11)& (0+255),f,b
  2088  002128  2B7D               	incf	(??_f_write+8)& (0+255),f,b
  2089  00212A  0E00               	movlw	0
  2090  00212C  237E               	addwfc	(??_f_write+9)& (0+255),f,b
  2091  00212E  237F               	addwfc	(??_f_write+10)& (0+255),f,b
  2092  002130  2380               	addwfc	(??_f_write+11)& (0+255),f,b
  2093  002132  0100               	movlb	0	; () banked
  2094  002134  5179               	movf	(??_f_write+4)& (0+255),w,b
  2095  002136  0100               	movlb	0	; () banked
  2096  002138  257D               	addwf	(??_f_write+8)& (0+255),w,b
  2097  00213A  0100               	movlb	0	; () banked
  2098  00213C  6F81               	movwf	(??_f_write+12)& (0+255),b
  2099  00213E  0100               	movlb	0	; () banked
  2100  002140  517A               	movf	(??_f_write+5)& (0+255),w,b
  2101  002142  0100               	movlb	0	; () banked
  2102  002144  217E               	addwfc	(??_f_write+9)& (0+255),w,b
  2103  002146  0100               	movlb	0	; () banked
  2104  002148  6F82               	movwf	(??_f_write+13)& (0+255),b
  2105  00214A  0100               	movlb	0	; () banked
  2106  00214C  517B               	movf	(??_f_write+6)& (0+255),w,b
  2107  00214E  0100               	movlb	0	; () banked
  2108  002150  217F               	addwfc	(??_f_write+10)& (0+255),w,b
  2109  002152  0100               	movlb	0	; () banked
  2110  002154  6F83               	movwf	(??_f_write+14)& (0+255),b
  2111  002156  0100               	movlb	0	; () banked
  2112  002158  517C               	movf	(??_f_write+7)& (0+255),w,b
  2113  00215A  0100               	movlb	0	; () banked
  2114  00215C  2180               	addwfc	(??_f_write+11)& (0+255),w,b
  2115  00215E  0100               	movlb	0	; () banked
  2116  002160  6F84               	movwf	(??_f_write+15)& (0+255),b
  2117  002162  0100               	movlb	0	; () banked
  2118  002164  5175               	movf	??_f_write& (0+255),w,b
  2119  002166  0100               	movlb	0	; () banked
  2120  002168  5D81               	subwf	(??_f_write+12)& (0+255),w,b
  2121  00216A  0100               	movlb	0	; () banked
  2122  00216C  5176               	movf	(??_f_write+1)& (0+255),w,b
  2123  00216E  0100               	movlb	0	; () banked
  2124  002170  5982               	subwfb	(??_f_write+13)& (0+255),w,b
  2125  002172  0100               	movlb	0	; () banked
  2126  002174  5177               	movf	(??_f_write+2)& (0+255),w,b
  2127  002176  0100               	movlb	0	; () banked
  2128  002178  5983               	subwfb	(??_f_write+14)& (0+255),w,b
  2129  00217A  0100               	movlb	0	; () banked
  2130  00217C  5178               	movf	(??_f_write+3)& (0+255),w,b
  2131  00217E  0100               	movlb	0	; () banked
  2132  002180  5984               	subwfb	(??_f_write+15)& (0+255),w,b
  2133  002182  B0D8               	btfsc	status,0,c
  2134  002184  D053               	goto	l5831
  2135                           
  2136                           ; BSR set to: 0
  2137                           ;ff.c: 2760: mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * ((UINT)512)), ((UI
      +                          NT)512));
  2138  002186  C06D  FFD9         	movff	f_write@fp,fsr2l
  2139  00218A  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2140  00218E  CFDE F075          	movff	postinc2,??_f_write
  2141  002192  CFDD F076          	movff	postdec2,??_f_write+1
  2142  002196  0E2E               	movlw	46
  2143  002198  0100               	movlb	0	; () banked
  2144  00219A  2575               	addwf	??_f_write& (0+255),w,b
  2145  00219C  6E01               	movwf	mem_cpy@dst,c
  2146  00219E  0E00               	movlw	0
  2147  0021A0  0100               	movlb	0	; () banked
  2148  0021A2  2176               	addwfc	(??_f_write+1)& (0+255),w,b
  2149  0021A4  6E02               	movwf	mem_cpy@dst+1,c
  2150  0021A6  C06D  FFD9         	movff	f_write@fp,fsr2l
  2151  0021AA  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2152  0021AE  EE10 F02A          	lfsr	1,42
  2153  0021B2  50DE               	movf	postinc2,w,c
  2154  0021B4  26E1               	addwf	fsr1l,f,c
  2155  0021B6  50DD               	movf	postdec2,w,c
  2156  0021B8  22E2               	addwfc	fsr1h,f,c
  2157  0021BA  CFE6 F077          	movff	postinc1,??_f_write+2
  2158  0021BE  CFE5 F078          	movff	postdec1,??_f_write+3
  2159  0021C2  C08B  F079         	movff	f_write@sect,??_f_write+4
  2160  0021C6  C08C  F07A         	movff	f_write@sect+1,??_f_write+5
  2161  0021CA  0100               	movlb	0	; () banked
  2162  0021CC  1F79               	comf	(??_f_write+4)& (0+255),f,b
  2163  0021CE  1F7A               	comf	(??_f_write+5)& (0+255),f,b
  2164  0021D0  4B79               	infsnz	(??_f_write+4)& (0+255),f,b
  2165  0021D2  2B7A               	incf	(??_f_write+5)& (0+255),f,b
  2166  0021D4  0100               	movlb	0	; () banked
  2167  0021D6  5177               	movf	(??_f_write+2)& (0+255),w,b
  2168  0021D8  0100               	movlb	0	; () banked
  2169  0021DA  2779               	addwf	(??_f_write+4)& (0+255),f,b
  2170  0021DC  0100               	movlb	0	; () banked
  2171  0021DE  5178               	movf	(??_f_write+3)& (0+255),w,b
  2172  0021E0  0100               	movlb	0	; () banked
  2173  0021E2  237A               	addwfc	(??_f_write+5)& (0+255),f,b
  2174  0021E4  0E09               	movlw	9
  2175  0021E6                     u8515:
  2176  0021E6  90D8               	bcf	status,0,c
  2177  0021E8  0100               	movlb	0	; () banked
  2178  0021EA  3779               	rlcf	(??_f_write+4)& (0+255),f,b
  2179  0021EC  377A               	rlcf	(??_f_write+5)& (0+255),f,b
  2180  0021EE  2EE8               	decfsz	wreg,f,c
  2181  0021F0  D7FA               	goto	u8515
  2182  0021F2  0100               	movlb	0	; () banked
  2183  0021F4  5179               	movf	(??_f_write+4)& (0+255),w,b
  2184  0021F6  0100               	movlb	0	; () banked
  2185  0021F8  2586               	addwf	f_write@wbuff& (0+255),w,b
  2186  0021FA  6E03               	movwf	mem_cpy@src,c
  2187  0021FC  0100               	movlb	0	; () banked
  2188  0021FE  517A               	movf	(??_f_write+5)& (0+255),w,b
  2189  002200  0100               	movlb	0	; () banked
  2190  002202  2187               	addwfc	(f_write@wbuff+1)& (0+255),w,b
  2191  002204  6E04               	movwf	mem_cpy@src+1,c
  2192  002206  0E02               	movlw	2
  2193  002208  6E06               	movwf	mem_cpy@cnt+1,c
  2194  00220A  0E00               	movlw	0
  2195  00220C  6E05               	movwf	mem_cpy@cnt,c
  2196  00220E  ECE0  F02E         	call	_mem_cpy	;wreg free
  2197                           
  2198                           ;ff.c: 2761: fp->fs->wflag = 0;
  2199  002212  C06D  FFD9         	movff	f_write@fp,fsr2l
  2200  002216  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2201  00221A  EE10 F004          	lfsr	1,4
  2202  00221E  50DE               	movf	postinc2,w,c
  2203  002220  26E1               	addwf	fsr1l,f,c
  2204  002222  50DD               	movf	postdec2,w,c
  2205  002224  22E2               	addwfc	fsr1h,f,c
  2206  002226  0E00               	movlw	0
  2207  002228  6EE7               	movwf	indf1,c
  2208  00222A  D000               	goto	l5831
  2209  00222C                     l5831:
  2210                           
  2211                           ;ff.c: 2762: }
  2212                           ;ff.c: 2770: wcnt = ((UINT)512) * cc;
  2213  00222C  C089  F075         	movff	f_write@cc,??_f_write
  2214  002230  C08A  F076         	movff	f_write@cc+1,??_f_write+1
  2215  002234  0E09               	movlw	9
  2216  002236                     u8525:
  2217  002236  90D8               	bcf	status,0,c
  2218  002238  0100               	movlb	0	; () banked
  2219  00223A  3775               	rlcf	??_f_write& (0+255),f,b
  2220  00223C  3776               	rlcf	(??_f_write+1)& (0+255),f,b
  2221  00223E  2EE8               	decfsz	wreg,f,c
  2222  002240  D7FA               	goto	u8525
  2223  002242  C075  F093         	movff	??_f_write,f_write@wcnt
  2224  002246  C076  F094         	movff	??_f_write+1,f_write@wcnt+1
  2225                           
  2226                           ;ff.c: 2771: continue;
  2227  00224A  D0F6               	goto	l5861
  2228  00224C                     l5833:
  2229                           
  2230                           ; BSR set to: 0
  2231                           ;ff.c: 2772: }
  2232                           ;ff.c: 2774: if (fp->fptr >= fp->fsize) {
  2233  00224C  0100               	movlb	0	; () banked
  2234  00224E  EE20 F00A          	lfsr	2,10
  2235  002252  516D               	movf	f_write@fp& (0+255),w,b
  2236  002254  26D9               	addwf	fsr2l,f,c
  2237  002256  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2238  002258  22DA               	addwfc	fsr2h,f,c
  2239  00225A  0100               	movlb	0	; () banked
  2240  00225C  EE10 F006          	lfsr	1,6
  2241  002260  516D               	movf	f_write@fp& (0+255),w,b
  2242  002262  26E1               	addwf	fsr1l,f,c
  2243  002264  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2244  002266  22E2               	addwfc	fsr1h,f,c
  2245  002268  50DE               	movf	postinc2,w,c
  2246  00226A  5CE6               	subwf	postinc1,w,c
  2247  00226C  50DE               	movf	postinc2,w,c
  2248  00226E  58E6               	subwfb	postinc1,w,c
  2249  002270  50DE               	movf	postinc2,w,c
  2250  002272  58E6               	subwfb	postinc1,w,c
  2251  002274  50DE               	movf	postinc2,w,c
  2252  002276  58E6               	subwfb	postinc1,w,c
  2253  002278  A0D8               	btfss	status,0,c
  2254  00227A  D02A               	goto	l5843
  2255                           
  2256                           ; BSR set to: 0
  2257                           ;ff.c: 2775: if (sync_window(fp->fs)) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ER
      +                          R; };
  2258  00227C  C06D  FFD9         	movff	f_write@fp,fsr2l
  2259  002280  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2260  002284  CFDE F01B          	movff	postinc2,sync_window@fs
  2261  002288  CFDD F01C          	movff	postdec2,sync_window@fs+1
  2262  00228C  EC6C  F029         	call	_sync_window	;wreg free
  2263  002290  0900               	iorlw	0
  2264  002292  B4D8               	btfsc	status,2,c
  2265  002294  D00A               	goto	l5841
  2266  002296  0100               	movlb	0	; () banked
  2267  002298  EE20 F005          	lfsr	2,5
  2268  00229C  516D               	movf	f_write@fp& (0+255),w,b
  2269  00229E  26D9               	addwf	fsr2l,f,c
  2270  0022A0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2271  0022A2  22DA               	addwfc	fsr2h,f,c
  2272  0022A4  0E01               	movlw	1
  2273  0022A6  6EDF               	movwf	indf2,c
  2274                           
  2275                           ; BSR set to: 0
  2276                           ;	Return value of _f_write is never used
  2277  0022A8  0012               	return	
  2278  0022AA                     l5841:
  2279                           
  2280                           ;ff.c: 2776: fp->fs->winsect = sect;
  2281  0022AA  C06D  FFD9         	movff	f_write@fp,fsr2l
  2282  0022AE  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2283  0022B2  EE10 F02A          	lfsr	1,42
  2284  0022B6  50DE               	movf	postinc2,w,c
  2285  0022B8  26E1               	addwf	fsr1l,f,c
  2286  0022BA  50DD               	movf	postdec2,w,c
  2287  0022BC  22E2               	addwfc	fsr1h,f,c
  2288  0022BE  C08B  FFE6         	movff	f_write@sect,postinc1
  2289  0022C2  C08C  FFE6         	movff	f_write@sect+1,postinc1
  2290  0022C6  C08D  FFE6         	movff	f_write@sect+2,postinc1
  2291  0022CA  C08E  FFE6         	movff	f_write@sect+3,postinc1
  2292  0022CE  D000               	goto	l5843
  2293  0022D0                     l5843:
  2294                           
  2295                           ;ff.c: 2777: }
  2296                           ;ff.c: 2785: fp->dsect = sect;
  2297  0022D0  0100               	movlb	0	; () banked
  2298  0022D2  EE20 F016          	lfsr	2,22
  2299  0022D6  516D               	movf	f_write@fp& (0+255),w,b
  2300  0022D8  26D9               	addwf	fsr2l,f,c
  2301  0022DA  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2302  0022DC  22DA               	addwfc	fsr2h,f,c
  2303  0022DE  C08B  FFDE         	movff	f_write@sect,postinc2
  2304  0022E2  C08C  FFDE         	movff	f_write@sect+1,postinc2
  2305  0022E6  C08D  FFDE         	movff	f_write@sect+2,postinc2
  2306  0022EA  C08E  FFDE         	movff	f_write@sect+3,postinc2
  2307  0022EE  D000               	goto	l5845
  2308  0022F0                     l5845:
  2309                           
  2310                           ; BSR set to: 0
  2311                           ;ff.c: 2786: }
  2312                           ;ff.c: 2787: wcnt = ((UINT)512) - ((UINT)fp->fptr % ((UINT)512));
  2313  0022F0  0EFF               	movlw	255
  2314  0022F2  0100               	movlb	0	; () banked
  2315  0022F4  6F75               	movwf	??_f_write& (0+255),b
  2316  0022F6  0E01               	movlw	1
  2317  0022F8  0100               	movlb	0	; () banked
  2318  0022FA  6F76               	movwf	(??_f_write+1)& (0+255),b
  2319  0022FC  0100               	movlb	0	; () banked
  2320  0022FE  EE20 F006          	lfsr	2,6
  2321  002302  516D               	movf	f_write@fp& (0+255),w,b
  2322  002304  26D9               	addwf	fsr2l,f,c
  2323  002306  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2324  002308  22DA               	addwfc	fsr2h,f,c
  2325  00230A  CFDE F077          	movff	postinc2,??_f_write+2
  2326  00230E  CFDD F078          	movff	postdec2,??_f_write+3
  2327  002312  0100               	movlb	0	; () banked
  2328  002314  5175               	movf	??_f_write& (0+255),w,b
  2329  002316  0100               	movlb	0	; () banked
  2330  002318  1777               	andwf	(??_f_write+2)& (0+255),f,b
  2331  00231A  0100               	movlb	0	; () banked
  2332  00231C  5176               	movf	(??_f_write+1)& (0+255),w,b
  2333  00231E  0100               	movlb	0	; () banked
  2334  002320  1778               	andwf	(??_f_write+3)& (0+255),f,b
  2335  002322  0100               	movlb	0	; () banked
  2336  002324  1F77               	comf	(??_f_write+2)& (0+255),f,b
  2337  002326  1F78               	comf	(??_f_write+3)& (0+255),f,b
  2338  002328  4B77               	infsnz	(??_f_write+2)& (0+255),f,b
  2339  00232A  2B78               	incf	(??_f_write+3)& (0+255),f,b
  2340  00232C  0E00               	movlw	0
  2341  00232E  0100               	movlb	0	; () banked
  2342  002330  2577               	addwf	(??_f_write+2)& (0+255),w,b
  2343  002332  0100               	movlb	0	; () banked
  2344  002334  6F93               	movwf	f_write@wcnt& (0+255),b
  2345  002336  0E02               	movlw	2
  2346  002338  0100               	movlb	0	; () banked
  2347  00233A  2178               	addwfc	(??_f_write+3)& (0+255),w,b
  2348  00233C  0100               	movlb	0	; () banked
  2349  00233E  6F94               	movwf	(f_write@wcnt+1)& (0+255),b
  2350                           
  2351                           ; BSR set to: 0
  2352                           ;ff.c: 2788: if (wcnt > btw) wcnt = btw;
  2353  002340  0100               	movlb	0	; () banked
  2354  002342  5193               	movf	f_write@wcnt& (0+255),w,b
  2355  002344  0100               	movlb	0	; () banked
  2356  002346  5D71               	subwf	f_write@btw& (0+255),w,b
  2357  002348  0100               	movlb	0	; () banked
  2358  00234A  5194               	movf	(f_write@wcnt+1)& (0+255),w,b
  2359  00234C  0100               	movlb	0	; () banked
  2360  00234E  5972               	subwfb	(f_write@btw+1)& (0+255),w,b
  2361  002350  B0D8               	btfsc	status,0,c
  2362  002352  D005               	goto	l5851
  2363                           
  2364                           ; BSR set to: 0
  2365  002354  C071  F093         	movff	f_write@btw,f_write@wcnt
  2366  002358  C072  F094         	movff	f_write@btw+1,f_write@wcnt+1
  2367  00235C  D000               	goto	l5851
  2368  00235E                     l5851:
  2369                           
  2370                           ; BSR set to: 0
  2371                           ;ff.c: 2790: if (move_window(fp->fs, fp->dsect) != FR_OK)
  2372  00235E  C06D  FFD9         	movff	f_write@fp,fsr2l
  2373  002362  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2374  002366  CFDE F030          	movff	postinc2,move_window@fs
  2375  00236A  CFDD F031          	movff	postdec2,move_window@fs+1
  2376  00236E  0100               	movlb	0	; () banked
  2377  002370  EE20 F016          	lfsr	2,22
  2378  002374  516D               	movf	f_write@fp& (0+255),w,b
  2379  002376  26D9               	addwf	fsr2l,f,c
  2380  002378  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2381  00237A  22DA               	addwfc	fsr2h,f,c
  2382  00237C  CFDE F032          	movff	postinc2,move_window@sector
  2383  002380  CFDE F033          	movff	postinc2,move_window@sector+1
  2384  002384  CFDE F034          	movff	postinc2,move_window@sector+2
  2385  002388  CFDE F035          	movff	postinc2,move_window@sector+3
  2386  00238C  ECFB  F02F         	call	_move_window	;wreg free
  2387  002390  0900               	iorlw	0
  2388  002392  B4D8               	btfsc	status,2,c
  2389  002394  D00A               	goto	l5857
  2390                           
  2391                           ;ff.c: 2791: { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2392  002396  0100               	movlb	0	; () banked
  2393  002398  EE20 F005          	lfsr	2,5
  2394  00239C  516D               	movf	f_write@fp& (0+255),w,b
  2395  00239E  26D9               	addwf	fsr2l,f,c
  2396  0023A0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2397  0023A2  22DA               	addwfc	fsr2h,f,c
  2398  0023A4  0E01               	movlw	1
  2399  0023A6  6EDF               	movwf	indf2,c
  2400                           
  2401                           ; BSR set to: 0
  2402                           ;	Return value of _f_write is never used
  2403  0023A8  0012               	return	
  2404  0023AA                     l5857:
  2405                           
  2406                           ;ff.c: 2792: mem_cpy(&fp->fs->win[fp->fptr % ((UINT)512)], wbuff, wcnt);
  2407  0023AA  0EFF               	movlw	255
  2408  0023AC  0100               	movlb	0	; () banked
  2409  0023AE  6F75               	movwf	??_f_write& (0+255),b
  2410  0023B0  0E01               	movlw	1
  2411  0023B2  0100               	movlb	0	; () banked
  2412  0023B4  6F76               	movwf	(??_f_write+1)& (0+255),b
  2413  0023B6  0100               	movlb	0	; () banked
  2414  0023B8  EE20 F006          	lfsr	2,6
  2415  0023BC  516D               	movf	f_write@fp& (0+255),w,b
  2416  0023BE  26D9               	addwf	fsr2l,f,c
  2417  0023C0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2418  0023C2  22DA               	addwfc	fsr2h,f,c
  2419  0023C4  CFDE F077          	movff	postinc2,??_f_write+2
  2420  0023C8  CFDD F078          	movff	postdec2,??_f_write+3
  2421  0023CC  0100               	movlb	0	; () banked
  2422  0023CE  5175               	movf	??_f_write& (0+255),w,b
  2423  0023D0  0100               	movlb	0	; () banked
  2424  0023D2  1777               	andwf	(??_f_write+2)& (0+255),f,b
  2425  0023D4  0100               	movlb	0	; () banked
  2426  0023D6  5176               	movf	(??_f_write+1)& (0+255),w,b
  2427  0023D8  0100               	movlb	0	; () banked
  2428  0023DA  1778               	andwf	(??_f_write+3)& (0+255),f,b
  2429  0023DC  0E2E               	movlw	46
  2430  0023DE  0100               	movlb	0	; () banked
  2431  0023E0  2777               	addwf	(??_f_write+2)& (0+255),f,b
  2432  0023E2  0E00               	movlw	0
  2433  0023E4  2378               	addwfc	(??_f_write+3)& (0+255),f,b
  2434  0023E6  C06D  FFD9         	movff	f_write@fp,fsr2l
  2435  0023EA  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2436  0023EE  CFDE F079          	movff	postinc2,??_f_write+4
  2437  0023F2  CFDD F07A          	movff	postdec2,??_f_write+5
  2438  0023F6  0100               	movlb	0	; () banked
  2439  0023F8  5177               	movf	(??_f_write+2)& (0+255),w,b
  2440  0023FA  0100               	movlb	0	; () banked
  2441  0023FC  2579               	addwf	(??_f_write+4)& (0+255),w,b
  2442  0023FE  6E01               	movwf	mem_cpy@dst,c
  2443  002400  0100               	movlb	0	; () banked
  2444  002402  5178               	movf	(??_f_write+3)& (0+255),w,b
  2445  002404  0100               	movlb	0	; () banked
  2446  002406  217A               	addwfc	(??_f_write+5)& (0+255),w,b
  2447  002408  6E02               	movwf	mem_cpy@dst+1,c
  2448  00240A  C086  F003         	movff	f_write@wbuff,mem_cpy@src
  2449  00240E  C087  F004         	movff	f_write@wbuff+1,mem_cpy@src+1
  2450  002412  C093  F005         	movff	f_write@wcnt,mem_cpy@cnt
  2451  002416  C094  F006         	movff	f_write@wcnt+1,mem_cpy@cnt+1
  2452  00241A  ECE0  F02E         	call	_mem_cpy	;wreg free
  2453                           
  2454                           ;ff.c: 2793: fp->fs->wflag = 1;
  2455  00241E  C06D  FFD9         	movff	f_write@fp,fsr2l
  2456  002422  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2457  002426  EE10 F004          	lfsr	1,4
  2458  00242A  50DE               	movf	postinc2,w,c
  2459  00242C  26E1               	addwf	fsr1l,f,c
  2460  00242E  50DD               	movf	postdec2,w,c
  2461  002430  22E2               	addwfc	fsr1h,f,c
  2462  002432  0E01               	movlw	1
  2463  002434  6EE7               	movwf	indf1,c
  2464  002436  D000               	goto	l5861
  2465  002438                     l5861:
  2466  002438  0100               	movlb	0	; () banked
  2467  00243A  5193               	movf	f_write@wcnt& (0+255),w,b
  2468  00243C  0100               	movlb	0	; () banked
  2469  00243E  2786               	addwf	f_write@wbuff& (0+255),f,b
  2470  002440  0100               	movlb	0	; () banked
  2471  002442  5194               	movf	(f_write@wcnt+1)& (0+255),w,b
  2472  002444  0100               	movlb	0	; () banked
  2473  002446  2387               	addwfc	(f_write@wbuff+1)& (0+255),f,b
  2474                           
  2475                           ; BSR set to: 0
  2476  002448  0100               	movlb	0	; () banked
  2477  00244A  EE20 F006          	lfsr	2,6
  2478  00244E  516D               	movf	f_write@fp& (0+255),w,b
  2479  002450  26D9               	addwf	fsr2l,f,c
  2480  002452  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2481  002454  22DA               	addwfc	fsr2h,f,c
  2482  002456  0100               	movlb	0	; () banked
  2483  002458  5193               	movf	f_write@wcnt& (0+255),w,b
  2484  00245A  26DE               	addwf	postinc2,f,c
  2485  00245C  5194               	movf	(f_write@wcnt+1)& (0+255),w,b
  2486  00245E  22DE               	addwfc	postinc2,f,c
  2487  002460  0E00               	movlw	0
  2488  002462  22DE               	addwfc	postinc2,f,c
  2489  002464  22DE               	addwfc	postinc2,f,c
  2490                           
  2491                           ; BSR set to: 0
  2492  002466  C073  FFD9         	movff	f_write@bw,fsr2l
  2493  00246A  C074  FFDA         	movff	f_write@bw+1,fsr2h
  2494  00246E  0100               	movlb	0	; () banked
  2495  002470  5193               	movf	f_write@wcnt& (0+255),w,b
  2496  002472  26DE               	addwf	postinc2,f,c
  2497  002474  5194               	movf	(f_write@wcnt+1)& (0+255),w,b
  2498  002476  22DD               	addwfc	postdec2,f,c
  2499                           
  2500                           ; BSR set to: 0
  2501  002478  0100               	movlb	0	; () banked
  2502  00247A  5193               	movf	f_write@wcnt& (0+255),w,b
  2503  00247C  0100               	movlb	0	; () banked
  2504  00247E  5F71               	subwf	f_write@btw& (0+255),f,b
  2505  002480  0100               	movlb	0	; () banked
  2506  002482  5194               	movf	(f_write@wcnt+1)& (0+255),w,b
  2507  002484  0100               	movlb	0	; () banked
  2508  002486  5B72               	subwfb	(f_write@btw+1)& (0+255),f,b
  2509  002488  D000               	goto	l5869
  2510  00248A                     l5869:
  2511                           
  2512                           ; BSR set to: 0
  2513  00248A  0100               	movlb	0	; () banked
  2514  00248C  5171               	movf	f_write@btw& (0+255),w,b
  2515  00248E  0100               	movlb	0	; () banked
  2516  002490  1172               	iorwf	(f_write@btw+1)& (0+255),w,b
  2517  002492  A4D8               	btfss	status,2,c
  2518  002494  D413               	goto	l5761
  2519  002496                     l5871:
  2520                           
  2521                           ; BSR set to: 0
  2522                           ;ff.c: 2798: }
  2523                           ;ff.c: 2800: if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
  2524  002496  0100               	movlb	0	; () banked
  2525  002498  EE20 F006          	lfsr	2,6
  2526  00249C  516D               	movf	f_write@fp& (0+255),w,b
  2527  00249E  26D9               	addwf	fsr2l,f,c
  2528  0024A0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2529  0024A2  22DA               	addwfc	fsr2h,f,c
  2530  0024A4  0100               	movlb	0	; () banked
  2531  0024A6  EE10 F00A          	lfsr	1,10
  2532  0024AA  516D               	movf	f_write@fp& (0+255),w,b
  2533  0024AC  26E1               	addwf	fsr1l,f,c
  2534  0024AE  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2535  0024B0  22E2               	addwfc	fsr1h,f,c
  2536  0024B2  50DE               	movf	postinc2,w,c
  2537  0024B4  5CE6               	subwf	postinc1,w,c
  2538  0024B6  50DE               	movf	postinc2,w,c
  2539  0024B8  58E6               	subwfb	postinc1,w,c
  2540  0024BA  50DE               	movf	postinc2,w,c
  2541  0024BC  58E6               	subwfb	postinc1,w,c
  2542  0024BE  50DE               	movf	postinc2,w,c
  2543  0024C0  58E6               	subwfb	postinc1,w,c
  2544  0024C2  B0D8               	btfsc	status,0,c
  2545  0024C4  D017               	goto	l5875
  2546                           
  2547                           ; BSR set to: 0
  2548  0024C6  0100               	movlb	0	; () banked
  2549  0024C8  EE20 F006          	lfsr	2,6
  2550  0024CC  516D               	movf	f_write@fp& (0+255),w,b
  2551  0024CE  26D9               	addwf	fsr2l,f,c
  2552  0024D0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2553  0024D2  22DA               	addwfc	fsr2h,f,c
  2554  0024D4  0100               	movlb	0	; () banked
  2555  0024D6  EE10 F00A          	lfsr	1,10
  2556  0024DA  516D               	movf	f_write@fp& (0+255),w,b
  2557  0024DC  26E1               	addwf	fsr1l,f,c
  2558  0024DE  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2559  0024E0  22E2               	addwfc	fsr1h,f,c
  2560  0024E2  CFDE FFE6          	movff	postinc2,postinc1
  2561  0024E6  CFDE FFE6          	movff	postinc2,postinc1
  2562  0024EA  CFDE FFE6          	movff	postinc2,postinc1
  2563  0024EE  CFDE FFE6          	movff	postinc2,postinc1
  2564  0024F2  D000               	goto	l5875
  2565  0024F4                     l5875:
  2566                           
  2567                           ; BSR set to: 0
  2568                           ;ff.c: 2801: fp->flag |= 0x20;
  2569  0024F4  0100               	movlb	0	; () banked
  2570  0024F6  EE20 F004          	lfsr	2,4
  2571  0024FA  516D               	movf	f_write@fp& (0+255),w,b
  2572  0024FC  26D9               	addwf	fsr2l,f,c
  2573  0024FE  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2574  002500  22DA               	addwfc	fsr2h,f,c
  2575  002502  0E00               	movlw	0
  2576  002504  8ADB               	bsf	plusw2,5,c
  2577  002506  0012               	return	
  2578                           
  2579                           ; BSR set to: 0
  2580                           
  2581                           ; BSR set to: 0
  2582                           ;ff.c: 2803: return FR_OK;
  2583                           ;	Return value of _f_write is never used
  2584  002508  0012               	return		;funcret
  2585  00250A                     __end_of_f_write:
  2586                           	opt stack 0
  2587                           tblptru	equ	0xFF8
  2588                           tblptrh	equ	0xFF7
  2589                           tblptrl	equ	0xFF6
  2590                           tablat	equ	0xFF5
  2591                           postinc0	equ	0xFEE
  2592                           fsr0h	equ	0xFEA
  2593                           fsr0l	equ	0xFE9
  2594                           wreg	equ	0xFE8
  2595                           indf1	equ	0xFE7
  2596                           postinc1	equ	0xFE6
  2597                           postdec1	equ	0xFE5
  2598                           fsr1h	equ	0xFE2
  2599                           fsr1l	equ	0xFE1
  2600                           indf2	equ	0xFDF
  2601                           postinc2	equ	0xFDE
  2602                           postdec2	equ	0xFDD
  2603                           plusw2	equ	0xFDB
  2604                           fsr2h	equ	0xFDA
  2605                           fsr2l	equ	0xFD9
  2606                           status	equ	0xFD8
  2607                           
  2608 ;; *************** function _f_open *****************
  2609 ;; Defined at:
  2610 ;;		line 2449 in file "../../SD_Card_FatFs/ff.c"
  2611 ;; Parameters:    Size  Location     Type
  2612 ;;  fp              2   58[BANK0 ] PTR struct .
  2613 ;;		 -> Fil(32), 
  2614 ;;  path            2   60[BANK0 ] PTR const unsigned char 
  2615 ;;		 -> STR_2(9), STR_1(1), 
  2616 ;;  mode            1   62[BANK0 ] unsigned char 
  2617 ;; Auto vars:     Size  Location     Type
  2618 ;;  dj             22   90[BANK0 ] struct .
  2619 ;;  sfn            12   67[BANK0 ] unsigned char [12]
  2620 ;;  dw              4   83[BANK0 ] unsigned long 
  2621 ;;  cl              4   79[BANK0 ] unsigned long 
  2622 ;;  dir             2   88[BANK0 ] PTR unsigned char 
  2623 ;;		 -> NULL(0), FatFs(558), 
  2624 ;;  res             1   87[BANK0 ] enum E88
  2625 ;; Return value:  Size  Location     Type
  2626 ;;                  1    wreg      enum E8927
  2627 ;; Registers used:
  2628 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2629 ;; Tracked objects:
  2630 ;;		On entry : 0/0
  2631 ;;		On exit  : 0/0
  2632 ;;		Unchanged: 0/0
  2633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2634 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2635 ;;      Locals:         0      45       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2636 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2637 ;;      Totals:         0      54       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2638 ;;Total ram usage:       54 bytes
  2639 ;; Hardware stack levels used:    1
  2640 ;; Hardware stack levels required when called:   13
  2641 ;; This function calls:
  2642 ;;		_dir_register
  2643 ;;		_find_volume
  2644 ;;		_follow_path
  2645 ;;		_ld_clust
  2646 ;;		_move_window
  2647 ;;		_remove_chain
  2648 ;;		_st_clust
  2649 ;; This function is called by:
  2650 ;;		_main
  2651 ;; This function uses a non-reentrant model
  2652 ;;
  2653                           
  2654                           	psect	text2
  2655  00364A                     __ptext2:
  2656                           	opt stack 0
  2657  00364A                     _f_open:
  2658                           	opt stack 17
  2659                           
  2660                           ;ff.c: 2455: FRESULT res;
  2661                           ;ff.c: 2456: DIR dj;
  2662                           ;ff.c: 2457: BYTE *dir;
  2663                           ;ff.c: 2458: BYTE sfn[12];
  2664                           ;ff.c: 2460: DWORD dw, cl;
  2665                           ;ff.c: 2464: if (!fp) return FR_INVALID_OBJECT;
  2666                           
  2667                           ; BSR set to: 0
  2668                           ;incstack = 0
  2669  00364A  0100               	movlb	0	; () banked
  2670  00364C  519A               	movf	f_open@fp& (0+255),w,b
  2671  00364E  0100               	movlb	0	; () banked
  2672  003650  119B               	iorwf	(f_open@fp+1)& (0+255),w,b
  2673  003652  A4D8               	btfss	status,2,c
  2674  003654  D002               	goto	l5507
  2675                           
  2676                           ; BSR set to: 0
  2677  003656  0E09               	movlw	9
  2678                           
  2679                           ; BSR set to: 0
  2680  003658  0012               	return	
  2681  00365A                     l5507:
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;ff.c: 2465: fp->fs = 0;
  2685  00365A  C09A  FFD9         	movff	f_open@fp,fsr2l
  2686  00365E  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  2687  003662  0E00               	movlw	0
  2688  003664  6EDE               	movwf	postinc2,c
  2689  003666  0E00               	movlw	0
  2690  003668  6EDD               	movwf	postdec2,c
  2691                           
  2692                           ; BSR set to: 0
  2693                           ;ff.c: 2468: dj.fs = FatFs[0];
  2694  00366A  C0D4  F0BA         	movff	ff@FatFs,f_open@dj
  2695  00366E  C0D5  F0BB         	movff	ff@FatFs+1,f_open@dj+1
  2696                           
  2697                           ; BSR set to: 0
  2698                           ;ff.c: 2473: mode &= 0x01 | 0x02 | 0x08 | 0x10 | 0x04;
  2699  003672  0E1F               	movlw	31
  2700  003674  0100               	movlb	0	; () banked
  2701  003676  179E               	andwf	f_open@mode& (0+255),f,b
  2702                           
  2703                           ; BSR set to: 0
  2704                           ;ff.c: 2474: res = find_volume(&dj.fs, &path, (BYTE)(mode & ~0x01));
  2705  003678  0EBA               	movlw	low f_open@dj
  2706  00367A  6E45               	movwf	find_volume@rfs,c
  2707  00367C  0E00               	movlw	high f_open@dj
  2708  00367E  6E46               	movwf	find_volume@rfs+1,c
  2709  003680  0E9C               	movlw	low f_open@path
  2710  003682  6E47               	movwf	find_volume@path,c
  2711  003684  0E00               	movlw	high f_open@path
  2712  003686  6E48               	movwf	find_volume@path+1,c
  2713  003688  0100               	movlb	0	; () banked
  2714  00368A  519E               	movf	f_open@mode& (0+255),w,b
  2715  00368C  0BFE               	andlw	254
  2716  00368E  6E49               	movwf	find_volume@wmode,c
  2717  003690  EC29  F008         	call	_find_volume	;wreg free
  2718  003694  0100               	movlb	0	; () banked
  2719  003696  6FB7               	movwf	f_open@res& (0+255),b
  2720                           
  2721                           ; BSR set to: 0
  2722                           ;ff.c: 2479: if (res == FR_OK) {
  2723  003698  0100               	movlb	0	; () banked
  2724  00369A  51B7               	movf	f_open@res& (0+255),w,b
  2725  00369C  0100               	movlb	0	; () banked
  2726  00369E  A4D8               	btfss	status,2,c
  2727  0036A0  D1F8               	goto	l5611
  2728                           
  2729                           ; BSR set to: 0
  2730                           ;ff.c: 2480: (dj).fn = sfn;
  2731  0036A2  0EA3               	movlw	low f_open@sfn
  2732  0036A4  0100               	movlb	0	; () banked
  2733  0036A6  6FCE               	movwf	(f_open@dj+20)& (0+255),b
  2734  0036A8  0E00               	movlw	high f_open@sfn
  2735  0036AA  0100               	movlb	0	; () banked
  2736  0036AC  6FCF               	movwf	(f_open@dj+21)& (0+255),b
  2737                           
  2738                           ; BSR set to: 0
  2739                           ;ff.c: 2481: res = follow_path(&dj, path);
  2740  0036AE  0EBA               	movlw	low f_open@dj
  2741  0036B0  0100               	movlb	0	; () banked
  2742  0036B2  6F86               	movwf	follow_path@dp& (0+255),b
  2743  0036B4  0E00               	movlw	high f_open@dj
  2744  0036B6  0100               	movlb	0	; () banked
  2745  0036B8  6F87               	movwf	(follow_path@dp+1)& (0+255),b
  2746  0036BA  C09C  F088         	movff	f_open@path,follow_path@path
  2747  0036BE  C09D  F089         	movff	f_open@path+1,follow_path@path+1
  2748  0036C2  ECCF  F027         	call	_follow_path	;wreg free
  2749  0036C6  0100               	movlb	0	; () banked
  2750  0036C8  6FB7               	movwf	f_open@res& (0+255),b
  2751                           
  2752                           ; BSR set to: 0
  2753                           ;ff.c: 2482: dir = dj.dir;
  2754  0036CA  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  2755  0036CE  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  2756                           
  2757                           ; BSR set to: 0
  2758                           ;ff.c: 2484: if (res == FR_OK) {
  2759  0036D2  0100               	movlb	0	; () banked
  2760  0036D4  51B7               	movf	f_open@res& (0+255),w,b
  2761  0036D6  0100               	movlb	0	; () banked
  2762  0036D8  A4D8               	btfss	status,2,c
  2763  0036DA  D00A               	goto	l5529
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;ff.c: 2485: if (!dir)
  2767  0036DC  0100               	movlb	0	; () banked
  2768  0036DE  51B8               	movf	f_open@dir& (0+255),w,b
  2769  0036E0  0100               	movlb	0	; () banked
  2770  0036E2  11B9               	iorwf	(f_open@dir+1)& (0+255),w,b
  2771  0036E4  A4D8               	btfss	status,2,c
  2772  0036E6  D004               	goto	l5529
  2773                           
  2774                           ; BSR set to: 0
  2775                           ;ff.c: 2486: res = FR_INVALID_NAME;
  2776  0036E8  0E06               	movlw	6
  2777  0036EA  0100               	movlb	0	; () banked
  2778  0036EC  6FB7               	movwf	f_open@res& (0+255),b
  2779                           
  2780                           ; BSR set to: 0
  2781  0036EE  D000               	goto	l5529
  2782  0036F0                     l5529:
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;ff.c: 2491: }
  2786                           ;ff.c: 2493: if (mode & (0x08 | 0x10 | 0x04)) {
  2787  0036F0  C09E  F09F         	movff	f_open@mode,??_f_open
  2788  0036F4  0E1C               	movlw	28
  2789  0036F6  0100               	movlb	0	; () banked
  2790  0036F8  179F               	andwf	??_f_open& (0+255),f,b
  2791  0036FA  B4D8               	btfsc	status,2,c
  2792  0036FC  D101               	goto	l5577
  2793                           
  2794                           ; BSR set to: 0
  2795                           ;ff.c: 2494: if (res != FR_OK) {
  2796  0036FE  0100               	movlb	0	; () banked
  2797  003700  51B7               	movf	f_open@res& (0+255),w,b
  2798  003702  0100               	movlb	0	; () banked
  2799  003704  B4D8               	btfsc	status,2,c
  2800  003706  D017               	goto	l5541
  2801                           
  2802                           ; BSR set to: 0
  2803                           ;ff.c: 2495: if (res == FR_NO_FILE)
  2804  003708  0E04               	movlw	4
  2805  00370A  0100               	movlb	0	; () banked
  2806  00370C  19B7               	xorwf	f_open@res& (0+255),w,b
  2807  00370E  A4D8               	btfss	status,2,c
  2808  003710  D00B               	goto	l5537
  2809                           
  2810                           ; BSR set to: 0
  2811                           ;ff.c: 2499: res = dir_register(&dj);
  2812  003712  0EBA               	movlw	low f_open@dj
  2813  003714  0100               	movlb	0	; () banked
  2814  003716  6F8A               	movwf	dir_register@dp& (0+255),b
  2815  003718  0E00               	movlw	high f_open@dj
  2816  00371A  0100               	movlb	0	; () banked
  2817  00371C  6F8B               	movwf	(dir_register@dp+1)& (0+255),b
  2818  00371E  EC99  F02D         	call	_dir_register	;wreg free
  2819  003722  0100               	movlb	0	; () banked
  2820  003724  6FB7               	movwf	f_open@res& (0+255),b
  2821  003726  D000               	goto	l5537
  2822  003728                     l5537:
  2823                           
  2824                           ; BSR set to: 0
  2825                           ;ff.c: 2501: mode |= 0x08;
  2826  003728  0100               	movlb	0	; () banked
  2827  00372A  879E               	bsf	f_open@mode& (0+255),3,b
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;ff.c: 2502: dir = dj.dir;
  2831  00372C  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  2832  003730  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  2833                           
  2834                           ;ff.c: 2503: }
  2835  003734  D018               	goto	l607
  2836  003736                     l5541:
  2837                           
  2838                           ; BSR set to: 0
  2839                           ;ff.c: 2504: else {
  2840                           ;ff.c: 2505: if (dir[11] & (0x01 | 0x10)) {
  2841  003736  0100               	movlb	0	; () banked
  2842  003738  EE20 F00B          	lfsr	2,11
  2843  00373C  51B8               	movf	f_open@dir& (0+255),w,b
  2844  00373E  26D9               	addwf	fsr2l,f,c
  2845  003740  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2846  003742  22DA               	addwfc	fsr2h,f,c
  2847  003744  50DF               	movf	indf2,w,c
  2848  003746  0100               	movlb	0	; () banked
  2849  003748  6F9F               	movwf	??_f_open& (0+255),b
  2850  00374A  0E11               	movlw	17
  2851  00374C  0100               	movlb	0	; () banked
  2852  00374E  179F               	andwf	??_f_open& (0+255),f,b
  2853  003750  B4D8               	btfsc	status,2,c
  2854  003752  D002               	goto	l608
  2855                           
  2856                           ; BSR set to: 0
  2857                           ;ff.c: 2506: res = FR_DENIED;
  2858  003754  0E07               	movlw	7
  2859  003756  D004               	goto	L2
  2860  003758                     l608:
  2861                           
  2862                           ; BSR set to: 0
  2863                           ;ff.c: 2508: if (mode & 0x04)
  2864  003758  0100               	movlb	0	; () banked
  2865  00375A  A59E               	btfss	f_open@mode& (0+255),2,b
  2866  00375C  D004               	goto	l607
  2867                           
  2868                           ; BSR set to: 0
  2869                           ;ff.c: 2509: res = FR_EXIST;
  2870  00375E  0E08               	movlw	8
  2871  003760                     L2:
  2872  003760  0100               	movlb	0	; () banked
  2873  003762  6FB7               	movwf	f_open@res& (0+255),b
  2874                           
  2875                           ; BSR set to: 0
  2876  003764  D000               	goto	l607
  2877  003766                     l607:
  2878                           
  2879                           ; BSR set to: 0
  2880                           ;ff.c: 2510: }
  2881                           ;ff.c: 2511: }
  2882                           ;ff.c: 2512: if (res == FR_OK && (mode & 0x08)) {
  2883  003766  0100               	movlb	0	; () banked
  2884  003768  51B7               	movf	f_open@res& (0+255),w,b
  2885  00376A  0100               	movlb	0	; () banked
  2886  00376C  A4D8               	btfss	status,2,c
  2887  00376E  D0EA               	goto	l614
  2888                           
  2889                           ; BSR set to: 0
  2890  003770  0100               	movlb	0	; () banked
  2891  003772  A79E               	btfss	f_open@mode& (0+255),3,b
  2892  003774  D0E7               	goto	l614
  2893                           
  2894                           ; BSR set to: 0
  2895                           ;ff.c: 2513: dw = ((DWORD)(2015 - 1980) << 25 | (DWORD)1 << 21 | (DWORD)1 << 16);
  2896  003776  0E00               	movlw	0
  2897  003778  0100               	movlb	0	; () banked
  2898  00377A  6FB3               	movwf	f_open@dw& (0+255),b
  2899  00377C  0E00               	movlw	0
  2900  00377E  6FB4               	movwf	(f_open@dw+1)& (0+255),b
  2901  003780  0E21               	movlw	33
  2902  003782  6FB5               	movwf	(f_open@dw+2)& (0+255),b
  2903  003784  0E46               	movlw	70
  2904  003786  6FB6               	movwf	(f_open@dw+3)& (0+255),b
  2905                           
  2906                           ; BSR set to: 0
  2907                           ;ff.c: 2514: *(DWORD*)(BYTE*)(dir + 14)=(DWORD)(dw);
  2908  003788  0100               	movlb	0	; () banked
  2909  00378A  EE20 F00E          	lfsr	2,14
  2910  00378E  51B8               	movf	f_open@dir& (0+255),w,b
  2911  003790  26D9               	addwf	fsr2l,f,c
  2912  003792  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2913  003794  22DA               	addwfc	fsr2h,f,c
  2914  003796  C0B3  FFDE         	movff	f_open@dw,postinc2
  2915  00379A  C0B4  FFDE         	movff	f_open@dw+1,postinc2
  2916  00379E  C0B5  FFDE         	movff	f_open@dw+2,postinc2
  2917  0037A2  C0B6  FFDE         	movff	f_open@dw+3,postinc2
  2918                           
  2919                           ; BSR set to: 0
  2920                           ;ff.c: 2515: *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(dw);
  2921  0037A6  0100               	movlb	0	; () banked
  2922  0037A8  EE20 F016          	lfsr	2,22
  2923  0037AC  51B8               	movf	f_open@dir& (0+255),w,b
  2924  0037AE  26D9               	addwf	fsr2l,f,c
  2925  0037B0  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2926  0037B2  22DA               	addwfc	fsr2h,f,c
  2927  0037B4  C0B3  FFDE         	movff	f_open@dw,postinc2
  2928  0037B8  C0B4  FFDE         	movff	f_open@dw+1,postinc2
  2929  0037BC  C0B5  FFDE         	movff	f_open@dw+2,postinc2
  2930  0037C0  C0B6  FFDE         	movff	f_open@dw+3,postinc2
  2931                           
  2932                           ; BSR set to: 0
  2933                           ;ff.c: 2516: dir[11] = 0;
  2934  0037C4  0100               	movlb	0	; () banked
  2935  0037C6  EE20 F00B          	lfsr	2,11
  2936  0037CA  51B8               	movf	f_open@dir& (0+255),w,b
  2937  0037CC  26D9               	addwf	fsr2l,f,c
  2938  0037CE  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2939  0037D0  22DA               	addwfc	fsr2h,f,c
  2940  0037D2  0E00               	movlw	0
  2941  0037D4  6EDF               	movwf	indf2,c
  2942                           
  2943                           ; BSR set to: 0
  2944                           ;ff.c: 2517: *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(0);
  2945  0037D6  0100               	movlb	0	; () banked
  2946  0037D8  EE20 F01C          	lfsr	2,28
  2947  0037DC  51B8               	movf	f_open@dir& (0+255),w,b
  2948  0037DE  26D9               	addwf	fsr2l,f,c
  2949  0037E0  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2950  0037E2  22DA               	addwfc	fsr2h,f,c
  2951  0037E4  6ADE               	clrf	postinc2,c
  2952  0037E6  6ADE               	clrf	postinc2,c
  2953  0037E8  6ADE               	clrf	postinc2,c
  2954  0037EA  6ADD               	clrf	postdec2,c
  2955                           
  2956                           ; BSR set to: 0
  2957                           ;ff.c: 2518: cl = ld_clust(dj.fs, dir);
  2958  0037EC  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  2959  0037F0  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  2960  0037F4  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  2961  0037F8  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  2962  0037FC  EC71  F031         	call	_ld_clust	;wreg free
  2963  003800  C001  F0AF         	movff	?_ld_clust,f_open@cl
  2964  003804  C002  F0B0         	movff	?_ld_clust+1,f_open@cl+1
  2965  003808  C003  F0B1         	movff	?_ld_clust+2,f_open@cl+2
  2966  00380C  C004  F0B2         	movff	?_ld_clust+3,f_open@cl+3
  2967                           
  2968                           ;ff.c: 2519: st_clust(dir, 0);
  2969  003810  C0B8  F001         	movff	f_open@dir,st_clust@dir
  2970  003814  C0B9  F002         	movff	f_open@dir+1,st_clust@dir+1
  2971  003818  0E00               	movlw	0
  2972  00381A  6E03               	movwf	st_clust@cl,c
  2973  00381C  0E00               	movlw	0
  2974  00381E  6E04               	movwf	st_clust@cl+1,c
  2975  003820  0E00               	movlw	0
  2976  003822  6E05               	movwf	st_clust@cl+2,c
  2977  003824  0E00               	movlw	0
  2978  003826  6E06               	movwf	st_clust@cl+3,c
  2979  003828  EC35  F033         	call	_st_clust	;wreg free
  2980                           
  2981                           ;ff.c: 2520: dj.fs->wflag = 1;
  2982  00382C  0100               	movlb	0	; () banked
  2983  00382E  EE20 F004          	lfsr	2,4
  2984  003832  51BA               	movf	f_open@dj& (0+255),w,b
  2985  003834  26D9               	addwf	fsr2l,f,c
  2986  003836  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2987  003838  22DA               	addwfc	fsr2h,f,c
  2988  00383A  0E01               	movlw	1
  2989  00383C  6EDF               	movwf	indf2,c
  2990                           
  2991                           ; BSR set to: 0
  2992                           ;ff.c: 2521: if (cl) {
  2993  00383E  0100               	movlb	0	; () banked
  2994  003840  51AF               	movf	f_open@cl& (0+255),w,b
  2995  003842  0100               	movlb	0	; () banked
  2996  003844  11B0               	iorwf	(f_open@cl+1)& (0+255),w,b
  2997  003846  0100               	movlb	0	; () banked
  2998  003848  11B1               	iorwf	(f_open@cl+2)& (0+255),w,b
  2999  00384A  0100               	movlb	0	; () banked
  3000  00384C  11B2               	iorwf	(f_open@cl+3)& (0+255),w,b
  3001  00384E  B4D8               	btfsc	status,2,c
  3002  003850  D079               	goto	l614
  3003                           
  3004                           ; BSR set to: 0
  3005                           ;ff.c: 2522: dw = dj.fs->winsect;
  3006  003852  0100               	movlb	0	; () banked
  3007  003854  EE20 F02A          	lfsr	2,42
  3008  003858  51BA               	movf	f_open@dj& (0+255),w,b
  3009  00385A  26D9               	addwf	fsr2l,f,c
  3010  00385C  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  3011  00385E  22DA               	addwfc	fsr2h,f,c
  3012  003860  CFDE F0B3          	movff	postinc2,f_open@dw
  3013  003864  CFDE F0B4          	movff	postinc2,f_open@dw+1
  3014  003868  CFDE F0B5          	movff	postinc2,f_open@dw+2
  3015  00386C  CFDE F0B6          	movff	postinc2,f_open@dw+3
  3016                           
  3017                           ; BSR set to: 0
  3018                           ;ff.c: 2523: res = remove_chain(dj.fs, cl);
  3019  003870  C0BA  F056         	movff	f_open@dj,remove_chain@fs
  3020  003874  C0BB  F057         	movff	f_open@dj+1,remove_chain@fs+1
  3021  003878  C0AF  F058         	movff	f_open@cl,remove_chain@clst
  3022  00387C  C0B0  F059         	movff	f_open@cl+1,remove_chain@clst+1
  3023  003880  C0B1  F05A         	movff	f_open@cl+2,remove_chain@clst+2
  3024  003884  C0B2  F05B         	movff	f_open@cl+3,remove_chain@clst+3
  3025  003888  ECB1  F028         	call	_remove_chain	;wreg free
  3026  00388C  0100               	movlb	0	; () banked
  3027  00388E  6FB7               	movwf	f_open@res& (0+255),b
  3028                           
  3029                           ; BSR set to: 0
  3030                           ;ff.c: 2524: if (res == FR_OK) {
  3031  003890  0100               	movlb	0	; () banked
  3032  003892  51B7               	movf	f_open@res& (0+255),w,b
  3033  003894  0100               	movlb	0	; () banked
  3034  003896  A4D8               	btfss	status,2,c
  3035  003898  D055               	goto	l614
  3036                           
  3037                           ; BSR set to: 0
  3038                           ;ff.c: 2525: dj.fs->last_clust = cl - 1;
  3039  00389A  0EFF               	movlw	255
  3040  00389C  0100               	movlb	0	; () banked
  3041  00389E  25AF               	addwf	f_open@cl& (0+255),w,b
  3042  0038A0  0100               	movlb	0	; () banked
  3043  0038A2  6F9F               	movwf	??_f_open& (0+255),b
  3044  0038A4  0EFF               	movlw	255
  3045  0038A6  0100               	movlb	0	; () banked
  3046  0038A8  21B0               	addwfc	(f_open@cl+1)& (0+255),w,b
  3047  0038AA  0100               	movlb	0	; () banked
  3048  0038AC  6FA0               	movwf	(??_f_open+1)& (0+255),b
  3049  0038AE  0EFF               	movlw	255
  3050  0038B0  0100               	movlb	0	; () banked
  3051  0038B2  21B1               	addwfc	(f_open@cl+2)& (0+255),w,b
  3052  0038B4  0100               	movlb	0	; () banked
  3053  0038B6  6FA1               	movwf	(??_f_open+2)& (0+255),b
  3054  0038B8  0EFF               	movlw	255
  3055  0038BA  0100               	movlb	0	; () banked
  3056  0038BC  21B2               	addwfc	(f_open@cl+3)& (0+255),w,b
  3057  0038BE  0100               	movlb	0	; () banked
  3058  0038C0  6FA2               	movwf	(??_f_open+3)& (0+255),b
  3059  0038C2  0100               	movlb	0	; () banked
  3060  0038C4  EE20 F00A          	lfsr	2,10
  3061  0038C8  51BA               	movf	f_open@dj& (0+255),w,b
  3062  0038CA  26D9               	addwf	fsr2l,f,c
  3063  0038CC  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  3064  0038CE  22DA               	addwfc	fsr2h,f,c
  3065  0038D0  C09F  FFDE         	movff	??_f_open,postinc2
  3066  0038D4  C0A0  FFDE         	movff	??_f_open+1,postinc2
  3067  0038D8  C0A1  FFDE         	movff	??_f_open+2,postinc2
  3068  0038DC  C0A2  FFDE         	movff	??_f_open+3,postinc2
  3069                           
  3070                           ; BSR set to: 0
  3071                           ;ff.c: 2526: res = move_window(dj.fs, dw);
  3072  0038E0  C0BA  F030         	movff	f_open@dj,move_window@fs
  3073  0038E4  C0BB  F031         	movff	f_open@dj+1,move_window@fs+1
  3074  0038E8  C0B3  F032         	movff	f_open@dw,move_window@sector
  3075  0038EC  C0B4  F033         	movff	f_open@dw+1,move_window@sector+1
  3076  0038F0  C0B5  F034         	movff	f_open@dw+2,move_window@sector+2
  3077  0038F4  C0B6  F035         	movff	f_open@dw+3,move_window@sector+3
  3078  0038F8  ECFB  F02F         	call	_move_window	;wreg free
  3079  0038FC  D020               	goto	L4
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;ff.c: 2527: }
  3083                           ;ff.c: 2528: }
  3084                           ;ff.c: 2529: }
  3085                           ;ff.c: 2530: }
  3086                           
  3087                           ; BSR set to: 0
  3088                           
  3089                           ; BSR set to: 0
  3090  0038FE  D022               	goto	l614
  3091  003900                     l5577:
  3092                           
  3093                           ; BSR set to: 0
  3094                           ;ff.c: 2531: else {
  3095                           ;ff.c: 2532: if (res == FR_OK) {
  3096  003900  0100               	movlb	0	; () banked
  3097  003902  51B7               	movf	f_open@res& (0+255),w,b
  3098  003904  0100               	movlb	0	; () banked
  3099  003906  A4D8               	btfss	status,2,c
  3100  003908  D01D               	goto	l614
  3101                           
  3102                           ; BSR set to: 0
  3103                           ;ff.c: 2533: if (dir[11] & 0x10) {
  3104  00390A  0100               	movlb	0	; () banked
  3105  00390C  EE20 F00B          	lfsr	2,11
  3106  003910  51B8               	movf	f_open@dir& (0+255),w,b
  3107  003912  26D9               	addwf	fsr2l,f,c
  3108  003914  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  3109  003916  22DA               	addwfc	fsr2h,f,c
  3110  003918  0100               	movlb	0	; () banked
  3111  00391A  A8DF               	btfss	indf2,4,c
  3112  00391C  D002               	goto	l616
  3113                           
  3114                           ; BSR set to: 0
  3115                           ;ff.c: 2534: res = FR_NO_FILE;
  3116  00391E  0E04               	movlw	4
  3117  003920  D00E               	goto	L4
  3118  003922                     l616:
  3119                           
  3120                           ; BSR set to: 0
  3121                           ;ff.c: 2536: if ((mode & 0x02) && (dir[11] & 0x01))
  3122  003922  0100               	movlb	0	; () banked
  3123  003924  A39E               	btfss	f_open@mode& (0+255),1,b
  3124  003926  D00E               	goto	l614
  3125                           
  3126                           ; BSR set to: 0
  3127  003928  0100               	movlb	0	; () banked
  3128  00392A  EE20 F00B          	lfsr	2,11
  3129  00392E  51B8               	movf	f_open@dir& (0+255),w,b
  3130  003930  26D9               	addwf	fsr2l,f,c
  3131  003932  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  3132  003934  22DA               	addwfc	fsr2h,f,c
  3133  003936  0100               	movlb	0	; () banked
  3134  003938  A0DF               	btfss	indf2,0,c
  3135  00393A  D004               	goto	l614
  3136                           
  3137                           ; BSR set to: 0
  3138                           ;ff.c: 2537: res = FR_DENIED;
  3139  00393C  0E07               	movlw	7
  3140  00393E                     L4:
  3141  00393E  0100               	movlb	0	; () banked
  3142  003940  6FB7               	movwf	f_open@res& (0+255),b
  3143                           
  3144                           ; BSR set to: 0
  3145                           
  3146                           ; BSR set to: 0
  3147  003942  D000               	goto	l614
  3148  003944                     l614:
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;ff.c: 2538: }
  3152                           ;ff.c: 2539: }
  3153                           ;ff.c: 2540: }
  3154                           ;ff.c: 2541: if (res == FR_OK) {
  3155  003944  0100               	movlb	0	; () banked
  3156  003946  51B7               	movf	f_open@res& (0+255),w,b
  3157  003948  0100               	movlb	0	; () banked
  3158  00394A  A4D8               	btfss	status,2,c
  3159  00394C  D028               	goto	l5595
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;ff.c: 2542: if (mode & 0x08)
  3163  00394E  0100               	movlb	0	; () banked
  3164  003950  A79E               	btfss	f_open@mode& (0+255),3,b
  3165  003952  D003               	goto	l5591
  3166                           
  3167                           ; BSR set to: 0
  3168                           ;ff.c: 2543: mode |= 0x20;
  3169  003954  0100               	movlb	0	; () banked
  3170  003956  8B9E               	bsf	f_open@mode& (0+255),5,b
  3171  003958  D000               	goto	l5591
  3172  00395A                     l5591:
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;ff.c: 2544: fp->dir_sect = dj.fs->winsect;
  3176  00395A  0100               	movlb	0	; () banked
  3177  00395C  EE20 F02A          	lfsr	2,42
  3178  003960  51BA               	movf	f_open@dj& (0+255),w,b
  3179  003962  26D9               	addwf	fsr2l,f,c
  3180  003964  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  3181  003966  22DA               	addwfc	fsr2h,f,c
  3182  003968  0100               	movlb	0	; () banked
  3183  00396A  EE10 F01A          	lfsr	1,26
  3184  00396E  519A               	movf	f_open@fp& (0+255),w,b
  3185  003970  26E1               	addwf	fsr1l,f,c
  3186  003972  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3187  003974  22E2               	addwfc	fsr1h,f,c
  3188  003976  CFDE FFE6          	movff	postinc2,postinc1
  3189  00397A  CFDE FFE6          	movff	postinc2,postinc1
  3190  00397E  CFDE FFE6          	movff	postinc2,postinc1
  3191  003982  CFDE FFE6          	movff	postinc2,postinc1
  3192                           
  3193                           ; BSR set to: 0
  3194                           ;ff.c: 2545: fp->dir_ptr = dir;
  3195  003986  0100               	movlb	0	; () banked
  3196  003988  EE20 F01E          	lfsr	2,30
  3197  00398C  519A               	movf	f_open@fp& (0+255),w,b
  3198  00398E  26D9               	addwf	fsr2l,f,c
  3199  003990  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3200  003992  22DA               	addwfc	fsr2h,f,c
  3201  003994  C0B8  FFDE         	movff	f_open@dir,postinc2
  3202  003998  C0B9  FFDD         	movff	f_open@dir+1,postdec2
  3203  00399C  D000               	goto	l5595
  3204  00399E                     l5595:
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;ff.c: 2550: }
  3208                           ;ff.c: 2563: ;
  3209                           ;ff.c: 2565: if (res == FR_OK) {
  3210  00399E  0100               	movlb	0	; () banked
  3211  0039A0  51B7               	movf	f_open@res& (0+255),w,b
  3212  0039A2  0100               	movlb	0	; () banked
  3213  0039A4  A4D8               	btfss	status,2,c
  3214  0039A6  D075               	goto	l5611
  3215                           
  3216                           ; BSR set to: 0
  3217                           ;ff.c: 2566: fp->flag = mode;
  3218  0039A8  0100               	movlb	0	; () banked
  3219  0039AA  EE20 F004          	lfsr	2,4
  3220  0039AE  519A               	movf	f_open@fp& (0+255),w,b
  3221  0039B0  26D9               	addwf	fsr2l,f,c
  3222  0039B2  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3223  0039B4  22DA               	addwfc	fsr2h,f,c
  3224  0039B6  C09E  FFDF         	movff	f_open@mode,indf2
  3225                           
  3226                           ;ff.c: 2567: fp->err = 0;
  3227  0039BA  0100               	movlb	0	; () banked
  3228  0039BC  EE20 F005          	lfsr	2,5
  3229  0039C0  519A               	movf	f_open@fp& (0+255),w,b
  3230  0039C2  26D9               	addwf	fsr2l,f,c
  3231  0039C4  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3232  0039C6  22DA               	addwfc	fsr2h,f,c
  3233  0039C8  0E00               	movlw	0
  3234  0039CA  6EDF               	movwf	indf2,c
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;ff.c: 2568: fp->sclust = ld_clust(dj.fs, dir);
  3238  0039CC  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  3239  0039D0  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  3240  0039D4  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  3241  0039D8  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  3242  0039DC  EC71  F031         	call	_ld_clust	;wreg free
  3243  0039E0  0100               	movlb	0	; () banked
  3244  0039E2  EE20 F00E          	lfsr	2,14
  3245  0039E6  519A               	movf	f_open@fp& (0+255),w,b
  3246  0039E8  26D9               	addwf	fsr2l,f,c
  3247  0039EA  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3248  0039EC  22DA               	addwfc	fsr2h,f,c
  3249  0039EE  C001  FFDE         	movff	?_ld_clust,postinc2
  3250  0039F2  C002  FFDE         	movff	?_ld_clust+1,postinc2
  3251  0039F6  C003  FFDE         	movff	?_ld_clust+2,postinc2
  3252  0039FA  C004  FFDE         	movff	?_ld_clust+3,postinc2
  3253                           
  3254                           ; BSR set to: 0
  3255                           ;ff.c: 2569: fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(dir + 28));
  3256  0039FE  0100               	movlb	0	; () banked
  3257  003A00  EE20 F01C          	lfsr	2,28
  3258  003A04  51B8               	movf	f_open@dir& (0+255),w,b
  3259  003A06  26D9               	addwf	fsr2l,f,c
  3260  003A08  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  3261  003A0A  22DA               	addwfc	fsr2h,f,c
  3262  003A0C  0100               	movlb	0	; () banked
  3263  003A0E  EE10 F00A          	lfsr	1,10
  3264  003A12  519A               	movf	f_open@fp& (0+255),w,b
  3265  003A14  26E1               	addwf	fsr1l,f,c
  3266  003A16  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3267  003A18  22E2               	addwfc	fsr1h,f,c
  3268  003A1A  CFDE FFE6          	movff	postinc2,postinc1
  3269  003A1E  CFDE FFE6          	movff	postinc2,postinc1
  3270  003A22  CFDE FFE6          	movff	postinc2,postinc1
  3271  003A26  CFDE FFE6          	movff	postinc2,postinc1
  3272                           
  3273                           ; BSR set to: 0
  3274                           ;ff.c: 2570: fp->fptr = 0;
  3275  003A2A  0100               	movlb	0	; () banked
  3276  003A2C  EE20 F006          	lfsr	2,6
  3277  003A30  519A               	movf	f_open@fp& (0+255),w,b
  3278  003A32  26D9               	addwf	fsr2l,f,c
  3279  003A34  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3280  003A36  22DA               	addwfc	fsr2h,f,c
  3281  003A38  6ADE               	clrf	postinc2,c
  3282  003A3A  6ADE               	clrf	postinc2,c
  3283  003A3C  6ADE               	clrf	postinc2,c
  3284  003A3E  6ADD               	clrf	postdec2,c
  3285                           
  3286                           ; BSR set to: 0
  3287                           ;ff.c: 2571: fp->dsect = 0;
  3288  003A40  0100               	movlb	0	; () banked
  3289  003A42  EE20 F016          	lfsr	2,22
  3290  003A46  519A               	movf	f_open@fp& (0+255),w,b
  3291  003A48  26D9               	addwf	fsr2l,f,c
  3292  003A4A  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3293  003A4C  22DA               	addwfc	fsr2h,f,c
  3294  003A4E  6ADE               	clrf	postinc2,c
  3295  003A50  6ADE               	clrf	postinc2,c
  3296  003A52  6ADE               	clrf	postinc2,c
  3297  003A54  6ADD               	clrf	postdec2,c
  3298                           
  3299                           ; BSR set to: 0
  3300                           ;ff.c: 2575: fp->fs = dj.fs;
  3301  003A56  C09A  FFD9         	movff	f_open@fp,fsr2l
  3302  003A5A  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  3303  003A5E  C0BA  FFDE         	movff	f_open@dj,postinc2
  3304  003A62  C0BB  FFDD         	movff	f_open@dj+1,postdec2
  3305                           
  3306                           ; BSR set to: 0
  3307                           ;ff.c: 2576: fp->id = fp->fs->id;
  3308  003A66  C09A  FFD9         	movff	f_open@fp,fsr2l
  3309  003A6A  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  3310  003A6E  EE10 F006          	lfsr	1,6
  3311  003A72  50DE               	movf	postinc2,w,c
  3312  003A74  26E1               	addwf	fsr1l,f,c
  3313  003A76  50DD               	movf	postdec2,w,c
  3314  003A78  22E2               	addwfc	fsr1h,f,c
  3315  003A7A  0100               	movlb	0	; () banked
  3316  003A7C  EE20 F002          	lfsr	2,2
  3317  003A80  519A               	movf	f_open@fp& (0+255),w,b
  3318  003A82  26D9               	addwf	fsr2l,f,c
  3319  003A84  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3320  003A86  22DA               	addwfc	fsr2h,f,c
  3321  003A88  CFE6 FFDE          	movff	postinc1,postinc2
  3322  003A8C  CFE5 FFDD          	movff	postdec1,postdec2
  3323                           
  3324                           ; BSR set to: 0
  3325  003A90  D000               	goto	l5611
  3326  003A92                     l5611:
  3327                           
  3328                           ; BSR set to: 0
  3329                           ;ff.c: 2577: }
  3330                           ;ff.c: 2578: }
  3331                           ;ff.c: 2580: return res;
  3332  003A92  0100               	movlb	0	; () banked
  3333  003A94  51B7               	movf	f_open@res& (0+255),w,b
  3334  003A96  0012               	return	
  3335                           
  3336                           ; BSR set to: 0
  3337                           
  3338                           ; BSR set to: 0
  3339  003A98  0012               	return		;funcret
  3340  003A9A                     __end_of_f_open:
  3341                           	opt stack 0
  3342                           tblptru	equ	0xFF8
  3343                           tblptrh	equ	0xFF7
  3344                           tblptrl	equ	0xFF6
  3345                           tablat	equ	0xFF5
  3346                           postinc0	equ	0xFEE
  3347                           fsr0h	equ	0xFEA
  3348                           fsr0l	equ	0xFE9
  3349                           wreg	equ	0xFE8
  3350                           indf1	equ	0xFE7
  3351                           postinc1	equ	0xFE6
  3352                           postdec1	equ	0xFE5
  3353                           fsr1h	equ	0xFE2
  3354                           fsr1l	equ	0xFE1
  3355                           indf2	equ	0xFDF
  3356                           postinc2	equ	0xFDE
  3357                           postdec2	equ	0xFDD
  3358                           plusw2	equ	0xFDB
  3359                           fsr2h	equ	0xFDA
  3360                           fsr2l	equ	0xFD9
  3361                           status	equ	0xFD8
  3362                           
  3363 ;; *************** function _remove_chain *****************
  3364 ;; Defined at:
  3365 ;;		line 937 in file "../../SD_Card_FatFs/ff.c"
  3366 ;; Parameters:    Size  Location     Type
  3367 ;;  fs              2   85[COMRAM] PTR struct .
  3368 ;;		 -> NULL(0), FatFs(558), 
  3369 ;;  clst            4   87[COMRAM] unsigned long 
  3370 ;; Auto vars:     Size  Location     Type
  3371 ;;  nxt             4    1[BANK0 ] unsigned long 
  3372 ;;  res             1    0[BANK0 ] enum E88
  3373 ;; Return value:  Size  Location     Type
  3374 ;;                  1    wreg      enum E88
  3375 ;; Registers used:
  3376 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3377 ;; Tracked objects:
  3378 ;;		On entry : 0/0
  3379 ;;		On exit  : 0/0
  3380 ;;		Unchanged: 0/0
  3381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3382 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3383 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3384 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3385 ;;      Totals:        10       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3386 ;;Total ram usage:       15 bytes
  3387 ;; Hardware stack levels used:    1
  3388 ;; Hardware stack levels required when called:    9
  3389 ;; This function calls:
  3390 ;;		_get_fat
  3391 ;;		_put_fat
  3392 ;; This function is called by:
  3393 ;;		_f_open
  3394 ;; This function uses a non-reentrant model
  3395 ;;
  3396                           
  3397                           	psect	text3
  3398  005162                     __ptext3:
  3399                           	opt stack 0
  3400  005162                     _remove_chain:
  3401                           	opt stack 20
  3402                           
  3403                           ;ff.c: 942: FRESULT res;
  3404                           ;ff.c: 943: DWORD nxt;
  3405                           ;ff.c: 948: if (clst < 2 || clst >= fs->n_fatent) {
  3406                           
  3407                           ; BSR set to: 0
  3408                           ;incstack = 0
  3409  005162  505B               	movf	remove_chain@clst+3,w,c
  3410  005164  105A               	iorwf	remove_chain@clst+2,w,c
  3411  005166  1059               	iorwf	remove_chain@clst+1,w,c
  3412  005168  E104               	bnz	u7110
  3413  00516A  0E02               	movlw	2
  3414  00516C  5C58               	subwf	remove_chain@clst,w,c
  3415  00516E  A0D8               	btfss	status,0,c
  3416  005170  D040               	goto	l5063
  3417  005172                     u7110:
  3418  005172  EE20 F012          	lfsr	2,18
  3419  005176  5056               	movf	remove_chain@fs,w,c
  3420  005178  26D9               	addwf	fsr2l,f,c
  3421  00517A  5057               	movf	remove_chain@fs+1,w,c
  3422  00517C  22DA               	addwfc	fsr2h,f,c
  3423  00517E  50DE               	movf	postinc2,w,c
  3424  005180  5C58               	subwf	remove_chain@clst,w,c
  3425  005182  50DE               	movf	postinc2,w,c
  3426  005184  5859               	subwfb	remove_chain@clst+1,w,c
  3427  005186  50DE               	movf	postinc2,w,c
  3428  005188  585A               	subwfb	remove_chain@clst+2,w,c
  3429  00518A  50DE               	movf	postinc2,w,c
  3430  00518C  585B               	subwfb	remove_chain@clst+3,w,c
  3431  00518E  B0D8               	btfsc	status,0,c
  3432  005190  D030               	goto	l5063
  3433                           
  3434                           ;ff.c: 952: res = FR_OK;
  3435                           
  3436                           ; BSR set to: 0
  3437                           
  3438                           ;ff.c: 951: } else {
  3439                           
  3440                           ;ff.c: 949: res = FR_INT_ERR;
  3441  005192  0E00               	movlw	0
  3442  005194  0100               	movlb	0	; () banked
  3443  005196  6F60               	movwf	remove_chain@res& (0+255),b
  3444                           
  3445                           ;ff.c: 953: while (clst < fs->n_fatent) {
  3446  005198  D089               	goto	l328
  3447  00519A                     l5055:
  3448                           
  3449                           ; BSR set to: 0
  3450                           ;ff.c: 954: nxt = get_fat(fs, clst);
  3451  00519A  C056  F03B         	movff	remove_chain@fs,get_fat@fs
  3452  00519E  C057  F03C         	movff	remove_chain@fs+1,get_fat@fs+1
  3453  0051A2  C058  F03D         	movff	remove_chain@clst,get_fat@clst
  3454  0051A6  C059  F03E         	movff	remove_chain@clst+1,get_fat@clst+1
  3455  0051AA  C05A  F03F         	movff	remove_chain@clst+2,get_fat@clst+2
  3456  0051AE  C05B  F040         	movff	remove_chain@clst+3,get_fat@clst+3
  3457  0051B2  EC34  F021         	call	_get_fat	;wreg free
  3458  0051B6  C03B  F061         	movff	?_get_fat,remove_chain@nxt
  3459  0051BA  C03C  F062         	movff	?_get_fat+1,remove_chain@nxt+1
  3460  0051BE  C03D  F063         	movff	?_get_fat+2,remove_chain@nxt+2
  3461  0051C2  C03E  F064         	movff	?_get_fat+3,remove_chain@nxt+3
  3462                           
  3463                           ;ff.c: 955: if (nxt == 0) break;
  3464  0051C6  0100               	movlb	0	; () banked
  3465  0051C8  5161               	movf	remove_chain@nxt& (0+255),w,b
  3466  0051CA  0100               	movlb	0	; () banked
  3467  0051CC  1162               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  3468  0051CE  0100               	movlb	0	; () banked
  3469  0051D0  1163               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  3470  0051D2  0100               	movlb	0	; () banked
  3471  0051D4  1164               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  3472  0051D6  B4D8               	btfsc	status,2,c
  3473  0051D8  D07B               	goto	l5081
  3474  0051DA  D001               	goto	l5061
  3475                           
  3476                           ; BSR set to: 0
  3477  0051DC  D079               	goto	l5081
  3478  0051DE                     l5061:
  3479                           
  3480                           ; BSR set to: 0
  3481                           ;ff.c: 956: if (nxt == 1) { res = FR_INT_ERR; break; }
  3482  0051DE  0100               	movlb	0	; () banked
  3483  0051E0  0561               	decf	remove_chain@nxt& (0+255),w,b
  3484  0051E2  0100               	movlb	0	; () banked
  3485  0051E4  1162               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  3486  0051E6  0100               	movlb	0	; () banked
  3487  0051E8  1163               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  3488  0051EA  0100               	movlb	0	; () banked
  3489  0051EC  1164               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  3490  0051EE  A4D8               	btfss	status,2,c
  3491  0051F0  D002               	goto	l5065
  3492  0051F2                     l5063:
  3493                           
  3494                           ; BSR set to: 0
  3495  0051F2  0E02               	movlw	2
  3496  0051F4  D00E               	goto	L5
  3497  0051F6                     l5065:
  3498                           
  3499                           ; BSR set to: 0
  3500                           ;ff.c: 957: if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
  3501  0051F6  0100               	movlb	0	; () banked
  3502  0051F8  2961               	incf	remove_chain@nxt& (0+255),w,b
  3503  0051FA  E10E               	bnz	l5069
  3504  0051FC  0100               	movlb	0	; () banked
  3505  0051FE  2962               	incf	(remove_chain@nxt+1)& (0+255),w,b
  3506  005200  E10B               	bnz	l5069
  3507  005202  0100               	movlb	0	; () banked
  3508  005204  2963               	incf	(remove_chain@nxt+2)& (0+255),w,b
  3509  005206  E108               	bnz	l5069
  3510  005208  0100               	movlb	0	; () banked
  3511  00520A  2964               	incf	(remove_chain@nxt+3)& (0+255),w,b
  3512  00520C  A4D8               	btfss	status,2,c
  3513  00520E  D004               	goto	l5069
  3514                           
  3515                           ; BSR set to: 0
  3516  005210  0E01               	movlw	1
  3517  005212                     L5:
  3518  005212  0100               	movlb	0	; () banked
  3519  005214  6F60               	movwf	remove_chain@res& (0+255),b
  3520  005216  D05C               	goto	l5081
  3521  005218                     l5069:
  3522                           
  3523                           ; BSR set to: 0
  3524                           ;ff.c: 958: res = put_fat(fs, clst, 0);
  3525  005218  C056  F03B         	movff	remove_chain@fs,put_fat@fs
  3526  00521C  C057  F03C         	movff	remove_chain@fs+1,put_fat@fs+1
  3527  005220  C058  F03D         	movff	remove_chain@clst,put_fat@clst
  3528  005224  C059  F03E         	movff	remove_chain@clst+1,put_fat@clst+1
  3529  005228  C05A  F03F         	movff	remove_chain@clst+2,put_fat@clst+2
  3530  00522C  C05B  F040         	movff	remove_chain@clst+3,put_fat@clst+3
  3531  005230  0E00               	movlw	0
  3532  005232  6E41               	movwf	put_fat@val,c
  3533  005234  0E00               	movlw	0
  3534  005236  6E42               	movwf	put_fat@val+1,c
  3535  005238  0E00               	movlw	0
  3536  00523A  6E43               	movwf	put_fat@val+2,c
  3537  00523C  0E00               	movlw	0
  3538  00523E  6E44               	movwf	put_fat@val+3,c
  3539  005240  EC4D  F01D         	call	_put_fat	;wreg free
  3540  005244  0100               	movlb	0	; () banked
  3541  005246  6F60               	movwf	remove_chain@res& (0+255),b
  3542                           
  3543                           ; BSR set to: 0
  3544                           ;ff.c: 959: if (res != FR_OK) break;
  3545  005248  0100               	movlb	0	; () banked
  3546  00524A  5160               	movf	remove_chain@res& (0+255),w,b
  3547  00524C  0100               	movlb	0	; () banked
  3548  00524E  A4D8               	btfss	status,2,c
  3549  005250  D03F               	goto	l5081
  3550  005252  D001               	goto	l5075
  3551                           
  3552                           ; BSR set to: 0
  3553  005254  D03D               	goto	l5081
  3554  005256                     l5075:
  3555                           
  3556                           ; BSR set to: 0
  3557                           ;ff.c: 960: if (fs->free_clust != 0xFFFFFFFF) {
  3558  005256  EE20 F00E          	lfsr	2,14
  3559  00525A  5056               	movf	remove_chain@fs,w,c
  3560  00525C  26D9               	addwf	fsr2l,f,c
  3561  00525E  5057               	movf	remove_chain@fs+1,w,c
  3562  005260  22DA               	addwfc	fsr2h,f,c
  3563  005262  28DE               	incf	postinc2,w,c
  3564  005264  E107               	bnz	u7170
  3565  005266  28DE               	incf	postinc2,w,c
  3566  005268  E105               	bnz	u7170
  3567  00526A  28DE               	incf	postinc2,w,c
  3568  00526C  E103               	bnz	u7170
  3569  00526E  28DE               	incf	postinc2,w,c
  3570  005270  B4D8               	btfsc	status,2,c
  3571  005272  D014               	goto	l5079
  3572  005274                     u7170:
  3573                           
  3574                           ; BSR set to: 0
  3575                           ;ff.c: 961: fs->free_clust++;
  3576  005274  EE20 F00E          	lfsr	2,14
  3577  005278  5056               	movf	remove_chain@fs,w,c
  3578  00527A  26D9               	addwf	fsr2l,f,c
  3579  00527C  5057               	movf	remove_chain@fs+1,w,c
  3580  00527E  22DA               	addwfc	fsr2h,f,c
  3581  005280  2ADE               	incf	postinc2,f,c
  3582  005282  0E00               	movlw	0
  3583  005284  22DE               	addwfc	postinc2,f,c
  3584  005286  22DE               	addwfc	postinc2,f,c
  3585  005288  22DE               	addwfc	postinc2,f,c
  3586                           
  3587                           ;ff.c: 962: fs->fsi_flag |= 1;
  3588  00528A  EE20 F005          	lfsr	2,5
  3589  00528E  5056               	movf	remove_chain@fs,w,c
  3590  005290  26D9               	addwf	fsr2l,f,c
  3591  005292  5057               	movf	remove_chain@fs+1,w,c
  3592  005294  22DA               	addwfc	fsr2h,f,c
  3593  005296  0E00               	movlw	0
  3594  005298  80DB               	bsf	plusw2,0,c
  3595  00529A  D000               	goto	l5079
  3596  00529C                     l5079:
  3597                           
  3598                           ; BSR set to: 0
  3599                           ;ff.c: 963: }
  3600                           ;ff.c: 974: clst = nxt;
  3601  00529C  C061  F058         	movff	remove_chain@nxt,remove_chain@clst
  3602  0052A0  C062  F059         	movff	remove_chain@nxt+1,remove_chain@clst+1
  3603  0052A4  C063  F05A         	movff	remove_chain@nxt+2,remove_chain@clst+2
  3604  0052A8  C064  F05B         	movff	remove_chain@nxt+3,remove_chain@clst+3
  3605  0052AC                     l328:
  3606                           
  3607                           ; BSR set to: 0
  3608  0052AC  EE20 F012          	lfsr	2,18
  3609  0052B0  5056               	movf	remove_chain@fs,w,c
  3610  0052B2  26D9               	addwf	fsr2l,f,c
  3611  0052B4  5057               	movf	remove_chain@fs+1,w,c
  3612  0052B6  22DA               	addwfc	fsr2h,f,c
  3613  0052B8  50DE               	movf	postinc2,w,c
  3614  0052BA  5C58               	subwf	remove_chain@clst,w,c
  3615  0052BC  50DE               	movf	postinc2,w,c
  3616  0052BE  5859               	subwfb	remove_chain@clst+1,w,c
  3617  0052C0  50DE               	movf	postinc2,w,c
  3618  0052C2  585A               	subwfb	remove_chain@clst+2,w,c
  3619  0052C4  50DE               	movf	postinc2,w,c
  3620  0052C6  585B               	subwfb	remove_chain@clst+3,w,c
  3621  0052C8  B0D8               	btfsc	status,0,c
  3622  0052CA  D002               	goto	l5081
  3623  0052CC  D766               	goto	l5055
  3624                           
  3625                           ; BSR set to: 0
  3626  0052CE  D000               	goto	l5081
  3627  0052D0                     l5081:
  3628                           
  3629                           ; BSR set to: 0
  3630                           ;ff.c: 975: }
  3631                           ;ff.c: 976: }
  3632                           ;ff.c: 978: return res;
  3633  0052D0  0100               	movlb	0	; () banked
  3634  0052D2  5160               	movf	remove_chain@res& (0+255),w,b
  3635  0052D4  0012               	return	
  3636                           
  3637                           ; BSR set to: 0
  3638                           
  3639                           ; BSR set to: 0
  3640  0052D6  0012               	return		;funcret
  3641  0052D8                     __end_of_remove_chain:
  3642                           	opt stack 0
  3643                           tblptru	equ	0xFF8
  3644                           tblptrh	equ	0xFF7
  3645                           tblptrl	equ	0xFF6
  3646                           tablat	equ	0xFF5
  3647                           postinc0	equ	0xFEE
  3648                           fsr0h	equ	0xFEA
  3649                           fsr0l	equ	0xFE9
  3650                           wreg	equ	0xFE8
  3651                           indf1	equ	0xFE7
  3652                           postinc1	equ	0xFE6
  3653                           postdec1	equ	0xFE5
  3654                           fsr1h	equ	0xFE2
  3655                           fsr1l	equ	0xFE1
  3656                           indf2	equ	0xFDF
  3657                           postinc2	equ	0xFDE
  3658                           postdec2	equ	0xFDD
  3659                           plusw2	equ	0xFDB
  3660                           fsr2h	equ	0xFDA
  3661                           fsr2l	equ	0xFD9
  3662                           status	equ	0xFD8
  3663                           
  3664 ;; *************** function _follow_path *****************
  3665 ;; Defined at:
  3666 ;;		line 2052 in file "../../SD_Card_FatFs/ff.c"
  3667 ;; Parameters:    Size  Location     Type
  3668 ;;  dp              2   38[BANK0 ] PTR struct .
  3669 ;;		 -> f_open@dj(22), 
  3670 ;;  path            2   40[BANK0 ] PTR const unsigned char 
  3671 ;;		 -> STR_2(9), STR_1(1), 
  3672 ;; Auto vars:     Size  Location     Type
  3673 ;;  dir             2   42[BANK0 ] PTR unsigned char 
  3674 ;;		 -> NULL(0), FatFs(558), 
  3675 ;;  res             1   45[BANK0 ] enum E88
  3676 ;;  ns              1   44[BANK0 ] unsigned char 
  3677 ;; Return value:  Size  Location     Type
  3678 ;;                  1    wreg      enum E88
  3679 ;; Registers used:
  3680 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3681 ;; Tracked objects:
  3682 ;;		On entry : 0/0
  3683 ;;		On exit  : 0/0
  3684 ;;		Unchanged: 0/0
  3685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3686 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3687 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3689 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3690 ;;Total ram usage:        8 bytes
  3691 ;; Hardware stack levels used:    1
  3692 ;; Hardware stack levels required when called:   12
  3693 ;; This function calls:
  3694 ;;		_create_name
  3695 ;;		_dir_find
  3696 ;;		_dir_sdi
  3697 ;;		_ld_clust
  3698 ;; This function is called by:
  3699 ;;		_f_open
  3700 ;; This function uses a non-reentrant model
  3701 ;;
  3702                           
  3703                           	psect	text4
  3704  004F9E                     __ptext4:
  3705                           	opt stack 0
  3706  004F9E                     _follow_path:
  3707                           	opt stack 17
  3708                           
  3709                           ;ff.c: 2057: FRESULT res;
  3710                           ;ff.c: 2058: BYTE *dir, ns;
  3711                           ;ff.c: 2068: if (*path == '/' || *path == '\\')
  3712                           
  3713                           ; BSR set to: 0
  3714                           ;incstack = 0
  3715  004F9E  C088  FFF6         	movff	follow_path@path,tblptrl
  3716  004FA2  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3717  004FA6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3718  004FA6  6AF8               	clrf	tblptru,c
  3719  004FA8                     	endif
  3720  004FA8                     	if	0	;tblptru may be non-zero
  3721  004FA8                     	endif
  3722  004FA8  0008               	tblrd		*
  3723  004FAA  50F5               	movf	tablat,w,c
  3724  004FAC  0A2F               	xorlw	47
  3725  004FAE  B4D8               	btfsc	status,2,c
  3726  004FB0  D00A               	goto	l5107
  3727  004FB2  C088  FFF6         	movff	follow_path@path,tblptrl
  3728  004FB6  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3729  004FBA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3730  004FBA  6AF8               	clrf	tblptru,c
  3731  004FBC                     	endif
  3732  004FBC                     	if	0	;tblptru may be non-zero
  3733  004FBC                     	endif
  3734  004FBC  0008               	tblrd		*
  3735  004FBE  50F5               	movf	tablat,w,c
  3736  004FC0  0A5C               	xorlw	92
  3737  004FC2  A4D8               	btfss	status,2,c
  3738  004FC4  D004               	goto	l5109
  3739  004FC6                     l5107:
  3740                           
  3741                           ;ff.c: 2069: path++;
  3742  004FC6  0100               	movlb	0	; () banked
  3743  004FC8  4B88               	infsnz	follow_path@path& (0+255),f,b
  3744  004FCA  2B89               	incf	(follow_path@path+1)& (0+255),f,b
  3745  004FCC  D000               	goto	l5109
  3746  004FCE                     l5109:
  3747                           
  3748                           ;ff.c: 2070: dp->sclust = 0;
  3749  004FCE  0100               	movlb	0	; () banked
  3750  004FD0  EE20 F006          	lfsr	2,6
  3751  004FD4  5186               	movf	follow_path@dp& (0+255),w,b
  3752  004FD6  26D9               	addwf	fsr2l,f,c
  3753  004FD8  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3754  004FDA  22DA               	addwfc	fsr2h,f,c
  3755  004FDC  6ADE               	clrf	postinc2,c
  3756  004FDE  6ADE               	clrf	postinc2,c
  3757  004FE0  6ADE               	clrf	postinc2,c
  3758  004FE2  6ADD               	clrf	postdec2,c
  3759                           
  3760                           ; BSR set to: 0
  3761                           ;ff.c: 2073: if ((UINT)*path < ' ') {
  3762  004FE4  C088  FFF6         	movff	follow_path@path,tblptrl
  3763  004FE8  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3764  004FEC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3765  004FEC  6AF8               	clrf	tblptru,c
  3766  004FEE                     	endif
  3767  004FEE                     	if	0	;tblptru may be non-zero
  3768  004FEE                     	endif
  3769  004FEE  0E20               	movlw	32
  3770  004FF0  0008               	tblrd		*
  3771  004FF2  60F5               	cpfslt	tablat,c
  3772  004FF4  D019               	goto	l5117
  3773                           
  3774                           ; BSR set to: 0
  3775                           ;ff.c: 2074: res = dir_sdi(dp, 0);
  3776  004FF6  C086  F055         	movff	follow_path@dp,dir_sdi@dp
  3777  004FFA  C087  F056         	movff	follow_path@dp+1,dir_sdi@dp+1
  3778  004FFE  0E00               	movlw	0
  3779  005000  6E58               	movwf	dir_sdi@idx+1,c
  3780  005002  0E00               	movlw	0
  3781  005004  6E57               	movwf	dir_sdi@idx,c
  3782  005006  ECF7  F022         	call	_dir_sdi	;wreg free
  3783  00500A  0100               	movlb	0	; () banked
  3784  00500C  6F8D               	movwf	follow_path@res& (0+255),b
  3785                           
  3786                           ; BSR set to: 0
  3787                           ;ff.c: 2075: dp->dir = 0;
  3788  00500E  0100               	movlb	0	; () banked
  3789  005010  EE20 F012          	lfsr	2,18
  3790  005014  5186               	movf	follow_path@dp& (0+255),w,b
  3791  005016  26D9               	addwf	fsr2l,f,c
  3792  005018  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3793  00501A  22DA               	addwfc	fsr2h,f,c
  3794  00501C  0E00               	movlw	0
  3795  00501E  6EDE               	movwf	postinc2,c
  3796  005020  0E00               	movlw	0
  3797  005022  6EDD               	movwf	postdec2,c
  3798                           
  3799                           ;ff.c: 2076: } else {
  3800  005024  D09A               	goto	l5153
  3801                           
  3802                           ; BSR set to: 0
  3803  005026  D000               	goto	l5117
  3804  005028                     l5117:
  3805                           
  3806                           ; BSR set to: 0
  3807                           ;ff.c: 2078: res = create_name(dp, &path);
  3808  005028  C086  F009         	movff	follow_path@dp,create_name@dp
  3809  00502C  C087  F00A         	movff	follow_path@dp+1,create_name@dp+1
  3810  005030  0E88               	movlw	low follow_path@path
  3811  005032  6E0B               	movwf	create_name@path,c
  3812  005034  0E00               	movlw	high follow_path@path
  3813  005036  6E0C               	movwf	create_name@path+1,c
  3814  005038  EC86  F024         	call	_create_name	;wreg free
  3815  00503C  0100               	movlb	0	; () banked
  3816  00503E  6F8D               	movwf	follow_path@res& (0+255),b
  3817                           
  3818                           ; BSR set to: 0
  3819                           ;ff.c: 2079: if (res != FR_OK) break;
  3820  005040  0100               	movlb	0	; () banked
  3821  005042  518D               	movf	follow_path@res& (0+255),w,b
  3822  005044  0100               	movlb	0	; () banked
  3823  005046  A4D8               	btfss	status,2,c
  3824  005048  D088               	goto	l5153
  3825  00504A  D001               	goto	l5123
  3826                           
  3827                           ; BSR set to: 0
  3828  00504C  D086               	goto	l5153
  3829  00504E                     l5123:
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;ff.c: 2080: res = dir_find(dp);
  3833  00504E  C086  F080         	movff	follow_path@dp,dir_find@dp
  3834  005052  C087  F081         	movff	follow_path@dp+1,dir_find@dp+1
  3835  005056  EC07  F02C         	call	_dir_find	;wreg free
  3836  00505A  0100               	movlb	0	; () banked
  3837  00505C  6F8D               	movwf	follow_path@res& (0+255),b
  3838                           
  3839                           ; BSR set to: 0
  3840                           ;ff.c: 2081: ns = dp->fn[11];
  3841  00505E  0100               	movlb	0	; () banked
  3842  005060  EE20 F014          	lfsr	2,20
  3843  005064  5186               	movf	follow_path@dp& (0+255),w,b
  3844  005066  26D9               	addwf	fsr2l,f,c
  3845  005068  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3846  00506A  22DA               	addwfc	fsr2h,f,c
  3847  00506C  EE10 F00B          	lfsr	1,11
  3848  005070  50DE               	movf	postinc2,w,c
  3849  005072  26E1               	addwf	fsr1l,f,c
  3850  005074  50DD               	movf	postdec2,w,c
  3851  005076  22E2               	addwfc	fsr1h,f,c
  3852  005078  50E7               	movf	indf1,w,c
  3853  00507A  0100               	movlb	0	; () banked
  3854  00507C  6F8C               	movwf	follow_path@ns& (0+255),b
  3855                           
  3856                           ; BSR set to: 0
  3857                           ;ff.c: 2082: if (res != FR_OK) {
  3858  00507E  0100               	movlb	0	; () banked
  3859  005080  518D               	movf	follow_path@res& (0+255),w,b
  3860  005082  0100               	movlb	0	; () banked
  3861  005084  B4D8               	btfsc	status,2,c
  3862  005086  D02E               	goto	l495
  3863                           
  3864                           ; BSR set to: 0
  3865                           ;ff.c: 2083: if (res == FR_NO_FILE) {
  3866  005088  0E04               	movlw	4
  3867  00508A  0100               	movlb	0	; () banked
  3868  00508C  198D               	xorwf	follow_path@res& (0+255),w,b
  3869  00508E  B4D8               	btfsc	status,2,c
  3870  005090  D022               	goto	l497
  3871  005092  D063               	goto	l5153
  3872                           
  3873                           ; BSR set to: 0
  3874                           ;ff.c: 2084: if (0 && (ns & 0x20)) {
  3875  005094  D020               	goto	l497
  3876                           
  3877                           ; BSR set to: 0
  3878  005096  0100               	movlb	0	; () banked
  3879  005098  AB8C               	btfss	follow_path@ns& (0+255),5,b
  3880  00509A  D01D               	goto	l497
  3881                           
  3882                           ; BSR set to: 0
  3883                           ;ff.c: 2085: dp->sclust = 0; dp->dir = 0;
  3884  00509C  0100               	movlb	0	; () banked
  3885  00509E  EE20 F006          	lfsr	2,6
  3886  0050A2  5186               	movf	follow_path@dp& (0+255),w,b
  3887  0050A4  26D9               	addwf	fsr2l,f,c
  3888  0050A6  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3889  0050A8  22DA               	addwfc	fsr2h,f,c
  3890  0050AA  6ADE               	clrf	postinc2,c
  3891  0050AC  6ADE               	clrf	postinc2,c
  3892  0050AE  6ADE               	clrf	postinc2,c
  3893  0050B0  6ADD               	clrf	postdec2,c
  3894  0050B2  0100               	movlb	0	; () banked
  3895  0050B4  EE20 F012          	lfsr	2,18
  3896  0050B8  5186               	movf	follow_path@dp& (0+255),w,b
  3897  0050BA  26D9               	addwf	fsr2l,f,c
  3898  0050BC  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3899  0050BE  22DA               	addwfc	fsr2h,f,c
  3900  0050C0  0E00               	movlw	0
  3901  0050C2  6EDE               	movwf	postinc2,c
  3902  0050C4  0E00               	movlw	0
  3903  0050C6  6EDD               	movwf	postdec2,c
  3904                           
  3905                           ; BSR set to: 0
  3906                           ;ff.c: 2086: if (!(ns & 0x04)) continue;
  3907  0050C8  0100               	movlb	0	; () banked
  3908  0050CA  A58C               	btfss	follow_path@ns& (0+255),2,b
  3909  0050CC  D7AD               	goto	l5117
  3910  0050CE  D001               	goto	l5141
  3911                           
  3912                           ; BSR set to: 0
  3913  0050D0  D7AB               	goto	l5117
  3914  0050D2                     l5141:
  3915                           
  3916                           ; BSR set to: 0
  3917                           ;ff.c: 2087: res = FR_OK;
  3918  0050D2  0E00               	movlw	0
  3919  0050D4  D004               	goto	L6
  3920  0050D6                     l497:
  3921                           
  3922                           ; BSR set to: 0
  3923                           ;ff.c: 2089: if (!(ns & 0x04)) res = FR_NO_PATH;
  3924  0050D6  0100               	movlb	0	; () banked
  3925  0050D8  B58C               	btfsc	follow_path@ns& (0+255),2,b
  3926  0050DA  D03F               	goto	l5153
  3927  0050DC  D01D               	goto	l5149
  3928  0050DE                     L6:
  3929  0050DE  0100               	movlb	0	; () banked
  3930  0050E0  6F8D               	movwf	follow_path@res& (0+255),b
  3931                           
  3932                           ; BSR set to: 0
  3933                           ;ff.c: 2090: }
  3934                           ;ff.c: 2091: }
  3935                           ;ff.c: 2092: break;
  3936                           
  3937                           ; BSR set to: 0
  3938                           
  3939                           ; BSR set to: 0
  3940  0050E2  D03B               	goto	l5153
  3941  0050E4                     l495:
  3942                           
  3943                           ; BSR set to: 0
  3944                           ;ff.c: 2093: }
  3945                           ;ff.c: 2094: if (ns & 0x04) break;
  3946  0050E4  0100               	movlb	0	; () banked
  3947  0050E6  B58C               	btfsc	follow_path@ns& (0+255),2,b
  3948  0050E8  D038               	goto	l5153
  3949  0050EA  D001               	goto	l5147
  3950                           
  3951                           ; BSR set to: 0
  3952  0050EC  D036               	goto	l5153
  3953  0050EE                     l5147:
  3954                           
  3955                           ; BSR set to: 0
  3956                           ;ff.c: 2095: dir = dp->dir;
  3957  0050EE  0100               	movlb	0	; () banked
  3958  0050F0  EE20 F012          	lfsr	2,18
  3959  0050F4  5186               	movf	follow_path@dp& (0+255),w,b
  3960  0050F6  26D9               	addwf	fsr2l,f,c
  3961  0050F8  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3962  0050FA  22DA               	addwfc	fsr2h,f,c
  3963  0050FC  CFDE F08A          	movff	postinc2,follow_path@dir
  3964  005100  CFDD F08B          	movff	postdec2,follow_path@dir+1
  3965                           
  3966                           ;ff.c: 2096: if (!(dir[11] & 0x10)) {
  3967  005104  0100               	movlb	0	; () banked
  3968  005106  EE20 F00B          	lfsr	2,11
  3969  00510A  518A               	movf	follow_path@dir& (0+255),w,b
  3970  00510C  26D9               	addwf	fsr2l,f,c
  3971  00510E  518B               	movf	(follow_path@dir+1)& (0+255),w,b
  3972  005110  22DA               	addwfc	fsr2h,f,c
  3973  005112  0100               	movlb	0	; () banked
  3974  005114  B8DF               	btfsc	indf2,4,c
  3975  005116  D002               	goto	l5151
  3976  005118                     l5149:
  3977                           
  3978                           ; BSR set to: 0
  3979                           ;ff.c: 2097: res = FR_NO_PATH; break;
  3980  005118  0E05               	movlw	5
  3981  00511A  D7E1               	goto	L6
  3982  00511C                     l5151:
  3983                           
  3984                           ; BSR set to: 0
  3985                           ;ff.c: 2098: }
  3986                           ;ff.c: 2099: dp->sclust = ld_clust(dp->fs, dir);
  3987  00511C  C086  FFD9         	movff	follow_path@dp,fsr2l
  3988  005120  C087  FFDA         	movff	follow_path@dp+1,fsr2h
  3989  005124  CFDE F001          	movff	postinc2,ld_clust@fs
  3990  005128  CFDD F002          	movff	postdec2,ld_clust@fs+1
  3991  00512C  C08A  F003         	movff	follow_path@dir,ld_clust@dir
  3992  005130  C08B  F004         	movff	follow_path@dir+1,ld_clust@dir+1
  3993  005134  EC71  F031         	call	_ld_clust	;wreg free
  3994  005138  0100               	movlb	0	; () banked
  3995  00513A  EE20 F006          	lfsr	2,6
  3996  00513E  5186               	movf	follow_path@dp& (0+255),w,b
  3997  005140  26D9               	addwf	fsr2l,f,c
  3998  005142  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3999  005144  22DA               	addwfc	fsr2h,f,c
  4000  005146  C001  FFDE         	movff	?_ld_clust,postinc2
  4001  00514A  C002  FFDE         	movff	?_ld_clust+1,postinc2
  4002  00514E  C003  FFDE         	movff	?_ld_clust+2,postinc2
  4003  005152  C004  FFDE         	movff	?_ld_clust+3,postinc2
  4004                           
  4005                           ; BSR set to: 0
  4006                           ;ff.c: 2100: }
  4007  005156  D768               	goto	l5117
  4008                           
  4009                           ; BSR set to: 0
  4010  005158  D000               	goto	l5153
  4011  00515A                     l5153:
  4012                           
  4013                           ; BSR set to: 0
  4014                           ;ff.c: 2101: }
  4015                           ;ff.c: 2103: return res;
  4016  00515A  0100               	movlb	0	; () banked
  4017  00515C  518D               	movf	follow_path@res& (0+255),w,b
  4018  00515E  0012               	return	
  4019                           
  4020                           ; BSR set to: 0
  4021                           
  4022                           ; BSR set to: 0
  4023  005160  0012               	return		;funcret
  4024  005162                     __end_of_follow_path:
  4025                           	opt stack 0
  4026                           tblptru	equ	0xFF8
  4027                           tblptrh	equ	0xFF7
  4028                           tblptrl	equ	0xFF6
  4029                           tablat	equ	0xFF5
  4030                           postinc0	equ	0xFEE
  4031                           fsr0h	equ	0xFEA
  4032                           fsr0l	equ	0xFE9
  4033                           wreg	equ	0xFE8
  4034                           indf1	equ	0xFE7
  4035                           postinc1	equ	0xFE6
  4036                           postdec1	equ	0xFE5
  4037                           fsr1h	equ	0xFE2
  4038                           fsr1l	equ	0xFE1
  4039                           indf2	equ	0xFDF
  4040                           postinc2	equ	0xFDE
  4041                           postdec2	equ	0xFDD
  4042                           plusw2	equ	0xFDB
  4043                           fsr2h	equ	0xFDA
  4044                           fsr2l	equ	0xFD9
  4045                           status	equ	0xFD8
  4046                           
  4047 ;; *************** function _ld_clust *****************
  4048 ;; Defined at:
  4049 ;;		line 1235 in file "../../SD_Card_FatFs/ff.c"
  4050 ;; Parameters:    Size  Location     Type
  4051 ;;  fs              2    0[COMRAM] PTR struct .
  4052 ;;		 -> NULL(0), FatFs(558), 
  4053 ;;  dir             2    2[COMRAM] PTR const unsigned char 
  4054 ;;		 -> NULL(0), FatFs(558), 
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;  cl              4   10[COMRAM] unsigned long 
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  4    0[COMRAM] unsigned long 
  4059 ;; Registers used:
  4060 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4066 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4067 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4068 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4069 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4070 ;;Total ram usage:       14 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; This function calls:
  4073 ;;		Nothing
  4074 ;; This function is called by:
  4075 ;;		_follow_path
  4076 ;;		_f_open
  4077 ;; This function uses a non-reentrant model
  4078 ;;
  4079                           
  4080                           	psect	text5
  4081  0062E2                     __ptext5:
  4082                           	opt stack 0
  4083  0062E2                     _ld_clust:
  4084                           	opt stack 29
  4085                           
  4086                           ;ff.c: 1240: DWORD cl;
  4087                           ;ff.c: 1242: cl = (WORD)(*(WORD*)(BYTE*)(dir + 26));
  4088                           
  4089                           ; BSR set to: 0
  4090                           ;incstack = 0
  4091  0062E2  0E1A               	movlw	26
  4092  0062E4  2403               	addwf	ld_clust@dir,w,c
  4093  0062E6  6ED9               	movwf	fsr2l,c
  4094  0062E8  0E00               	movlw	0
  4095  0062EA  2004               	addwfc	ld_clust@dir+1,w,c
  4096  0062EC  6EDA               	movwf	fsr2h,c
  4097  0062EE  CFDE F005          	movff	postinc2,??_ld_clust
  4098  0062F2  CFDD F006          	movff	postdec2,??_ld_clust+1
  4099  0062F6  C005  F00B         	movff	??_ld_clust,ld_clust@cl
  4100  0062FA  C006  F00C         	movff	??_ld_clust+1,ld_clust@cl+1
  4101  0062FE  6A0D               	clrf	ld_clust@cl+2,c
  4102  006300  6A0E               	clrf	ld_clust@cl+3,c
  4103                           
  4104                           ;ff.c: 1243: if (fs->fs_type == 3)
  4105  006302  C001  FFD9         	movff	ld_clust@fs,fsr2l
  4106  006306  C002  FFDA         	movff	ld_clust@fs+1,fsr2h
  4107  00630A  0E03               	movlw	3
  4108  00630C  18DE               	xorwf	postinc2,w,c
  4109  00630E  A4D8               	btfss	status,2,c
  4110  006310  D01F               	goto	l4755
  4111                           
  4112                           ;ff.c: 1244: cl |= (DWORD)(WORD)(*(WORD*)(BYTE*)(dir + 20)) << 16;
  4113  006312  0E14               	movlw	20
  4114  006314  2403               	addwf	ld_clust@dir,w,c
  4115  006316  6ED9               	movwf	fsr2l,c
  4116  006318  0E00               	movlw	0
  4117  00631A  2004               	addwfc	ld_clust@dir+1,w,c
  4118  00631C  6EDA               	movwf	fsr2h,c
  4119  00631E  CFDE F005          	movff	postinc2,??_ld_clust
  4120  006322  CFDD F006          	movff	postdec2,??_ld_clust+1
  4121  006326  5005               	movf	??_ld_clust,w,c
  4122  006328  6E07               	movwf	(??_ld_clust+2)& (0+255),c
  4123  00632A  5006               	movf	??_ld_clust+1,w,c
  4124  00632C  6E08               	movwf	(??_ld_clust+3)& (0+255),c
  4125  00632E  6A09               	clrf	(??_ld_clust+4)& (0+255),c
  4126  006330  6A0A               	clrf	(??_ld_clust+5)& (0+255),c
  4127  006332  C008  F00A         	movff	??_ld_clust+3,??_ld_clust+5
  4128  006336  C007  F009         	movff	??_ld_clust+2,??_ld_clust+4
  4129  00633A  6A08               	clrf	??_ld_clust+3,c
  4130  00633C  6A07               	clrf	??_ld_clust+2,c
  4131  00633E  5007               	movf	??_ld_clust+2,w,c
  4132  006340  120B               	iorwf	ld_clust@cl,f,c
  4133  006342  5008               	movf	??_ld_clust+3,w,c
  4134  006344  120C               	iorwf	ld_clust@cl+1,f,c
  4135  006346  5009               	movf	??_ld_clust+4,w,c
  4136  006348  120D               	iorwf	ld_clust@cl+2,f,c
  4137  00634A  500A               	movf	??_ld_clust+5,w,c
  4138  00634C  120E               	iorwf	ld_clust@cl+3,f,c
  4139  00634E  D000               	goto	l4755
  4140  006350                     l4755:
  4141                           
  4142                           ;ff.c: 1246: return cl;
  4143  006350  C00B  F001         	movff	ld_clust@cl,?_ld_clust
  4144  006354  C00C  F002         	movff	ld_clust@cl+1,?_ld_clust+1
  4145  006358  C00D  F003         	movff	ld_clust@cl+2,?_ld_clust+2
  4146  00635C  C00E  F004         	movff	ld_clust@cl+3,?_ld_clust+3
  4147  006360  0012               	return	
  4148  006362  0012               	return		;funcret
  4149  006364                     __end_of_ld_clust:
  4150                           	opt stack 0
  4151                           tblptru	equ	0xFF8
  4152                           tblptrh	equ	0xFF7
  4153                           tblptrl	equ	0xFF6
  4154                           tablat	equ	0xFF5
  4155                           postinc0	equ	0xFEE
  4156                           fsr0h	equ	0xFEA
  4157                           fsr0l	equ	0xFE9
  4158                           wreg	equ	0xFE8
  4159                           indf1	equ	0xFE7
  4160                           postinc1	equ	0xFE6
  4161                           postdec1	equ	0xFE5
  4162                           fsr1h	equ	0xFE2
  4163                           fsr1l	equ	0xFE1
  4164                           indf2	equ	0xFDF
  4165                           postinc2	equ	0xFDE
  4166                           postdec2	equ	0xFDD
  4167                           plusw2	equ	0xFDB
  4168                           fsr2h	equ	0xFDA
  4169                           fsr2l	equ	0xFD9
  4170                           status	equ	0xFD8
  4171                           
  4172 ;; *************** function _dir_find *****************
  4173 ;; Defined at:
  4174 ;;		line 1458 in file "../../SD_Card_FatFs/ff.c"
  4175 ;; Parameters:    Size  Location     Type
  4176 ;;  dp              2   32[BANK0 ] PTR struct .
  4177 ;;		 -> f_open@dj(22), 
  4178 ;; Auto vars:     Size  Location     Type
  4179 ;;  dir             2   35[BANK0 ] PTR unsigned char 
  4180 ;;		 -> NULL(0), FatFs(558), 
  4181 ;;  res             1   37[BANK0 ] enum E88
  4182 ;;  c               1   34[BANK0 ] unsigned char 
  4183 ;; Return value:  Size  Location     Type
  4184 ;;                  1    wreg      enum E88
  4185 ;; Registers used:
  4186 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4187 ;; Tracked objects:
  4188 ;;		On entry : 0/0
  4189 ;;		On exit  : 0/0
  4190 ;;		Unchanged: 0/0
  4191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4192 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4193 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4195 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4196 ;;Total ram usage:        6 bytes
  4197 ;; Hardware stack levels used:    1
  4198 ;; Hardware stack levels required when called:   11
  4199 ;; This function calls:
  4200 ;;		_dir_next
  4201 ;;		_dir_sdi
  4202 ;;		_mem_cmp
  4203 ;;		_move_window
  4204 ;; This function is called by:
  4205 ;;		_follow_path
  4206 ;; This function uses a non-reentrant model
  4207 ;;
  4208                           
  4209                           	psect	text6
  4210  00580E                     __ptext6:
  4211                           	opt stack 0
  4212  00580E                     _dir_find:
  4213                           	opt stack 17
  4214                           
  4215                           ;ff.c: 1462: FRESULT res;
  4216                           ;ff.c: 1463: BYTE c, *dir;
  4217                           ;ff.c: 1468: res = dir_sdi(dp, 0);
  4218                           
  4219                           ;incstack = 0
  4220  00580E  C080  F055         	movff	dir_find@dp,dir_sdi@dp
  4221  005812  C081  F056         	movff	dir_find@dp+1,dir_sdi@dp+1
  4222  005816  0E00               	movlw	0
  4223  005818  6E58               	movwf	dir_sdi@idx+1,c
  4224  00581A  0E00               	movlw	0
  4225  00581C  6E57               	movwf	dir_sdi@idx,c
  4226  00581E  ECF7  F022         	call	_dir_sdi	;wreg free
  4227  005822  0100               	movlb	0	; () banked
  4228  005824  6F85               	movwf	dir_find@res& (0+255),b
  4229                           
  4230                           ; BSR set to: 0
  4231                           ;ff.c: 1469: if (res != FR_OK) return res;
  4232  005826  0100               	movlb	0	; () banked
  4233  005828  5185               	movf	dir_find@res& (0+255),w,b
  4234  00582A  0100               	movlb	0	; () banked
  4235  00582C  B4D8               	btfsc	status,2,c
  4236  00582E  D004               	goto	l4769
  4237                           
  4238                           ; BSR set to: 0
  4239  005830  0100               	movlb	0	; () banked
  4240  005832  5185               	movf	dir_find@res& (0+255),w,b
  4241                           
  4242                           ; BSR set to: 0
  4243  005834  0012               	return	
  4244                           
  4245                           ; BSR set to: 0
  4246  005836  D000               	goto	l4769
  4247  005838                     l4769:
  4248                           
  4249                           ; BSR set to: 0
  4250                           ;ff.c: 1475: res = move_window(dp->fs, dp->sect);
  4251  005838  C080  FFD9         	movff	dir_find@dp,fsr2l
  4252  00583C  C081  FFDA         	movff	dir_find@dp+1,fsr2h
  4253  005840  CFDE F030          	movff	postinc2,move_window@fs
  4254  005844  CFDD F031          	movff	postdec2,move_window@fs+1
  4255  005848  0100               	movlb	0	; () banked
  4256  00584A  EE20 F00E          	lfsr	2,14
  4257  00584E  5180               	movf	dir_find@dp& (0+255),w,b
  4258  005850  26D9               	addwf	fsr2l,f,c
  4259  005852  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  4260  005854  22DA               	addwfc	fsr2h,f,c
  4261  005856  CFDE F032          	movff	postinc2,move_window@sector
  4262  00585A  CFDE F033          	movff	postinc2,move_window@sector+1
  4263  00585E  CFDE F034          	movff	postinc2,move_window@sector+2
  4264  005862  CFDE F035          	movff	postinc2,move_window@sector+3
  4265  005866  ECFB  F02F         	call	_move_window	;wreg free
  4266  00586A  0100               	movlb	0	; () banked
  4267  00586C  6F85               	movwf	dir_find@res& (0+255),b
  4268                           
  4269                           ; BSR set to: 0
  4270                           ;ff.c: 1476: if (res != FR_OK) break;
  4271  00586E  0100               	movlb	0	; () banked
  4272  005870  5185               	movf	dir_find@res& (0+255),w,b
  4273  005872  0100               	movlb	0	; () banked
  4274  005874  A4D8               	btfss	status,2,c
  4275  005876  D054               	goto	l4793
  4276  005878  D001               	goto	l4775
  4277                           
  4278                           ; BSR set to: 0
  4279  00587A  D052               	goto	l4793
  4280  00587C                     l4775:
  4281                           
  4282                           ; BSR set to: 0
  4283                           ;ff.c: 1477: dir = dp->dir;
  4284  00587C  0100               	movlb	0	; () banked
  4285  00587E  EE20 F012          	lfsr	2,18
  4286  005882  5180               	movf	dir_find@dp& (0+255),w,b
  4287  005884  26D9               	addwf	fsr2l,f,c
  4288  005886  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  4289  005888  22DA               	addwfc	fsr2h,f,c
  4290  00588A  CFDE F083          	movff	postinc2,dir_find@dir
  4291  00588E  CFDD F084          	movff	postdec2,dir_find@dir+1
  4292                           
  4293                           ; BSR set to: 0
  4294                           ;ff.c: 1478: c = dir[0];
  4295  005892  C083  FFD9         	movff	dir_find@dir,fsr2l
  4296  005896  C084  FFDA         	movff	dir_find@dir+1,fsr2h
  4297  00589A  50DF               	movf	indf2,w,c
  4298  00589C  0100               	movlb	0	; () banked
  4299  00589E  6F82               	movwf	dir_find@c& (0+255),b
  4300                           
  4301                           ; BSR set to: 0
  4302                           ;ff.c: 1479: if (c == 0) { res = FR_NO_FILE; break; }
  4303  0058A0  0100               	movlb	0	; () banked
  4304  0058A2  5182               	movf	dir_find@c& (0+255),w,b
  4305  0058A4  0100               	movlb	0	; () banked
  4306  0058A6  A4D8               	btfss	status,2,c
  4307  0058A8  D004               	goto	l4783
  4308                           
  4309                           ; BSR set to: 0
  4310  0058AA  0E04               	movlw	4
  4311  0058AC  0100               	movlb	0	; () banked
  4312  0058AE  6F85               	movwf	dir_find@res& (0+255),b
  4313  0058B0  D037               	goto	l4793
  4314  0058B2                     l4783:
  4315                           
  4316                           ; BSR set to: 0
  4317                           ;ff.c: 1502: if (!(dir[11] & 0x08) && !mem_cmp(dir, dp->fn, 11))
  4318  0058B2  0100               	movlb	0	; () banked
  4319  0058B4  EE20 F00B          	lfsr	2,11
  4320  0058B8  5183               	movf	dir_find@dir& (0+255),w,b
  4321  0058BA  26D9               	addwf	fsr2l,f,c
  4322  0058BC  5184               	movf	(dir_find@dir+1)& (0+255),w,b
  4323  0058BE  22DA               	addwfc	fsr2h,f,c
  4324  0058C0  0100               	movlb	0	; () banked
  4325  0058C2  B6DF               	btfsc	indf2,3,c
  4326  0058C4  D01B               	goto	l4789
  4327                           
  4328                           ; BSR set to: 0
  4329  0058C6  C083  F001         	movff	dir_find@dir,mem_cmp@dst
  4330  0058CA  C084  F002         	movff	dir_find@dir+1,mem_cmp@dst+1
  4331  0058CE  0100               	movlb	0	; () banked
  4332  0058D0  EE20 F014          	lfsr	2,20
  4333  0058D4  5180               	movf	dir_find@dp& (0+255),w,b
  4334  0058D6  26D9               	addwf	fsr2l,f,c
  4335  0058D8  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  4336  0058DA  22DA               	addwfc	fsr2h,f,c
  4337  0058DC  CFDE F003          	movff	postinc2,mem_cmp@src
  4338  0058E0  CFDD F004          	movff	postdec2,mem_cmp@src+1
  4339  0058E4  0E00               	movlw	0
  4340  0058E6  6E06               	movwf	mem_cmp@cnt+1,c
  4341  0058E8  0E0B               	movlw	11
  4342  0058EA  6E05               	movwf	mem_cmp@cnt,c
  4343  0058EC  ECEC  F031         	call	_mem_cmp	;wreg free
  4344  0058F0  5001               	movf	?_mem_cmp,w,c
  4345  0058F2  1002               	iorwf	?_mem_cmp+1,w,c
  4346  0058F4  B4D8               	btfsc	status,2,c
  4347  0058F6  D014               	goto	l4793
  4348  0058F8  D001               	goto	l4789
  4349                           
  4350                           ;ff.c: 1503: break;
  4351  0058FA  D012               	goto	l4793
  4352  0058FC                     l4789:
  4353                           
  4354                           ;ff.c: 1505: res = dir_next(dp, 0);
  4355  0058FC  C080  F06D         	movff	dir_find@dp,dir_next@dp
  4356  005900  C081  F06E         	movff	dir_find@dp+1,dir_next@dp+1
  4357  005904  0E00               	movlw	0
  4358  005906  0100               	movlb	0	; () banked
  4359  005908  6F70               	movwf	(dir_next@stretch+1)& (0+255),b
  4360  00590A  0E00               	movlw	0
  4361  00590C  6F6F               	movwf	dir_next@stretch& (0+255),b
  4362  00590E  EC62  F016         	call	_dir_next	;wreg free
  4363  005912  0100               	movlb	0	; () banked
  4364  005914  6F85               	movwf	dir_find@res& (0+255),b
  4365                           
  4366                           ; BSR set to: 0
  4367                           ;ff.c: 1506: } while (res == FR_OK);
  4368  005916  0100               	movlb	0	; () banked
  4369  005918  5185               	movf	dir_find@res& (0+255),w,b
  4370  00591A  0100               	movlb	0	; () banked
  4371  00591C  B4D8               	btfsc	status,2,c
  4372  00591E  D78C               	goto	l4769
  4373  005920                     l4793:
  4374                           
  4375                           ;ff.c: 1508: return res;
  4376  005920  0100               	movlb	0	; () banked
  4377  005922  5185               	movf	dir_find@res& (0+255),w,b
  4378  005924  0012               	return	
  4379                           
  4380                           ; BSR set to: 0
  4381                           
  4382                           ; BSR set to: 0
  4383  005926  0012               	return		;funcret
  4384  005928                     __end_of_dir_find:
  4385                           	opt stack 0
  4386                           tblptru	equ	0xFF8
  4387                           tblptrh	equ	0xFF7
  4388                           tblptrl	equ	0xFF6
  4389                           tablat	equ	0xFF5
  4390                           postinc0	equ	0xFEE
  4391                           fsr0h	equ	0xFEA
  4392                           fsr0l	equ	0xFE9
  4393                           wreg	equ	0xFE8
  4394                           indf1	equ	0xFE7
  4395                           postinc1	equ	0xFE6
  4396                           postdec1	equ	0xFE5
  4397                           fsr1h	equ	0xFE2
  4398                           fsr1l	equ	0xFE1
  4399                           indf2	equ	0xFDF
  4400                           postinc2	equ	0xFDE
  4401                           postdec2	equ	0xFDD
  4402                           plusw2	equ	0xFDB
  4403                           fsr2h	equ	0xFDA
  4404                           fsr2l	equ	0xFD9
  4405                           status	equ	0xFD8
  4406                           
  4407 ;; *************** function _mem_cmp *****************
  4408 ;; Defined at:
  4409 ;;		line 533 in file "../../SD_Card_FatFs/ff.c"
  4410 ;; Parameters:    Size  Location     Type
  4411 ;;  dst             2    0[COMRAM] PTR const void 
  4412 ;;		 -> NULL(0), FatFs(558), 
  4413 ;;  src             2    2[COMRAM] PTR const void 
  4414 ;;		 -> f_open@sfn(12), 
  4415 ;;  cnt             2    4[COMRAM] unsigned int 
  4416 ;; Auto vars:     Size  Location     Type
  4417 ;;  r               2   13[COMRAM] int 
  4418 ;;  s               2   11[COMRAM] PTR const unsigned char 
  4419 ;;		 -> f_open@sfn(12), 
  4420 ;;  d               2    9[COMRAM] PTR const unsigned char 
  4421 ;;		 -> NULL(0), FatFs(558), 
  4422 ;; Return value:  Size  Location     Type
  4423 ;;                  2    0[COMRAM] int 
  4424 ;; Registers used:
  4425 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4426 ;; Tracked objects:
  4427 ;;		On entry : 0/0
  4428 ;;		On exit  : 0/0
  4429 ;;		Unchanged: 0/0
  4430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4431 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4432 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4433 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4434 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4435 ;;Total ram usage:       15 bytes
  4436 ;; Hardware stack levels used:    1
  4437 ;; This function calls:
  4438 ;;		Nothing
  4439 ;; This function is called by:
  4440 ;;		_dir_find
  4441 ;; This function uses a non-reentrant model
  4442 ;;
  4443                           
  4444                           	psect	text7
  4445  0063D8                     __ptext7:
  4446                           	opt stack 0
  4447  0063D8                     _mem_cmp:
  4448                           	opt stack 27
  4449                           
  4450                           ;ff.c: 534: const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
  4451                           
  4452                           ; BSR set to: 0
  4453                           ;incstack = 0
  4454  0063D8  C001  F00A         	movff	mem_cmp@dst,mem_cmp@d
  4455  0063DC  C002  F00B         	movff	mem_cmp@dst+1,mem_cmp@d+1
  4456  0063E0  C003  F00C         	movff	mem_cmp@src,mem_cmp@s
  4457  0063E4  C004  F00D         	movff	mem_cmp@src+1,mem_cmp@s+1
  4458                           
  4459                           ;ff.c: 535: int r = 0;
  4460  0063E8  0E00               	movlw	0
  4461  0063EA  6E0F               	movwf	mem_cmp@r+1,c
  4462  0063EC  0E00               	movlw	0
  4463  0063EE  6E0E               	movwf	mem_cmp@r,c
  4464                           
  4465                           ;ff.c: 537: while (cnt-- && (r = *d++ - *s++) == 0) ;
  4466  0063F0  D000               	goto	l4377
  4467  0063F2                     l4377:
  4468  0063F2  0605               	decf	mem_cmp@cnt,f,c
  4469  0063F4  A0D8               	btfss	status,0,c
  4470  0063F6  0606               	decf	mem_cmp@cnt+1,f,c
  4471  0063F8  2805               	incf	mem_cmp@cnt,w,c
  4472  0063FA  E103               	bnz	u5830
  4473  0063FC  2806               	incf	mem_cmp@cnt+1,w,c
  4474  0063FE  B4D8               	btfsc	status,2,c
  4475  006400  D01F               	goto	l241
  4476  006402                     u5830:
  4477  006402  C00C  FFD9         	movff	mem_cmp@s,fsr2l
  4478  006406  C00D  FFDA         	movff	mem_cmp@s+1,fsr2h
  4479  00640A  4A0C               	infsnz	mem_cmp@s,f,c
  4480  00640C  2A0D               	incf	mem_cmp@s+1,f,c
  4481  00640E  50DF               	movf	indf2,w,c
  4482  006410  6E07               	movwf	??_mem_cmp& (0+255),c
  4483  006412  6A08               	clrf	(??_mem_cmp+1)& (0+255),c
  4484  006414  1E07               	comf	??_mem_cmp,f,c
  4485  006416  1E08               	comf	??_mem_cmp+1,f,c
  4486  006418  4A07               	infsnz	??_mem_cmp,f,c
  4487  00641A  2A08               	incf	??_mem_cmp+1,f,c
  4488  00641C  C00A  FFD9         	movff	mem_cmp@d,fsr2l
  4489  006420  C00B  FFDA         	movff	mem_cmp@d+1,fsr2h
  4490  006424  4A0A               	infsnz	mem_cmp@d,f,c
  4491  006426  2A0B               	incf	mem_cmp@d+1,f,c
  4492  006428  50DF               	movf	indf2,w,c
  4493  00642A  6E09               	movwf	(??_mem_cmp+2)& (0+255),c
  4494  00642C  5009               	movf	??_mem_cmp+2,w,c
  4495  00642E  2407               	addwf	??_mem_cmp,w,c
  4496  006430  6E0E               	movwf	mem_cmp@r,c
  4497  006432  0E00               	movlw	0
  4498  006434  2008               	addwfc	??_mem_cmp+1,w,c
  4499  006436  6E0F               	movwf	mem_cmp@r+1,c
  4500  006438  500E               	movf	mem_cmp@r,w,c
  4501  00643A  100F               	iorwf	mem_cmp@r+1,w,c
  4502  00643C  B4D8               	btfsc	status,2,c
  4503  00643E  D7D9               	goto	l4377
  4504  006440                     l241:
  4505                           
  4506                           ;ff.c: 538: return r;
  4507  006440  C00E  F001         	movff	mem_cmp@r,?_mem_cmp
  4508  006444  C00F  F002         	movff	mem_cmp@r+1,?_mem_cmp+1
  4509  006448  0012               	return		;funcret
  4510  00644A                     __end_of_mem_cmp:
  4511                           	opt stack 0
  4512                           tblptru	equ	0xFF8
  4513                           tblptrh	equ	0xFF7
  4514                           tblptrl	equ	0xFF6
  4515                           tablat	equ	0xFF5
  4516                           postinc0	equ	0xFEE
  4517                           fsr0h	equ	0xFEA
  4518                           fsr0l	equ	0xFE9
  4519                           wreg	equ	0xFE8
  4520                           indf1	equ	0xFE7
  4521                           postinc1	equ	0xFE6
  4522                           postdec1	equ	0xFE5
  4523                           fsr1h	equ	0xFE2
  4524                           fsr1l	equ	0xFE1
  4525                           indf2	equ	0xFDF
  4526                           postinc2	equ	0xFDE
  4527                           postdec2	equ	0xFDD
  4528                           plusw2	equ	0xFDB
  4529                           fsr2h	equ	0xFDA
  4530                           fsr2l	equ	0xFD9
  4531                           status	equ	0xFD8
  4532                           
  4533 ;; *************** function _create_name *****************
  4534 ;; Defined at:
  4535 ;;		line 1843 in file "../../SD_Card_FatFs/ff.c"
  4536 ;; Parameters:    Size  Location     Type
  4537 ;;  dp              2    8[COMRAM] PTR struct .
  4538 ;;		 -> f_open@dj(22), 
  4539 ;;  path            2   10[COMRAM] PTR PTR const unsigned c
  4540 ;;		 -> follow_path@path(2), 
  4541 ;; Auto vars:     Size  Location     Type
  4542 ;;  i               2   28[COMRAM] unsigned int 
  4543 ;;  sfn             2   26[COMRAM] PTR unsigned char 
  4544 ;;		 -> f_open@sfn(12), 
  4545 ;;  p               2   23[COMRAM] PTR const unsigned char 
  4546 ;;		 -> STR_2(9), STR_1(1), 
  4547 ;;  ni              2   21[COMRAM] unsigned int 
  4548 ;;  si              2   18[COMRAM] unsigned int 
  4549 ;;  c               1   30[COMRAM] unsigned char 
  4550 ;;  d               1   25[COMRAM] unsigned char 
  4551 ;;  b               1   20[COMRAM] unsigned char 
  4552 ;; Return value:  Size  Location     Type
  4553 ;;                  1    wreg      enum E88
  4554 ;; Registers used:
  4555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4556 ;; Tracked objects:
  4557 ;;		On entry : 0/0
  4558 ;;		On exit  : 0/0
  4559 ;;		Unchanged: 0/0
  4560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4561 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4562 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4563 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4564 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4565 ;;Total ram usage:       23 bytes
  4566 ;; Hardware stack levels used:    1
  4567 ;; Hardware stack levels required when called:    1
  4568 ;; This function calls:
  4569 ;;		_chk_chr
  4570 ;;		_mem_set
  4571 ;; This function is called by:
  4572 ;;		_follow_path
  4573 ;; This function uses a non-reentrant model
  4574 ;;
  4575                           
  4576                           	psect	text8
  4577  00490C                     __ptext8:
  4578                           	opt stack 0
  4579  00490C                     _create_name:
  4580                           	opt stack 27
  4581                           
  4582                           ;ff.c: 1969: BYTE b, c, d, *sfn;
  4583                           ;ff.c: 1970: UINT ni, si, i;
  4584                           ;ff.c: 1971: const char *p;
  4585                           ;ff.c: 1974: for (p = *path; *p == '/' || *p == '\\'; p++) ;
  4586                           
  4587                           ;incstack = 0
  4588  00490C  C00B  FFD9         	movff	create_name@path,fsr2l
  4589  004910  C00C  FFDA         	movff	create_name@path+1,fsr2h
  4590  004914  CFDE F018          	movff	postinc2,create_name@p
  4591  004918  CFDD F019          	movff	postdec2,create_name@p+1
  4592  00491C  D003               	goto	l4801
  4593  00491E                     l4799:
  4594  00491E  4A18               	infsnz	create_name@p,f,c
  4595  004920  2A19               	incf	create_name@p+1,f,c
  4596  004922  D000               	goto	l4801
  4597  004924                     l4801:
  4598  004924  C018  FFF6         	movff	create_name@p,tblptrl
  4599  004928  C019  FFF7         	movff	create_name@p+1,tblptrh
  4600  00492C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4601  00492C  6AF8               	clrf	tblptru,c
  4602  00492E                     	endif
  4603  00492E                     	if	0	;tblptru may be non-zero
  4604  00492E                     	endif
  4605  00492E  0008               	tblrd		*
  4606  004930  50F5               	movf	tablat,w,c
  4607  004932  0A2F               	xorlw	47
  4608  004934  B4D8               	btfsc	status,2,c
  4609  004936  D7F3               	goto	l4799
  4610  004938  C018  FFF6         	movff	create_name@p,tblptrl
  4611  00493C  C019  FFF7         	movff	create_name@p+1,tblptrh
  4612  004940                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4613  004940  6AF8               	clrf	tblptru,c
  4614  004942                     	endif
  4615  004942                     	if	0	;tblptru may be non-zero
  4616  004942                     	endif
  4617  004942  0008               	tblrd		*
  4618  004944  50F5               	movf	tablat,w,c
  4619  004946  0A5C               	xorlw	92
  4620  004948  B4D8               	btfsc	status,2,c
  4621  00494A  D7E9               	goto	l4799
  4622                           
  4623                           ;ff.c: 1975: sfn = dp->fn;
  4624  00494C  EE20 F014          	lfsr	2,20
  4625  004950  5009               	movf	create_name@dp,w,c
  4626  004952  26D9               	addwf	fsr2l,f,c
  4627  004954  500A               	movf	create_name@dp+1,w,c
  4628  004956  22DA               	addwfc	fsr2h,f,c
  4629  004958  CFDE F01B          	movff	postinc2,create_name@sfn
  4630  00495C  CFDD F01C          	movff	postdec2,create_name@sfn+1
  4631                           
  4632                           ;ff.c: 1976: mem_set(sfn, ' ', 11);
  4633  004960  C01B  F001         	movff	create_name@sfn,mem_set@dst
  4634  004964  C01C  F002         	movff	create_name@sfn+1,mem_set@dst+1
  4635  004968  0E00               	movlw	0
  4636  00496A  6E04               	movwf	mem_set@val+1,c
  4637  00496C  0E20               	movlw	32
  4638  00496E  6E03               	movwf	mem_set@val,c
  4639  004970  0E00               	movlw	0
  4640  004972  6E06               	movwf	mem_set@cnt+1,c
  4641  004974  0E0B               	movlw	11
  4642  004976  6E05               	movwf	mem_set@cnt,c
  4643  004978  EC1E  F033         	call	_mem_set	;wreg free
  4644                           
  4645                           ;ff.c: 1977: si = i = b = 0; ni = 8;
  4646  00497C  0E00               	movlw	0
  4647  00497E  6E15               	movwf	create_name@b,c
  4648  004980  C015  F01D         	movff	create_name@b,create_name@i
  4649  004984  6A1E               	clrf	create_name@i+1,c
  4650  004986  C01D  F013         	movff	create_name@i,create_name@si
  4651  00498A  C01E  F014         	movff	create_name@i+1,create_name@si+1
  4652  00498E  0E00               	movlw	0
  4653  004990  6E17               	movwf	create_name@ni+1,c
  4654  004992  0E08               	movlw	8
  4655  004994  6E16               	movwf	create_name@ni,c
  4656  004996  D000               	goto	l4813
  4657  004998                     l4813:
  4658                           
  4659                           ;ff.c: 1992: c = (BYTE)p[si++];
  4660  004998  5013               	movf	create_name@si,w,c
  4661  00499A  2418               	addwf	create_name@p,w,c
  4662  00499C  6E0D               	movwf	??_create_name& (0+255),c
  4663  00499E  5014               	movf	create_name@si+1,w,c
  4664  0049A0  2019               	addwfc	create_name@p+1,w,c
  4665  0049A2  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4666  0049A4  C00D  FFF6         	movff	??_create_name,tblptrl
  4667  0049A8  C00E  FFF7         	movff	??_create_name+1,tblptrh
  4668  0049AC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4669  0049AC  6AF8               	clrf	tblptru,c
  4670  0049AE                     	endif
  4671  0049AE                     	if	0	;tblptru may be non-zero
  4672  0049AE                     	endif
  4673  0049AE  0008               	tblrd		*
  4674  0049B0  CFF5 F01F          	movff	tablat,create_name@c
  4675  0049B4  4A13               	infsnz	create_name@si,f,c
  4676  0049B6  2A14               	incf	create_name@si+1,f,c
  4677                           
  4678                           ;ff.c: 1993: if (c <= ' ' || c == '/' || c == '\\') break;
  4679  0049B8  0E20               	movlw	32
  4680  0049BA  641F               	cpfsgt	create_name@c,c
  4681  0049BC  D0B0               	goto	l4897
  4682  0049BE  0E2F               	movlw	47
  4683  0049C0  181F               	xorwf	create_name@c,w,c
  4684  0049C2  B4D8               	btfsc	status,2,c
  4685  0049C4  D0AC               	goto	l4897
  4686  0049C6  0E5C               	movlw	92
  4687  0049C8  181F               	xorwf	create_name@c,w,c
  4688  0049CA  B4D8               	btfsc	status,2,c
  4689  0049CC  D0A8               	goto	l4897
  4690  0049CE  D001               	goto	l4823
  4691  0049D0  D0A6               	goto	l4897
  4692  0049D2                     l4823:
  4693                           
  4694                           ;ff.c: 1994: if (c == '.' || i >= ni) {
  4695  0049D2  0E2E               	movlw	46
  4696  0049D4  181F               	xorwf	create_name@c,w,c
  4697  0049D6  B4D8               	btfsc	status,2,c
  4698  0049D8  D006               	goto	l4827
  4699  0049DA  5016               	movf	create_name@ni,w,c
  4700  0049DC  5C1D               	subwf	create_name@i,w,c
  4701  0049DE  5017               	movf	create_name@ni+1,w,c
  4702  0049E0  581E               	subwfb	create_name@i+1,w,c
  4703  0049E2  A0D8               	btfss	status,0,c
  4704  0049E4  D018               	goto	l4839
  4705  0049E6                     l4827:
  4706                           
  4707                           ;ff.c: 1995: if (ni != 8 || c != '.') return FR_INVALID_NAME;
  4708  0049E6  0E08               	movlw	8
  4709  0049E8  1816               	xorwf	create_name@ni,w,c
  4710  0049EA  1017               	iorwf	create_name@ni+1,w,c
  4711  0049EC  A4D8               	btfss	status,2,c
  4712  0049EE  D004               	goto	l4831
  4713  0049F0  0E2E               	movlw	46
  4714  0049F2  181F               	xorwf	create_name@c,w,c
  4715  0049F4  B4D8               	btfsc	status,2,c
  4716  0049F6  D002               	goto	l4835
  4717  0049F8                     l4831:
  4718  0049F8  0E06               	movlw	6
  4719  0049FA  0012               	return	
  4720  0049FC                     l4835:
  4721                           
  4722                           ;ff.c: 1996: i = 8; ni = 11;
  4723  0049FC  0E00               	movlw	0
  4724  0049FE  6E1E               	movwf	create_name@i+1,c
  4725  004A00  0E08               	movlw	8
  4726  004A02  6E1D               	movwf	create_name@i,c
  4727  004A04  0E00               	movlw	0
  4728  004A06  6E17               	movwf	create_name@ni+1,c
  4729  004A08  0E0B               	movlw	11
  4730  004A0A  6E16               	movwf	create_name@ni,c
  4731                           
  4732                           ;ff.c: 1997: b <<= 2; continue;
  4733  004A0C  90D8               	bcf	status,0,c
  4734  004A0E  3615               	rlcf	create_name@b,f,c
  4735  004A10  90D8               	bcf	status,0,c
  4736  004A12  3615               	rlcf	create_name@b,f,c
  4737  004A14  D7C1               	goto	l4813
  4738  004A16                     l4839:
  4739                           
  4740                           ;ff.c: 1998: }
  4741                           ;ff.c: 1999: if (c >= 0x80) {
  4742  004A16  0E7F               	movlw	127
  4743  004A18  641F               	cpfsgt	create_name@c,c
  4744  004A1A  D002               	goto	l458
  4745                           
  4746                           ;ff.c: 2000: b |= 3;
  4747  004A1C  0E03               	movlw	3
  4748  004A1E  1215               	iorwf	create_name@b,f,c
  4749  004A20                     l458:
  4750                           
  4751                           ;ff.c: 2008: }
  4752                           ;ff.c: 2009: if ((((BYTE)(c) >= 0x81 && (BYTE)(c) <= 0x9F) || ((BYTE)(c) >= 0xE0 && (BYT
      +                          E)(c) <= 0xFC))) {
  4753  004A20  0E80               	movlw	128
  4754  004A22  641F               	cpfsgt	create_name@c,c
  4755  004A24  D004               	goto	l4845
  4756  004A26  0E9F               	movlw	159
  4757  004A28  641F               	cpfsgt	create_name@c,c
  4758  004A2A  D008               	goto	l4849
  4759  004A2C  D000               	goto	l4845
  4760  004A2E                     l4845:
  4761  004A2E  0EDF               	movlw	223
  4762  004A30  641F               	cpfsgt	create_name@c,c
  4763  004A32  D049               	goto	l4873
  4764  004A34  0EFD               	movlw	253
  4765  004A36  601F               	cpfslt	create_name@c,c
  4766  004A38  D046               	goto	l4873
  4767  004A3A  D000               	goto	l4849
  4768  004A3C                     l4849:
  4769                           
  4770                           ;ff.c: 2010: d = (BYTE)p[si++];
  4771  004A3C  5013               	movf	create_name@si,w,c
  4772  004A3E  2418               	addwf	create_name@p,w,c
  4773  004A40  6E0D               	movwf	??_create_name& (0+255),c
  4774  004A42  5014               	movf	create_name@si+1,w,c
  4775  004A44  2019               	addwfc	create_name@p+1,w,c
  4776  004A46  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4777  004A48  C00D  FFF6         	movff	??_create_name,tblptrl
  4778  004A4C  C00E  FFF7         	movff	??_create_name+1,tblptrh
  4779  004A50                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4780  004A50  6AF8               	clrf	tblptru,c
  4781  004A52                     	endif
  4782  004A52                     	if	0	;tblptru may be non-zero
  4783  004A52                     	endif
  4784  004A52  0008               	tblrd		*
  4785  004A54  CFF5 F01A          	movff	tablat,create_name@d
  4786  004A58  4A13               	infsnz	create_name@si,f,c
  4787  004A5A  2A14               	incf	create_name@si+1,f,c
  4788                           
  4789                           ;ff.c: 2011: if (!(((BYTE)(d) >= 0x40 && (BYTE)(d) <= 0x7E) || ((BYTE)(d) >= 0x80 && (BY
      +                          TE)(d) <= 0xFC)) || i >= ni - 1)
  4790  004A5C  0E3F               	movlw	63
  4791  004A5E  641A               	cpfsgt	create_name@d,c
  4792  004A60  D004               	goto	l4857
  4793  004A62  0E7E               	movlw	126
  4794  004A64  641A               	cpfsgt	create_name@d,c
  4795  004A66  D008               	goto	l4861
  4796  004A68  D000               	goto	l4857
  4797  004A6A                     l4857:
  4798  004A6A  0E7F               	movlw	127
  4799  004A6C  641A               	cpfsgt	create_name@d,c
  4800  004A6E  D016               	goto	l4863
  4801  004A70  0EFD               	movlw	253
  4802  004A72  601A               	cpfslt	create_name@d,c
  4803  004A74  D013               	goto	l4863
  4804  004A76  D000               	goto	l4861
  4805  004A78                     l4861:
  4806  004A78  0EFF               	movlw	255
  4807  004A7A  6E0D               	movwf	??_create_name& (0+255),c
  4808  004A7C  0EFF               	movlw	255
  4809  004A7E  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4810  004A80  C016  F00F         	movff	create_name@ni,??_create_name+2
  4811  004A84  C017  F010         	movff	create_name@ni+1,??_create_name+3
  4812  004A88  500D               	movf	??_create_name,w,c
  4813  004A8A  260F               	addwf	??_create_name+2,f,c
  4814  004A8C  500E               	movf	??_create_name+1,w,c
  4815  004A8E  2210               	addwfc	??_create_name+3,f,c
  4816  004A90  500F               	movf	??_create_name+2,w,c
  4817  004A92  5C1D               	subwf	create_name@i,w,c
  4818  004A94  5010               	movf	??_create_name+3,w,c
  4819  004A96  581E               	subwfb	create_name@i+1,w,c
  4820  004A98  A0D8               	btfss	status,0,c
  4821  004A9A  D002               	goto	l4867
  4822  004A9C                     l4863:
  4823                           
  4824                           ;ff.c: 2012: return FR_INVALID_NAME;
  4825  004A9C  0E06               	movlw	6
  4826  004A9E  0012               	return	
  4827  004AA0                     l4867:
  4828                           
  4829                           ;ff.c: 2013: sfn[i++] = c;
  4830  004AA0  501D               	movf	create_name@i,w,c
  4831  004AA2  241B               	addwf	create_name@sfn,w,c
  4832  004AA4  6ED9               	movwf	fsr2l,c
  4833  004AA6  501E               	movf	create_name@i+1,w,c
  4834  004AA8  201C               	addwfc	create_name@sfn+1,w,c
  4835  004AAA  6EDA               	movwf	fsr2h,c
  4836  004AAC  C01F  FFDF         	movff	create_name@c,indf2
  4837  004AB0  4A1D               	infsnz	create_name@i,f,c
  4838  004AB2  2A1E               	incf	create_name@i+1,f,c
  4839                           
  4840                           ;ff.c: 2014: sfn[i++] = d;
  4841  004AB4  501D               	movf	create_name@i,w,c
  4842  004AB6  241B               	addwf	create_name@sfn,w,c
  4843  004AB8  6ED9               	movwf	fsr2l,c
  4844  004ABA  501E               	movf	create_name@i+1,w,c
  4845  004ABC  201C               	addwfc	create_name@sfn+1,w,c
  4846  004ABE  6EDA               	movwf	fsr2h,c
  4847  004AC0  C01A  FFDF         	movff	create_name@d,indf2
  4848  004AC4  D029               	goto	l4895
  4849  004AC6                     l4873:
  4850                           
  4851                           ;ff.c: 2016: if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))
  4852  004AC6  0E38               	movlw	low STR_4
  4853  004AC8  6E01               	movwf	chk_chr@str,c
  4854  004ACA  0E10               	movlw	high STR_4
  4855  004ACC  6E02               	movwf	chk_chr@str+1,c
  4856  004ACE  C01F  F003         	movff	create_name@c,chk_chr@chr
  4857  004AD2  6A04               	clrf	chk_chr@chr+1,c
  4858  004AD4  EC52  F032         	call	_chk_chr	;wreg free
  4859  004AD8  5001               	movf	?_chk_chr,w,c
  4860  004ADA  1002               	iorwf	?_chk_chr+1,w,c
  4861  004ADC  B4D8               	btfsc	status,2,c
  4862  004ADE  D002               	goto	l4879
  4863                           
  4864                           ;ff.c: 2017: return FR_INVALID_NAME;
  4865  004AE0  0E06               	movlw	6
  4866  004AE2  0012               	return	
  4867  004AE4                     l4879:
  4868                           
  4869                           ;ff.c: 2018: if ((((c)>='A')&&((c)<='Z'))) {
  4870  004AE4  0E40               	movlw	64
  4871  004AE6  641F               	cpfsgt	create_name@c,c
  4872  004AE8  D005               	goto	l4885
  4873  004AEA  0E5B               	movlw	91
  4874  004AEC  601F               	cpfslt	create_name@c,c
  4875  004AEE  D002               	goto	l4885
  4876                           
  4877                           ;ff.c: 2019: b |= 2;
  4878  004AF0  8215               	bsf	create_name@b,1,c
  4879                           
  4880                           ;ff.c: 2020: } else {
  4881  004AF2  D00A               	goto	l4893
  4882  004AF4                     l4885:
  4883                           
  4884                           ;ff.c: 2021: if ((((c)>='a')&&((c)<='z'))) {
  4885  004AF4  0E60               	movlw	96
  4886  004AF6  641F               	cpfsgt	create_name@c,c
  4887  004AF8  D007               	goto	l4893
  4888  004AFA  0E7B               	movlw	123
  4889  004AFC  601F               	cpfslt	create_name@c,c
  4890  004AFE  D004               	goto	l4893
  4891                           
  4892                           ;ff.c: 2022: b |= 1; c -= 0x20;
  4893  004B00  8015               	bsf	create_name@b,0,c
  4894  004B02  0E20               	movlw	32
  4895  004B04  5E1F               	subwf	create_name@c,f,c
  4896  004B06  D000               	goto	l4893
  4897  004B08                     l4893:
  4898                           
  4899                           ;ff.c: 2023: }
  4900                           ;ff.c: 2024: }
  4901                           ;ff.c: 2025: sfn[i++] = c;
  4902  004B08  501D               	movf	create_name@i,w,c
  4903  004B0A  241B               	addwf	create_name@sfn,w,c
  4904  004B0C  6ED9               	movwf	fsr2l,c
  4905  004B0E  501E               	movf	create_name@i+1,w,c
  4906  004B10  201C               	addwfc	create_name@sfn+1,w,c
  4907  004B12  6EDA               	movwf	fsr2h,c
  4908  004B14  C01F  FFDF         	movff	create_name@c,indf2
  4909  004B18                     l4895:
  4910  004B18  4A1D               	infsnz	create_name@i,f,c
  4911  004B1A  2A1E               	incf	create_name@i+1,f,c
  4912                           
  4913                           ;ff.c: 2026: }
  4914                           ;ff.c: 2027: }
  4915  004B1C  D73D               	goto	l4813
  4916  004B1E                     l4897:
  4917                           
  4918                           ;ff.c: 2028: *path = &p[si];
  4919  004B1E  5013               	movf	create_name@si,w,c
  4920  004B20  2418               	addwf	create_name@p,w,c
  4921  004B22  6E0D               	movwf	??_create_name& (0+255),c
  4922  004B24  5014               	movf	create_name@si+1,w,c
  4923  004B26  2019               	addwfc	create_name@p+1,w,c
  4924  004B28  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4925  004B2A  C00B  FFD9         	movff	create_name@path,fsr2l
  4926  004B2E  C00C  FFDA         	movff	create_name@path+1,fsr2h
  4927  004B32  C00D  FFDE         	movff	??_create_name,postinc2
  4928  004B36  C00E  FFDD         	movff	??_create_name+1,postdec2
  4929                           
  4930                           ;ff.c: 2029: c = (c <= ' ') ? 0x04 : 0;
  4931  004B3A  0E20               	movlw	32
  4932  004B3C  641F               	cpfsgt	create_name@c,c
  4933  004B3E  D004               	goto	l4903
  4934  004B40  0E00               	movlw	0
  4935  004B42  6E12               	movwf	_create_name$700+1,c
  4936  004B44  0E00               	movlw	0
  4937  004B46  D003               	goto	L7
  4938  004B48                     l4903:
  4939  004B48  0E00               	movlw	0
  4940  004B4A  6E12               	movwf	_create_name$700+1,c
  4941  004B4C  0E04               	movlw	4
  4942  004B4E                     L7:
  4943  004B4E  6E11               	movwf	_create_name$700,c
  4944  004B50  D000               	goto	l4905
  4945  004B52                     l4905:
  4946  004B52  C011  F01F         	movff	_create_name$700,create_name@c
  4947                           
  4948                           ;ff.c: 2031: if (!i) return FR_INVALID_NAME;
  4949  004B56  501D               	movf	create_name@i,w,c
  4950  004B58  101E               	iorwf	create_name@i+1,w,c
  4951  004B5A  A4D8               	btfss	status,2,c
  4952  004B5C  D002               	goto	l4913
  4953  004B5E  0E06               	movlw	6
  4954  004B60  0012               	return	
  4955  004B62                     l4913:
  4956                           
  4957                           ;ff.c: 2032: if (sfn[0] == 0xE5) sfn[0] = 0x05;
  4958  004B62  C01B  FFD9         	movff	create_name@sfn,fsr2l
  4959  004B66  C01C  FFDA         	movff	create_name@sfn+1,fsr2h
  4960  004B6A  0EE5               	movlw	229
  4961  004B6C  18DE               	xorwf	postinc2,w,c
  4962  004B6E  A4D8               	btfss	status,2,c
  4963  004B70  D007               	goto	l4917
  4964  004B72  C01B  FFD9         	movff	create_name@sfn,fsr2l
  4965  004B76  C01C  FFDA         	movff	create_name@sfn+1,fsr2h
  4966  004B7A  0E05               	movlw	5
  4967  004B7C  6EDF               	movwf	indf2,c
  4968  004B7E  D000               	goto	l4917
  4969  004B80                     l4917:
  4970                           
  4971                           ;ff.c: 2034: if (ni == 8) b <<= 2;
  4972  004B80  0E08               	movlw	8
  4973  004B82  1816               	xorwf	create_name@ni,w,c
  4974  004B84  1017               	iorwf	create_name@ni+1,w,c
  4975  004B86  A4D8               	btfss	status,2,c
  4976  004B88  D004               	goto	l482
  4977  004B8A  90D8               	bcf	status,0,c
  4978  004B8C  3615               	rlcf	create_name@b,f,c
  4979  004B8E  90D8               	bcf	status,0,c
  4980  004B90  3615               	rlcf	create_name@b,f,c
  4981  004B92                     l482:
  4982                           
  4983                           ;ff.c: 2035: if ((b & 0x03) == 0x01) c |= 0x10;
  4984  004B92  5015               	movf	create_name@b,w,c
  4985  004B94  0B03               	andlw	3
  4986  004B96  06E8               	decf	wreg,f,c
  4987  004B98  A4D8               	btfss	status,2,c
  4988  004B9A  D002               	goto	l4923
  4989  004B9C  881F               	bsf	create_name@c,4,c
  4990  004B9E  D000               	goto	l4923
  4991  004BA0                     l4923:
  4992                           
  4993                           ;ff.c: 2036: if ((b & 0x0C) == 0x04) c |= 0x08;
  4994  004BA0  5015               	movf	create_name@b,w,c
  4995  004BA2  0B0C               	andlw	12
  4996  004BA4  0A04               	xorlw	4
  4997  004BA6  A4D8               	btfss	status,2,c
  4998  004BA8  D002               	goto	l4927
  4999  004BAA  861F               	bsf	create_name@c,3,c
  5000  004BAC  D000               	goto	l4927
  5001  004BAE                     l4927:
  5002                           
  5003                           ;ff.c: 2038: sfn[11] = c;
  5004  004BAE  EE20 F00B          	lfsr	2,11
  5005  004BB2  501B               	movf	create_name@sfn,w,c
  5006  004BB4  26D9               	addwf	fsr2l,f,c
  5007  004BB6  501C               	movf	create_name@sfn+1,w,c
  5008  004BB8  22DA               	addwfc	fsr2h,f,c
  5009  004BBA  C01F  FFDF         	movff	create_name@c,indf2
  5010                           
  5011                           ;ff.c: 2040: return FR_OK;
  5012  004BBE  0E00               	movlw	0
  5013  004BC0  0012               	return	
  5014  004BC2  0012               	return		;funcret
  5015  004BC4                     __end_of_create_name:
  5016                           	opt stack 0
  5017                           tblptru	equ	0xFF8
  5018                           tblptrh	equ	0xFF7
  5019                           tblptrl	equ	0xFF6
  5020                           tablat	equ	0xFF5
  5021                           postinc0	equ	0xFEE
  5022                           fsr0h	equ	0xFEA
  5023                           fsr0l	equ	0xFE9
  5024                           wreg	equ	0xFE8
  5025                           indf1	equ	0xFE7
  5026                           postinc1	equ	0xFE6
  5027                           postdec1	equ	0xFE5
  5028                           fsr1h	equ	0xFE2
  5029                           fsr1l	equ	0xFE1
  5030                           indf2	equ	0xFDF
  5031                           postinc2	equ	0xFDE
  5032                           postdec2	equ	0xFDD
  5033                           plusw2	equ	0xFDB
  5034                           fsr2h	equ	0xFDA
  5035                           fsr2l	equ	0xFD9
  5036                           status	equ	0xFD8
  5037                           
  5038 ;; *************** function _chk_chr *****************
  5039 ;; Defined at:
  5040 ;;		line 543 in file "../../SD_Card_FatFs/ff.c"
  5041 ;; Parameters:    Size  Location     Type
  5042 ;;  str             2    0[COMRAM] PTR const unsigned char 
  5043 ;;		 -> STR_4(15), 
  5044 ;;  chr             2    2[COMRAM] int 
  5045 ;; Auto vars:     Size  Location     Type
  5046 ;;		None
  5047 ;; Return value:  Size  Location     Type
  5048 ;;                  2    0[COMRAM] int 
  5049 ;; Registers used:
  5050 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  5051 ;; Tracked objects:
  5052 ;;		On entry : 0/0
  5053 ;;		On exit  : 0/0
  5054 ;;		Unchanged: 0/0
  5055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5056 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5058 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5059 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5060 ;;Total ram usage:        6 bytes
  5061 ;; Hardware stack levels used:    1
  5062 ;; This function calls:
  5063 ;;		Nothing
  5064 ;; This function is called by:
  5065 ;;		_create_name
  5066 ;; This function uses a non-reentrant model
  5067 ;;
  5068                           
  5069                           	psect	text9
  5070  0064A4                     __ptext9:
  5071                           	opt stack 0
  5072  0064A4                     _chk_chr:
  5073                           	opt stack 27
  5074                           
  5075                           ;ff.c: 544: while (*str && *str != chr) str++;
  5076                           
  5077                           ;incstack = 0
  5078  0064A4  D003               	goto	l4385
  5079  0064A6                     l4383:
  5080  0064A6  4A01               	infsnz	chk_chr@str,f,c
  5081  0064A8  2A02               	incf	chk_chr@str+1,f,c
  5082  0064AA  D000               	goto	l4385
  5083  0064AC                     l4385:
  5084  0064AC  C001  FFF6         	movff	chk_chr@str,tblptrl
  5085  0064B0  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  5086  0064B4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5087  0064B4  6AF8               	clrf	tblptru,c
  5088  0064B6                     	endif
  5089  0064B6                     	if	0	;tblptru may be non-zero
  5090  0064B6                     	endif
  5091  0064B6  0008               	tblrd		*
  5092  0064B8  50F5               	movf	tablat,w,c
  5093  0064BA  0900               	iorlw	0
  5094  0064BC  B4D8               	btfsc	status,2,c
  5095  0064BE  D012               	goto	l4389
  5096  0064C0  C001  FFF6         	movff	chk_chr@str,tblptrl
  5097  0064C4  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  5098  0064C8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5099  0064C8  6AF8               	clrf	tblptru,c
  5100  0064CA                     	endif
  5101  0064CA                     	if	0	;tblptru may be non-zero
  5102  0064CA                     	endif
  5103  0064CA  0008               	tblrd		*
  5104  0064CC  50F5               	movf	tablat,w,c
  5105  0064CE  6E05               	movwf	??_chk_chr& (0+255),c
  5106  0064D0  6A06               	clrf	(??_chk_chr+1)& (0+255),c
  5107  0064D2  5003               	movf	chk_chr@chr,w,c
  5108  0064D4  1805               	xorwf	??_chk_chr,w,c
  5109  0064D6  E1E7               	bnz	l4383
  5110  0064D8  5004               	movf	chk_chr@chr+1,w,c
  5111  0064DA  1806               	xorwf	??_chk_chr+1,w,c
  5112  0064DC  B4D8               	btfsc	status,2,c
  5113  0064DE  D002               	goto	l4389
  5114  0064E0  D7E2               	goto	l4383
  5115  0064E2  D000               	goto	l4389
  5116  0064E4                     l4389:
  5117                           
  5118                           ;ff.c: 545: return *str;
  5119  0064E4  C001  FFF6         	movff	chk_chr@str,tblptrl
  5120  0064E8  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  5121  0064EC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5122  0064EC  6AF8               	clrf	tblptru,c
  5123  0064EE                     	endif
  5124  0064EE                     	if	0	;tblptru may be non-zero
  5125  0064EE                     	endif
  5126  0064EE  0008               	tblrd		*
  5127  0064F0  50F5               	movf	tablat,w,c
  5128  0064F2  6E01               	movwf	?_chk_chr,c
  5129  0064F4  6A02               	clrf	?_chk_chr+1,c
  5130  0064F6  0012               	return	
  5131  0064F8  0012               	return		;funcret
  5132  0064FA                     __end_of_chk_chr:
  5133                           	opt stack 0
  5134                           tblptru	equ	0xFF8
  5135                           tblptrh	equ	0xFF7
  5136                           tblptrl	equ	0xFF6
  5137                           tablat	equ	0xFF5
  5138                           postinc0	equ	0xFEE
  5139                           fsr0h	equ	0xFEA
  5140                           fsr0l	equ	0xFE9
  5141                           wreg	equ	0xFE8
  5142                           indf1	equ	0xFE7
  5143                           postinc1	equ	0xFE6
  5144                           postdec1	equ	0xFE5
  5145                           fsr1h	equ	0xFE2
  5146                           fsr1l	equ	0xFE1
  5147                           indf2	equ	0xFDF
  5148                           postinc2	equ	0xFDE
  5149                           postdec2	equ	0xFDD
  5150                           plusw2	equ	0xFDB
  5151                           fsr2h	equ	0xFDA
  5152                           fsr2l	equ	0xFD9
  5153                           status	equ	0xFD8
  5154                           
  5155 ;; *************** function _dir_register *****************
  5156 ;; Defined at:
  5157 ;;		line 1578 in file "../../SD_Card_FatFs/ff.c"
  5158 ;; Parameters:    Size  Location     Type
  5159 ;;  dp              2   42[BANK0 ] PTR struct .
  5160 ;;		 -> f_open@dj(22), 
  5161 ;; Auto vars:     Size  Location     Type
  5162 ;;  res             1   44[BANK0 ] enum E88
  5163 ;; Return value:  Size  Location     Type
  5164 ;;                  1    wreg      enum E88
  5165 ;; Registers used:
  5166 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5167 ;; Tracked objects:
  5168 ;;		On entry : 0/0
  5169 ;;		On exit  : 0/0
  5170 ;;		Unchanged: 0/0
  5171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5172 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5173 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5175 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5176 ;;Total ram usage:        3 bytes
  5177 ;; Hardware stack levels used:    1
  5178 ;; Hardware stack levels required when called:   12
  5179 ;; This function calls:
  5180 ;;		_dir_alloc
  5181 ;;		_mem_cpy
  5182 ;;		_mem_set
  5183 ;;		_move_window
  5184 ;; This function is called by:
  5185 ;;		_f_open
  5186 ;; This function uses a non-reentrant model
  5187 ;;
  5188                           
  5189                           	psect	text10
  5190  005B32                     __ptext10:
  5191                           	opt stack 0
  5192  005B32                     _dir_register:
  5193                           	opt stack 17
  5194                           
  5195                           ;ff.c: 1582: FRESULT res;
  5196                           ;ff.c: 1629: res = dir_alloc(dp, 1);
  5197                           
  5198                           ;incstack = 0
  5199  005B32  C08A  F080         	movff	dir_register@dp,dir_alloc@dp
  5200  005B36  C08B  F081         	movff	dir_register@dp+1,dir_alloc@dp+1
  5201  005B3A  0E00               	movlw	0
  5202  005B3C  0100               	movlb	0	; () banked
  5203  005B3E  6F83               	movwf	(dir_alloc@nent+1)& (0+255),b
  5204  005B40  0E01               	movlw	1
  5205  005B42  6F82               	movwf	dir_alloc@nent& (0+255),b
  5206  005B44  EC72  F02B         	call	_dir_alloc	;wreg free
  5207  005B48  0100               	movlb	0	; () banked
  5208  005B4A  6F8C               	movwf	dir_register@res& (0+255),b
  5209                           
  5210                           ; BSR set to: 0
  5211                           ;ff.c: 1632: if (res == FR_OK) {
  5212  005B4C  0100               	movlb	0	; () banked
  5213  005B4E  518C               	movf	dir_register@res& (0+255),w,b
  5214  005B50  0100               	movlb	0	; () banked
  5215  005B52  A4D8               	btfss	status,2,c
  5216  005B54  D05E               	goto	l5099
  5217                           
  5218                           ; BSR set to: 0
  5219                           ;ff.c: 1633: res = move_window(dp->fs, dp->sect);
  5220  005B56  C08A  FFD9         	movff	dir_register@dp,fsr2l
  5221  005B5A  C08B  FFDA         	movff	dir_register@dp+1,fsr2h
  5222  005B5E  CFDE F030          	movff	postinc2,move_window@fs
  5223  005B62  CFDD F031          	movff	postdec2,move_window@fs+1
  5224  005B66  0100               	movlb	0	; () banked
  5225  005B68  EE20 F00E          	lfsr	2,14
  5226  005B6C  518A               	movf	dir_register@dp& (0+255),w,b
  5227  005B6E  26D9               	addwf	fsr2l,f,c
  5228  005B70  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  5229  005B72  22DA               	addwfc	fsr2h,f,c
  5230  005B74  CFDE F032          	movff	postinc2,move_window@sector
  5231  005B78  CFDE F033          	movff	postinc2,move_window@sector+1
  5232  005B7C  CFDE F034          	movff	postinc2,move_window@sector+2
  5233  005B80  CFDE F035          	movff	postinc2,move_window@sector+3
  5234  005B84  ECFB  F02F         	call	_move_window	;wreg free
  5235  005B88  0100               	movlb	0	; () banked
  5236  005B8A  6F8C               	movwf	dir_register@res& (0+255),b
  5237                           
  5238                           ; BSR set to: 0
  5239                           ;ff.c: 1634: if (res == FR_OK) {
  5240  005B8C  0100               	movlb	0	; () banked
  5241  005B8E  518C               	movf	dir_register@res& (0+255),w,b
  5242  005B90  0100               	movlb	0	; () banked
  5243  005B92  A4D8               	btfss	status,2,c
  5244  005B94  D03E               	goto	l5099
  5245                           
  5246                           ; BSR set to: 0
  5247                           ;ff.c: 1635: mem_set(dp->dir, 0, 32);
  5248  005B96  0100               	movlb	0	; () banked
  5249  005B98  EE20 F012          	lfsr	2,18
  5250  005B9C  518A               	movf	dir_register@dp& (0+255),w,b
  5251  005B9E  26D9               	addwf	fsr2l,f,c
  5252  005BA0  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  5253  005BA2  22DA               	addwfc	fsr2h,f,c
  5254  005BA4  CFDE F001          	movff	postinc2,mem_set@dst
  5255  005BA8  CFDD F002          	movff	postdec2,mem_set@dst+1
  5256  005BAC  0E00               	movlw	0
  5257  005BAE  6E04               	movwf	mem_set@val+1,c
  5258  005BB0  0E00               	movlw	0
  5259  005BB2  6E03               	movwf	mem_set@val,c
  5260  005BB4  0E00               	movlw	0
  5261  005BB6  6E06               	movwf	mem_set@cnt+1,c
  5262  005BB8  0E20               	movlw	32
  5263  005BBA  6E05               	movwf	mem_set@cnt,c
  5264  005BBC  EC1E  F033         	call	_mem_set	;wreg free
  5265                           
  5266                           ;ff.c: 1636: mem_cpy(dp->dir, dp->fn, 11);
  5267  005BC0  0100               	movlb	0	; () banked
  5268  005BC2  EE20 F012          	lfsr	2,18
  5269  005BC6  518A               	movf	dir_register@dp& (0+255),w,b
  5270  005BC8  26D9               	addwf	fsr2l,f,c
  5271  005BCA  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  5272  005BCC  22DA               	addwfc	fsr2h,f,c
  5273  005BCE  CFDE F001          	movff	postinc2,mem_cpy@dst
  5274  005BD2  CFDD F002          	movff	postdec2,mem_cpy@dst+1
  5275  005BD6  0100               	movlb	0	; () banked
  5276  005BD8  EE20 F014          	lfsr	2,20
  5277  005BDC  518A               	movf	dir_register@dp& (0+255),w,b
  5278  005BDE  26D9               	addwf	fsr2l,f,c
  5279  005BE0  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  5280  005BE2  22DA               	addwfc	fsr2h,f,c
  5281  005BE4  CFDE F003          	movff	postinc2,mem_cpy@src
  5282  005BE8  CFDD F004          	movff	postdec2,mem_cpy@src+1
  5283  005BEC  0E00               	movlw	0
  5284  005BEE  6E06               	movwf	mem_cpy@cnt+1,c
  5285  005BF0  0E0B               	movlw	11
  5286  005BF2  6E05               	movwf	mem_cpy@cnt,c
  5287  005BF4  ECE0  F02E         	call	_mem_cpy	;wreg free
  5288                           
  5289                           ;ff.c: 1640: dp->fs->wflag = 1;
  5290  005BF8  C08A  FFD9         	movff	dir_register@dp,fsr2l
  5291  005BFC  C08B  FFDA         	movff	dir_register@dp+1,fsr2h
  5292  005C00  EE10 F004          	lfsr	1,4
  5293  005C04  50DE               	movf	postinc2,w,c
  5294  005C06  26E1               	addwf	fsr1l,f,c
  5295  005C08  50DD               	movf	postdec2,w,c
  5296  005C0A  22E2               	addwfc	fsr1h,f,c
  5297  005C0C  0E01               	movlw	1
  5298  005C0E  6EE7               	movwf	indf1,c
  5299  005C10  D000               	goto	l5099
  5300  005C12                     l5099:
  5301                           
  5302                           ;ff.c: 1641: }
  5303                           ;ff.c: 1642: }
  5304                           ;ff.c: 1644: return res;
  5305  005C12  0100               	movlb	0	; () banked
  5306  005C14  518C               	movf	dir_register@res& (0+255),w,b
  5307  005C16  0012               	return	
  5308                           
  5309                           ; BSR set to: 0
  5310                           
  5311                           ; BSR set to: 0
  5312  005C18  0012               	return		;funcret
  5313  005C1A                     __end_of_dir_register:
  5314                           	opt stack 0
  5315                           tblptru	equ	0xFF8
  5316                           tblptrh	equ	0xFF7
  5317                           tblptrl	equ	0xFF6
  5318                           tablat	equ	0xFF5
  5319                           postinc0	equ	0xFEE
  5320                           fsr0h	equ	0xFEA
  5321                           fsr0l	equ	0xFE9
  5322                           wreg	equ	0xFE8
  5323                           indf1	equ	0xFE7
  5324                           postinc1	equ	0xFE6
  5325                           postdec1	equ	0xFE5
  5326                           fsr1h	equ	0xFE2
  5327                           fsr1l	equ	0xFE1
  5328                           indf2	equ	0xFDF
  5329                           postinc2	equ	0xFDE
  5330                           postdec2	equ	0xFDD
  5331                           plusw2	equ	0xFDB
  5332                           fsr2h	equ	0xFDA
  5333                           fsr2l	equ	0xFD9
  5334                           status	equ	0xFD8
  5335                           
  5336 ;; *************** function _mem_cpy *****************
  5337 ;; Defined at:
  5338 ;;		line 507 in file "../../SD_Card_FatFs/ff.c"
  5339 ;; Parameters:    Size  Location     Type
  5340 ;;  dst             2    0[COMRAM] PTR void 
  5341 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  5342 ;;  src             2    2[COMRAM] PTR const void 
  5343 ;;		 -> f_open@sfn(12), NULL(0), STR_3(55), FatFs(558), 
  5344 ;;  cnt             2    4[COMRAM] unsigned int 
  5345 ;; Auto vars:     Size  Location     Type
  5346 ;;  s               2   10[COMRAM] PTR const unsigned char 
  5347 ;;		 -> f_open@sfn(12), NULL(0), STR_3(55), FatFs(558), 
  5348 ;;  d               2    8[COMRAM] PTR unsigned char 
  5349 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  5350 ;; Return value:  Size  Location     Type
  5351 ;;		None               void
  5352 ;; Registers used:
  5353 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5354 ;; Tracked objects:
  5355 ;;		On entry : 0/0
  5356 ;;		On exit  : 0/0
  5357 ;;		Unchanged: 0/0
  5358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5359 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5360 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5361 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5362 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5363 ;;Total ram usage:       12 bytes
  5364 ;; Hardware stack levels used:    1
  5365 ;; This function calls:
  5366 ;;		Nothing
  5367 ;; This function is called by:
  5368 ;;		_dir_register
  5369 ;;		_f_write
  5370 ;;		_f_read
  5371 ;; This function uses a non-reentrant model
  5372 ;;
  5373                           
  5374                           	psect	text11
  5375  005DC0                     __ptext11:
  5376                           	opt stack 0
  5377  005DC0                     _mem_cpy:
  5378                           	opt stack 29
  5379                           
  5380                           ;ff.c: 508: BYTE *d = (BYTE*)dst;
  5381                           
  5382                           ; BSR set to: 0
  5383                           ;incstack = 0
  5384  005DC0  C001  F009         	movff	mem_cpy@dst,mem_cpy@d
  5385  005DC4  C002  F00A         	movff	mem_cpy@dst+1,mem_cpy@d+1
  5386                           
  5387                           ;ff.c: 509: const BYTE *s = (const BYTE*)src;
  5388  005DC8  C003  F00B         	movff	mem_cpy@src,mem_cpy@s
  5389  005DCC  C004  F00C         	movff	mem_cpy@src+1,mem_cpy@s+1
  5390                           
  5391                           ;ff.c: 512: while (cnt >= sizeof (int)) {
  5392  005DD0  D02D               	goto	l4677
  5393  005DD2                     l4669:
  5394                           
  5395                           ;ff.c: 513: *(int*)d = *(int*)s;
  5396  005DD2  C00B  FFF6         	movff	mem_cpy@s,tblptrl
  5397  005DD6  C00C  FFF7         	movff	mem_cpy@s+1,tblptrh
  5398  005DDA  0E00               	movlw	low (__smallconst shr (0+16))
  5399  005DDC  6EF8               	movwf	tblptru,c
  5400  005DDE  0E0F               	movlw	(high __ramtop+-1)
  5401  005DE0  64F7               	cpfsgt	tblptrh,c
  5402  005DE2  D007               	bra	u6407
  5403  005DE4  0009               	tblrd		*+
  5404  005DE6  CFF5 F007          	movff	tablat,??_mem_cpy
  5405  005DEA  0009               	tblrd		*+
  5406  005DEC  CFF5 F008          	movff	tablat,??_mem_cpy+1
  5407  005DF0  D008               	bra	u6400
  5408  005DF2                     u6407:
  5409  005DF2  CFF6 FFE9          	movff	tblptrl,fsr0l
  5410  005DF6  CFF7 FFEA          	movff	tblptrh,fsr0h
  5411  005DFA  CFEE F007          	movff	postinc0,??_mem_cpy
  5412  005DFE  CFEE F008          	movff	postinc0,??_mem_cpy+1
  5413  005E02                     u6400:
  5414  005E02  C009  FFD9         	movff	mem_cpy@d,fsr2l
  5415  005E06  C00A  FFDA         	movff	mem_cpy@d+1,fsr2h
  5416  005E0A  C007  FFDE         	movff	??_mem_cpy,postinc2
  5417  005E0E  C008  FFDD         	movff	??_mem_cpy+1,postdec2
  5418                           
  5419                           ;ff.c: 514: d += sizeof (int); s += sizeof (int);
  5420  005E12  0E02               	movlw	2
  5421  005E14  2609               	addwf	mem_cpy@d,f,c
  5422  005E16  0E00               	movlw	0
  5423  005E18  220A               	addwfc	mem_cpy@d+1,f,c
  5424  005E1A  0E02               	movlw	2
  5425  005E1C  260B               	addwf	mem_cpy@s,f,c
  5426  005E1E  0E00               	movlw	0
  5427  005E20  220C               	addwfc	mem_cpy@s+1,f,c
  5428                           
  5429                           ;ff.c: 515: cnt -= sizeof (int);
  5430  005E22  0E02               	movlw	2
  5431  005E24  5E05               	subwf	mem_cpy@cnt,f,c
  5432  005E26  0E00               	movlw	0
  5433  005E28  5A06               	subwfb	mem_cpy@cnt+1,f,c
  5434  005E2A  D000               	goto	l4677
  5435  005E2C                     l4677:
  5436  005E2C  5006               	movf	mem_cpy@cnt+1,w,c
  5437  005E2E  E1D1               	bnz	l4669
  5438  005E30  0E02               	movlw	2
  5439  005E32  5C05               	subwf	mem_cpy@cnt,w,c
  5440  005E34  A0D8               	btfss	status,0,c
  5441  005E36  D01D               	goto	l4685
  5442  005E38  D7CC               	goto	l4669
  5443                           
  5444                           ;ff.c: 516: }
  5445                           ;ff.c: 518: while (cnt--)
  5446  005E3A  D01B               	goto	l4685
  5447  005E3C                     l4679:
  5448                           
  5449                           ;ff.c: 519: *d++ = *s++;
  5450  005E3C  C00B  FFF6         	movff	mem_cpy@s,tblptrl
  5451  005E40  C00C  FFF7         	movff	mem_cpy@s+1,tblptrh
  5452  005E44  0E00               	movlw	low (__smallconst shr (0+16))
  5453  005E46  6EF8               	movwf	tblptru,c
  5454  005E48  C009  FFD9         	movff	mem_cpy@d,fsr2l
  5455  005E4C  C00A  FFDA         	movff	mem_cpy@d+1,fsr2h
  5456  005E50  0E0F               	movlw	(high __ramtop+-1)
  5457  005E52  64F7               	cpfsgt	tblptrh,c
  5458  005E54  D003               	bra	u6427
  5459  005E56  0008               	tblrd		*
  5460  005E58  50F5               	movf	tablat,w,c
  5461  005E5A  D005               	bra	u6420
  5462  005E5C                     u6427:
  5463  005E5C  CFF6 FFE9          	movff	tblptrl,fsr0l
  5464  005E60  CFF7 FFEA          	movff	tblptrh,fsr0h
  5465  005E64  50EF               	movf	indf0,w,c
  5466  005E66                     u6420:
  5467  005E66  6EDF               	movwf	indf2,c
  5468  005E68  4A0B               	infsnz	mem_cpy@s,f,c
  5469  005E6A  2A0C               	incf	mem_cpy@s+1,f,c
  5470  005E6C  4A09               	infsnz	mem_cpy@d,f,c
  5471  005E6E  2A0A               	incf	mem_cpy@d+1,f,c
  5472  005E70  D000               	goto	l4685
  5473  005E72                     l4685:
  5474  005E72  0605               	decf	mem_cpy@cnt,f,c
  5475  005E74  A0D8               	btfss	status,0,c
  5476  005E76  0606               	decf	mem_cpy@cnt+1,f,c
  5477  005E78  2805               	incf	mem_cpy@cnt,w,c
  5478  005E7A  E1E0               	bnz	l4679
  5479  005E7C  2806               	incf	mem_cpy@cnt+1,w,c
  5480  005E7E  A4D8               	btfss	status,2,c
  5481  005E80  D7DD               	goto	l4679
  5482  005E82  0012               	return		;funcret
  5483  005E84                     __end_of_mem_cpy:
  5484                           	opt stack 0
  5485                           tblptru	equ	0xFF8
  5486                           tblptrh	equ	0xFF7
  5487                           tblptrl	equ	0xFF6
  5488                           tablat	equ	0xFF5
  5489                           indf0	equ	0xFEF
  5490                           postinc0	equ	0xFEE
  5491                           fsr0h	equ	0xFEA
  5492                           fsr0l	equ	0xFE9
  5493                           wreg	equ	0xFE8
  5494                           indf1	equ	0xFE7
  5495                           postinc1	equ	0xFE6
  5496                           postdec1	equ	0xFE5
  5497                           fsr1h	equ	0xFE2
  5498                           fsr1l	equ	0xFE1
  5499                           indf2	equ	0xFDF
  5500                           postinc2	equ	0xFDE
  5501                           postdec2	equ	0xFDD
  5502                           plusw2	equ	0xFDB
  5503                           fsr2h	equ	0xFDA
  5504                           fsr2l	equ	0xFD9
  5505                           status	equ	0xFD8
  5506                           
  5507 ;; *************** function _dir_alloc *****************
  5508 ;; Defined at:
  5509 ;;		line 1199 in file "../../SD_Card_FatFs/ff.c"
  5510 ;; Parameters:    Size  Location     Type
  5511 ;;  dp              2   32[BANK0 ] PTR struct .
  5512 ;;		 -> f_open@dj(22), 
  5513 ;;  nent            2   34[BANK0 ] unsigned int 
  5514 ;; Auto vars:     Size  Location     Type
  5515 ;;  n               2   39[BANK0 ] unsigned int 
  5516 ;;  res             1   41[BANK0 ] enum E88
  5517 ;; Return value:  Size  Location     Type
  5518 ;;                  1    wreg      enum E88
  5519 ;; Registers used:
  5520 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5521 ;; Tracked objects:
  5522 ;;		On entry : 0/0
  5523 ;;		On exit  : 0/0
  5524 ;;		Unchanged: 0/0
  5525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5526 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5527 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5528 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5529 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5530 ;;Total ram usage:       10 bytes
  5531 ;; Hardware stack levels used:    1
  5532 ;; Hardware stack levels required when called:   11
  5533 ;; This function calls:
  5534 ;;		_dir_next
  5535 ;;		_dir_sdi
  5536 ;;		_move_window
  5537 ;; This function is called by:
  5538 ;;		_dir_register
  5539 ;; This function uses a non-reentrant model
  5540 ;;
  5541                           
  5542                           	psect	text12
  5543  0056E4                     __ptext12:
  5544                           	opt stack 0
  5545  0056E4                     _dir_alloc:
  5546                           	opt stack 17
  5547                           
  5548                           ;ff.c: 1204: FRESULT res;
  5549                           ;ff.c: 1205: UINT n;
  5550                           ;ff.c: 1208: res = dir_sdi(dp, 0);
  5551                           
  5552                           ;incstack = 0
  5553  0056E4  C080  F055         	movff	dir_alloc@dp,dir_sdi@dp
  5554  0056E8  C081  F056         	movff	dir_alloc@dp+1,dir_sdi@dp+1
  5555  0056EC  0E00               	movlw	0
  5556  0056EE  6E58               	movwf	dir_sdi@idx+1,c
  5557  0056F0  0E00               	movlw	0
  5558  0056F2  6E57               	movwf	dir_sdi@idx,c
  5559  0056F4  ECF7  F022         	call	_dir_sdi	;wreg free
  5560  0056F8  0100               	movlb	0	; () banked
  5561  0056FA  6F89               	movwf	dir_alloc@res& (0+255),b
  5562                           
  5563                           ; BSR set to: 0
  5564                           ;ff.c: 1209: if (res == FR_OK) {
  5565  0056FC  0100               	movlb	0	; () banked
  5566  0056FE  5189               	movf	dir_alloc@res& (0+255),w,b
  5567  005700  0100               	movlb	0	; () banked
  5568  005702  A4D8               	btfss	status,2,c
  5569  005704  D078               	goto	l4745
  5570                           
  5571                           ; BSR set to: 0
  5572                           ;ff.c: 1210: n = 0;
  5573  005706  0E00               	movlw	0
  5574  005708  0100               	movlb	0	; () banked
  5575  00570A  6F88               	movwf	(dir_alloc@n+1)& (0+255),b
  5576  00570C  0E00               	movlw	0
  5577  00570E  6F87               	movwf	dir_alloc@n& (0+255),b
  5578  005710  D000               	goto	l4725
  5579  005712                     l4725:
  5580                           
  5581                           ; BSR set to: 0
  5582                           ;ff.c: 1212: res = move_window(dp->fs, dp->sect);
  5583  005712  C080  FFD9         	movff	dir_alloc@dp,fsr2l
  5584  005716  C081  FFDA         	movff	dir_alloc@dp+1,fsr2h
  5585  00571A  CFDE F030          	movff	postinc2,move_window@fs
  5586  00571E  CFDD F031          	movff	postdec2,move_window@fs+1
  5587  005722  0100               	movlb	0	; () banked
  5588  005724  EE20 F00E          	lfsr	2,14
  5589  005728  5180               	movf	dir_alloc@dp& (0+255),w,b
  5590  00572A  26D9               	addwf	fsr2l,f,c
  5591  00572C  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  5592  00572E  22DA               	addwfc	fsr2h,f,c
  5593  005730  CFDE F032          	movff	postinc2,move_window@sector
  5594  005734  CFDE F033          	movff	postinc2,move_window@sector+1
  5595  005738  CFDE F034          	movff	postinc2,move_window@sector+2
  5596  00573C  CFDE F035          	movff	postinc2,move_window@sector+3
  5597  005740  ECFB  F02F         	call	_move_window	;wreg free
  5598  005744  0100               	movlb	0	; () banked
  5599  005746  6F89               	movwf	dir_alloc@res& (0+255),b
  5600                           
  5601                           ; BSR set to: 0
  5602                           ;ff.c: 1213: if (res != FR_OK) break;
  5603  005748  0100               	movlb	0	; () banked
  5604  00574A  5189               	movf	dir_alloc@res& (0+255),w,b
  5605  00574C  0100               	movlb	0	; () banked
  5606  00574E  A4D8               	btfss	status,2,c
  5607  005750  D052               	goto	l4745
  5608  005752  D001               	goto	l4731
  5609                           
  5610                           ; BSR set to: 0
  5611  005754  D050               	goto	l4745
  5612  005756                     l4731:
  5613                           
  5614                           ; BSR set to: 0
  5615                           ;ff.c: 1214: if (dp->dir[0] == 0xE5 || dp->dir[0] == 0) {
  5616  005756  0100               	movlb	0	; () banked
  5617  005758  EE20 F012          	lfsr	2,18
  5618  00575C  5180               	movf	dir_alloc@dp& (0+255),w,b
  5619  00575E  26D9               	addwf	fsr2l,f,c
  5620  005760  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  5621  005762  22DA               	addwfc	fsr2h,f,c
  5622  005764  CFDE F084          	movff	postinc2,??_dir_alloc
  5623  005768  CFDD F085          	movff	postdec2,??_dir_alloc+1
  5624  00576C  C084  FFD9         	movff	??_dir_alloc,fsr2l
  5625  005770  C085  FFDA         	movff	??_dir_alloc+1,fsr2h
  5626  005774  0EE5               	movlw	229
  5627  005776  18DE               	xorwf	postinc2,w,c
  5628  005778  B4D8               	btfsc	status,2,c
  5629  00577A  D012               	goto	l4735
  5630                           
  5631                           ; BSR set to: 0
  5632  00577C  0100               	movlb	0	; () banked
  5633  00577E  EE20 F012          	lfsr	2,18
  5634  005782  5180               	movf	dir_alloc@dp& (0+255),w,b
  5635  005784  26D9               	addwf	fsr2l,f,c
  5636  005786  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  5637  005788  22DA               	addwfc	fsr2h,f,c
  5638  00578A  CFDE F084          	movff	postinc2,??_dir_alloc
  5639  00578E  CFDD F085          	movff	postdec2,??_dir_alloc+1
  5640  005792  C084  FFD9         	movff	??_dir_alloc,fsr2l
  5641  005796  C085  FFDA         	movff	??_dir_alloc+1,fsr2h
  5642  00579A  50DF               	movf	indf2,w,c
  5643  00579C  A4D8               	btfss	status,2,c
  5644  00579E  D011               	goto	l4739
  5645  0057A0                     l4735:
  5646                           
  5647                           ; BSR set to: 0
  5648                           ;ff.c: 1215: if (++n == nent) break;
  5649  0057A0  0100               	movlb	0	; () banked
  5650  0057A2  4B87               	infsnz	dir_alloc@n& (0+255),f,b
  5651  0057A4  2B88               	incf	(dir_alloc@n+1)& (0+255),f,b
  5652  0057A6  0100               	movlb	0	; () banked
  5653  0057A8  5182               	movf	dir_alloc@nent& (0+255),w,b
  5654  0057AA  0100               	movlb	0	; () banked
  5655  0057AC  1987               	xorwf	dir_alloc@n& (0+255),w,b
  5656  0057AE  E10F               	bnz	l4741
  5657  0057B0  0100               	movlb	0	; () banked
  5658  0057B2  5183               	movf	(dir_alloc@nent+1)& (0+255),w,b
  5659  0057B4  0100               	movlb	0	; () banked
  5660  0057B6  1988               	xorwf	(dir_alloc@n+1)& (0+255),w,b
  5661  0057B8  B4D8               	btfsc	status,2,c
  5662  0057BA  D01D               	goto	l4745
  5663  0057BC  D008               	goto	l4741
  5664                           
  5665                           ; BSR set to: 0
  5666  0057BE  D01B               	goto	l4745
  5667                           
  5668                           ; BSR set to: 0
  5669                           ;ff.c: 1216: } else {
  5670  0057C0  D006               	goto	l4741
  5671  0057C2                     l4739:
  5672                           
  5673                           ; BSR set to: 0
  5674                           ;ff.c: 1217: n = 0;
  5675  0057C2  0E00               	movlw	0
  5676  0057C4  0100               	movlb	0	; () banked
  5677  0057C6  6F88               	movwf	(dir_alloc@n+1)& (0+255),b
  5678  0057C8  0E00               	movlw	0
  5679  0057CA  6F87               	movwf	dir_alloc@n& (0+255),b
  5680  0057CC  D000               	goto	l4741
  5681  0057CE                     l4741:
  5682                           
  5683                           ; BSR set to: 0
  5684                           ;ff.c: 1218: }
  5685                           ;ff.c: 1219: res = dir_next(dp, 1);
  5686  0057CE  C080  F06D         	movff	dir_alloc@dp,dir_next@dp
  5687  0057D2  C081  F06E         	movff	dir_alloc@dp+1,dir_next@dp+1
  5688  0057D6  0E00               	movlw	0
  5689  0057D8  0100               	movlb	0	; () banked
  5690  0057DA  6F70               	movwf	(dir_next@stretch+1)& (0+255),b
  5691  0057DC  0E01               	movlw	1
  5692  0057DE  6F6F               	movwf	dir_next@stretch& (0+255),b
  5693  0057E0  EC62  F016         	call	_dir_next	;wreg free
  5694  0057E4  0100               	movlb	0	; () banked
  5695  0057E6  6F89               	movwf	dir_alloc@res& (0+255),b
  5696                           
  5697                           ; BSR set to: 0
  5698                           ;ff.c: 1220: } while (res == FR_OK);
  5699  0057E8  0100               	movlb	0	; () banked
  5700  0057EA  5189               	movf	dir_alloc@res& (0+255),w,b
  5701  0057EC  0100               	movlb	0	; () banked
  5702  0057EE  A4D8               	btfss	status,2,c
  5703  0057F0  D002               	goto	l4745
  5704  0057F2  D78F               	goto	l4725
  5705                           
  5706                           ; BSR set to: 0
  5707  0057F4  D000               	goto	l4745
  5708  0057F6                     l4745:
  5709                           
  5710                           ; BSR set to: 0
  5711                           ;ff.c: 1221: }
  5712                           ;ff.c: 1222: if (res == FR_NO_FILE) res = FR_DENIED;
  5713  0057F6  0E04               	movlw	4
  5714  0057F8  0100               	movlb	0	; () banked
  5715  0057FA  1989               	xorwf	dir_alloc@res& (0+255),w,b
  5716  0057FC  A4D8               	btfss	status,2,c
  5717  0057FE  D003               	goto	l417
  5718                           
  5719                           ; BSR set to: 0
  5720  005800  0E07               	movlw	7
  5721  005802  0100               	movlb	0	; () banked
  5722  005804  6F89               	movwf	dir_alloc@res& (0+255),b
  5723  005806                     l417:
  5724                           
  5725                           ; BSR set to: 0
  5726                           ;ff.c: 1223: return res;
  5727  005806  0100               	movlb	0	; () banked
  5728  005808  5189               	movf	dir_alloc@res& (0+255),w,b
  5729  00580A  0012               	return	
  5730                           
  5731                           ; BSR set to: 0
  5732                           
  5733                           ; BSR set to: 0
  5734  00580C  0012               	return		;funcret
  5735  00580E                     __end_of_dir_alloc:
  5736                           	opt stack 0
  5737                           tblptru	equ	0xFF8
  5738                           tblptrh	equ	0xFF7
  5739                           tblptrl	equ	0xFF6
  5740                           tablat	equ	0xFF5
  5741                           indf0	equ	0xFEF
  5742                           postinc0	equ	0xFEE
  5743                           fsr0h	equ	0xFEA
  5744                           fsr0l	equ	0xFE9
  5745                           wreg	equ	0xFE8
  5746                           indf1	equ	0xFE7
  5747                           postinc1	equ	0xFE6
  5748                           postdec1	equ	0xFE5
  5749                           fsr1h	equ	0xFE2
  5750                           fsr1l	equ	0xFE1
  5751                           indf2	equ	0xFDF
  5752                           postinc2	equ	0xFDE
  5753                           postdec2	equ	0xFDD
  5754                           plusw2	equ	0xFDB
  5755                           fsr2h	equ	0xFDA
  5756                           fsr2l	equ	0xFD9
  5757                           status	equ	0xFD8
  5758                           
  5759 ;; *************** function _dir_sdi *****************
  5760 ;; Defined at:
  5761 ;;		line 1080 in file "../../SD_Card_FatFs/ff.c"
  5762 ;; Parameters:    Size  Location     Type
  5763 ;;  dp              2   84[COMRAM] PTR struct .
  5764 ;;		 -> f_open@dj(22), 
  5765 ;;  idx             2   86[COMRAM] unsigned int 
  5766 ;; Auto vars:     Size  Location     Type
  5767 ;;  clst            4    6[BANK0 ] unsigned long 
  5768 ;;  sect            4    2[BANK0 ] unsigned long 
  5769 ;;  ic              2    0[BANK0 ] unsigned int 
  5770 ;; Return value:  Size  Location     Type
  5771 ;;                  1    wreg      enum E88
  5772 ;; Registers used:
  5773 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5774 ;; Tracked objects:
  5775 ;;		On entry : 0/0
  5776 ;;		On exit  : 0/0
  5777 ;;		Unchanged: 0/0
  5778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5779 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5780 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5781 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5782 ;;      Totals:        11      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5783 ;;Total ram usage:       21 bytes
  5784 ;; Hardware stack levels used:    1
  5785 ;; Hardware stack levels required when called:    9
  5786 ;; This function calls:
  5787 ;;		_clust2sect
  5788 ;;		_get_fat
  5789 ;; This function is called by:
  5790 ;;		_dir_alloc
  5791 ;;		_dir_find
  5792 ;;		_follow_path
  5793 ;; This function uses a non-reentrant model
  5794 ;;
  5795                           
  5796                           	psect	text13
  5797  0045EE                     __ptext13:
  5798                           	opt stack 0
  5799  0045EE                     _dir_sdi:
  5800                           	opt stack 19
  5801                           
  5802                           ;ff.c: 1085: DWORD clst, sect;
  5803                           ;ff.c: 1086: UINT ic;
  5804                           ;ff.c: 1089: dp->index = (WORD)idx;
  5805                           
  5806                           ; BSR set to: 0
  5807                           ;incstack = 0
  5808  0045EE  EE20 F004          	lfsr	2,4
  5809  0045F2  5055               	movf	dir_sdi@dp,w,c
  5810  0045F4  26D9               	addwf	fsr2l,f,c
  5811  0045F6  5056               	movf	dir_sdi@dp+1,w,c
  5812  0045F8  22DA               	addwfc	fsr2h,f,c
  5813  0045FA  C057  FFDE         	movff	dir_sdi@idx,postinc2
  5814  0045FE  C058  FFDD         	movff	dir_sdi@idx+1,postdec2
  5815                           
  5816                           ;ff.c: 1090: clst = dp->sclust;
  5817  004602  EE20 F006          	lfsr	2,6
  5818  004606  5055               	movf	dir_sdi@dp,w,c
  5819  004608  26D9               	addwf	fsr2l,f,c
  5820  00460A  5056               	movf	dir_sdi@dp+1,w,c
  5821  00460C  22DA               	addwfc	fsr2h,f,c
  5822  00460E  CFDE F066          	movff	postinc2,dir_sdi@clst
  5823  004612  CFDE F067          	movff	postinc2,dir_sdi@clst+1
  5824  004616  CFDE F068          	movff	postinc2,dir_sdi@clst+2
  5825  00461A  CFDE F069          	movff	postinc2,dir_sdi@clst+3
  5826                           
  5827                           ;ff.c: 1091: if (clst == 1 || clst >= dp->fs->n_fatent)
  5828  00461E  0100               	movlb	0	; () banked
  5829  004620  0566               	decf	dir_sdi@clst& (0+255),w,b
  5830  004622  0100               	movlb	0	; () banked
  5831  004624  1167               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5832  004626  0100               	movlb	0	; () banked
  5833  004628  1168               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5834  00462A  0100               	movlb	0	; () banked
  5835  00462C  1169               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  5836  00462E  B4D8               	btfsc	status,2,c
  5837  004630  D018               	goto	l4399
  5838                           
  5839                           ; BSR set to: 0
  5840  004632  C055  FFD9         	movff	dir_sdi@dp,fsr2l
  5841  004636  C056  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5842  00463A  EE10 F012          	lfsr	1,18
  5843  00463E  50DE               	movf	postinc2,w,c
  5844  004640  26E1               	addwf	fsr1l,f,c
  5845  004642  50DD               	movf	postdec2,w,c
  5846  004644  22E2               	addwfc	fsr1h,f,c
  5847  004646  50E6               	movf	postinc1,w,c
  5848  004648  0100               	movlb	0	; () banked
  5849  00464A  5D66               	subwf	dir_sdi@clst& (0+255),w,b
  5850  00464C  50E6               	movf	postinc1,w,c
  5851  00464E  0100               	movlb	0	; () banked
  5852  004650  5967               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  5853  004652  50E6               	movf	postinc1,w,c
  5854  004654  0100               	movlb	0	; () banked
  5855  004656  5968               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  5856  004658  50E6               	movf	postinc1,w,c
  5857  00465A  0100               	movlb	0	; () banked
  5858  00465C  5969               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  5859  00465E  A0D8               	btfss	status,0,c
  5860  004660  D002               	goto	l4403
  5861  004662                     l4399:
  5862                           
  5863                           ; BSR set to: 0
  5864                           ;ff.c: 1092: return FR_INT_ERR;
  5865  004662  0E02               	movlw	2
  5866                           
  5867                           ; BSR set to: 0
  5868  004664  0012               	return	
  5869  004666                     l4403:
  5870                           
  5871                           ; BSR set to: 0
  5872                           ;ff.c: 1093: if (!clst && dp->fs->fs_type == 3)
  5873  004666  0100               	movlb	0	; () banked
  5874  004668  5166               	movf	dir_sdi@clst& (0+255),w,b
  5875  00466A  0100               	movlb	0	; () banked
  5876  00466C  1167               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5877  00466E  0100               	movlb	0	; () banked
  5878  004670  1168               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5879  004672  0100               	movlb	0	; () banked
  5880  004674  1169               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  5881  004676  A4D8               	btfss	status,2,c
  5882  004678  D023               	goto	l4409
  5883                           
  5884                           ; BSR set to: 0
  5885  00467A  C055  FFD9         	movff	dir_sdi@dp,fsr2l
  5886  00467E  C056  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5887  004682  CFDE F059          	movff	postinc2,??_dir_sdi
  5888  004686  CFDD F05A          	movff	postdec2,??_dir_sdi+1
  5889  00468A  C059  FFD9         	movff	??_dir_sdi,fsr2l
  5890  00468E  C05A  FFDA         	movff	??_dir_sdi+1,fsr2h
  5891  004692  0E03               	movlw	3
  5892  004694  18DE               	xorwf	postinc2,w,c
  5893  004696  A4D8               	btfss	status,2,c
  5894  004698  D013               	goto	l4409
  5895                           
  5896                           ; BSR set to: 0
  5897                           ;ff.c: 1094: clst = dp->fs->dirbase;
  5898  00469A  C055  FFD9         	movff	dir_sdi@dp,fsr2l
  5899  00469E  C056  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5900  0046A2  EE10 F022          	lfsr	1,34
  5901  0046A6  50DE               	movf	postinc2,w,c
  5902  0046A8  26E1               	addwf	fsr1l,f,c
  5903  0046AA  50DD               	movf	postdec2,w,c
  5904  0046AC  22E2               	addwfc	fsr1h,f,c
  5905  0046AE  CFE6 F066          	movff	postinc1,dir_sdi@clst
  5906  0046B2  CFE6 F067          	movff	postinc1,dir_sdi@clst+1
  5907  0046B6  CFE6 F068          	movff	postinc1,dir_sdi@clst+2
  5908  0046BA  CFE6 F069          	movff	postinc1,dir_sdi@clst+3
  5909  0046BE  D000               	goto	l4409
  5910  0046C0                     l4409:
  5911                           
  5912                           ; BSR set to: 0
  5913                           ;ff.c: 1096: if (clst == 0) {
  5914  0046C0  0100               	movlb	0	; () banked
  5915  0046C2  5166               	movf	dir_sdi@clst& (0+255),w,b
  5916  0046C4  0100               	movlb	0	; () banked
  5917  0046C6  1167               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5918  0046C8  0100               	movlb	0	; () banked
  5919  0046CA  1168               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5920  0046CC  0100               	movlb	0	; () banked
  5921  0046CE  1169               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  5922  0046D0  A4D8               	btfss	status,2,c
  5923  0046D2  D025               	goto	l4419
  5924                           
  5925                           ; BSR set to: 0
  5926                           ;ff.c: 1097: if (idx >= dp->fs->n_rootdir)
  5927  0046D4  C055  FFD9         	movff	dir_sdi@dp,fsr2l
  5928  0046D8  C056  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5929  0046DC  EE10 F008          	lfsr	1,8
  5930  0046E0  50DE               	movf	postinc2,w,c
  5931  0046E2  26E1               	addwf	fsr1l,f,c
  5932  0046E4  50DD               	movf	postdec2,w,c
  5933  0046E6  22E2               	addwfc	fsr1h,f,c
  5934  0046E8  50E6               	movf	postinc1,w,c
  5935  0046EA  5C57               	subwf	dir_sdi@idx,w,c
  5936  0046EC  50E6               	movf	postinc1,w,c
  5937  0046EE  5858               	subwfb	dir_sdi@idx+1,w,c
  5938  0046F0  A0D8               	btfss	status,0,c
  5939  0046F2  D002               	goto	l4417
  5940                           
  5941                           ; BSR set to: 0
  5942                           ;ff.c: 1098: return FR_INT_ERR;
  5943  0046F4  0E02               	movlw	2
  5944                           
  5945                           ; BSR set to: 0
  5946  0046F6  0012               	return	
  5947  0046F8                     l4417:
  5948                           
  5949                           ; BSR set to: 0
  5950                           ;ff.c: 1099: sect = dp->fs->dirbase;
  5951  0046F8  C055  FFD9         	movff	dir_sdi@dp,fsr2l
  5952  0046FC  C056  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5953  004700  EE10 F022          	lfsr	1,34
  5954  004704  50DE               	movf	postinc2,w,c
  5955  004706  26E1               	addwf	fsr1l,f,c
  5956  004708  50DD               	movf	postdec2,w,c
  5957  00470A  22E2               	addwfc	fsr1h,f,c
  5958  00470C  CFE6 F062          	movff	postinc1,dir_sdi@sect
  5959  004710  CFE6 F063          	movff	postinc1,dir_sdi@sect+1
  5960  004714  CFE6 F064          	movff	postinc1,dir_sdi@sect+2
  5961  004718  CFE6 F065          	movff	postinc1,dir_sdi@sect+3
  5962                           
  5963                           ;ff.c: 1100: }
  5964  00471C  D08B               	goto	l4441
  5965  00471E                     l4419:
  5966                           
  5967                           ; BSR set to: 0
  5968                           ;ff.c: 1101: else {
  5969                           ;ff.c: 1102: ic = ((UINT)512) / 32 * dp->fs->csize;
  5970  00471E  C055  FFD9         	movff	dir_sdi@dp,fsr2l
  5971  004722  C056  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5972  004726  EE10 F002          	lfsr	1,2
  5973  00472A  50DE               	movf	postinc2,w,c
  5974  00472C  26E1               	addwf	fsr1l,f,c
  5975  00472E  50DD               	movf	postdec2,w,c
  5976  004730  22E2               	addwfc	fsr1h,f,c
  5977  004732  50E7               	movf	indf1,w,c
  5978  004734  6E59               	movwf	??_dir_sdi& (0+255),c
  5979  004736  5059               	movf	??_dir_sdi,w,c
  5980  004738  0D10               	mullw	16
  5981  00473A  CFF3 F060          	movff	prodl,dir_sdi@ic
  5982  00473E  CFF4 F061          	movff	prodh,dir_sdi@ic+1
  5983                           
  5984                           ;ff.c: 1103: while (idx >= ic) {
  5985  004742  D055               	goto	l375
  5986  004744                     l4421:
  5987                           
  5988                           ; BSR set to: 0
  5989                           ;ff.c: 1104: clst = get_fat(dp->fs, clst);
  5990  004744  C055  FFD9         	movff	dir_sdi@dp,fsr2l
  5991  004748  C056  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5992  00474C  CFDE F03B          	movff	postinc2,get_fat@fs
  5993  004750  CFDD F03C          	movff	postdec2,get_fat@fs+1
  5994  004754  C066  F03D         	movff	dir_sdi@clst,get_fat@clst
  5995  004758  C067  F03E         	movff	dir_sdi@clst+1,get_fat@clst+1
  5996  00475C  C068  F03F         	movff	dir_sdi@clst+2,get_fat@clst+2
  5997  004760  C069  F040         	movff	dir_sdi@clst+3,get_fat@clst+3
  5998  004764  EC34  F021         	call	_get_fat	;wreg free
  5999  004768  C03B  F066         	movff	?_get_fat,dir_sdi@clst
  6000  00476C  C03C  F067         	movff	?_get_fat+1,dir_sdi@clst+1
  6001  004770  C03D  F068         	movff	?_get_fat+2,dir_sdi@clst+2
  6002  004774  C03E  F069         	movff	?_get_fat+3,dir_sdi@clst+3
  6003                           
  6004                           ;ff.c: 1105: if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  6005  004778  0100               	movlb	0	; () banked
  6006  00477A  2966               	incf	dir_sdi@clst& (0+255),w,b
  6007  00477C  E10C               	bnz	l4429
  6008  00477E  0100               	movlb	0	; () banked
  6009  004780  2967               	incf	(dir_sdi@clst+1)& (0+255),w,b
  6010  004782  E109               	bnz	l4429
  6011  004784  0100               	movlb	0	; () banked
  6012  004786  2968               	incf	(dir_sdi@clst+2)& (0+255),w,b
  6013  004788  E106               	bnz	l4429
  6014  00478A  0100               	movlb	0	; () banked
  6015  00478C  2969               	incf	(dir_sdi@clst+3)& (0+255),w,b
  6016  00478E  A4D8               	btfss	status,2,c
  6017  004790  D002               	goto	l4429
  6018                           
  6019                           ; BSR set to: 0
  6020  004792  0E01               	movlw	1
  6021                           
  6022                           ; BSR set to: 0
  6023  004794  0012               	return	
  6024  004796                     l4429:
  6025                           
  6026                           ; BSR set to: 0
  6027                           ;ff.c: 1106: if (clst < 2 || clst >= dp->fs->n_fatent)
  6028  004796  0100               	movlb	0	; () banked
  6029  004798  5169               	movf	(dir_sdi@clst+3)& (0+255),w,b
  6030  00479A  0100               	movlb	0	; () banked
  6031  00479C  1168               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  6032  00479E  0100               	movlb	0	; () banked
  6033  0047A0  1167               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  6034  0047A2  E105               	bnz	u5940
  6035  0047A4  0E02               	movlw	2
  6036  0047A6  0100               	movlb	0	; () banked
  6037  0047A8  5D66               	subwf	dir_sdi@clst& (0+255),w,b
  6038  0047AA  A0D8               	btfss	status,0,c
  6039  0047AC  D018               	goto	l4433
  6040  0047AE                     u5940:
  6041                           
  6042                           ; BSR set to: 0
  6043  0047AE  C055  FFD9         	movff	dir_sdi@dp,fsr2l
  6044  0047B2  C056  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6045  0047B6  EE10 F012          	lfsr	1,18
  6046  0047BA  50DE               	movf	postinc2,w,c
  6047  0047BC  26E1               	addwf	fsr1l,f,c
  6048  0047BE  50DD               	movf	postdec2,w,c
  6049  0047C0  22E2               	addwfc	fsr1h,f,c
  6050  0047C2  50E6               	movf	postinc1,w,c
  6051  0047C4  0100               	movlb	0	; () banked
  6052  0047C6  5D66               	subwf	dir_sdi@clst& (0+255),w,b
  6053  0047C8  50E6               	movf	postinc1,w,c
  6054  0047CA  0100               	movlb	0	; () banked
  6055  0047CC  5967               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  6056  0047CE  50E6               	movf	postinc1,w,c
  6057  0047D0  0100               	movlb	0	; () banked
  6058  0047D2  5968               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  6059  0047D4  50E6               	movf	postinc1,w,c
  6060  0047D6  0100               	movlb	0	; () banked
  6061  0047D8  5969               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  6062  0047DA  A0D8               	btfss	status,0,c
  6063  0047DC  D002               	goto	l4437
  6064  0047DE                     l4433:
  6065                           
  6066                           ; BSR set to: 0
  6067                           ;ff.c: 1107: return FR_INT_ERR;
  6068  0047DE  0E02               	movlw	2
  6069                           
  6070                           ; BSR set to: 0
  6071  0047E0  0012               	return	
  6072  0047E2                     l4437:
  6073                           
  6074                           ; BSR set to: 0
  6075                           ;ff.c: 1108: idx -= ic;
  6076  0047E2  0100               	movlb	0	; () banked
  6077  0047E4  5160               	movf	dir_sdi@ic& (0+255),w,b
  6078  0047E6  5E57               	subwf	dir_sdi@idx,f,c
  6079  0047E8  0100               	movlb	0	; () banked
  6080  0047EA  5161               	movf	(dir_sdi@ic+1)& (0+255),w,b
  6081  0047EC  5A58               	subwfb	dir_sdi@idx+1,f,c
  6082  0047EE                     l375:
  6083                           
  6084                           ; BSR set to: 0
  6085  0047EE  0100               	movlb	0	; () banked
  6086  0047F0  5160               	movf	dir_sdi@ic& (0+255),w,b
  6087  0047F2  5C57               	subwf	dir_sdi@idx,w,c
  6088  0047F4  0100               	movlb	0	; () banked
  6089  0047F6  5161               	movf	(dir_sdi@ic+1)& (0+255),w,b
  6090  0047F8  5858               	subwfb	dir_sdi@idx+1,w,c
  6091  0047FA  B0D8               	btfsc	status,0,c
  6092  0047FC  D7A3               	goto	l4421
  6093                           
  6094                           ; BSR set to: 0
  6095                           ;ff.c: 1109: }
  6096                           ;ff.c: 1110: sect = clust2sect(dp->fs, clst);
  6097                           
  6098                           ; BSR set to: 0
  6099  0047FE  C055  FFD9         	movff	dir_sdi@dp,fsr2l
  6100  004802  C056  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6101  004806  CFDE F00D          	movff	postinc2,clust2sect@fs
  6102  00480A  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  6103  00480E  C066  F00F         	movff	dir_sdi@clst,clust2sect@clst
  6104  004812  C067  F010         	movff	dir_sdi@clst+1,clust2sect@clst+1
  6105  004816  C068  F011         	movff	dir_sdi@clst+2,clust2sect@clst+2
  6106  00481A  C069  F012         	movff	dir_sdi@clst+3,clust2sect@clst+3
  6107  00481E  EC42  F02F         	call	_clust2sect	;wreg free
  6108  004822  C00D  F062         	movff	?_clust2sect,dir_sdi@sect
  6109  004826  C00E  F063         	movff	?_clust2sect+1,dir_sdi@sect+1
  6110  00482A  C00F  F064         	movff	?_clust2sect+2,dir_sdi@sect+2
  6111  00482E  C010  F065         	movff	?_clust2sect+3,dir_sdi@sect+3
  6112  004832  D000               	goto	l4441
  6113  004834                     l4441:
  6114                           
  6115                           ;ff.c: 1111: }
  6116                           ;ff.c: 1112: dp->clust = clst;
  6117  004834  EE20 F00A          	lfsr	2,10
  6118  004838  5055               	movf	dir_sdi@dp,w,c
  6119  00483A  26D9               	addwf	fsr2l,f,c
  6120  00483C  5056               	movf	dir_sdi@dp+1,w,c
  6121  00483E  22DA               	addwfc	fsr2h,f,c
  6122  004840  C066  FFDE         	movff	dir_sdi@clst,postinc2
  6123  004844  C067  FFDE         	movff	dir_sdi@clst+1,postinc2
  6124  004848  C068  FFDE         	movff	dir_sdi@clst+2,postinc2
  6125  00484C  C069  FFDE         	movff	dir_sdi@clst+3,postinc2
  6126                           
  6127                           ;ff.c: 1113: if (!sect) return FR_INT_ERR;
  6128  004850  0100               	movlb	0	; () banked
  6129  004852  5162               	movf	dir_sdi@sect& (0+255),w,b
  6130  004854  0100               	movlb	0	; () banked
  6131  004856  1163               	iorwf	(dir_sdi@sect+1)& (0+255),w,b
  6132  004858  0100               	movlb	0	; () banked
  6133  00485A  1164               	iorwf	(dir_sdi@sect+2)& (0+255),w,b
  6134  00485C  0100               	movlb	0	; () banked
  6135  00485E  1165               	iorwf	(dir_sdi@sect+3)& (0+255),w,b
  6136  004860  A4D8               	btfss	status,2,c
  6137  004862  D002               	goto	l4449
  6138                           
  6139                           ; BSR set to: 0
  6140  004864  0E02               	movlw	2
  6141                           
  6142                           ; BSR set to: 0
  6143  004866  0012               	return	
  6144  004868                     l4449:
  6145                           
  6146                           ; BSR set to: 0
  6147                           ;ff.c: 1114: dp->sect = sect + idx / (((UINT)512) / 32);
  6148  004868  C057  F059         	movff	dir_sdi@idx,??_dir_sdi
  6149  00486C  C058  F05A         	movff	dir_sdi@idx+1,??_dir_sdi+1
  6150  004870  0E04               	movlw	4
  6151  004872  6E5B               	movwf	(??_dir_sdi+2)& (0+255),c
  6152  004874                     u5985:
  6153  004874  90D8               	bcf	status,0,c
  6154  004876  325A               	rrcf	??_dir_sdi+1,f,c
  6155  004878  3259               	rrcf	??_dir_sdi,f,c
  6156  00487A  2E5B               	decfsz	(??_dir_sdi+2)& (0+255),f,c
  6157  00487C  D7FB               	goto	u5985
  6158  00487E  5059               	movf	??_dir_sdi,w,c
  6159  004880  0100               	movlb	0	; () banked
  6160  004882  2562               	addwf	dir_sdi@sect& (0+255),w,b
  6161  004884  6E5C               	movwf	(??_dir_sdi+3)& (0+255),c
  6162  004886  505A               	movf	??_dir_sdi+1,w,c
  6163  004888  0100               	movlb	0	; () banked
  6164  00488A  2163               	addwfc	(dir_sdi@sect+1)& (0+255),w,b
  6165  00488C  6E5D               	movwf	(??_dir_sdi+4)& (0+255),c
  6166  00488E  0E00               	movlw	0
  6167  004890  0100               	movlb	0	; () banked
  6168  004892  2164               	addwfc	(dir_sdi@sect+2)& (0+255),w,b
  6169  004894  6E5E               	movwf	(??_dir_sdi+5)& (0+255),c
  6170  004896  0E00               	movlw	0
  6171  004898  0100               	movlb	0	; () banked
  6172  00489A  2165               	addwfc	(dir_sdi@sect+3)& (0+255),w,b
  6173  00489C  6E5F               	movwf	(??_dir_sdi+6)& (0+255),c
  6174  00489E  EE20 F00E          	lfsr	2,14
  6175  0048A2  5055               	movf	dir_sdi@dp,w,c
  6176  0048A4  26D9               	addwf	fsr2l,f,c
  6177  0048A6  5056               	movf	dir_sdi@dp+1,w,c
  6178  0048A8  22DA               	addwfc	fsr2h,f,c
  6179  0048AA  C05C  FFDE         	movff	??_dir_sdi+3,postinc2
  6180  0048AE  C05D  FFDE         	movff	??_dir_sdi+4,postinc2
  6181  0048B2  C05E  FFDE         	movff	??_dir_sdi+5,postinc2
  6182  0048B6  C05F  FFDE         	movff	??_dir_sdi+6,postinc2
  6183                           
  6184                           ;ff.c: 1115: dp->dir = dp->fs->win + (idx % (((UINT)512) / 32)) * 32;
  6185  0048BA  0E0F               	movlw	15
  6186  0048BC  1457               	andwf	dir_sdi@idx,w,c
  6187  0048BE  6E59               	movwf	??_dir_sdi& (0+255),c
  6188  0048C0  0E00               	movlw	0
  6189  0048C2  1458               	andwf	dir_sdi@idx+1,w,c
  6190  0048C4  6E5A               	movwf	(??_dir_sdi+1)& (0+255),c
  6191  0048C6  0E05               	movlw	5
  6192  0048C8                     u5995:
  6193  0048C8  90D8               	bcf	status,0,c
  6194  0048CA  3659               	rlcf	??_dir_sdi,f,c
  6195  0048CC  365A               	rlcf	??_dir_sdi+1,f,c
  6196  0048CE  2EE8               	decfsz	wreg,f,c
  6197  0048D0  D7FB               	goto	u5995
  6198  0048D2  0E2E               	movlw	46
  6199  0048D4  2659               	addwf	??_dir_sdi,f,c
  6200  0048D6  0E00               	movlw	0
  6201  0048D8  225A               	addwfc	??_dir_sdi+1,f,c
  6202  0048DA  C055  FFD9         	movff	dir_sdi@dp,fsr2l
  6203  0048DE  C056  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6204  0048E2  CFDE F05B          	movff	postinc2,??_dir_sdi+2
  6205  0048E6  CFDD F05C          	movff	postdec2,??_dir_sdi+3
  6206  0048EA  5059               	movf	??_dir_sdi,w,c
  6207  0048EC  265B               	addwf	??_dir_sdi+2,f,c
  6208  0048EE  505A               	movf	??_dir_sdi+1,w,c
  6209  0048F0  225C               	addwfc	??_dir_sdi+3,f,c
  6210  0048F2  EE20 F012          	lfsr	2,18
  6211  0048F6  5055               	movf	dir_sdi@dp,w,c
  6212  0048F8  26D9               	addwf	fsr2l,f,c
  6213  0048FA  5056               	movf	dir_sdi@dp+1,w,c
  6214  0048FC  22DA               	addwfc	fsr2h,f,c
  6215  0048FE  C05B  FFDE         	movff	??_dir_sdi+2,postinc2
  6216  004902  C05C  FFDD         	movff	??_dir_sdi+3,postdec2
  6217                           
  6218                           ; BSR set to: 0
  6219                           ;ff.c: 1117: return FR_OK;
  6220  004906  0E00               	movlw	0
  6221  004908  0012               	return	
  6222                           
  6223                           ; BSR set to: 0
  6224                           
  6225                           ; BSR set to: 0
  6226  00490A  0012               	return		;funcret
  6227  00490C                     __end_of_dir_sdi:
  6228                           	opt stack 0
  6229                           tblptru	equ	0xFF8
  6230                           tblptrh	equ	0xFF7
  6231                           tblptrl	equ	0xFF6
  6232                           tablat	equ	0xFF5
  6233                           prodh	equ	0xFF4
  6234                           prodl	equ	0xFF3
  6235                           indf0	equ	0xFEF
  6236                           postinc0	equ	0xFEE
  6237                           fsr0h	equ	0xFEA
  6238                           fsr0l	equ	0xFE9
  6239                           wreg	equ	0xFE8
  6240                           indf1	equ	0xFE7
  6241                           postinc1	equ	0xFE6
  6242                           postdec1	equ	0xFE5
  6243                           fsr1h	equ	0xFE2
  6244                           fsr1l	equ	0xFE1
  6245                           indf2	equ	0xFDF
  6246                           postinc2	equ	0xFDE
  6247                           postdec2	equ	0xFDD
  6248                           plusw2	equ	0xFDB
  6249                           fsr2h	equ	0xFDA
  6250                           fsr2l	equ	0xFD9
  6251                           status	equ	0xFD8
  6252                           
  6253 ;; *************** function _dir_next *****************
  6254 ;; Defined at:
  6255 ;;		line 1128 in file "../../SD_Card_FatFs/ff.c"
  6256 ;; Parameters:    Size  Location     Type
  6257 ;;  dp              2   13[BANK0 ] PTR struct .
  6258 ;;		 -> f_open@dj(22), 
  6259 ;;  stretch         2   15[BANK0 ] int 
  6260 ;; Auto vars:     Size  Location     Type
  6261 ;;  clst            4   28[BANK0 ] unsigned long 
  6262 ;;  i               2   26[BANK0 ] unsigned int 
  6263 ;;  c               2   24[BANK0 ] unsigned int 
  6264 ;; Return value:  Size  Location     Type
  6265 ;;                  1    wreg      enum E88
  6266 ;; Registers used:
  6267 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6268 ;; Tracked objects:
  6269 ;;		On entry : 0/0
  6270 ;;		On exit  : 0/0
  6271 ;;		Unchanged: 0/0
  6272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6273 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6274 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6275 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6276 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6277 ;;Total ram usage:       19 bytes
  6278 ;; Hardware stack levels used:    1
  6279 ;; Hardware stack levels required when called:   10
  6280 ;; This function calls:
  6281 ;;		_clust2sect
  6282 ;;		_create_chain
  6283 ;;		_get_fat
  6284 ;;		_mem_set
  6285 ;;		_sync_window
  6286 ;; This function is called by:
  6287 ;;		_dir_alloc
  6288 ;;		_dir_find
  6289 ;; This function uses a non-reentrant model
  6290 ;;
  6291                           
  6292                           	psect	text14
  6293  002CC4                     __ptext14:
  6294                           	opt stack 0
  6295  002CC4                     _dir_next:
  6296                           	opt stack 17
  6297                           
  6298                           ;ff.c: 1133: DWORD clst;
  6299                           ;ff.c: 1134: UINT i;
  6300                           ;ff.c: 1136: UINT c;
  6301                           ;ff.c: 1140: i = dp->index + 1;
  6302                           
  6303                           ; BSR set to: 0
  6304                           ;incstack = 0
  6305  002CC4  0100               	movlb	0	; () banked
  6306  002CC6  EE20 F004          	lfsr	2,4
  6307  002CCA  516D               	movf	dir_next@dp& (0+255),w,b
  6308  002CCC  26D9               	addwf	fsr2l,f,c
  6309  002CCE  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6310  002CD0  22DA               	addwfc	fsr2h,f,c
  6311  002CD2  CFDE F071          	movff	postinc2,??_dir_next
  6312  002CD6  CFDD F072          	movff	postdec2,??_dir_next+1
  6313  002CDA  0E01               	movlw	1
  6314  002CDC  0100               	movlb	0	; () banked
  6315  002CDE  2571               	addwf	??_dir_next& (0+255),w,b
  6316  002CE0  0100               	movlb	0	; () banked
  6317  002CE2  6F7A               	movwf	dir_next@i& (0+255),b
  6318  002CE4  0E00               	movlw	0
  6319  002CE6  0100               	movlb	0	; () banked
  6320  002CE8  2172               	addwfc	(??_dir_next+1)& (0+255),w,b
  6321  002CEA  0100               	movlb	0	; () banked
  6322  002CEC  6F7B               	movwf	(dir_next@i+1)& (0+255),b
  6323                           
  6324                           ; BSR set to: 0
  6325                           ;ff.c: 1141: if (!(i & 0xFFFF) || !dp->sect)
  6326  002CEE  0100               	movlb	0	; () banked
  6327  002CF0  517A               	movf	dir_next@i& (0+255),w,b
  6328  002CF2  0100               	movlb	0	; () banked
  6329  002CF4  117B               	iorwf	(dir_next@i+1)& (0+255),w,b
  6330  002CF6  B4D8               	btfsc	status,2,c
  6331  002CF8  D00D               	goto	l4461
  6332                           
  6333                           ; BSR set to: 0
  6334  002CFA  0100               	movlb	0	; () banked
  6335  002CFC  EE20 F00E          	lfsr	2,14
  6336  002D00  516D               	movf	dir_next@dp& (0+255),w,b
  6337  002D02  26D9               	addwf	fsr2l,f,c
  6338  002D04  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6339  002D06  22DA               	addwfc	fsr2h,f,c
  6340  002D08  50DE               	movf	postinc2,w,c
  6341  002D0A  10DE               	iorwf	postinc2,w,c
  6342  002D0C  10DE               	iorwf	postinc2,w,c
  6343  002D0E  10DE               	iorwf	postinc2,w,c
  6344  002D10  A4D8               	btfss	status,2,c
  6345  002D12  D002               	goto	l4465
  6346  002D14                     l4461:
  6347                           
  6348                           ; BSR set to: 0
  6349                           ;ff.c: 1142: return FR_NO_FILE;
  6350  002D14  0E04               	movlw	4
  6351                           
  6352                           ; BSR set to: 0
  6353  002D16  0012               	return	
  6354  002D18                     l4465:
  6355                           
  6356                           ; BSR set to: 0
  6357                           ;ff.c: 1144: if (!(i % (((UINT)512) / 32))) {
  6358  002D18  0E0F               	movlw	15
  6359  002D1A  0100               	movlb	0	; () banked
  6360  002D1C  157A               	andwf	dir_next@i& (0+255),w,b
  6361  002D1E  0100               	movlb	0	; () banked
  6362  002D20  6F71               	movwf	??_dir_next& (0+255),b
  6363  002D22  0E00               	movlw	0
  6364  002D24  0100               	movlb	0	; () banked
  6365  002D26  157B               	andwf	(dir_next@i+1)& (0+255),w,b
  6366  002D28  0100               	movlb	0	; () banked
  6367  002D2A  6F72               	movwf	(??_dir_next+1)& (0+255),b
  6368  002D2C  0100               	movlb	0	; () banked
  6369  002D2E  5171               	movf	??_dir_next& (0+255),w,b
  6370  002D30  0100               	movlb	0	; () banked
  6371  002D32  1172               	iorwf	(??_dir_next+1)& (0+255),w,b
  6372  002D34  A4D8               	btfss	status,2,c
  6373  002D36  D1E9               	goto	l4551
  6374                           
  6375                           ; BSR set to: 0
  6376                           ;ff.c: 1145: dp->sect++;
  6377  002D38  0100               	movlb	0	; () banked
  6378  002D3A  EE20 F00E          	lfsr	2,14
  6379  002D3E  516D               	movf	dir_next@dp& (0+255),w,b
  6380  002D40  26D9               	addwf	fsr2l,f,c
  6381  002D42  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6382  002D44  22DA               	addwfc	fsr2h,f,c
  6383  002D46  2ADE               	incf	postinc2,f,c
  6384  002D48  0E00               	movlw	0
  6385  002D4A  22DE               	addwfc	postinc2,f,c
  6386  002D4C  22DE               	addwfc	postinc2,f,c
  6387  002D4E  22DE               	addwfc	postinc2,f,c
  6388                           
  6389                           ;ff.c: 1147: if (!dp->clust) {
  6390  002D50  0100               	movlb	0	; () banked
  6391  002D52  EE20 F00A          	lfsr	2,10
  6392  002D56  516D               	movf	dir_next@dp& (0+255),w,b
  6393  002D58  26D9               	addwf	fsr2l,f,c
  6394  002D5A  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6395  002D5C  22DA               	addwfc	fsr2h,f,c
  6396  002D5E  50DE               	movf	postinc2,w,c
  6397  002D60  10DE               	iorwf	postinc2,w,c
  6398  002D62  10DE               	iorwf	postinc2,w,c
  6399  002D64  10DE               	iorwf	postinc2,w,c
  6400  002D66  A4D8               	btfss	status,2,c
  6401  002D68  D015               	goto	l4475
  6402                           
  6403                           ; BSR set to: 0
  6404                           ;ff.c: 1148: if (i >= dp->fs->n_rootdir)
  6405  002D6A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6406  002D6E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6407  002D72  EE10 F008          	lfsr	1,8
  6408  002D76  50DE               	movf	postinc2,w,c
  6409  002D78  26E1               	addwf	fsr1l,f,c
  6410  002D7A  50DD               	movf	postdec2,w,c
  6411  002D7C  22E2               	addwfc	fsr1h,f,c
  6412  002D7E  50E6               	movf	postinc1,w,c
  6413  002D80  0100               	movlb	0	; () banked
  6414  002D82  5D7A               	subwf	dir_next@i& (0+255),w,b
  6415  002D84  50E6               	movf	postinc1,w,c
  6416  002D86  0100               	movlb	0	; () banked
  6417  002D88  597B               	subwfb	(dir_next@i+1)& (0+255),w,b
  6418  002D8A  A0D8               	btfss	status,0,c
  6419  002D8C  D1BE               	goto	l4551
  6420                           
  6421                           ; BSR set to: 0
  6422                           ;ff.c: 1149: return FR_NO_FILE;
  6423  002D8E  0E04               	movlw	4
  6424                           
  6425                           ; BSR set to: 0
  6426  002D90  0012               	return	
  6427                           
  6428                           ; BSR set to: 0
  6429                           ;ff.c: 1150: }
  6430  002D92  D1BB               	goto	l4551
  6431  002D94                     l4475:
  6432                           
  6433                           ; BSR set to: 0
  6434                           ;ff.c: 1151: else {
  6435                           ;ff.c: 1152: if (((i / (((UINT)512) / 32)) & (dp->fs->csize - 1)) == 0) {
  6436  002D94  C07A  F071         	movff	dir_next@i,??_dir_next
  6437  002D98  C07B  F072         	movff	dir_next@i+1,??_dir_next+1
  6438  002D9C  0E04               	movlw	4
  6439  002D9E  0100               	movlb	0	; () banked
  6440  002DA0  6F73               	movwf	(??_dir_next+2)& (0+255),b
  6441  002DA2                     u6055:
  6442  002DA2  0100               	movlb	0	; () banked
  6443  002DA4  90D8               	bcf	status,0,c
  6444  002DA6  3372               	rrcf	(??_dir_next+1)& (0+255),f,b
  6445  002DA8  3371               	rrcf	??_dir_next& (0+255),f,b
  6446  002DAA  0100               	movlb	0	; () banked
  6447  002DAC  2F73               	decfsz	(??_dir_next+2)& (0+255),f,b
  6448  002DAE  D7F9               	goto	u6055
  6449  002DB0  0EFF               	movlw	255
  6450  002DB2  0100               	movlb	0	; () banked
  6451  002DB4  6F74               	movwf	(??_dir_next+3)& (0+255),b
  6452  002DB6  0EFF               	movlw	255
  6453  002DB8  0100               	movlb	0	; () banked
  6454  002DBA  6F75               	movwf	(??_dir_next+4)& (0+255),b
  6455  002DBC  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6456  002DC0  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6457  002DC4  EE10 F002          	lfsr	1,2
  6458  002DC8  50DE               	movf	postinc2,w,c
  6459  002DCA  26E1               	addwf	fsr1l,f,c
  6460  002DCC  50DD               	movf	postdec2,w,c
  6461  002DCE  22E2               	addwfc	fsr1h,f,c
  6462  002DD0  50E7               	movf	indf1,w,c
  6463  002DD2  0100               	movlb	0	; () banked
  6464  002DD4  6F76               	movwf	(??_dir_next+5)& (0+255),b
  6465  002DD6  6B77               	clrf	(??_dir_next+6)& (0+255),b
  6466  002DD8  0100               	movlb	0	; () banked
  6467  002DDA  5174               	movf	(??_dir_next+3)& (0+255),w,b
  6468  002DDC  0100               	movlb	0	; () banked
  6469  002DDE  2776               	addwf	(??_dir_next+5)& (0+255),f,b
  6470  002DE0  0100               	movlb	0	; () banked
  6471  002DE2  5175               	movf	(??_dir_next+4)& (0+255),w,b
  6472  002DE4  0100               	movlb	0	; () banked
  6473  002DE6  2377               	addwfc	(??_dir_next+6)& (0+255),f,b
  6474  002DE8  0100               	movlb	0	; () banked
  6475  002DEA  5171               	movf	??_dir_next& (0+255),w,b
  6476  002DEC  0100               	movlb	0	; () banked
  6477  002DEE  1776               	andwf	(??_dir_next+5)& (0+255),f,b
  6478  002DF0  0100               	movlb	0	; () banked
  6479  002DF2  5172               	movf	(??_dir_next+1)& (0+255),w,b
  6480  002DF4  0100               	movlb	0	; () banked
  6481  002DF6  1777               	andwf	(??_dir_next+6)& (0+255),f,b
  6482  002DF8  0100               	movlb	0	; () banked
  6483  002DFA  5176               	movf	(??_dir_next+5)& (0+255),w,b
  6484  002DFC  0100               	movlb	0	; () banked
  6485  002DFE  1177               	iorwf	(??_dir_next+6)& (0+255),w,b
  6486  002E00  A4D8               	btfss	status,2,c
  6487  002E02  D183               	goto	l4551
  6488                           
  6489                           ; BSR set to: 0
  6490                           ;ff.c: 1153: clst = get_fat(dp->fs, dp->clust);
  6491  002E04  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6492  002E08  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6493  002E0C  CFDE F03B          	movff	postinc2,get_fat@fs
  6494  002E10  CFDD F03C          	movff	postdec2,get_fat@fs+1
  6495  002E14  0100               	movlb	0	; () banked
  6496  002E16  EE20 F00A          	lfsr	2,10
  6497  002E1A  516D               	movf	dir_next@dp& (0+255),w,b
  6498  002E1C  26D9               	addwf	fsr2l,f,c
  6499  002E1E  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6500  002E20  22DA               	addwfc	fsr2h,f,c
  6501  002E22  CFDE F03D          	movff	postinc2,get_fat@clst
  6502  002E26  CFDE F03E          	movff	postinc2,get_fat@clst+1
  6503  002E2A  CFDE F03F          	movff	postinc2,get_fat@clst+2
  6504  002E2E  CFDE F040          	movff	postinc2,get_fat@clst+3
  6505  002E32  EC34  F021         	call	_get_fat	;wreg free
  6506  002E36  C03B  F07C         	movff	?_get_fat,dir_next@clst
  6507  002E3A  C03C  F07D         	movff	?_get_fat+1,dir_next@clst+1
  6508  002E3E  C03D  F07E         	movff	?_get_fat+2,dir_next@clst+2
  6509  002E42  C03E  F07F         	movff	?_get_fat+3,dir_next@clst+3
  6510                           
  6511                           ;ff.c: 1154: if (clst <= 1) return FR_INT_ERR;
  6512  002E46  0100               	movlb	0	; () banked
  6513  002E48  517F               	movf	(dir_next@clst+3)& (0+255),w,b
  6514  002E4A  0100               	movlb	0	; () banked
  6515  002E4C  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  6516  002E4E  0100               	movlb	0	; () banked
  6517  002E50  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  6518  002E52  E107               	bnz	l4485
  6519  002E54  0E02               	movlw	2
  6520  002E56  0100               	movlb	0	; () banked
  6521  002E58  5D7C               	subwf	dir_next@clst& (0+255),w,b
  6522  002E5A  B0D8               	btfsc	status,0,c
  6523  002E5C  D002               	goto	l4485
  6524                           
  6525                           ; BSR set to: 0
  6526  002E5E  0E02               	movlw	2
  6527                           
  6528                           ; BSR set to: 0
  6529  002E60  0012               	return	
  6530  002E62                     l4485:
  6531                           
  6532                           ; BSR set to: 0
  6533                           ;ff.c: 1155: if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  6534  002E62  0100               	movlb	0	; () banked
  6535  002E64  297C               	incf	dir_next@clst& (0+255),w,b
  6536  002E66  E10C               	bnz	l4491
  6537  002E68  0100               	movlb	0	; () banked
  6538  002E6A  297D               	incf	(dir_next@clst+1)& (0+255),w,b
  6539  002E6C  E109               	bnz	l4491
  6540  002E6E  0100               	movlb	0	; () banked
  6541  002E70  297E               	incf	(dir_next@clst+2)& (0+255),w,b
  6542  002E72  E106               	bnz	l4491
  6543  002E74  0100               	movlb	0	; () banked
  6544  002E76  297F               	incf	(dir_next@clst+3)& (0+255),w,b
  6545  002E78  A4D8               	btfss	status,2,c
  6546  002E7A  D002               	goto	l4491
  6547                           
  6548                           ; BSR set to: 0
  6549  002E7C  0E01               	movlw	1
  6550                           
  6551                           ; BSR set to: 0
  6552  002E7E  0012               	return	
  6553  002E80                     l4491:
  6554                           
  6555                           ; BSR set to: 0
  6556                           ;ff.c: 1156: if (clst >= dp->fs->n_fatent) {
  6557  002E80  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6558  002E84  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6559  002E88  EE10 F012          	lfsr	1,18
  6560  002E8C  50DE               	movf	postinc2,w,c
  6561  002E8E  26E1               	addwf	fsr1l,f,c
  6562  002E90  50DD               	movf	postdec2,w,c
  6563  002E92  22E2               	addwfc	fsr1h,f,c
  6564  002E94  50E6               	movf	postinc1,w,c
  6565  002E96  0100               	movlb	0	; () banked
  6566  002E98  5D7C               	subwf	dir_next@clst& (0+255),w,b
  6567  002E9A  50E6               	movf	postinc1,w,c
  6568  002E9C  0100               	movlb	0	; () banked
  6569  002E9E  597D               	subwfb	(dir_next@clst+1)& (0+255),w,b
  6570  002EA0  50E6               	movf	postinc1,w,c
  6571  002EA2  0100               	movlb	0	; () banked
  6572  002EA4  597E               	subwfb	(dir_next@clst+2)& (0+255),w,b
  6573  002EA6  50E6               	movf	postinc1,w,c
  6574  002EA8  0100               	movlb	0	; () banked
  6575  002EAA  597F               	subwfb	(dir_next@clst+3)& (0+255),w,b
  6576  002EAC  A0D8               	btfss	status,0,c
  6577  002EAE  D0FC               	goto	l4547
  6578                           
  6579                           ; BSR set to: 0
  6580                           ;ff.c: 1158: if (!stretch) return FR_NO_FILE;
  6581  002EB0  0100               	movlb	0	; () banked
  6582  002EB2  516F               	movf	dir_next@stretch& (0+255),w,b
  6583  002EB4  0100               	movlb	0	; () banked
  6584  002EB6  1170               	iorwf	(dir_next@stretch+1)& (0+255),w,b
  6585  002EB8  A4D8               	btfss	status,2,c
  6586  002EBA  D002               	goto	l4499
  6587                           
  6588                           ; BSR set to: 0
  6589  002EBC  0E04               	movlw	4
  6590                           
  6591                           ; BSR set to: 0
  6592  002EBE  0012               	return	
  6593  002EC0                     l4499:
  6594                           
  6595                           ; BSR set to: 0
  6596                           ;ff.c: 1159: clst = create_chain(dp->fs, dp->clust);
  6597  002EC0  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6598  002EC4  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6599  002EC8  CFDE F056          	movff	postinc2,create_chain@fs
  6600  002ECC  CFDD F057          	movff	postdec2,create_chain@fs+1
  6601  002ED0  0100               	movlb	0	; () banked
  6602  002ED2  EE20 F00A          	lfsr	2,10
  6603  002ED6  516D               	movf	dir_next@dp& (0+255),w,b
  6604  002ED8  26D9               	addwf	fsr2l,f,c
  6605  002EDA  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6606  002EDC  22DA               	addwfc	fsr2h,f,c
  6607  002EDE  CFDE F058          	movff	postinc2,create_chain@clst
  6608  002EE2  CFDE F059          	movff	postinc2,create_chain@clst+1
  6609  002EE6  CFDE F05A          	movff	postinc2,create_chain@clst+2
  6610  002EEA  CFDE F05B          	movff	postinc2,create_chain@clst+3
  6611  002EEE  EC59  F01F         	call	_create_chain	;wreg free
  6612  002EF2  C056  F07C         	movff	?_create_chain,dir_next@clst
  6613  002EF6  C057  F07D         	movff	?_create_chain+1,dir_next@clst+1
  6614  002EFA  C058  F07E         	movff	?_create_chain+2,dir_next@clst+2
  6615  002EFE  C059  F07F         	movff	?_create_chain+3,dir_next@clst+3
  6616                           
  6617                           ;ff.c: 1160: if (clst == 0) return FR_DENIED;
  6618  002F02  0100               	movlb	0	; () banked
  6619  002F04  517C               	movf	dir_next@clst& (0+255),w,b
  6620  002F06  0100               	movlb	0	; () banked
  6621  002F08  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  6622  002F0A  0100               	movlb	0	; () banked
  6623  002F0C  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  6624  002F0E  0100               	movlb	0	; () banked
  6625  002F10  117F               	iorwf	(dir_next@clst+3)& (0+255),w,b
  6626  002F12  A4D8               	btfss	status,2,c
  6627  002F14  D002               	goto	l4507
  6628                           
  6629                           ; BSR set to: 0
  6630  002F16  0E07               	movlw	7
  6631                           
  6632                           ; BSR set to: 0
  6633  002F18  0012               	return	
  6634  002F1A                     l4507:
  6635                           
  6636                           ; BSR set to: 0
  6637                           ;ff.c: 1161: if (clst == 1) return FR_INT_ERR;
  6638  002F1A  0100               	movlb	0	; () banked
  6639  002F1C  057C               	decf	dir_next@clst& (0+255),w,b
  6640  002F1E  0100               	movlb	0	; () banked
  6641  002F20  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  6642  002F22  0100               	movlb	0	; () banked
  6643  002F24  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  6644  002F26  0100               	movlb	0	; () banked
  6645  002F28  117F               	iorwf	(dir_next@clst+3)& (0+255),w,b
  6646  002F2A  A4D8               	btfss	status,2,c
  6647  002F2C  D002               	goto	l4513
  6648                           
  6649                           ; BSR set to: 0
  6650  002F2E  0E02               	movlw	2
  6651                           
  6652                           ; BSR set to: 0
  6653  002F30  0012               	return	
  6654  002F32                     l4513:
  6655                           
  6656                           ; BSR set to: 0
  6657                           ;ff.c: 1162: if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  6658  002F32  0100               	movlb	0	; () banked
  6659  002F34  297C               	incf	dir_next@clst& (0+255),w,b
  6660  002F36  E10C               	bnz	l4519
  6661  002F38  0100               	movlb	0	; () banked
  6662  002F3A  297D               	incf	(dir_next@clst+1)& (0+255),w,b
  6663  002F3C  E109               	bnz	l4519
  6664  002F3E  0100               	movlb	0	; () banked
  6665  002F40  297E               	incf	(dir_next@clst+2)& (0+255),w,b
  6666  002F42  E106               	bnz	l4519
  6667  002F44  0100               	movlb	0	; () banked
  6668  002F46  297F               	incf	(dir_next@clst+3)& (0+255),w,b
  6669  002F48  A4D8               	btfss	status,2,c
  6670  002F4A  D002               	goto	l4519
  6671                           
  6672                           ; BSR set to: 0
  6673  002F4C  0E01               	movlw	1
  6674                           
  6675                           ; BSR set to: 0
  6676  002F4E  0012               	return	
  6677  002F50                     l4519:
  6678                           
  6679                           ; BSR set to: 0
  6680                           ;ff.c: 1164: if (sync_window(dp->fs)) return FR_DISK_ERR;
  6681  002F50  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6682  002F54  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6683  002F58  CFDE F01B          	movff	postinc2,sync_window@fs
  6684  002F5C  CFDD F01C          	movff	postdec2,sync_window@fs+1
  6685  002F60  EC6C  F029         	call	_sync_window	;wreg free
  6686  002F64  0900               	iorlw	0
  6687  002F66  B4D8               	btfsc	status,2,c
  6688  002F68  D002               	goto	l4525
  6689  002F6A  0E01               	movlw	1
  6690  002F6C  0012               	return	
  6691  002F6E                     l4525:
  6692                           
  6693                           ;ff.c: 1165: mem_set(dp->fs->win, 0, ((UINT)512));
  6694  002F6E  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6695  002F72  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6696  002F76  CFDE F071          	movff	postinc2,??_dir_next
  6697  002F7A  CFDD F072          	movff	postdec2,??_dir_next+1
  6698  002F7E  0E2E               	movlw	46
  6699  002F80  0100               	movlb	0	; () banked
  6700  002F82  2571               	addwf	??_dir_next& (0+255),w,b
  6701  002F84  6E01               	movwf	mem_set@dst,c
  6702  002F86  0E00               	movlw	0
  6703  002F88  0100               	movlb	0	; () banked
  6704  002F8A  2172               	addwfc	(??_dir_next+1)& (0+255),w,b
  6705  002F8C  6E02               	movwf	mem_set@dst+1,c
  6706  002F8E  0E00               	movlw	0
  6707  002F90  6E04               	movwf	mem_set@val+1,c
  6708  002F92  0E00               	movlw	0
  6709  002F94  6E03               	movwf	mem_set@val,c
  6710  002F96  0E02               	movlw	2
  6711  002F98  6E06               	movwf	mem_set@cnt+1,c
  6712  002F9A  0E00               	movlw	0
  6713  002F9C  6E05               	movwf	mem_set@cnt,c
  6714  002F9E  EC1E  F033         	call	_mem_set	;wreg free
  6715                           
  6716                           ;ff.c: 1166: dp->fs->winsect = clust2sect(dp->fs, clst);
  6717  002FA2  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6718  002FA6  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6719  002FAA  CFDE F00D          	movff	postinc2,clust2sect@fs
  6720  002FAE  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  6721  002FB2  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  6722  002FB6  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  6723  002FBA  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  6724  002FBE  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  6725  002FC2  EC42  F02F         	call	_clust2sect	;wreg free
  6726  002FC6  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6727  002FCA  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6728  002FCE  EE10 F02A          	lfsr	1,42
  6729  002FD2  50DE               	movf	postinc2,w,c
  6730  002FD4  26E1               	addwf	fsr1l,f,c
  6731  002FD6  50DD               	movf	postdec2,w,c
  6732  002FD8  22E2               	addwfc	fsr1h,f,c
  6733  002FDA  C00D  FFE6         	movff	?_clust2sect,postinc1
  6734  002FDE  C00E  FFE6         	movff	?_clust2sect+1,postinc1
  6735  002FE2  C00F  FFE6         	movff	?_clust2sect+2,postinc1
  6736  002FE6  C010  FFE6         	movff	?_clust2sect+3,postinc1
  6737                           
  6738                           ;ff.c: 1167: for (c = 0; c < dp->fs->csize; c++) {
  6739  002FEA  0E00               	movlw	0
  6740  002FEC  0100               	movlb	0	; () banked
  6741  002FEE  6F79               	movwf	(dir_next@c+1)& (0+255),b
  6742  002FF0  0E00               	movlw	0
  6743  002FF2  6F78               	movwf	dir_next@c& (0+255),b
  6744  002FF4  D02E               	goto	l4543
  6745  002FF6                     l4531:
  6746                           
  6747                           ; BSR set to: 0
  6748                           ;ff.c: 1168: dp->fs->wflag = 1;
  6749  002FF6  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6750  002FFA  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6751  002FFE  EE10 F004          	lfsr	1,4
  6752  003002  50DE               	movf	postinc2,w,c
  6753  003004  26E1               	addwf	fsr1l,f,c
  6754  003006  50DD               	movf	postdec2,w,c
  6755  003008  22E2               	addwfc	fsr1h,f,c
  6756  00300A  0E01               	movlw	1
  6757  00300C  6EE7               	movwf	indf1,c
  6758                           
  6759                           ; BSR set to: 0
  6760                           ;ff.c: 1169: if (sync_window(dp->fs)) return FR_DISK_ERR;
  6761  00300E  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6762  003012  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6763  003016  CFDE F01B          	movff	postinc2,sync_window@fs
  6764  00301A  CFDD F01C          	movff	postdec2,sync_window@fs+1
  6765  00301E  EC6C  F029         	call	_sync_window	;wreg free
  6766  003022  0900               	iorlw	0
  6767  003024  B4D8               	btfsc	status,2,c
  6768  003026  D002               	goto	l4539
  6769  003028  0E01               	movlw	1
  6770  00302A  0012               	return	
  6771  00302C                     l4539:
  6772                           
  6773                           ;ff.c: 1170: dp->fs->winsect++;
  6774  00302C  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6775  003030  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6776  003034  EE10 F02A          	lfsr	1,42
  6777  003038  50DE               	movf	postinc2,w,c
  6778  00303A  26E1               	addwf	fsr1l,f,c
  6779  00303C  50DD               	movf	postdec2,w,c
  6780  00303E  22E2               	addwfc	fsr1h,f,c
  6781  003040  2AE6               	incf	postinc1,f,c
  6782  003042  0E00               	movlw	0
  6783  003044  22E6               	addwfc	postinc1,f,c
  6784  003046  22E6               	addwfc	postinc1,f,c
  6785  003048  22E6               	addwfc	postinc1,f,c
  6786  00304A  0100               	movlb	0	; () banked
  6787  00304C  4B78               	infsnz	dir_next@c& (0+255),f,b
  6788  00304E  2B79               	incf	(dir_next@c+1)& (0+255),f,b
  6789  003050  D000               	goto	l4543
  6790  003052                     l4543:
  6791                           
  6792                           ; BSR set to: 0
  6793  003052  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6794  003056  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6795  00305A  EE10 F002          	lfsr	1,2
  6796  00305E  50DE               	movf	postinc2,w,c
  6797  003060  26E1               	addwf	fsr1l,f,c
  6798  003062  50DD               	movf	postdec2,w,c
  6799  003064  22E2               	addwfc	fsr1h,f,c
  6800  003066  50E7               	movf	indf1,w,c
  6801  003068  0100               	movlb	0	; () banked
  6802  00306A  6F71               	movwf	??_dir_next& (0+255),b
  6803  00306C  6B72               	clrf	(??_dir_next+1)& (0+255),b
  6804  00306E  0100               	movlb	0	; () banked
  6805  003070  5171               	movf	??_dir_next& (0+255),w,b
  6806  003072  0100               	movlb	0	; () banked
  6807  003074  5D78               	subwf	dir_next@c& (0+255),w,b
  6808  003076  0100               	movlb	0	; () banked
  6809  003078  5172               	movf	(??_dir_next+1)& (0+255),w,b
  6810  00307A  0100               	movlb	0	; () banked
  6811  00307C  5979               	subwfb	(dir_next@c+1)& (0+255),w,b
  6812  00307E  A0D8               	btfss	status,0,c
  6813  003080  D7BA               	goto	l4531
  6814                           
  6815                           ; BSR set to: 0
  6816                           ;ff.c: 1171: }
  6817                           ;ff.c: 1172: dp->fs->winsect -= c;
  6818                           
  6819                           ; BSR set to: 0
  6820  003082  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6821  003086  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6822  00308A  EE10 F02A          	lfsr	1,42
  6823  00308E  50DE               	movf	postinc2,w,c
  6824  003090  26E1               	addwf	fsr1l,f,c
  6825  003092  50DD               	movf	postdec2,w,c
  6826  003094  22E2               	addwfc	fsr1h,f,c
  6827  003096  0100               	movlb	0	; () banked
  6828  003098  5178               	movf	dir_next@c& (0+255),w,b
  6829  00309A  5EE6               	subwf	postinc1,f,c
  6830  00309C  5179               	movf	(dir_next@c+1)& (0+255),w,b
  6831  00309E  5AE6               	subwfb	postinc1,f,c
  6832  0030A0  0E00               	movlw	0
  6833  0030A2  5AE6               	subwfb	postinc1,f,c
  6834  0030A4  5AE6               	subwfb	postinc1,f,c
  6835  0030A6  D000               	goto	l4547
  6836  0030A8                     l4547:
  6837                           
  6838                           ; BSR set to: 0
  6839                           ;ff.c: 1177: }
  6840                           ;ff.c: 1178: dp->clust = clst;
  6841  0030A8  0100               	movlb	0	; () banked
  6842  0030AA  EE20 F00A          	lfsr	2,10
  6843  0030AE  516D               	movf	dir_next@dp& (0+255),w,b
  6844  0030B0  26D9               	addwf	fsr2l,f,c
  6845  0030B2  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6846  0030B4  22DA               	addwfc	fsr2h,f,c
  6847  0030B6  C07C  FFDE         	movff	dir_next@clst,postinc2
  6848  0030BA  C07D  FFDE         	movff	dir_next@clst+1,postinc2
  6849  0030BE  C07E  FFDE         	movff	dir_next@clst+2,postinc2
  6850  0030C2  C07F  FFDE         	movff	dir_next@clst+3,postinc2
  6851                           
  6852                           ; BSR set to: 0
  6853                           ;ff.c: 1179: dp->sect = clust2sect(dp->fs, clst);
  6854  0030C6  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6855  0030CA  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6856  0030CE  CFDE F00D          	movff	postinc2,clust2sect@fs
  6857  0030D2  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  6858  0030D6  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  6859  0030DA  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  6860  0030DE  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  6861  0030E2  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  6862  0030E6  EC42  F02F         	call	_clust2sect	;wreg free
  6863  0030EA  0100               	movlb	0	; () banked
  6864  0030EC  EE20 F00E          	lfsr	2,14
  6865  0030F0  516D               	movf	dir_next@dp& (0+255),w,b
  6866  0030F2  26D9               	addwf	fsr2l,f,c
  6867  0030F4  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6868  0030F6  22DA               	addwfc	fsr2h,f,c
  6869  0030F8  C00D  FFDE         	movff	?_clust2sect,postinc2
  6870  0030FC  C00E  FFDE         	movff	?_clust2sect+1,postinc2
  6871  003100  C00F  FFDE         	movff	?_clust2sect+2,postinc2
  6872  003104  C010  FFDE         	movff	?_clust2sect+3,postinc2
  6873                           
  6874                           ; BSR set to: 0
  6875                           
  6876                           ; BSR set to: 0
  6877  003108  D000               	goto	l4551
  6878  00310A                     l4551:
  6879                           
  6880                           ; BSR set to: 0
  6881                           ;ff.c: 1180: }
  6882                           ;ff.c: 1181: }
  6883                           ;ff.c: 1182: }
  6884                           ;ff.c: 1184: dp->index = (WORD)i;
  6885  00310A  0100               	movlb	0	; () banked
  6886  00310C  EE20 F004          	lfsr	2,4
  6887  003110  516D               	movf	dir_next@dp& (0+255),w,b
  6888  003112  26D9               	addwf	fsr2l,f,c
  6889  003114  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6890  003116  22DA               	addwfc	fsr2h,f,c
  6891  003118  C07A  FFDE         	movff	dir_next@i,postinc2
  6892  00311C  C07B  FFDD         	movff	dir_next@i+1,postdec2
  6893                           
  6894                           ; BSR set to: 0
  6895                           ;ff.c: 1185: dp->dir = dp->fs->win + (i % (((UINT)512) / 32)) * 32;
  6896  003120  0E0F               	movlw	15
  6897  003122  0100               	movlb	0	; () banked
  6898  003124  157A               	andwf	dir_next@i& (0+255),w,b
  6899  003126  0100               	movlb	0	; () banked
  6900  003128  6F71               	movwf	??_dir_next& (0+255),b
  6901  00312A  0E00               	movlw	0
  6902  00312C  0100               	movlb	0	; () banked
  6903  00312E  157B               	andwf	(dir_next@i+1)& (0+255),w,b
  6904  003130  0100               	movlb	0	; () banked
  6905  003132  6F72               	movwf	(??_dir_next+1)& (0+255),b
  6906  003134  0E05               	movlw	5
  6907  003136                     u6175:
  6908  003136  90D8               	bcf	status,0,c
  6909  003138  0100               	movlb	0	; () banked
  6910  00313A  3771               	rlcf	??_dir_next& (0+255),f,b
  6911  00313C  3772               	rlcf	(??_dir_next+1)& (0+255),f,b
  6912  00313E  2EE8               	decfsz	wreg,f,c
  6913  003140  D7FA               	goto	u6175
  6914  003142  0E2E               	movlw	46
  6915  003144  0100               	movlb	0	; () banked
  6916  003146  2771               	addwf	??_dir_next& (0+255),f,b
  6917  003148  0E00               	movlw	0
  6918  00314A  2372               	addwfc	(??_dir_next+1)& (0+255),f,b
  6919  00314C  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6920  003150  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6921  003154  CFDE F073          	movff	postinc2,??_dir_next+2
  6922  003158  CFDD F074          	movff	postdec2,??_dir_next+3
  6923  00315C  0100               	movlb	0	; () banked
  6924  00315E  5171               	movf	??_dir_next& (0+255),w,b
  6925  003160  0100               	movlb	0	; () banked
  6926  003162  2773               	addwf	(??_dir_next+2)& (0+255),f,b
  6927  003164  0100               	movlb	0	; () banked
  6928  003166  5172               	movf	(??_dir_next+1)& (0+255),w,b
  6929  003168  0100               	movlb	0	; () banked
  6930  00316A  2374               	addwfc	(??_dir_next+3)& (0+255),f,b
  6931  00316C  0100               	movlb	0	; () banked
  6932  00316E  EE20 F012          	lfsr	2,18
  6933  003172  516D               	movf	dir_next@dp& (0+255),w,b
  6934  003174  26D9               	addwf	fsr2l,f,c
  6935  003176  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6936  003178  22DA               	addwfc	fsr2h,f,c
  6937  00317A  C073  FFDE         	movff	??_dir_next+2,postinc2
  6938  00317E  C074  FFDD         	movff	??_dir_next+3,postdec2
  6939                           
  6940                           ; BSR set to: 0
  6941                           ;ff.c: 1187: return FR_OK;
  6942  003182  0E00               	movlw	0
  6943  003184  0012               	return	
  6944                           
  6945                           ; BSR set to: 0
  6946  003186  0012               	return		;funcret
  6947  003188                     __end_of_dir_next:
  6948                           	opt stack 0
  6949                           tblptru	equ	0xFF8
  6950                           tblptrh	equ	0xFF7
  6951                           tblptrl	equ	0xFF6
  6952                           tablat	equ	0xFF5
  6953                           prodh	equ	0xFF4
  6954                           prodl	equ	0xFF3
  6955                           indf0	equ	0xFEF
  6956                           postinc0	equ	0xFEE
  6957                           fsr0h	equ	0xFEA
  6958                           fsr0l	equ	0xFE9
  6959                           wreg	equ	0xFE8
  6960                           indf1	equ	0xFE7
  6961                           postinc1	equ	0xFE6
  6962                           postdec1	equ	0xFE5
  6963                           fsr1h	equ	0xFE2
  6964                           fsr1l	equ	0xFE1
  6965                           indf2	equ	0xFDF
  6966                           postinc2	equ	0xFDE
  6967                           postdec2	equ	0xFDD
  6968                           plusw2	equ	0xFDB
  6969                           fsr2h	equ	0xFDA
  6970                           fsr2l	equ	0xFD9
  6971                           status	equ	0xFD8
  6972                           
  6973 ;; *************** function _f_mount *****************
  6974 ;; Defined at:
  6975 ;;		line 2402 in file "../../SD_Card_FatFs/ff.c"
  6976 ;; Parameters:    Size  Location     Type
  6977 ;;  fs              2   81[COMRAM] PTR struct .
  6978 ;;		 -> NULL(0), FatFs(558), 
  6979 ;;  path            2   83[COMRAM] PTR const unsigned char 
  6980 ;;		 -> STR_2(9), STR_1(1), 
  6981 ;;  opt             1   85[COMRAM] unsigned char 
  6982 ;; Auto vars:     Size  Location     Type
  6983 ;;  vol             2   91[COMRAM] int 
  6984 ;;  rp              2   89[COMRAM] PTR const unsigned char 
  6985 ;;		 -> STR_2(9), STR_1(1), 
  6986 ;;  cfs             2   87[COMRAM] PTR struct .
  6987 ;;		 -> NULL(0), FatFs(558), 
  6988 ;;  res             1   86[COMRAM] enum E88
  6989 ;; Return value:  Size  Location     Type
  6990 ;;                  1    wreg      enum E8927
  6991 ;; Registers used:
  6992 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6993 ;; Tracked objects:
  6994 ;;		On entry : 0/0
  6995 ;;		On exit  : 0/0
  6996 ;;		Unchanged: 0/0
  6997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6998 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6999 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7001 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7002 ;;Total ram usage:       12 bytes
  7003 ;; Hardware stack levels used:    1
  7004 ;; Hardware stack levels required when called:   10
  7005 ;; This function calls:
  7006 ;;		_find_volume
  7007 ;;		_get_ldnumber
  7008 ;; This function is called by:
  7009 ;;		_main
  7010 ;; This function uses a non-reentrant model
  7011 ;;
  7012                           
  7013                           	psect	text15
  7014  005F40                     __ptext15:
  7015                           	opt stack 0
  7016  005F40                     _f_mount:
  7017                           	opt stack 20
  7018                           
  7019                           ;ff.c: 2408: FATFS *cfs;
  7020                           ;ff.c: 2409: int vol;
  7021                           ;ff.c: 2410: FRESULT res;
  7022                           ;ff.c: 2411: const TCHAR *rp = path;
  7023                           
  7024                           ;incstack = 0
  7025  005F40  C054  F05A         	movff	f_mount@path,f_mount@rp
  7026  005F44  C055  F05B         	movff	f_mount@path+1,f_mount@rp+1
  7027                           
  7028                           ;ff.c: 2414: vol = get_ldnumber(&rp);
  7029  005F48  0E5A               	movlw	low f_mount@rp
  7030  005F4A  6E01               	movwf	get_ldnumber@path,c
  7031  005F4C  0E00               	movlw	high f_mount@rp
  7032  005F4E  6E02               	movwf	get_ldnumber@path+1,c
  7033  005F50  EC94  F02C         	call	_get_ldnumber	;wreg free
  7034  005F54  C001  F05C         	movff	?_get_ldnumber,f_mount@vol
  7035  005F58  C002  F05D         	movff	?_get_ldnumber+1,f_mount@vol+1
  7036                           
  7037                           ;ff.c: 2415: if (vol < 0) return FR_INVALID_DRIVE;
  7038  005F5C  AE5D               	btfss	f_mount@vol+1,7,c
  7039  005F5E  D002               	goto	l5477
  7040  005F60  0E0B               	movlw	11
  7041  005F62  0012               	return	
  7042  005F64                     l5477:
  7043                           
  7044                           ;ff.c: 2416: cfs = FatFs[vol];
  7045  005F64  90D8               	bcf	status,0,c
  7046  005F66  345C               	rlcf	f_mount@vol,w,c
  7047  005F68  6ED9               	movwf	fsr2l,c
  7048  005F6A  345D               	rlcf	f_mount@vol+1,w,c
  7049  005F6C  6EDA               	movwf	fsr2h,c
  7050  005F6E  0ED4               	movlw	low ff@FatFs
  7051  005F70  26D9               	addwf	fsr2l,f,c
  7052  005F72  0E00               	movlw	high ff@FatFs
  7053  005F74  22DA               	addwfc	fsr2h,f,c
  7054  005F76  CFDE F058          	movff	postinc2,f_mount@cfs
  7055  005F7A  CFDD F059          	movff	postdec2,f_mount@cfs+1
  7056                           
  7057                           ;ff.c: 2418: if (cfs) {
  7058  005F7E  5058               	movf	f_mount@cfs,w,c
  7059  005F80  1059               	iorwf	f_mount@cfs+1,w,c
  7060  005F82  B4D8               	btfsc	status,2,c
  7061  005F84  D007               	goto	l5483
  7062                           
  7063                           ;ff.c: 2425: cfs->fs_type = 0;
  7064  005F86  C058  FFD9         	movff	f_mount@cfs,fsr2l
  7065  005F8A  C059  FFDA         	movff	f_mount@cfs+1,fsr2h
  7066  005F8E  0E00               	movlw	0
  7067  005F90  6EDF               	movwf	indf2,c
  7068  005F92  D000               	goto	l5483
  7069  005F94                     l5483:
  7070                           
  7071                           ;ff.c: 2426: }
  7072                           ;ff.c: 2428: if (fs) {
  7073  005F94  5052               	movf	f_mount@fs,w,c
  7074  005F96  1053               	iorwf	f_mount@fs+1,w,c
  7075  005F98  B4D8               	btfsc	status,2,c
  7076  005F9A  D007               	goto	l5487
  7077                           
  7078                           ;ff.c: 2429: fs->fs_type = 0;
  7079  005F9C  C052  FFD9         	movff	f_mount@fs,fsr2l
  7080  005FA0  C053  FFDA         	movff	f_mount@fs+1,fsr2h
  7081  005FA4  0E00               	movlw	0
  7082  005FA6  6EDF               	movwf	indf2,c
  7083  005FA8  D000               	goto	l5487
  7084  005FAA                     l5487:
  7085                           
  7086                           ;ff.c: 2433: }
  7087                           ;ff.c: 2434: FatFs[vol] = fs;
  7088  005FAA  90D8               	bcf	status,0,c
  7089  005FAC  345C               	rlcf	f_mount@vol,w,c
  7090  005FAE  6ED9               	movwf	fsr2l,c
  7091  005FB0  345D               	rlcf	f_mount@vol+1,w,c
  7092  005FB2  6EDA               	movwf	fsr2h,c
  7093  005FB4  0ED4               	movlw	low ff@FatFs
  7094  005FB6  26D9               	addwf	fsr2l,f,c
  7095  005FB8  0E00               	movlw	high ff@FatFs
  7096  005FBA  22DA               	addwfc	fsr2h,f,c
  7097  005FBC  C052  FFDE         	movff	f_mount@fs,postinc2
  7098  005FC0  C053  FFDD         	movff	f_mount@fs+1,postdec2
  7099                           
  7100                           ;ff.c: 2436: if (!fs || opt != 1) return FR_OK;
  7101  005FC4  5052               	movf	f_mount@fs,w,c
  7102  005FC6  1053               	iorwf	f_mount@fs+1,w,c
  7103  005FC8  B4D8               	btfsc	status,2,c
  7104  005FCA  D003               	goto	l5491
  7105  005FCC  0456               	decf	f_mount@opt,w,c
  7106  005FCE  B4D8               	btfsc	status,2,c
  7107  005FD0  D002               	goto	l5495
  7108  005FD2                     l5491:
  7109  005FD2  0E00               	movlw	0
  7110  005FD4  0012               	return	
  7111  005FD6                     l5495:
  7112                           
  7113                           ;ff.c: 2438: res = find_volume(&fs, &path, 0);
  7114  005FD6  0E52               	movlw	low f_mount@fs
  7115  005FD8  6E45               	movwf	find_volume@rfs,c
  7116  005FDA  0E00               	movlw	high f_mount@fs
  7117  005FDC  6E46               	movwf	find_volume@rfs+1,c
  7118  005FDE  0E54               	movlw	low f_mount@path
  7119  005FE0  6E47               	movwf	find_volume@path,c
  7120  005FE2  0E00               	movlw	high f_mount@path
  7121  005FE4  6E48               	movwf	find_volume@path+1,c
  7122  005FE6  0E00               	movlw	0
  7123  005FE8  6E49               	movwf	find_volume@wmode,c
  7124  005FEA  EC29  F008         	call	_find_volume	;wreg free
  7125  005FEE  6E57               	movwf	f_mount@res,c
  7126                           
  7127                           ;ff.c: 2439: return res;
  7128  005FF0  5057               	movf	f_mount@res,w,c
  7129  005FF2  0012               	return	
  7130  005FF4  0012               	return		;funcret
  7131  005FF6                     __end_of_f_mount:
  7132                           	opt stack 0
  7133                           tblptru	equ	0xFF8
  7134                           tblptrh	equ	0xFF7
  7135                           tblptrl	equ	0xFF6
  7136                           tablat	equ	0xFF5
  7137                           prodh	equ	0xFF4
  7138                           prodl	equ	0xFF3
  7139                           indf0	equ	0xFEF
  7140                           postinc0	equ	0xFEE
  7141                           fsr0h	equ	0xFEA
  7142                           fsr0l	equ	0xFE9
  7143                           wreg	equ	0xFE8
  7144                           indf1	equ	0xFE7
  7145                           postinc1	equ	0xFE6
  7146                           postdec1	equ	0xFE5
  7147                           fsr1h	equ	0xFE2
  7148                           fsr1l	equ	0xFE1
  7149                           indf2	equ	0xFDF
  7150                           postinc2	equ	0xFDE
  7151                           postdec2	equ	0xFDD
  7152                           plusw2	equ	0xFDB
  7153                           fsr2h	equ	0xFDA
  7154                           fsr2l	equ	0xFD9
  7155                           status	equ	0xFD8
  7156                           
  7157 ;; *************** function _find_volume *****************
  7158 ;; Defined at:
  7159 ;;		line 2203 in file "../../SD_Card_FatFs/ff.c"
  7160 ;; Parameters:    Size  Location     Type
  7161 ;;  rfs             2   68[COMRAM] PTR PTR struct .
  7162 ;;		 -> f_open@dj(22), f_mount@fs(2), 
  7163 ;;  path            2   70[COMRAM] PTR PTR const unsigned c
  7164 ;;		 -> f_open@path(2), f_mount@path(2), 
  7165 ;;  wmode           1   72[COMRAM] unsigned char 
  7166 ;; Auto vars:     Size  Location     Type
  7167 ;;  br             16    0[BANK0 ] unsigned long [4]
  7168 ;;  bsect           4   49[BANK0 ] unsigned long 
  7169 ;;  fasize          4   45[BANK0 ] unsigned long 
  7170 ;;  nclst           4   40[BANK0 ] unsigned long 
  7171 ;;  tsect           4   36[BANK0 ] unsigned long 
  7172 ;;  sysect          4   28[BANK0 ] unsigned long 
  7173 ;;  szbfat          4   22[BANK0 ] unsigned long 
  7174 ;;  fs              2   56[BANK0 ] PTR struct .
  7175 ;;		 -> NULL(0), FatFs(558), 
  7176 ;;  i               2   53[BANK0 ] unsigned int 
  7177 ;;  nrsv            2   34[BANK0 ] unsigned int 
  7178 ;;  vol             2   32[BANK0 ] int 
  7179 ;;  pt              2   26[BANK0 ] PTR unsigned char 
  7180 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  7181 ;;  fmt             1   55[BANK0 ] unsigned char 
  7182 ;;  stat            1   44[BANK0 ] unsigned char 
  7183 ;; Return value:  Size  Location     Type
  7184 ;;                  1    wreg      enum E88
  7185 ;; Registers used:
  7186 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7187 ;; Tracked objects:
  7188 ;;		On entry : 0/0
  7189 ;;		On exit  : 0/0
  7190 ;;		Unchanged: 0/0
  7191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7192 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7193 ;;      Locals:         0      58       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7194 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7195 ;;      Totals:        13      58       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7196 ;;Total ram usage:       71 bytes
  7197 ;; Hardware stack levels used:    1
  7198 ;; Hardware stack levels required when called:    9
  7199 ;; This function calls:
  7200 ;;		___lldiv
  7201 ;;		___lmul
  7202 ;;		_check_fs
  7203 ;;		_disk_initialize
  7204 ;;		_disk_status
  7205 ;;		_get_ldnumber
  7206 ;;		_move_window
  7207 ;; This function is called by:
  7208 ;;		_f_mount
  7209 ;;		_f_open
  7210 ;; This function uses a non-reentrant model
  7211 ;;
  7212                           
  7213                           	psect	text16
  7214  001052                     __ptext16:
  7215                           	opt stack 0
  7216  001052                     _find_volume:
  7217                           	opt stack 20
  7218                           
  7219                           ;ff.c: 2209: BYTE fmt, *pt;
  7220                           ;ff.c: 2210: int vol;
  7221                           ;ff.c: 2211: DSTATUS stat;
  7222                           ;ff.c: 2212: DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];
  7223                           ;ff.c: 2213: WORD nrsv;
  7224                           ;ff.c: 2214: FATFS *fs;
  7225                           ;ff.c: 2215: UINT i;
  7226                           ;ff.c: 2219: *rfs = 0;
  7227                           
  7228                           ;incstack = 0
  7229  001052  C045  FFD9         	movff	find_volume@rfs,fsr2l
  7230  001056  C046  FFDA         	movff	find_volume@rfs+1,fsr2h
  7231  00105A  0E00               	movlw	0
  7232  00105C  6EDE               	movwf	postinc2,c
  7233  00105E  0E00               	movlw	0
  7234  001060  6EDD               	movwf	postdec2,c
  7235                           
  7236                           ;ff.c: 2220: vol = get_ldnumber(path);
  7237  001062  C047  F001         	movff	find_volume@path,get_ldnumber@path
  7238  001066  C048  F002         	movff	find_volume@path+1,get_ldnumber@path+1
  7239  00106A  EC94  F02C         	call	_get_ldnumber	;wreg free
  7240  00106E  C001  F080         	movff	?_get_ldnumber,find_volume@vol
  7241  001072  C002  F081         	movff	?_get_ldnumber+1,find_volume@vol+1
  7242                           
  7243                           ;ff.c: 2221: if (vol < 0) return FR_INVALID_DRIVE;
  7244  001076  0100               	movlb	0	; () banked
  7245  001078  AF81               	btfss	(find_volume@vol+1)& (0+255),7,b
  7246  00107A  D002               	goto	l5167
  7247                           
  7248                           ; BSR set to: 0
  7249  00107C  0E0B               	movlw	11
  7250                           
  7251                           ; BSR set to: 0
  7252  00107E  0012               	return	
  7253  001080                     l5167:
  7254                           
  7255                           ; BSR set to: 0
  7256                           ;ff.c: 2224: fs = FatFs[vol];
  7257  001080  90D8               	bcf	status,0,c
  7258  001082  0100               	movlb	0	; () banked
  7259  001084  3580               	rlcf	find_volume@vol& (0+255),w,b
  7260  001086  6ED9               	movwf	fsr2l,c
  7261  001088  0100               	movlb	0	; () banked
  7262  00108A  3581               	rlcf	(find_volume@vol+1)& (0+255),w,b
  7263  00108C  6EDA               	movwf	fsr2h,c
  7264  00108E  0ED4               	movlw	low ff@FatFs
  7265  001090  26D9               	addwf	fsr2l,f,c
  7266  001092  0E00               	movlw	high ff@FatFs
  7267  001094  22DA               	addwfc	fsr2h,f,c
  7268  001096  CFDE F098          	movff	postinc2,find_volume@fs
  7269  00109A  CFDD F099          	movff	postdec2,find_volume@fs+1
  7270                           
  7271                           ; BSR set to: 0
  7272                           ;ff.c: 2225: if (!fs) return FR_NOT_ENABLED;
  7273  00109E  0100               	movlb	0	; () banked
  7274  0010A0  5198               	movf	find_volume@fs& (0+255),w,b
  7275  0010A2  0100               	movlb	0	; () banked
  7276  0010A4  1199               	iorwf	(find_volume@fs+1)& (0+255),w,b
  7277  0010A6  A4D8               	btfss	status,2,c
  7278  0010A8  D002               	goto	l5175
  7279                           
  7280                           ; BSR set to: 0
  7281  0010AA  0E0C               	movlw	12
  7282                           
  7283                           ; BSR set to: 0
  7284  0010AC  0012               	return	
  7285  0010AE                     l5175:
  7286                           
  7287                           ; BSR set to: 0
  7288                           ;ff.c: 2227: ;
  7289                           ;ff.c: 2228: *rfs = fs;
  7290  0010AE  C045  FFD9         	movff	find_volume@rfs,fsr2l
  7291  0010B2  C046  FFDA         	movff	find_volume@rfs+1,fsr2h
  7292  0010B6  C098  FFDE         	movff	find_volume@fs,postinc2
  7293  0010BA  C099  FFDD         	movff	find_volume@fs+1,postdec2
  7294                           
  7295                           ; BSR set to: 0
  7296                           ;ff.c: 2230: if (fs->fs_type) {
  7297  0010BE  C098  FFD9         	movff	find_volume@fs,fsr2l
  7298  0010C2  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  7299  0010C6  50DF               	movf	indf2,w,c
  7300  0010C8  B4D8               	btfsc	status,2,c
  7301  0010CA  D01A               	goto	l5195
  7302                           
  7303                           ; BSR set to: 0
  7304                           ;ff.c: 2231: stat = disk_status(fs->drv);
  7305  0010CC  0100               	movlb	0	; () banked
  7306  0010CE  EE20 F001          	lfsr	2,1
  7307  0010D2  5198               	movf	find_volume@fs& (0+255),w,b
  7308  0010D4  26D9               	addwf	fsr2l,f,c
  7309  0010D6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7310  0010D8  22DA               	addwfc	fsr2h,f,c
  7311  0010DA  50DF               	movf	indf2,w,c
  7312  0010DC  EC6F  F033         	call	_disk_status
  7313  0010E0  0100               	movlb	0	; () banked
  7314  0010E2  6F8C               	movwf	find_volume@stat& (0+255),b
  7315                           
  7316                           ; BSR set to: 0
  7317                           ;ff.c: 2233: if (!0 && wmode && (stat & 0x04))
  7318  0010E4  0100               	movlb	0	; () banked
  7319  0010E6  B18C               	btfsc	find_volume@stat& (0+255),0,b
  7320  0010E8  D00B               	goto	l5195
  7321                           
  7322                           ; BSR set to: 0
  7323  0010EA  5049               	movf	find_volume@wmode,w,c
  7324  0010EC  B4D8               	btfsc	status,2,c
  7325  0010EE  D005               	goto	l5191
  7326                           
  7327                           ; BSR set to: 0
  7328  0010F0  0100               	movlb	0	; () banked
  7329  0010F2  A58C               	btfss	find_volume@stat& (0+255),2,b
  7330  0010F4  D002               	goto	l5191
  7331                           
  7332                           ; BSR set to: 0
  7333                           ;ff.c: 2234: return FR_WRITE_PROTECTED;
  7334  0010F6  0E0A               	movlw	10
  7335                           
  7336                           ; BSR set to: 0
  7337  0010F8  0012               	return	
  7338  0010FA                     l5191:
  7339                           
  7340                           ; BSR set to: 0
  7341                           ;ff.c: 2235: return FR_OK;
  7342  0010FA  0E00               	movlw	0
  7343                           
  7344                           ; BSR set to: 0
  7345  0010FC  0012               	return	
  7346                           
  7347                           ; BSR set to: 0
  7348  0010FE  D000               	goto	l5195
  7349  001100                     l5195:
  7350                           
  7351                           ; BSR set to: 0
  7352                           ;ff.c: 2236: }
  7353                           ;ff.c: 2237: }
  7354                           ;ff.c: 2242: fs->fs_type = 0;
  7355  001100  C098  FFD9         	movff	find_volume@fs,fsr2l
  7356  001104  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  7357  001108  0E00               	movlw	0
  7358  00110A  6EDF               	movwf	indf2,c
  7359                           
  7360                           ; BSR set to: 0
  7361                           ;ff.c: 2243: fs->drv = (BYTE)(vol);
  7362  00110C  0100               	movlb	0	; () banked
  7363  00110E  EE20 F001          	lfsr	2,1
  7364  001112  5198               	movf	find_volume@fs& (0+255),w,b
  7365  001114  26D9               	addwf	fsr2l,f,c
  7366  001116  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7367  001118  22DA               	addwfc	fsr2h,f,c
  7368  00111A  C080  FFDF         	movff	find_volume@vol,indf2
  7369                           
  7370                           ; BSR set to: 0
  7371                           ;ff.c: 2244: stat = disk_initialize(fs->drv);
  7372  00111E  0100               	movlb	0	; () banked
  7373  001120  EE20 F001          	lfsr	2,1
  7374  001124  5198               	movf	find_volume@fs& (0+255),w,b
  7375  001126  26D9               	addwf	fsr2l,f,c
  7376  001128  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7377  00112A  22DA               	addwfc	fsr2h,f,c
  7378  00112C  50DF               	movf	indf2,w,c
  7379  00112E  ECE2  F025         	call	_disk_initialize
  7380  001132  0100               	movlb	0	; () banked
  7381  001134  6F8C               	movwf	find_volume@stat& (0+255),b
  7382                           
  7383                           ; BSR set to: 0
  7384                           ;ff.c: 2245: if (stat & 0x01)
  7385  001136  0100               	movlb	0	; () banked
  7386  001138  A18C               	btfss	find_volume@stat& (0+255),0,b
  7387  00113A  D002               	goto	l5207
  7388                           
  7389                           ; BSR set to: 0
  7390                           ;ff.c: 2246: return FR_NOT_READY;
  7391  00113C  0E03               	movlw	3
  7392                           
  7393                           ; BSR set to: 0
  7394  00113E  0012               	return	
  7395  001140                     l5207:
  7396                           
  7397                           ; BSR set to: 0
  7398  001140  5049               	movf	find_volume@wmode,w,c
  7399  001142  B4D8               	btfsc	status,2,c
  7400  001144  D005               	goto	l5215
  7401                           
  7402                           ; BSR set to: 0
  7403  001146  0100               	movlb	0	; () banked
  7404  001148  A58C               	btfss	find_volume@stat& (0+255),2,b
  7405  00114A  D002               	goto	l5215
  7406                           
  7407                           ; BSR set to: 0
  7408                           ;ff.c: 2248: return FR_WRITE_PROTECTED;
  7409  00114C  0E0A               	movlw	10
  7410                           
  7411                           ; BSR set to: 0
  7412  00114E  0012               	return	
  7413  001150                     l5215:
  7414                           
  7415                           ; BSR set to: 0
  7416                           ;ff.c: 2254: bsect = 0;
  7417  001150  0E00               	movlw	0
  7418  001152  0100               	movlb	0	; () banked
  7419  001154  6F91               	movwf	find_volume@bsect& (0+255),b
  7420  001156  0E00               	movlw	0
  7421  001158  6F92               	movwf	(find_volume@bsect+1)& (0+255),b
  7422  00115A  0E00               	movlw	0
  7423  00115C  6F93               	movwf	(find_volume@bsect+2)& (0+255),b
  7424  00115E  0E00               	movlw	0
  7425  001160  6F94               	movwf	(find_volume@bsect+3)& (0+255),b
  7426                           
  7427                           ; BSR set to: 0
  7428                           ;ff.c: 2255: fmt = check_fs(fs, bsect);
  7429  001162  C098  F03B         	movff	find_volume@fs,check_fs@fs
  7430  001166  C099  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  7431  00116A  C091  F03D         	movff	find_volume@bsect,check_fs@sect
  7432  00116E  C092  F03E         	movff	find_volume@bsect+1,check_fs@sect+1
  7433  001172  C093  F03F         	movff	find_volume@bsect+2,check_fs@sect+2
  7434  001176  C094  F040         	movff	find_volume@bsect+3,check_fs@sect+3
  7435  00117A  EC20  F02D         	call	_check_fs	;wreg free
  7436  00117E  0100               	movlb	0	; () banked
  7437  001180  6F97               	movwf	find_volume@fmt& (0+255),b
  7438                           
  7439                           ; BSR set to: 0
  7440                           ;ff.c: 2256: if (fmt == 1 || (!fmt && (0))) {
  7441  001182  0100               	movlb	0	; () banked
  7442  001184  0597               	decf	find_volume@fmt& (0+255),w,b
  7443  001186  A4D8               	btfss	status,2,c
  7444  001188  D0D4               	goto	l5263
  7445  00118A  D001               	goto	l5225
  7446                           
  7447                           ; BSR set to: 0
  7448                           
  7449                           ; BSR set to: 0
  7450  00118C  D0D2               	goto	l5263
  7451  00118E                     l5225:
  7452                           
  7453                           ; BSR set to: 0
  7454                           ;ff.c: 2257: for (i = 0; i < 4; i++) {
  7455  00118E  0E00               	movlw	0
  7456  001190  0100               	movlb	0	; () banked
  7457  001192  6F96               	movwf	(find_volume@i+1)& (0+255),b
  7458  001194  0E00               	movlw	0
  7459  001196  6F95               	movwf	find_volume@i& (0+255),b
  7460  001198                     l5227:
  7461                           
  7462                           ; BSR set to: 0
  7463  001198  0100               	movlb	0	; () banked
  7464  00119A  5196               	movf	(find_volume@i+1)& (0+255),w,b
  7465  00119C  E168               	bnz	l5243
  7466  00119E  0E04               	movlw	4
  7467  0011A0  0100               	movlb	0	; () banked
  7468  0011A2  5D95               	subwf	find_volume@i& (0+255),w,b
  7469  0011A4  B0D8               	btfsc	status,0,c
  7470  0011A6  D063               	goto	l5243
  7471  0011A8  D001               	goto	l5231
  7472                           
  7473                           ; BSR set to: 0
  7474  0011AA  D061               	goto	l5243
  7475  0011AC                     l5231:
  7476                           
  7477                           ; BSR set to: 0
  7478                           ;ff.c: 2258: pt = fs->win + 446 + i * 16;
  7479  0011AC  0EEC               	movlw	236
  7480  0011AE  6E4A               	movwf	??_find_volume& (0+255),c
  7481  0011B0  0E01               	movlw	1
  7482  0011B2  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  7483  0011B4  C095  F04C         	movff	find_volume@i,??_find_volume+2
  7484  0011B8  C096  F04D         	movff	find_volume@i+1,??_find_volume+3
  7485  0011BC  3A4C               	swapf	??_find_volume+2,f,c
  7486  0011BE  3A4D               	swapf	??_find_volume+3,f,c
  7487  0011C0  0EF0               	movlw	240
  7488  0011C2  164D               	andwf	??_find_volume+3,f,c
  7489  0011C4  504C               	movf	??_find_volume+2,w,c
  7490  0011C6  0B0F               	andlw	15
  7491  0011C8  124D               	iorwf	??_find_volume+3,f,c
  7492  0011CA  0EF0               	movlw	240
  7493  0011CC  164C               	andwf	??_find_volume+2,f,c
  7494  0011CE  504A               	movf	??_find_volume,w,c
  7495  0011D0  264C               	addwf	??_find_volume+2,f,c
  7496  0011D2  504B               	movf	??_find_volume+1,w,c
  7497  0011D4  224D               	addwfc	??_find_volume+3,f,c
  7498  0011D6  504C               	movf	??_find_volume+2,w,c
  7499  0011D8  0100               	movlb	0	; () banked
  7500  0011DA  2598               	addwf	find_volume@fs& (0+255),w,b
  7501  0011DC  0100               	movlb	0	; () banked
  7502  0011DE  6F7A               	movwf	find_volume@pt& (0+255),b
  7503  0011E0  504D               	movf	??_find_volume+3,w,c
  7504  0011E2  0100               	movlb	0	; () banked
  7505  0011E4  2199               	addwfc	(find_volume@fs+1)& (0+255),w,b
  7506  0011E6  0100               	movlb	0	; () banked
  7507  0011E8  6F7B               	movwf	(find_volume@pt+1)& (0+255),b
  7508                           
  7509                           ; BSR set to: 0
  7510                           ;ff.c: 2259: br[i] = pt[4] ? (DWORD)(*(DWORD*)(BYTE*)(&pt[8])) : 0;
  7511  0011EA  0100               	movlb	0	; () banked
  7512  0011EC  EE20 F004          	lfsr	2,4
  7513  0011F0  517A               	movf	find_volume@pt& (0+255),w,b
  7514  0011F2  26D9               	addwf	fsr2l,f,c
  7515  0011F4  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  7516  0011F6  22DA               	addwfc	fsr2h,f,c
  7517  0011F8  50DF               	movf	indf2,w,c
  7518  0011FA  A4D8               	btfss	status,2,c
  7519  0011FC  D00A               	goto	l5237
  7520                           
  7521                           ; BSR set to: 0
  7522  0011FE  0E00               	movlw	0
  7523  001200  0100               	movlb	0	; () banked
  7524  001202  6F70               	movwf	_find_volume$804& (0+255),b
  7525  001204  0E00               	movlw	0
  7526  001206  6F71               	movwf	(_find_volume$804+1)& (0+255),b
  7527  001208  0E00               	movlw	0
  7528  00120A  6F72               	movwf	(_find_volume$804+2)& (0+255),b
  7529  00120C  0E00               	movlw	0
  7530  00120E  6F73               	movwf	(_find_volume$804+3)& (0+255),b
  7531  001210  D00F               	goto	l546
  7532  001212                     l5237:
  7533                           
  7534                           ; BSR set to: 0
  7535  001212  0100               	movlb	0	; () banked
  7536  001214  EE20 F008          	lfsr	2,8
  7537  001218  517A               	movf	find_volume@pt& (0+255),w,b
  7538  00121A  26D9               	addwf	fsr2l,f,c
  7539  00121C  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  7540  00121E  22DA               	addwfc	fsr2h,f,c
  7541  001220  CFDE F070          	movff	postinc2,_find_volume$804
  7542  001224  CFDE F071          	movff	postinc2,_find_volume$804+1
  7543  001228  CFDE F072          	movff	postinc2,_find_volume$804+2
  7544  00122C  CFDE F073          	movff	postinc2,_find_volume$804+3
  7545  001230                     l546:
  7546                           
  7547                           ; BSR set to: 0
  7548  001230  0E60               	movlw	low find_volume@br
  7549  001232  6E4A               	movwf	??_find_volume& (0+255),c
  7550  001234  0E00               	movlw	high find_volume@br
  7551  001236  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  7552  001238  90D8               	bcf	status,0,c
  7553  00123A  0100               	movlb	0	; () banked
  7554  00123C  3595               	rlcf	find_volume@i& (0+255),w,b
  7555  00123E  6ED9               	movwf	fsr2l,c
  7556  001240  0100               	movlb	0	; () banked
  7557  001242  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  7558  001244  6EDA               	movwf	fsr2h,c
  7559  001246  90D8               	bcf	status,0,c
  7560  001248  36D9               	rlcf	fsr2l,f,c
  7561  00124A  36DA               	rlcf	fsr2h,f,c
  7562  00124C  504A               	movf	??_find_volume,w,c
  7563  00124E  26D9               	addwf	fsr2l,f,c
  7564  001250  504B               	movf	??_find_volume+1,w,c
  7565  001252  22DA               	addwfc	fsr2h,f,c
  7566  001254  C070  FFDE         	movff	_find_volume$804,postinc2
  7567  001258  C071  FFDE         	movff	_find_volume$804+1,postinc2
  7568  00125C  C072  FFDE         	movff	_find_volume$804+2,postinc2
  7569  001260  C073  FFDE         	movff	_find_volume$804+3,postinc2
  7570                           
  7571                           ; BSR set to: 0
  7572  001264  0100               	movlb	0	; () banked
  7573  001266  4B95               	infsnz	find_volume@i& (0+255),f,b
  7574  001268  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  7575  00126A  D796               	goto	l5227
  7576                           
  7577                           ; BSR set to: 0
  7578  00126C  D000               	goto	l5243
  7579  00126E                     l5243:
  7580                           
  7581                           ; BSR set to: 0
  7582                           ;ff.c: 2260: }
  7583                           ;ff.c: 2261: i = 0;
  7584  00126E  0E00               	movlw	0
  7585  001270  0100               	movlb	0	; () banked
  7586  001272  6F96               	movwf	(find_volume@i+1)& (0+255),b
  7587  001274  0E00               	movlw	0
  7588  001276  6F95               	movwf	find_volume@i& (0+255),b
  7589                           
  7590                           ; BSR set to: 0
  7591                           ;ff.c: 2262: if (i) i--;
  7592  001278  0100               	movlb	0	; () banked
  7593  00127A  5195               	movf	find_volume@i& (0+255),w,b
  7594  00127C  0100               	movlb	0	; () banked
  7595  00127E  1196               	iorwf	(find_volume@i+1)& (0+255),w,b
  7596  001280  B4D8               	btfsc	status,2,c
  7597  001282  D005               	goto	l5249
  7598                           
  7599                           ; BSR set to: 0
  7600  001284  0100               	movlb	0	; () banked
  7601  001286  0795               	decf	find_volume@i& (0+255),f,b
  7602  001288  A0D8               	btfss	status,0,c
  7603  00128A  0796               	decf	(find_volume@i+1)& (0+255),f,b
  7604                           
  7605                           ; BSR set to: 0
  7606  00128C  D000               	goto	l5249
  7607  00128E                     l5249:
  7608                           
  7609                           ; BSR set to: 0
  7610                           ;ff.c: 2264: bsect = br[i];
  7611  00128E  0E60               	movlw	low find_volume@br
  7612  001290  6E4A               	movwf	??_find_volume& (0+255),c
  7613  001292  0E00               	movlw	high find_volume@br
  7614  001294  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  7615  001296  90D8               	bcf	status,0,c
  7616  001298  0100               	movlb	0	; () banked
  7617  00129A  3595               	rlcf	find_volume@i& (0+255),w,b
  7618  00129C  6ED9               	movwf	fsr2l,c
  7619  00129E  0100               	movlb	0	; () banked
  7620  0012A0  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  7621  0012A2  6EDA               	movwf	fsr2h,c
  7622  0012A4  90D8               	bcf	status,0,c
  7623  0012A6  36D9               	rlcf	fsr2l,f,c
  7624  0012A8  36DA               	rlcf	fsr2h,f,c
  7625  0012AA  504A               	movf	??_find_volume,w,c
  7626  0012AC  26D9               	addwf	fsr2l,f,c
  7627  0012AE  504B               	movf	??_find_volume+1,w,c
  7628  0012B0  22DA               	addwfc	fsr2h,f,c
  7629  0012B2  CFDE F091          	movff	postinc2,find_volume@bsect
  7630  0012B6  CFDE F092          	movff	postinc2,find_volume@bsect+1
  7631  0012BA  CFDE F093          	movff	postinc2,find_volume@bsect+2
  7632  0012BE  CFDE F094          	movff	postinc2,find_volume@bsect+3
  7633                           
  7634                           ; BSR set to: 0
  7635                           ;ff.c: 2265: fmt = bsect ? check_fs(fs, bsect) : 2;
  7636  0012C2  0100               	movlb	0	; () banked
  7637  0012C4  5191               	movf	find_volume@bsect& (0+255),w,b
  7638  0012C6  0100               	movlb	0	; () banked
  7639  0012C8  1192               	iorwf	(find_volume@bsect+1)& (0+255),w,b
  7640  0012CA  0100               	movlb	0	; () banked
  7641  0012CC  1193               	iorwf	(find_volume@bsect+2)& (0+255),w,b
  7642  0012CE  0100               	movlb	0	; () banked
  7643  0012D0  1194               	iorwf	(find_volume@bsect+3)& (0+255),w,b
  7644  0012D2  A4D8               	btfss	status,2,c
  7645  0012D4  D006               	goto	l5255
  7646                           
  7647                           ; BSR set to: 0
  7648  0012D6  0E00               	movlw	0
  7649  0012D8  0100               	movlb	0	; () banked
  7650  0012DA  6F75               	movwf	(_find_volume$805+1)& (0+255),b
  7651  0012DC  0E02               	movlw	2
  7652  0012DE  6F74               	movwf	_find_volume$805& (0+255),b
  7653  0012E0  D014               	goto	l5257
  7654  0012E2                     l5255:
  7655                           
  7656                           ; BSR set to: 0
  7657  0012E2  C098  F03B         	movff	find_volume@fs,check_fs@fs
  7658  0012E6  C099  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  7659  0012EA  C091  F03D         	movff	find_volume@bsect,check_fs@sect
  7660  0012EE  C092  F03E         	movff	find_volume@bsect+1,check_fs@sect+1
  7661  0012F2  C093  F03F         	movff	find_volume@bsect+2,check_fs@sect+2
  7662  0012F6  C094  F040         	movff	find_volume@bsect+3,check_fs@sect+3
  7663  0012FA  EC20  F02D         	call	_check_fs	;wreg free
  7664  0012FE  6E4A               	movwf	??_find_volume& (0+255),c
  7665  001300  504A               	movf	??_find_volume,w,c
  7666  001302  0100               	movlb	0	; () banked
  7667  001304  6F74               	movwf	_find_volume$805& (0+255),b
  7668  001306  6B75               	clrf	(_find_volume$805+1)& (0+255),b
  7669  001308  D000               	goto	l5257
  7670  00130A                     l5257:
  7671                           
  7672                           ; BSR set to: 0
  7673                           ;ff.c: 2266: } while (!0 && fmt && ++i < 4);
  7674  00130A  C074  F097         	movff	_find_volume$805,find_volume@fmt
  7675                           
  7676                           ; BSR set to: 0
  7677  00130E  0100               	movlb	0	; () banked
  7678  001310  5197               	movf	find_volume@fmt& (0+255),w,b
  7679  001312  0100               	movlb	0	; () banked
  7680  001314  B4D8               	btfsc	status,2,c
  7681  001316  D00D               	goto	l5263
  7682                           
  7683                           ; BSR set to: 0
  7684  001318  0100               	movlb	0	; () banked
  7685  00131A  4B95               	infsnz	find_volume@i& (0+255),f,b
  7686  00131C  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  7687  00131E  0100               	movlb	0	; () banked
  7688  001320  5196               	movf	(find_volume@i+1)& (0+255),w,b
  7689  001322  E107               	bnz	l5263
  7690  001324  0E04               	movlw	4
  7691  001326  0100               	movlb	0	; () banked
  7692  001328  5D95               	subwf	find_volume@i& (0+255),w,b
  7693  00132A  B0D8               	btfsc	status,0,c
  7694  00132C  D002               	goto	l5263
  7695  00132E  D7AF               	goto	l5249
  7696                           
  7697                           ; BSR set to: 0
  7698                           
  7699                           ; BSR set to: 0
  7700  001330  D000               	goto	l5263
  7701  001332                     l5263:
  7702                           
  7703                           ; BSR set to: 0
  7704                           ;ff.c: 2267: }
  7705                           ;ff.c: 2268: if (fmt == 3) return FR_DISK_ERR;
  7706  001332  0E03               	movlw	3
  7707  001334  0100               	movlb	0	; () banked
  7708  001336  1997               	xorwf	find_volume@fmt& (0+255),w,b
  7709  001338  A4D8               	btfss	status,2,c
  7710  00133A  D002               	goto	l5269
  7711                           
  7712                           ; BSR set to: 0
  7713  00133C  0E01               	movlw	1
  7714                           
  7715                           ; BSR set to: 0
  7716  00133E  0012               	return	
  7717  001340                     l5269:
  7718                           
  7719                           ; BSR set to: 0
  7720                           ;ff.c: 2269: if (fmt) return FR_NO_FILESYSTEM;
  7721  001340  0100               	movlb	0	; () banked
  7722  001342  5197               	movf	find_volume@fmt& (0+255),w,b
  7723  001344  0100               	movlb	0	; () banked
  7724  001346  B4D8               	btfsc	status,2,c
  7725  001348  D002               	goto	l5275
  7726                           
  7727                           ; BSR set to: 0
  7728  00134A  0E0D               	movlw	13
  7729                           
  7730                           ; BSR set to: 0
  7731  00134C  0012               	return	
  7732  00134E                     l5275:
  7733                           
  7734                           ; BSR set to: 0
  7735                           ;ff.c: 2273: if ((WORD)(*(WORD*)(BYTE*)(fs->win + 11)) != ((UINT)512))
  7736  00134E  0100               	movlb	0	; () banked
  7737  001350  EE20 F039          	lfsr	2,57
  7738  001354  5198               	movf	find_volume@fs& (0+255),w,b
  7739  001356  26D9               	addwf	fsr2l,f,c
  7740  001358  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7741  00135A  22DA               	addwfc	fsr2h,f,c
  7742  00135C  50DE               	movf	postinc2,w,c
  7743  00135E  E104               	bnz	u7510
  7744  001360  0E02               	movlw	2
  7745  001362  18DE               	xorwf	postinc2,w,c
  7746  001364  B4D8               	btfsc	status,2,c
  7747  001366  D002               	goto	l5281
  7748  001368                     u7510:
  7749                           
  7750                           ; BSR set to: 0
  7751                           ;ff.c: 2274: return FR_NO_FILESYSTEM;
  7752  001368  0E0D               	movlw	13
  7753                           
  7754                           ; BSR set to: 0
  7755  00136A  0012               	return	
  7756  00136C                     l5281:
  7757                           
  7758                           ; BSR set to: 0
  7759                           ;ff.c: 2276: fasize = (WORD)(*(WORD*)(BYTE*)(fs->win + 22));
  7760  00136C  0100               	movlb	0	; () banked
  7761  00136E  EE20 F044          	lfsr	2,68
  7762  001372  5198               	movf	find_volume@fs& (0+255),w,b
  7763  001374  26D9               	addwf	fsr2l,f,c
  7764  001376  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7765  001378  22DA               	addwfc	fsr2h,f,c
  7766  00137A  CFDE F04A          	movff	postinc2,??_find_volume
  7767  00137E  CFDD F04B          	movff	postdec2,??_find_volume+1
  7768  001382  C04A  F08D         	movff	??_find_volume,find_volume@fasize
  7769  001386  C04B  F08E         	movff	??_find_volume+1,find_volume@fasize+1
  7770  00138A  0100               	movlb	0	; () banked
  7771  00138C  6B8F               	clrf	(find_volume@fasize+2)& (0+255),b
  7772  00138E  6B90               	clrf	(find_volume@fasize+3)& (0+255),b
  7773                           
  7774                           ; BSR set to: 0
  7775                           ;ff.c: 2277: if (!fasize) fasize = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 36));
  7776  001390  0100               	movlb	0	; () banked
  7777  001392  518D               	movf	find_volume@fasize& (0+255),w,b
  7778  001394  0100               	movlb	0	; () banked
  7779  001396  118E               	iorwf	(find_volume@fasize+1)& (0+255),w,b
  7780  001398  0100               	movlb	0	; () banked
  7781  00139A  118F               	iorwf	(find_volume@fasize+2)& (0+255),w,b
  7782  00139C  0100               	movlb	0	; () banked
  7783  00139E  1190               	iorwf	(find_volume@fasize+3)& (0+255),w,b
  7784  0013A0  A4D8               	btfss	status,2,c
  7785  0013A2  D00F               	goto	l559
  7786                           
  7787                           ; BSR set to: 0
  7788  0013A4  0100               	movlb	0	; () banked
  7789  0013A6  EE20 F052          	lfsr	2,82
  7790  0013AA  5198               	movf	find_volume@fs& (0+255),w,b
  7791  0013AC  26D9               	addwf	fsr2l,f,c
  7792  0013AE  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7793  0013B0  22DA               	addwfc	fsr2h,f,c
  7794  0013B2  CFDE F08D          	movff	postinc2,find_volume@fasize
  7795  0013B6  CFDE F08E          	movff	postinc2,find_volume@fasize+1
  7796  0013BA  CFDE F08F          	movff	postinc2,find_volume@fasize+2
  7797  0013BE  CFDE F090          	movff	postinc2,find_volume@fasize+3
  7798  0013C2                     l559:
  7799                           
  7800                           ; BSR set to: 0
  7801                           ;ff.c: 2278: fs->fsize = fasize;
  7802  0013C2  0100               	movlb	0	; () banked
  7803  0013C4  EE20 F016          	lfsr	2,22
  7804  0013C8  5198               	movf	find_volume@fs& (0+255),w,b
  7805  0013CA  26D9               	addwf	fsr2l,f,c
  7806  0013CC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7807  0013CE  22DA               	addwfc	fsr2h,f,c
  7808  0013D0  C08D  FFDE         	movff	find_volume@fasize,postinc2
  7809  0013D4  C08E  FFDE         	movff	find_volume@fasize+1,postinc2
  7810  0013D8  C08F  FFDE         	movff	find_volume@fasize+2,postinc2
  7811  0013DC  C090  FFDE         	movff	find_volume@fasize+3,postinc2
  7812                           
  7813                           ; BSR set to: 0
  7814                           ;ff.c: 2280: fs->n_fats = fs->win[16];
  7815  0013E0  0100               	movlb	0	; () banked
  7816  0013E2  EE20 F03E          	lfsr	2,62
  7817  0013E6  5198               	movf	find_volume@fs& (0+255),w,b
  7818  0013E8  26D9               	addwf	fsr2l,f,c
  7819  0013EA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7820  0013EC  22DA               	addwfc	fsr2h,f,c
  7821  0013EE  0100               	movlb	0	; () banked
  7822  0013F0  EE10 F003          	lfsr	1,3
  7823  0013F4  5198               	movf	find_volume@fs& (0+255),w,b
  7824  0013F6  26E1               	addwf	fsr1l,f,c
  7825  0013F8  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7826  0013FA  22E2               	addwfc	fsr1h,f,c
  7827  0013FC  CFDF FFE7          	movff	indf2,indf1
  7828                           
  7829                           ; BSR set to: 0
  7830                           ;ff.c: 2281: if (fs->n_fats != 1 && fs->n_fats != 2)
  7831  001400  0100               	movlb	0	; () banked
  7832  001402  EE20 F003          	lfsr	2,3
  7833  001406  5198               	movf	find_volume@fs& (0+255),w,b
  7834  001408  26D9               	addwf	fsr2l,f,c
  7835  00140A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7836  00140C  22DA               	addwfc	fsr2h,f,c
  7837  00140E  04DE               	decf	postinc2,w,c
  7838  001410  B4D8               	btfsc	status,2,c
  7839  001412  D00D               	goto	l5297
  7840                           
  7841                           ; BSR set to: 0
  7842  001414  0100               	movlb	0	; () banked
  7843  001416  EE20 F003          	lfsr	2,3
  7844  00141A  5198               	movf	find_volume@fs& (0+255),w,b
  7845  00141C  26D9               	addwf	fsr2l,f,c
  7846  00141E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7847  001420  22DA               	addwfc	fsr2h,f,c
  7848  001422  0E02               	movlw	2
  7849  001424  18DE               	xorwf	postinc2,w,c
  7850  001426  B4D8               	btfsc	status,2,c
  7851  001428  D002               	goto	l5297
  7852                           
  7853                           ; BSR set to: 0
  7854                           ;ff.c: 2282: return FR_NO_FILESYSTEM;
  7855  00142A  0E0D               	movlw	13
  7856                           
  7857                           ; BSR set to: 0
  7858  00142C  0012               	return	
  7859  00142E                     l5297:
  7860                           
  7861                           ; BSR set to: 0
  7862                           ;ff.c: 2283: fasize *= fs->n_fats;
  7863  00142E  C08D  F001         	movff	find_volume@fasize,___lmul@multiplier
  7864  001432  C08E  F002         	movff	find_volume@fasize+1,___lmul@multiplier+1
  7865  001436  C08F  F003         	movff	find_volume@fasize+2,___lmul@multiplier+2
  7866  00143A  C090  F004         	movff	find_volume@fasize+3,___lmul@multiplier+3
  7867  00143E  0100               	movlb	0	; () banked
  7868  001440  EE20 F003          	lfsr	2,3
  7869  001444  5198               	movf	find_volume@fs& (0+255),w,b
  7870  001446  26D9               	addwf	fsr2l,f,c
  7871  001448  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7872  00144A  22DA               	addwfc	fsr2h,f,c
  7873  00144C  50DF               	movf	indf2,w,c
  7874  00144E  6E4A               	movwf	??_find_volume& (0+255),c
  7875  001450  504A               	movf	??_find_volume,w,c
  7876  001452  6E05               	movwf	___lmul@multiplicand,c
  7877  001454  6A06               	clrf	___lmul@multiplicand+1,c
  7878  001456  6A07               	clrf	___lmul@multiplicand+2,c
  7879  001458  6A08               	clrf	___lmul@multiplicand+3,c
  7880  00145A  EC25  F032         	call	___lmul	;wreg free
  7881  00145E  C001  F08D         	movff	?___lmul,find_volume@fasize
  7882  001462  C002  F08E         	movff	?___lmul+1,find_volume@fasize+1
  7883  001466  C003  F08F         	movff	?___lmul+2,find_volume@fasize+2
  7884  00146A  C004  F090         	movff	?___lmul+3,find_volume@fasize+3
  7885                           
  7886                           ;ff.c: 2285: fs->csize = fs->win[13];
  7887  00146E  0100               	movlb	0	; () banked
  7888  001470  EE20 F03B          	lfsr	2,59
  7889  001474  5198               	movf	find_volume@fs& (0+255),w,b
  7890  001476  26D9               	addwf	fsr2l,f,c
  7891  001478  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7892  00147A  22DA               	addwfc	fsr2h,f,c
  7893  00147C  0100               	movlb	0	; () banked
  7894  00147E  EE10 F002          	lfsr	1,2
  7895  001482  5198               	movf	find_volume@fs& (0+255),w,b
  7896  001484  26E1               	addwf	fsr1l,f,c
  7897  001486  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7898  001488  22E2               	addwfc	fsr1h,f,c
  7899  00148A  CFDF FFE7          	movff	indf2,indf1
  7900                           
  7901                           ; BSR set to: 0
  7902                           ;ff.c: 2286: if (!fs->csize || (fs->csize & (fs->csize - 1)))
  7903  00148E  0100               	movlb	0	; () banked
  7904  001490  EE20 F002          	lfsr	2,2
  7905  001494  5198               	movf	find_volume@fs& (0+255),w,b
  7906  001496  26D9               	addwf	fsr2l,f,c
  7907  001498  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7908  00149A  22DA               	addwfc	fsr2h,f,c
  7909  00149C  50DF               	movf	indf2,w,c
  7910  00149E  B4D8               	btfsc	status,2,c
  7911  0014A0  D023               	goto	l5305
  7912                           
  7913                           ; BSR set to: 0
  7914  0014A2  0EFF               	movlw	255
  7915  0014A4  6E4A               	movwf	??_find_volume& (0+255),c
  7916  0014A6  0EFF               	movlw	255
  7917  0014A8  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  7918  0014AA  0100               	movlb	0	; () banked
  7919  0014AC  EE20 F002          	lfsr	2,2
  7920  0014B0  5198               	movf	find_volume@fs& (0+255),w,b
  7921  0014B2  26D9               	addwf	fsr2l,f,c
  7922  0014B4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7923  0014B6  22DA               	addwfc	fsr2h,f,c
  7924  0014B8  50DF               	movf	indf2,w,c
  7925  0014BA  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  7926  0014BC  6A4D               	clrf	(??_find_volume+3)& (0+255),c
  7927  0014BE  504A               	movf	??_find_volume,w,c
  7928  0014C0  264C               	addwf	??_find_volume+2,f,c
  7929  0014C2  504B               	movf	??_find_volume+1,w,c
  7930  0014C4  224D               	addwfc	??_find_volume+3,f,c
  7931  0014C6  0100               	movlb	0	; () banked
  7932  0014C8  EE20 F002          	lfsr	2,2
  7933  0014CC  5198               	movf	find_volume@fs& (0+255),w,b
  7934  0014CE  26D9               	addwf	fsr2l,f,c
  7935  0014D0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7936  0014D2  22DA               	addwfc	fsr2h,f,c
  7937  0014D4  50DF               	movf	indf2,w,c
  7938  0014D6  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  7939  0014D8  504E               	movf	??_find_volume+4,w,c
  7940  0014DA  164C               	andwf	??_find_volume+2,f,c
  7941  0014DC  0E00               	movlw	0
  7942  0014DE  164D               	andwf	??_find_volume+3,f,c
  7943  0014E0  504C               	movf	??_find_volume+2,w,c
  7944  0014E2  104D               	iorwf	??_find_volume+3,w,c
  7945  0014E4  B4D8               	btfsc	status,2,c
  7946  0014E6  D002               	goto	l5309
  7947  0014E8                     l5305:
  7948                           
  7949                           ; BSR set to: 0
  7950                           ;ff.c: 2287: return FR_NO_FILESYSTEM;
  7951  0014E8  0E0D               	movlw	13
  7952                           
  7953                           ; BSR set to: 0
  7954  0014EA  0012               	return	
  7955  0014EC                     l5309:
  7956                           
  7957                           ; BSR set to: 0
  7958                           ;ff.c: 2289: fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(fs->win + 17));
  7959  0014EC  0100               	movlb	0	; () banked
  7960  0014EE  EE20 F03F          	lfsr	2,63
  7961  0014F2  5198               	movf	find_volume@fs& (0+255),w,b
  7962  0014F4  26D9               	addwf	fsr2l,f,c
  7963  0014F6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7964  0014F8  22DA               	addwfc	fsr2h,f,c
  7965  0014FA  0100               	movlb	0	; () banked
  7966  0014FC  EE10 F008          	lfsr	1,8
  7967  001500  5198               	movf	find_volume@fs& (0+255),w,b
  7968  001502  26E1               	addwf	fsr1l,f,c
  7969  001504  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7970  001506  22E2               	addwfc	fsr1h,f,c
  7971  001508  CFDE FFE6          	movff	postinc2,postinc1
  7972  00150C  CFDD FFE5          	movff	postdec2,postdec1
  7973                           
  7974                           ; BSR set to: 0
  7975                           ;ff.c: 2290: if (fs->n_rootdir % (((UINT)512) / 32))
  7976  001510  0100               	movlb	0	; () banked
  7977  001512  EE20 F008          	lfsr	2,8
  7978  001516  5198               	movf	find_volume@fs& (0+255),w,b
  7979  001518  26D9               	addwf	fsr2l,f,c
  7980  00151A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7981  00151C  22DA               	addwfc	fsr2h,f,c
  7982  00151E  CFDE F04A          	movff	postinc2,??_find_volume
  7983  001522  CFDD F04B          	movff	postdec2,??_find_volume+1
  7984  001526  0E0F               	movlw	15
  7985  001528  164A               	andwf	??_find_volume,f,c
  7986  00152A  0E00               	movlw	0
  7987  00152C  164B               	andwf	??_find_volume+1,f,c
  7988  00152E  504A               	movf	??_find_volume,w,c
  7989  001530  104B               	iorwf	??_find_volume+1,w,c
  7990  001532  B4D8               	btfsc	status,2,c
  7991  001534  D002               	goto	l5317
  7992                           
  7993                           ; BSR set to: 0
  7994                           ;ff.c: 2291: return FR_NO_FILESYSTEM;
  7995  001536  0E0D               	movlw	13
  7996                           
  7997                           ; BSR set to: 0
  7998  001538  0012               	return	
  7999  00153A                     l5317:
  8000                           
  8001                           ; BSR set to: 0
  8002                           ;ff.c: 2293: tsect = (WORD)(*(WORD*)(BYTE*)(fs->win + 19));
  8003  00153A  0100               	movlb	0	; () banked
  8004  00153C  EE20 F041          	lfsr	2,65
  8005  001540  5198               	movf	find_volume@fs& (0+255),w,b
  8006  001542  26D9               	addwf	fsr2l,f,c
  8007  001544  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8008  001546  22DA               	addwfc	fsr2h,f,c
  8009  001548  CFDE F04A          	movff	postinc2,??_find_volume
  8010  00154C  CFDD F04B          	movff	postdec2,??_find_volume+1
  8011  001550  C04A  F084         	movff	??_find_volume,find_volume@tsect
  8012  001554  C04B  F085         	movff	??_find_volume+1,find_volume@tsect+1
  8013  001558  0100               	movlb	0	; () banked
  8014  00155A  6B86               	clrf	(find_volume@tsect+2)& (0+255),b
  8015  00155C  6B87               	clrf	(find_volume@tsect+3)& (0+255),b
  8016                           
  8017                           ; BSR set to: 0
  8018                           ;ff.c: 2294: if (!tsect) tsect = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 32));
  8019  00155E  0100               	movlb	0	; () banked
  8020  001560  5184               	movf	find_volume@tsect& (0+255),w,b
  8021  001562  0100               	movlb	0	; () banked
  8022  001564  1185               	iorwf	(find_volume@tsect+1)& (0+255),w,b
  8023  001566  0100               	movlb	0	; () banked
  8024  001568  1186               	iorwf	(find_volume@tsect+2)& (0+255),w,b
  8025  00156A  0100               	movlb	0	; () banked
  8026  00156C  1187               	iorwf	(find_volume@tsect+3)& (0+255),w,b
  8027  00156E  A4D8               	btfss	status,2,c
  8028  001570  D00F               	goto	l565
  8029                           
  8030                           ; BSR set to: 0
  8031  001572  0100               	movlb	0	; () banked
  8032  001574  EE20 F04E          	lfsr	2,78
  8033  001578  5198               	movf	find_volume@fs& (0+255),w,b
  8034  00157A  26D9               	addwf	fsr2l,f,c
  8035  00157C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8036  00157E  22DA               	addwfc	fsr2h,f,c
  8037  001580  CFDE F084          	movff	postinc2,find_volume@tsect
  8038  001584  CFDE F085          	movff	postinc2,find_volume@tsect+1
  8039  001588  CFDE F086          	movff	postinc2,find_volume@tsect+2
  8040  00158C  CFDE F087          	movff	postinc2,find_volume@tsect+3
  8041  001590                     l565:
  8042                           
  8043                           ; BSR set to: 0
  8044                           ;ff.c: 2296: nrsv = (WORD)(*(WORD*)(BYTE*)(fs->win + 14));
  8045  001590  0100               	movlb	0	; () banked
  8046  001592  EE20 F03C          	lfsr	2,60
  8047  001596  5198               	movf	find_volume@fs& (0+255),w,b
  8048  001598  26D9               	addwf	fsr2l,f,c
  8049  00159A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8050  00159C  22DA               	addwfc	fsr2h,f,c
  8051  00159E  CFDE F082          	movff	postinc2,find_volume@nrsv
  8052  0015A2  CFDD F083          	movff	postdec2,find_volume@nrsv+1
  8053                           
  8054                           ; BSR set to: 0
  8055                           ;ff.c: 2297: if (!nrsv) return FR_NO_FILESYSTEM;
  8056  0015A6  0100               	movlb	0	; () banked
  8057  0015A8  5182               	movf	find_volume@nrsv& (0+255),w,b
  8058  0015AA  0100               	movlb	0	; () banked
  8059  0015AC  1183               	iorwf	(find_volume@nrsv+1)& (0+255),w,b
  8060  0015AE  A4D8               	btfss	status,2,c
  8061  0015B0  D002               	goto	l5329
  8062                           
  8063                           ; BSR set to: 0
  8064  0015B2  0E0D               	movlw	13
  8065                           
  8066                           ; BSR set to: 0
  8067  0015B4  0012               	return	
  8068  0015B6                     l5329:
  8069                           
  8070                           ; BSR set to: 0
  8071                           ;ff.c: 2300: sysect = nrsv + fasize + fs->n_rootdir / (((UINT)512) / 32);
  8072  0015B6  0100               	movlb	0	; () banked
  8073  0015B8  EE20 F008          	lfsr	2,8
  8074  0015BC  5198               	movf	find_volume@fs& (0+255),w,b
  8075  0015BE  26D9               	addwf	fsr2l,f,c
  8076  0015C0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8077  0015C2  22DA               	addwfc	fsr2h,f,c
  8078  0015C4  CFDE F04A          	movff	postinc2,??_find_volume
  8079  0015C8  CFDD F04B          	movff	postdec2,??_find_volume+1
  8080  0015CC  0E04               	movlw	4
  8081  0015CE  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  8082  0015D0                     u7605:
  8083  0015D0  90D8               	bcf	status,0,c
  8084  0015D2  324B               	rrcf	??_find_volume+1,f,c
  8085  0015D4  324A               	rrcf	??_find_volume,f,c
  8086  0015D6  2E4C               	decfsz	(??_find_volume+2)& (0+255),f,c
  8087  0015D8  D7FB               	goto	u7605
  8088  0015DA  0100               	movlb	0	; () banked
  8089  0015DC  5182               	movf	find_volume@nrsv& (0+255),w,b
  8090  0015DE  244A               	addwf	??_find_volume,w,c
  8091  0015E0  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  8092  0015E2  0100               	movlb	0	; () banked
  8093  0015E4  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  8094  0015E6  204B               	addwfc	??_find_volume+1,w,c
  8095  0015E8  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  8096  0015EA  6A4F               	clrf	(??_find_volume+5)& (0+255),c
  8097  0015EC  B0D8               	btfsc	status,0,c
  8098  0015EE  2A4F               	incf	(??_find_volume+5)& (0+255),f,c
  8099  0015F0  6A50               	clrf	(??_find_volume+6)& (0+255),c
  8100  0015F2  0100               	movlb	0	; () banked
  8101  0015F4  518D               	movf	find_volume@fasize& (0+255),w,b
  8102  0015F6  244D               	addwf	??_find_volume+3,w,c
  8103  0015F8  0100               	movlb	0	; () banked
  8104  0015FA  6F7C               	movwf	find_volume@sysect& (0+255),b
  8105  0015FC  0100               	movlb	0	; () banked
  8106  0015FE  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  8107  001600  204E               	addwfc	??_find_volume+4,w,c
  8108  001602  0100               	movlb	0	; () banked
  8109  001604  6F7D               	movwf	(find_volume@sysect+1)& (0+255),b
  8110  001606  0100               	movlb	0	; () banked
  8111  001608  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  8112  00160A  204F               	addwfc	??_find_volume+5,w,c
  8113  00160C  0100               	movlb	0	; () banked
  8114  00160E  6F7E               	movwf	(find_volume@sysect+2)& (0+255),b
  8115  001610  0100               	movlb	0	; () banked
  8116  001612  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  8117  001614  2050               	addwfc	??_find_volume+6,w,c
  8118  001616  0100               	movlb	0	; () banked
  8119  001618  6F7F               	movwf	(find_volume@sysect+3)& (0+255),b
  8120                           
  8121                           ; BSR set to: 0
  8122                           ;ff.c: 2301: if (tsect < sysect) return FR_NO_FILESYSTEM;
  8123  00161A  0100               	movlb	0	; () banked
  8124  00161C  517C               	movf	find_volume@sysect& (0+255),w,b
  8125  00161E  0100               	movlb	0	; () banked
  8126  001620  5D84               	subwf	find_volume@tsect& (0+255),w,b
  8127  001622  0100               	movlb	0	; () banked
  8128  001624  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  8129  001626  0100               	movlb	0	; () banked
  8130  001628  5985               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  8131  00162A  0100               	movlb	0	; () banked
  8132  00162C  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  8133  00162E  0100               	movlb	0	; () banked
  8134  001630  5986               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  8135  001632  0100               	movlb	0	; () banked
  8136  001634  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  8137  001636  0100               	movlb	0	; () banked
  8138  001638  5987               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  8139  00163A  B0D8               	btfsc	status,0,c
  8140  00163C  D002               	goto	l5337
  8141                           
  8142                           ; BSR set to: 0
  8143  00163E  0E0D               	movlw	13
  8144                           
  8145                           ; BSR set to: 0
  8146  001640  0012               	return	
  8147  001642                     l5337:
  8148                           
  8149                           ; BSR set to: 0
  8150                           ;ff.c: 2302: nclst = (tsect - sysect) / fs->csize;
  8151  001642  C07C  F04A         	movff	find_volume@sysect,??_find_volume
  8152  001646  C07D  F04B         	movff	find_volume@sysect+1,??_find_volume+1
  8153  00164A  C07E  F04C         	movff	find_volume@sysect+2,??_find_volume+2
  8154  00164E  C07F  F04D         	movff	find_volume@sysect+3,??_find_volume+3
  8155  001652  1E4A               	comf	??_find_volume,f,c
  8156  001654  1E4B               	comf	??_find_volume+1,f,c
  8157  001656  1E4C               	comf	??_find_volume+2,f,c
  8158  001658  1E4D               	comf	??_find_volume+3,f,c
  8159  00165A  2A4A               	incf	??_find_volume,f,c
  8160  00165C  0E00               	movlw	0
  8161  00165E  224B               	addwfc	??_find_volume+1,f,c
  8162  001660  224C               	addwfc	??_find_volume+2,f,c
  8163  001662  224D               	addwfc	??_find_volume+3,f,c
  8164  001664  0100               	movlb	0	; () banked
  8165  001666  5184               	movf	find_volume@tsect& (0+255),w,b
  8166  001668  244A               	addwf	??_find_volume,w,c
  8167  00166A  6E01               	movwf	___lldiv@dividend,c
  8168  00166C  0100               	movlb	0	; () banked
  8169  00166E  5185               	movf	(find_volume@tsect+1)& (0+255),w,b
  8170  001670  204B               	addwfc	??_find_volume+1,w,c
  8171  001672  6E02               	movwf	___lldiv@dividend+1,c
  8172  001674  0100               	movlb	0	; () banked
  8173  001676  5186               	movf	(find_volume@tsect+2)& (0+255),w,b
  8174  001678  204C               	addwfc	??_find_volume+2,w,c
  8175  00167A  6E03               	movwf	___lldiv@dividend+2,c
  8176  00167C  0100               	movlb	0	; () banked
  8177  00167E  5187               	movf	(find_volume@tsect+3)& (0+255),w,b
  8178  001680  204D               	addwfc	??_find_volume+3,w,c
  8179  001682  6E04               	movwf	___lldiv@dividend+3,c
  8180  001684  0100               	movlb	0	; () banked
  8181  001686  EE20 F002          	lfsr	2,2
  8182  00168A  5198               	movf	find_volume@fs& (0+255),w,b
  8183  00168C  26D9               	addwf	fsr2l,f,c
  8184  00168E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8185  001690  22DA               	addwfc	fsr2h,f,c
  8186  001692  50DF               	movf	indf2,w,c
  8187  001694  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  8188  001696  504E               	movf	??_find_volume+4,w,c
  8189  001698  6E05               	movwf	___lldiv@divisor,c
  8190  00169A  6A06               	clrf	___lldiv@divisor+1,c
  8191  00169C  6A07               	clrf	___lldiv@divisor+2,c
  8192  00169E  6A08               	clrf	___lldiv@divisor+3,c
  8193  0016A0  EC2B  F031         	call	___lldiv	;wreg free
  8194  0016A4  C001  F088         	movff	?___lldiv,find_volume@nclst
  8195  0016A8  C002  F089         	movff	?___lldiv+1,find_volume@nclst+1
  8196  0016AC  C003  F08A         	movff	?___lldiv+2,find_volume@nclst+2
  8197  0016B0  C004  F08B         	movff	?___lldiv+3,find_volume@nclst+3
  8198                           
  8199                           ;ff.c: 2303: if (!nclst) return FR_NO_FILESYSTEM;
  8200  0016B4  0100               	movlb	0	; () banked
  8201  0016B6  5188               	movf	find_volume@nclst& (0+255),w,b
  8202  0016B8  0100               	movlb	0	; () banked
  8203  0016BA  1189               	iorwf	(find_volume@nclst+1)& (0+255),w,b
  8204  0016BC  0100               	movlb	0	; () banked
  8205  0016BE  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  8206  0016C0  0100               	movlb	0	; () banked
  8207  0016C2  118B               	iorwf	(find_volume@nclst+3)& (0+255),w,b
  8208  0016C4  A4D8               	btfss	status,2,c
  8209  0016C6  D002               	goto	l5345
  8210                           
  8211                           ; BSR set to: 0
  8212  0016C8  0E0D               	movlw	13
  8213                           
  8214                           ; BSR set to: 0
  8215  0016CA  0012               	return	
  8216  0016CC                     l5345:
  8217                           
  8218                           ; BSR set to: 0
  8219                           ;ff.c: 2304: fmt = 1;
  8220  0016CC  0E01               	movlw	1
  8221  0016CE  0100               	movlb	0	; () banked
  8222  0016D0  6F97               	movwf	find_volume@fmt& (0+255),b
  8223                           
  8224                           ; BSR set to: 0
  8225                           ;ff.c: 2305: if (nclst >= 4086U) fmt = 2;
  8226  0016D2  0100               	movlb	0	; () banked
  8227  0016D4  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  8228  0016D6  0100               	movlb	0	; () banked
  8229  0016D8  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  8230  0016DA  E108               	bnz	u7630
  8231  0016DC  0EF6               	movlw	246
  8232  0016DE  0100               	movlb	0	; () banked
  8233  0016E0  5D88               	subwf	find_volume@nclst& (0+255),w,b
  8234  0016E2  0E0F               	movlw	15
  8235  0016E4  0100               	movlb	0	; () banked
  8236  0016E6  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  8237  0016E8  A0D8               	btfss	status,0,c
  8238  0016EA  D004               	goto	l5351
  8239  0016EC                     u7630:
  8240                           
  8241                           ; BSR set to: 0
  8242  0016EC  0E02               	movlw	2
  8243  0016EE  0100               	movlb	0	; () banked
  8244  0016F0  6F97               	movwf	find_volume@fmt& (0+255),b
  8245  0016F2  D000               	goto	l5351
  8246  0016F4                     l5351:
  8247                           
  8248                           ; BSR set to: 0
  8249                           ;ff.c: 2306: if (nclst >= 65526U) fmt = 3;
  8250  0016F4  0100               	movlb	0	; () banked
  8251  0016F6  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  8252  0016F8  0100               	movlb	0	; () banked
  8253  0016FA  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  8254  0016FC  E108               	bnz	u7640
  8255  0016FE  0EF6               	movlw	246
  8256  001700  0100               	movlb	0	; () banked
  8257  001702  5D88               	subwf	find_volume@nclst& (0+255),w,b
  8258  001704  0EFF               	movlw	255
  8259  001706  0100               	movlb	0	; () banked
  8260  001708  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  8261  00170A  A0D8               	btfss	status,0,c
  8262  00170C  D004               	goto	l5355
  8263  00170E                     u7640:
  8264                           
  8265                           ; BSR set to: 0
  8266  00170E  0E03               	movlw	3
  8267  001710  0100               	movlb	0	; () banked
  8268  001712  6F97               	movwf	find_volume@fmt& (0+255),b
  8269  001714  D000               	goto	l5355
  8270  001716                     l5355:
  8271                           
  8272                           ; BSR set to: 0
  8273                           ;ff.c: 2309: fs->n_fatent = nclst + 2;
  8274  001716  0E02               	movlw	2
  8275  001718  0100               	movlb	0	; () banked
  8276  00171A  2588               	addwf	find_volume@nclst& (0+255),w,b
  8277  00171C  6E4A               	movwf	??_find_volume& (0+255),c
  8278  00171E  0E00               	movlw	0
  8279  001720  0100               	movlb	0	; () banked
  8280  001722  2189               	addwfc	(find_volume@nclst+1)& (0+255),w,b
  8281  001724  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  8282  001726  0E00               	movlw	0
  8283  001728  0100               	movlb	0	; () banked
  8284  00172A  218A               	addwfc	(find_volume@nclst+2)& (0+255),w,b
  8285  00172C  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  8286  00172E  0E00               	movlw	0
  8287  001730  0100               	movlb	0	; () banked
  8288  001732  218B               	addwfc	(find_volume@nclst+3)& (0+255),w,b
  8289  001734  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  8290  001736  0100               	movlb	0	; () banked
  8291  001738  EE20 F012          	lfsr	2,18
  8292  00173C  5198               	movf	find_volume@fs& (0+255),w,b
  8293  00173E  26D9               	addwf	fsr2l,f,c
  8294  001740  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8295  001742  22DA               	addwfc	fsr2h,f,c
  8296  001744  C04A  FFDE         	movff	??_find_volume,postinc2
  8297  001748  C04B  FFDE         	movff	??_find_volume+1,postinc2
  8298  00174C  C04C  FFDE         	movff	??_find_volume+2,postinc2
  8299  001750  C04D  FFDE         	movff	??_find_volume+3,postinc2
  8300                           
  8301                           ; BSR set to: 0
  8302                           ;ff.c: 2310: fs->volbase = bsect;
  8303  001754  0100               	movlb	0	; () banked
  8304  001756  EE20 F01A          	lfsr	2,26
  8305  00175A  5198               	movf	find_volume@fs& (0+255),w,b
  8306  00175C  26D9               	addwf	fsr2l,f,c
  8307  00175E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8308  001760  22DA               	addwfc	fsr2h,f,c
  8309  001762  C091  FFDE         	movff	find_volume@bsect,postinc2
  8310  001766  C092  FFDE         	movff	find_volume@bsect+1,postinc2
  8311  00176A  C093  FFDE         	movff	find_volume@bsect+2,postinc2
  8312  00176E  C094  FFDE         	movff	find_volume@bsect+3,postinc2
  8313                           
  8314                           ; BSR set to: 0
  8315                           ;ff.c: 2311: fs->fatbase = bsect + nrsv;
  8316  001772  0100               	movlb	0	; () banked
  8317  001774  5182               	movf	find_volume@nrsv& (0+255),w,b
  8318  001776  0100               	movlb	0	; () banked
  8319  001778  2591               	addwf	find_volume@bsect& (0+255),w,b
  8320  00177A  6E4A               	movwf	??_find_volume& (0+255),c
  8321  00177C  0100               	movlb	0	; () banked
  8322  00177E  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  8323  001780  0100               	movlb	0	; () banked
  8324  001782  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  8325  001784  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  8326  001786  0E00               	movlw	0
  8327  001788  0100               	movlb	0	; () banked
  8328  00178A  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  8329  00178C  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  8330  00178E  0E00               	movlw	0
  8331  001790  0100               	movlb	0	; () banked
  8332  001792  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  8333  001794  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  8334  001796  0100               	movlb	0	; () banked
  8335  001798  EE20 F01E          	lfsr	2,30
  8336  00179C  5198               	movf	find_volume@fs& (0+255),w,b
  8337  00179E  26D9               	addwf	fsr2l,f,c
  8338  0017A0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8339  0017A2  22DA               	addwfc	fsr2h,f,c
  8340  0017A4  C04A  FFDE         	movff	??_find_volume,postinc2
  8341  0017A8  C04B  FFDE         	movff	??_find_volume+1,postinc2
  8342  0017AC  C04C  FFDE         	movff	??_find_volume+2,postinc2
  8343  0017B0  C04D  FFDE         	movff	??_find_volume+3,postinc2
  8344                           
  8345                           ; BSR set to: 0
  8346                           ;ff.c: 2312: fs->database = bsect + sysect;
  8347  0017B4  0100               	movlb	0	; () banked
  8348  0017B6  517C               	movf	find_volume@sysect& (0+255),w,b
  8349  0017B8  0100               	movlb	0	; () banked
  8350  0017BA  2591               	addwf	find_volume@bsect& (0+255),w,b
  8351  0017BC  6E4A               	movwf	??_find_volume& (0+255),c
  8352  0017BE  0100               	movlb	0	; () banked
  8353  0017C0  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  8354  0017C2  0100               	movlb	0	; () banked
  8355  0017C4  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  8356  0017C6  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  8357  0017C8  0100               	movlb	0	; () banked
  8358  0017CA  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  8359  0017CC  0100               	movlb	0	; () banked
  8360  0017CE  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  8361  0017D0  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  8362  0017D2  0100               	movlb	0	; () banked
  8363  0017D4  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  8364  0017D6  0100               	movlb	0	; () banked
  8365  0017D8  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  8366  0017DA  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  8367  0017DC  0100               	movlb	0	; () banked
  8368  0017DE  EE20 F026          	lfsr	2,38
  8369  0017E2  5198               	movf	find_volume@fs& (0+255),w,b
  8370  0017E4  26D9               	addwf	fsr2l,f,c
  8371  0017E6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8372  0017E8  22DA               	addwfc	fsr2h,f,c
  8373  0017EA  C04A  FFDE         	movff	??_find_volume,postinc2
  8374  0017EE  C04B  FFDE         	movff	??_find_volume+1,postinc2
  8375  0017F2  C04C  FFDE         	movff	??_find_volume+2,postinc2
  8376  0017F6  C04D  FFDE         	movff	??_find_volume+3,postinc2
  8377                           
  8378                           ; BSR set to: 0
  8379                           ;ff.c: 2313: if (fmt == 3) {
  8380  0017FA  0E03               	movlw	3
  8381  0017FC  0100               	movlb	0	; () banked
  8382  0017FE  1997               	xorwf	find_volume@fmt& (0+255),w,b
  8383  001800  A4D8               	btfss	status,2,c
  8384  001802  D043               	goto	l5375
  8385                           
  8386                           ; BSR set to: 0
  8387                           ;ff.c: 2314: if (fs->n_rootdir) return FR_NO_FILESYSTEM;
  8388  001804  0100               	movlb	0	; () banked
  8389  001806  EE20 F008          	lfsr	2,8
  8390  00180A  5198               	movf	find_volume@fs& (0+255),w,b
  8391  00180C  26D9               	addwf	fsr2l,f,c
  8392  00180E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8393  001810  22DA               	addwfc	fsr2h,f,c
  8394  001812  50DE               	movf	postinc2,w,c
  8395  001814  10DE               	iorwf	postinc2,w,c
  8396  001816  B4D8               	btfsc	status,2,c
  8397  001818  D002               	goto	l5371
  8398                           
  8399                           ; BSR set to: 0
  8400  00181A  0E0D               	movlw	13
  8401                           
  8402                           ; BSR set to: 0
  8403  00181C  0012               	return	
  8404  00181E                     l5371:
  8405                           
  8406                           ; BSR set to: 0
  8407                           ;ff.c: 2315: fs->dirbase = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 44));
  8408  00181E  0100               	movlb	0	; () banked
  8409  001820  EE20 F05A          	lfsr	2,90
  8410  001824  5198               	movf	find_volume@fs& (0+255),w,b
  8411  001826  26D9               	addwf	fsr2l,f,c
  8412  001828  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8413  00182A  22DA               	addwfc	fsr2h,f,c
  8414  00182C  0100               	movlb	0	; () banked
  8415  00182E  EE10 F022          	lfsr	1,34
  8416  001832  5198               	movf	find_volume@fs& (0+255),w,b
  8417  001834  26E1               	addwf	fsr1l,f,c
  8418  001836  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8419  001838  22E2               	addwfc	fsr1h,f,c
  8420  00183A  CFDE FFE6          	movff	postinc2,postinc1
  8421  00183E  CFDE FFE6          	movff	postinc2,postinc1
  8422  001842  CFDE FFE6          	movff	postinc2,postinc1
  8423  001846  CFDE FFE6          	movff	postinc2,postinc1
  8424                           
  8425                           ; BSR set to: 0
  8426                           ;ff.c: 2316: szbfat = fs->n_fatent * 4;
  8427  00184A  0100               	movlb	0	; () banked
  8428  00184C  EE20 F012          	lfsr	2,18
  8429  001850  5198               	movf	find_volume@fs& (0+255),w,b
  8430  001852  26D9               	addwf	fsr2l,f,c
  8431  001854  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8432  001856  22DA               	addwfc	fsr2h,f,c
  8433  001858  CFDE F04A          	movff	postinc2,??_find_volume
  8434  00185C  CFDE F04B          	movff	postinc2,??_find_volume+1
  8435  001860  CFDE F04C          	movff	postinc2,??_find_volume+2
  8436  001864  CFDE F04D          	movff	postinc2,??_find_volume+3
  8437  001868  0E02               	movlw	2
  8438  00186A                     u7675:
  8439  00186A  90D8               	bcf	status,0,c
  8440  00186C  364A               	rlcf	??_find_volume,f,c
  8441  00186E  364B               	rlcf	??_find_volume+1,f,c
  8442  001870  364C               	rlcf	??_find_volume+2,f,c
  8443  001872  364D               	rlcf	??_find_volume+3,f,c
  8444  001874  2EE8               	decfsz	wreg,f,c
  8445  001876  D7F9               	goto	u7675
  8446  001878  C04A  F076         	movff	??_find_volume,find_volume@szbfat
  8447  00187C  C04B  F077         	movff	??_find_volume+1,find_volume@szbfat+1
  8448  001880  C04C  F078         	movff	??_find_volume+2,find_volume@szbfat+2
  8449  001884  C04D  F079         	movff	??_find_volume+3,find_volume@szbfat+3
  8450                           
  8451                           ;ff.c: 2317: } else {
  8452  001888  D0A5               	goto	l573
  8453  00188A                     l5375:
  8454                           
  8455                           ; BSR set to: 0
  8456                           ;ff.c: 2318: if (!fs->n_rootdir) return FR_NO_FILESYSTEM;
  8457  00188A  0100               	movlb	0	; () banked
  8458  00188C  EE20 F008          	lfsr	2,8
  8459  001890  5198               	movf	find_volume@fs& (0+255),w,b
  8460  001892  26D9               	addwf	fsr2l,f,c
  8461  001894  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8462  001896  22DA               	addwfc	fsr2h,f,c
  8463  001898  50DE               	movf	postinc2,w,c
  8464  00189A  10DE               	iorwf	postinc2,w,c
  8465  00189C  A4D8               	btfss	status,2,c
  8466  00189E  D002               	goto	l5381
  8467                           
  8468                           ; BSR set to: 0
  8469  0018A0  0E0D               	movlw	13
  8470                           
  8471                           ; BSR set to: 0
  8472  0018A2  0012               	return	
  8473  0018A4                     l5381:
  8474                           
  8475                           ; BSR set to: 0
  8476                           ;ff.c: 2319: fs->dirbase = fs->fatbase + fasize;
  8477  0018A4  0100               	movlb	0	; () banked
  8478  0018A6  EE20 F01E          	lfsr	2,30
  8479  0018AA  5198               	movf	find_volume@fs& (0+255),w,b
  8480  0018AC  26D9               	addwf	fsr2l,f,c
  8481  0018AE  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8482  0018B0  22DA               	addwfc	fsr2h,f,c
  8483  0018B2  CFDE F04A          	movff	postinc2,??_find_volume
  8484  0018B6  CFDE F04B          	movff	postinc2,??_find_volume+1
  8485  0018BA  CFDE F04C          	movff	postinc2,??_find_volume+2
  8486  0018BE  CFDE F04D          	movff	postinc2,??_find_volume+3
  8487  0018C2  0100               	movlb	0	; () banked
  8488  0018C4  518D               	movf	find_volume@fasize& (0+255),w,b
  8489  0018C6  244A               	addwf	??_find_volume,w,c
  8490  0018C8  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  8491  0018CA  0100               	movlb	0	; () banked
  8492  0018CC  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  8493  0018CE  204B               	addwfc	??_find_volume+1,w,c
  8494  0018D0  6E4F               	movwf	(??_find_volume+5)& (0+255),c
  8495  0018D2  0100               	movlb	0	; () banked
  8496  0018D4  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  8497  0018D6  204C               	addwfc	??_find_volume+2,w,c
  8498  0018D8  6E50               	movwf	(??_find_volume+6)& (0+255),c
  8499  0018DA  0100               	movlb	0	; () banked
  8500  0018DC  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  8501  0018DE  204D               	addwfc	??_find_volume+3,w,c
  8502  0018E0  6E51               	movwf	(??_find_volume+7)& (0+255),c
  8503  0018E2  0100               	movlb	0	; () banked
  8504  0018E4  EE20 F022          	lfsr	2,34
  8505  0018E8  5198               	movf	find_volume@fs& (0+255),w,b
  8506  0018EA  26D9               	addwf	fsr2l,f,c
  8507  0018EC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8508  0018EE  22DA               	addwfc	fsr2h,f,c
  8509  0018F0  C04E  FFDE         	movff	??_find_volume+4,postinc2
  8510  0018F4  C04F  FFDE         	movff	??_find_volume+5,postinc2
  8511  0018F8  C050  FFDE         	movff	??_find_volume+6,postinc2
  8512  0018FC  C051  FFDE         	movff	??_find_volume+7,postinc2
  8513                           
  8514                           ; BSR set to: 0
  8515                           ;ff.c: 2320: szbfat = (fmt == 2) ?
  8516                           ;ff.c: 2321: fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  8517  001900  0E02               	movlw	2
  8518  001902  0100               	movlb	0	; () banked
  8519  001904  1997               	xorwf	find_volume@fmt& (0+255),w,b
  8520  001906  B4D8               	btfsc	status,2,c
  8521  001908  D048               	goto	l5387
  8522                           
  8523                           ; BSR set to: 0
  8524  00190A  0100               	movlb	0	; () banked
  8525  00190C  EE20 F012          	lfsr	2,18
  8526  001910  5198               	movf	find_volume@fs& (0+255),w,b
  8527  001912  26D9               	addwf	fsr2l,f,c
  8528  001914  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8529  001916  22DA               	addwfc	fsr2h,f,c
  8530  001918  CFDE F04A          	movff	postinc2,??_find_volume
  8531  00191C  CFDE F04B          	movff	postinc2,??_find_volume+1
  8532  001920  CFDE F04C          	movff	postinc2,??_find_volume+2
  8533  001924  CFDE F04D          	movff	postinc2,??_find_volume+3
  8534  001928  0E01               	movlw	1
  8535  00192A  144A               	andwf	??_find_volume,w,c
  8536  00192C  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  8537  00192E  0E00               	movlw	0
  8538  001930  144B               	andwf	??_find_volume+1,w,c
  8539  001932  6E4F               	movwf	(??_find_volume+5)& (0+255),c
  8540  001934  0E00               	movlw	0
  8541  001936  144C               	andwf	??_find_volume+2,w,c
  8542  001938  6E50               	movwf	(??_find_volume+6)& (0+255),c
  8543  00193A  0E00               	movlw	0
  8544  00193C  144D               	andwf	??_find_volume+3,w,c
  8545  00193E  6E51               	movwf	(??_find_volume+7)& (0+255),c
  8546  001940  0100               	movlb	0	; () banked
  8547  001942  EE20 F012          	lfsr	2,18
  8548  001946  5198               	movf	find_volume@fs& (0+255),w,b
  8549  001948  26D9               	addwf	fsr2l,f,c
  8550  00194A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8551  00194C  22DA               	addwfc	fsr2h,f,c
  8552  00194E  CFDE F001          	movff	postinc2,___lmul@multiplier
  8553  001952  CFDE F002          	movff	postinc2,___lmul@multiplier+1
  8554  001956  CFDE F003          	movff	postinc2,___lmul@multiplier+2
  8555  00195A  CFDE F004          	movff	postinc2,___lmul@multiplier+3
  8556  00195E  0E03               	movlw	3
  8557  001960  6E05               	movwf	___lmul@multiplicand,c
  8558  001962  0E00               	movlw	0
  8559  001964  6E06               	movwf	___lmul@multiplicand+1,c
  8560  001966  0E00               	movlw	0
  8561  001968  6E07               	movwf	___lmul@multiplicand+2,c
  8562  00196A  0E00               	movlw	0
  8563  00196C  6E08               	movwf	___lmul@multiplicand+3,c
  8564  00196E  EC25  F032         	call	___lmul	;wreg free
  8565  001972  90D8               	bcf	status,0,c
  8566  001974  3204               	rrcf	?___lmul+3,f,c
  8567  001976  3203               	rrcf	?___lmul+2,f,c
  8568  001978  3202               	rrcf	?___lmul+1,f,c
  8569  00197A  3201               	rrcf	?___lmul,f,c
  8570  00197C  504E               	movf	??_find_volume+4,w,c
  8571  00197E  2401               	addwf	?___lmul,w,c
  8572  001980  0100               	movlb	0	; () banked
  8573  001982  6F76               	movwf	find_volume@szbfat& (0+255),b
  8574  001984  504F               	movf	??_find_volume+5,w,c
  8575  001986  2002               	addwfc	?___lmul+1,w,c
  8576  001988  0100               	movlb	0	; () banked
  8577  00198A  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  8578  00198C  5050               	movf	??_find_volume+6,w,c
  8579  00198E  2003               	addwfc	?___lmul+2,w,c
  8580  001990  0100               	movlb	0	; () banked
  8581  001992  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  8582  001994  5051               	movf	??_find_volume+7,w,c
  8583  001996  2004               	addwfc	?___lmul+3,w,c
  8584  001998  D01A               	goto	L8
  8585  00199A                     l5387:
  8586                           
  8587                           ; BSR set to: 0
  8588  00199A  0100               	movlb	0	; () banked
  8589  00199C  EE20 F012          	lfsr	2,18
  8590  0019A0  5198               	movf	find_volume@fs& (0+255),w,b
  8591  0019A2  26D9               	addwf	fsr2l,f,c
  8592  0019A4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8593  0019A6  22DA               	addwfc	fsr2h,f,c
  8594  0019A8  CFDE F04A          	movff	postinc2,??_find_volume
  8595  0019AC  CFDE F04B          	movff	postinc2,??_find_volume+1
  8596  0019B0  CFDE F04C          	movff	postinc2,??_find_volume+2
  8597  0019B4  CFDE F04D          	movff	postinc2,??_find_volume+3
  8598  0019B8  90D8               	bcf	status,0,c
  8599  0019BA  344A               	rlcf	??_find_volume,w,c
  8600  0019BC  0100               	movlb	0	; () banked
  8601  0019BE  6F76               	movwf	find_volume@szbfat& (0+255),b
  8602  0019C0  344B               	rlcf	??_find_volume+1,w,c
  8603  0019C2  0100               	movlb	0	; () banked
  8604  0019C4  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  8605  0019C6  344C               	rlcf	??_find_volume+2,w,c
  8606  0019C8  0100               	movlb	0	; () banked
  8607  0019CA  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  8608  0019CC  344D               	rlcf	??_find_volume+3,w,c
  8609  0019CE                     L8:
  8610  0019CE  0100               	movlb	0	; () banked
  8611  0019D0  6F79               	movwf	(find_volume@szbfat+3)& (0+255),b
  8612  0019D2  D000               	goto	l573
  8613  0019D4                     l573:
  8614                           
  8615                           ; BSR set to: 0
  8616                           ;ff.c: 2322: }
  8617                           ;ff.c: 2323: if (fs->fsize < (szbfat + (((UINT)512) - 1)) / ((UINT)512))
  8618  0019D4  0EFF               	movlw	255
  8619  0019D6  0100               	movlb	0	; () banked
  8620  0019D8  2576               	addwf	find_volume@szbfat& (0+255),w,b
  8621  0019DA  6E4A               	movwf	??_find_volume& (0+255),c
  8622  0019DC  0E01               	movlw	1
  8623  0019DE  0100               	movlb	0	; () banked
  8624  0019E0  2177               	addwfc	(find_volume@szbfat+1)& (0+255),w,b
  8625  0019E2  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  8626  0019E4  0E00               	movlw	0
  8627  0019E6  0100               	movlb	0	; () banked
  8628  0019E8  2178               	addwfc	(find_volume@szbfat+2)& (0+255),w,b
  8629  0019EA  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  8630  0019EC  0E00               	movlw	0
  8631  0019EE  0100               	movlb	0	; () banked
  8632  0019F0  2179               	addwfc	(find_volume@szbfat+3)& (0+255),w,b
  8633  0019F2  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  8634  0019F4  0E0A               	movlw	10
  8635  0019F6  D005               	goto	u7700
  8636  0019F8                     u7705:
  8637  0019F8  90D8               	bcf	status,0,c
  8638  0019FA  324D               	rrcf	??_find_volume+3,f,c
  8639  0019FC  324C               	rrcf	??_find_volume+2,f,c
  8640  0019FE  324B               	rrcf	??_find_volume+1,f,c
  8641  001A00  324A               	rrcf	??_find_volume,f,c
  8642  001A02                     u7700:
  8643  001A02  2EE8               	decfsz	wreg,f,c
  8644  001A04  D7F9               	goto	u7705
  8645  001A06  0100               	movlb	0	; () banked
  8646  001A08  EE20 F016          	lfsr	2,22
  8647  001A0C  5198               	movf	find_volume@fs& (0+255),w,b
  8648  001A0E  26D9               	addwf	fsr2l,f,c
  8649  001A10  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8650  001A12  22DA               	addwfc	fsr2h,f,c
  8651  001A14  504A               	movf	??_find_volume,w,c
  8652  001A16  5CDE               	subwf	postinc2,w,c
  8653  001A18  504B               	movf	??_find_volume+1,w,c
  8654  001A1A  58DE               	subwfb	postinc2,w,c
  8655  001A1C  504C               	movf	??_find_volume+2,w,c
  8656  001A1E  58DE               	subwfb	postinc2,w,c
  8657  001A20  504D               	movf	??_find_volume+3,w,c
  8658  001A22  58DE               	subwfb	postinc2,w,c
  8659  001A24  B0D8               	btfsc	status,0,c
  8660  001A26  D002               	goto	l5393
  8661                           
  8662                           ; BSR set to: 0
  8663                           ;ff.c: 2324: return FR_NO_FILESYSTEM;
  8664  001A28  0E0D               	movlw	13
  8665                           
  8666                           ; BSR set to: 0
  8667  001A2A  0012               	return	
  8668  001A2C                     l5393:
  8669                           
  8670                           ; BSR set to: 0
  8671                           ;ff.c: 2328: fs->last_clust = fs->free_clust = 0xFFFFFFFF;
  8672  001A2C  0100               	movlb	0	; () banked
  8673  001A2E  EE20 F00E          	lfsr	2,14
  8674  001A32  5198               	movf	find_volume@fs& (0+255),w,b
  8675  001A34  26D9               	addwf	fsr2l,f,c
  8676  001A36  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8677  001A38  22DA               	addwfc	fsr2h,f,c
  8678  001A3A  0EFF               	movlw	255
  8679  001A3C  6EDE               	movwf	postinc2,c
  8680  001A3E  0EFF               	movlw	255
  8681  001A40  6EDE               	movwf	postinc2,c
  8682  001A42  0EFF               	movlw	255
  8683  001A44  6EDE               	movwf	postinc2,c
  8684  001A46  0EFF               	movlw	255
  8685  001A48  6EDD               	movwf	postdec2,c
  8686  001A4A  52DD               	movf	postdec2,f,c
  8687  001A4C  52DD               	movf	postdec2,f,c
  8688  001A4E  0100               	movlb	0	; () banked
  8689  001A50  EE10 F00A          	lfsr	1,10
  8690  001A54  5198               	movf	find_volume@fs& (0+255),w,b
  8691  001A56  26E1               	addwf	fsr1l,f,c
  8692  001A58  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8693  001A5A  22E2               	addwfc	fsr1h,f,c
  8694  001A5C  CFDE FFE6          	movff	postinc2,postinc1
  8695  001A60  CFDE FFE6          	movff	postinc2,postinc1
  8696  001A64  CFDE FFE6          	movff	postinc2,postinc1
  8697  001A68  CFDE FFE6          	movff	postinc2,postinc1
  8698                           
  8699                           ; BSR set to: 0
  8700                           ;ff.c: 2331: fs->fsi_flag = 0x80;
  8701  001A6C  0100               	movlb	0	; () banked
  8702  001A6E  EE20 F005          	lfsr	2,5
  8703  001A72  5198               	movf	find_volume@fs& (0+255),w,b
  8704  001A74  26D9               	addwf	fsr2l,f,c
  8705  001A76  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8706  001A78  22DA               	addwfc	fsr2h,f,c
  8707  001A7A  0E80               	movlw	128
  8708  001A7C  6EDF               	movwf	indf2,c
  8709                           
  8710                           ; BSR set to: 0
  8711                           ;ff.c: 2333: if (fmt == 3
  8712                           ;ff.c: 2334: && (WORD)(*(WORD*)(BYTE*)(fs->win + 48)) == 1
  8713                           ;ff.c: 2335: && move_window(fs, bsect + 1) == FR_OK)
  8714  001A7E  0E03               	movlw	3
  8715  001A80  0100               	movlb	0	; () banked
  8716  001A82  1997               	xorwf	find_volume@fmt& (0+255),w,b
  8717  001A84  A4D8               	btfss	status,2,c
  8718  001A86  D090               	goto	l5411
  8719                           
  8720                           ; BSR set to: 0
  8721  001A88  0100               	movlb	0	; () banked
  8722  001A8A  EE20 F05E          	lfsr	2,94
  8723  001A8E  5198               	movf	find_volume@fs& (0+255),w,b
  8724  001A90  26D9               	addwf	fsr2l,f,c
  8725  001A92  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8726  001A94  22DA               	addwfc	fsr2h,f,c
  8727  001A96  04DE               	decf	postinc2,w,c
  8728  001A98  10DE               	iorwf	postinc2,w,c
  8729  001A9A  A4D8               	btfss	status,2,c
  8730  001A9C  D085               	goto	l5411
  8731                           
  8732                           ; BSR set to: 0
  8733  001A9E  C098  F030         	movff	find_volume@fs,move_window@fs
  8734  001AA2  C099  F031         	movff	find_volume@fs+1,move_window@fs+1
  8735  001AA6  0E01               	movlw	1
  8736  001AA8  0100               	movlb	0	; () banked
  8737  001AAA  2591               	addwf	find_volume@bsect& (0+255),w,b
  8738  001AAC  6E32               	movwf	move_window@sector,c
  8739  001AAE  0E00               	movlw	0
  8740  001AB0  0100               	movlb	0	; () banked
  8741  001AB2  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  8742  001AB4  6E33               	movwf	move_window@sector+1,c
  8743  001AB6  0E00               	movlw	0
  8744  001AB8  0100               	movlb	0	; () banked
  8745  001ABA  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  8746  001ABC  6E34               	movwf	move_window@sector+2,c
  8747  001ABE  0E00               	movlw	0
  8748  001AC0  0100               	movlb	0	; () banked
  8749  001AC2  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  8750  001AC4  6E35               	movwf	move_window@sector+3,c
  8751  001AC6  ECFB  F02F         	call	_move_window	;wreg free
  8752  001ACA  0900               	iorlw	0
  8753  001ACC  A4D8               	btfss	status,2,c
  8754  001ACE  D06C               	goto	l5411
  8755                           
  8756                           ;ff.c: 2336: {
  8757                           ;ff.c: 2337: fs->fsi_flag = 0;
  8758  001AD0  0100               	movlb	0	; () banked
  8759  001AD2  EE20 F005          	lfsr	2,5
  8760  001AD6  5198               	movf	find_volume@fs& (0+255),w,b
  8761  001AD8  26D9               	addwf	fsr2l,f,c
  8762  001ADA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8763  001ADC  22DA               	addwfc	fsr2h,f,c
  8764  001ADE  0E00               	movlw	0
  8765  001AE0  6EDF               	movwf	indf2,c
  8766                           
  8767                           ;ff.c: 2338: if ((WORD)(*(WORD*)(BYTE*)(fs->win + 510)) == 0xAA55
  8768                           ;ff.c: 2339: && (DWORD)(*(DWORD*)(BYTE*)(fs->win + 0)) == 0x41615252
  8769                           ;ff.c: 2340: && (DWORD)(*(DWORD*)(BYTE*)(fs->win + 484)) == 0x61417272)
  8770  001AE2  0100               	movlb	0	; () banked
  8771  001AE4  EE22 F02C          	lfsr	2,556
  8772  001AE8  5198               	movf	find_volume@fs& (0+255),w,b
  8773  001AEA  26D9               	addwf	fsr2l,f,c
  8774  001AEC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8775  001AEE  22DA               	addwfc	fsr2h,f,c
  8776  001AF0  0E55               	movlw	85
  8777  001AF2  18DE               	xorwf	postinc2,w,c
  8778  001AF4  E159               	bnz	l5411
  8779  001AF6  0EAA               	movlw	170
  8780  001AF8  18DE               	xorwf	postinc2,w,c
  8781  001AFA  A4D8               	btfss	status,2,c
  8782  001AFC  D055               	goto	l5411
  8783                           
  8784                           ; BSR set to: 0
  8785  001AFE  0100               	movlb	0	; () banked
  8786  001B00  EE20 F02E          	lfsr	2,46
  8787  001B04  5198               	movf	find_volume@fs& (0+255),w,b
  8788  001B06  26D9               	addwf	fsr2l,f,c
  8789  001B08  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8790  001B0A  22DA               	addwfc	fsr2h,f,c
  8791  001B0C  0E52               	movlw	82
  8792  001B0E  18DE               	xorwf	postinc2,w,c
  8793  001B10  E14B               	bnz	l5411
  8794  001B12  0E52               	movlw	82
  8795  001B14  18DE               	xorwf	postinc2,w,c
  8796  001B16  E148               	bnz	l5411
  8797  001B18  0E61               	movlw	97
  8798  001B1A  18DE               	xorwf	postinc2,w,c
  8799  001B1C  E145               	bnz	l5411
  8800  001B1E  0E41               	movlw	65
  8801  001B20  18DE               	xorwf	postinc2,w,c
  8802  001B22  A4D8               	btfss	status,2,c
  8803  001B24  D041               	goto	l5411
  8804                           
  8805                           ; BSR set to: 0
  8806  001B26  0100               	movlb	0	; () banked
  8807  001B28  EE22 F012          	lfsr	2,530
  8808  001B2C  5198               	movf	find_volume@fs& (0+255),w,b
  8809  001B2E  26D9               	addwf	fsr2l,f,c
  8810  001B30  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8811  001B32  22DA               	addwfc	fsr2h,f,c
  8812  001B34  0E72               	movlw	114
  8813  001B36  18DE               	xorwf	postinc2,w,c
  8814  001B38  E137               	bnz	l5411
  8815  001B3A  0E72               	movlw	114
  8816  001B3C  18DE               	xorwf	postinc2,w,c
  8817  001B3E  E134               	bnz	l5411
  8818  001B40  0E41               	movlw	65
  8819  001B42  18DE               	xorwf	postinc2,w,c
  8820  001B44  E131               	bnz	l5411
  8821  001B46  0E61               	movlw	97
  8822  001B48  18DE               	xorwf	postinc2,w,c
  8823  001B4A  A4D8               	btfss	status,2,c
  8824  001B4C  D02D               	goto	l5411
  8825                           
  8826                           ; BSR set to: 0
  8827                           ;ff.c: 2341: {
  8828                           ;ff.c: 2343: fs->free_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 488));
  8829  001B4E  0100               	movlb	0	; () banked
  8830  001B50  EE22 F016          	lfsr	2,534
  8831  001B54  5198               	movf	find_volume@fs& (0+255),w,b
  8832  001B56  26D9               	addwf	fsr2l,f,c
  8833  001B58  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8834  001B5A  22DA               	addwfc	fsr2h,f,c
  8835  001B5C  0100               	movlb	0	; () banked
  8836  001B5E  EE10 F00E          	lfsr	1,14
  8837  001B62  5198               	movf	find_volume@fs& (0+255),w,b
  8838  001B64  26E1               	addwf	fsr1l,f,c
  8839  001B66  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8840  001B68  22E2               	addwfc	fsr1h,f,c
  8841  001B6A  CFDE FFE6          	movff	postinc2,postinc1
  8842  001B6E  CFDE FFE6          	movff	postinc2,postinc1
  8843  001B72  CFDE FFE6          	movff	postinc2,postinc1
  8844  001B76  CFDE FFE6          	movff	postinc2,postinc1
  8845                           
  8846                           ;ff.c: 2346: fs->last_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 492));
  8847  001B7A  0100               	movlb	0	; () banked
  8848  001B7C  EE22 F01A          	lfsr	2,538
  8849  001B80  5198               	movf	find_volume@fs& (0+255),w,b
  8850  001B82  26D9               	addwf	fsr2l,f,c
  8851  001B84  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8852  001B86  22DA               	addwfc	fsr2h,f,c
  8853  001B88  0100               	movlb	0	; () banked
  8854  001B8A  EE10 F00A          	lfsr	1,10
  8855  001B8E  5198               	movf	find_volume@fs& (0+255),w,b
  8856  001B90  26E1               	addwf	fsr1l,f,c
  8857  001B92  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8858  001B94  22E2               	addwfc	fsr1h,f,c
  8859  001B96  CFDE FFE6          	movff	postinc2,postinc1
  8860  001B9A  CFDE FFE6          	movff	postinc2,postinc1
  8861  001B9E  CFDE FFE6          	movff	postinc2,postinc1
  8862  001BA2  CFDE FFE6          	movff	postinc2,postinc1
  8863                           
  8864                           ; BSR set to: 0
  8865  001BA6  D000               	goto	l5411
  8866  001BA8                     l5411:
  8867                           
  8868                           ;ff.c: 2348: }
  8869                           ;ff.c: 2349: }
  8870                           ;ff.c: 2352: fs->fs_type = fmt;
  8871  001BA8  C098  FFD9         	movff	find_volume@fs,fsr2l
  8872  001BAC  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  8873  001BB0  C097  FFDF         	movff	find_volume@fmt,indf2
  8874                           
  8875                           ;ff.c: 2353: fs->id = ++Fsid;
  8876  001BB4  0100               	movlb	0	; () banked
  8877  001BB6  4BD2               	infsnz	_Fsid& (0+255),f,b
  8878  001BB8  2BD3               	incf	(_Fsid+1)& (0+255),f,b
  8879  001BBA  0100               	movlb	0	; () banked
  8880  001BBC  EE20 F006          	lfsr	2,6
  8881  001BC0  5198               	movf	find_volume@fs& (0+255),w,b
  8882  001BC2  26D9               	addwf	fsr2l,f,c
  8883  001BC4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8884  001BC6  22DA               	addwfc	fsr2h,f,c
  8885  001BC8  C0D2  FFDE         	movff	_Fsid,postinc2
  8886  001BCC  C0D3  FFDD         	movff	_Fsid+1,postdec2
  8887                           
  8888                           ; BSR set to: 0
  8889                           ;ff.c: 2361: return FR_OK;
  8890  001BD0  0E00               	movlw	0
  8891  001BD2  0012               	return	
  8892                           
  8893                           ; BSR set to: 0
  8894                           
  8895                           ; BSR set to: 0
  8896  001BD4  0012               	return		;funcret
  8897  001BD6                     __end_of_find_volume:
  8898                           	opt stack 0
  8899                           tblptru	equ	0xFF8
  8900                           tblptrh	equ	0xFF7
  8901                           tblptrl	equ	0xFF6
  8902                           tablat	equ	0xFF5
  8903                           prodh	equ	0xFF4
  8904                           prodl	equ	0xFF3
  8905                           indf0	equ	0xFEF
  8906                           postinc0	equ	0xFEE
  8907                           fsr0h	equ	0xFEA
  8908                           fsr0l	equ	0xFE9
  8909                           wreg	equ	0xFE8
  8910                           indf1	equ	0xFE7
  8911                           postinc1	equ	0xFE6
  8912                           postdec1	equ	0xFE5
  8913                           fsr1h	equ	0xFE2
  8914                           fsr1l	equ	0xFE1
  8915                           indf2	equ	0xFDF
  8916                           postinc2	equ	0xFDE
  8917                           postdec2	equ	0xFDD
  8918                           plusw2	equ	0xFDB
  8919                           fsr2h	equ	0xFDA
  8920                           fsr2l	equ	0xFD9
  8921                           status	equ	0xFD8
  8922                           
  8923 ;; *************** function _get_ldnumber *****************
  8924 ;; Defined at:
  8925 ;;		line 2114 in file "../../SD_Card_FatFs/ff.c"
  8926 ;; Parameters:    Size  Location     Type
  8927 ;;  path            2    0[COMRAM] PTR PTR const unsigned c
  8928 ;;		 -> f_open@path(2), f_mount@path(2), f_mount@rp(2), 
  8929 ;; Auto vars:     Size  Location     Type
  8930 ;;  tt              2   12[COMRAM] PTR const unsigned char 
  8931 ;;		 -> STR_2(9), STR_1(1), 
  8932 ;;  i               2   10[COMRAM] unsigned int 
  8933 ;;  vol             2    8[COMRAM] int 
  8934 ;;  tp              2    6[COMRAM] PTR const unsigned char 
  8935 ;;		 -> STR_2(9), STR_1(1), 
  8936 ;; Return value:  Size  Location     Type
  8937 ;;                  2    0[COMRAM] int 
  8938 ;; Registers used:
  8939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8940 ;; Tracked objects:
  8941 ;;		On entry : 0/0
  8942 ;;		On exit  : 0/0
  8943 ;;		Unchanged: 0/0
  8944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8945 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8946 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8947 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8948 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8949 ;;Total ram usage:       14 bytes
  8950 ;; Hardware stack levels used:    1
  8951 ;; This function calls:
  8952 ;;		Nothing
  8953 ;; This function is called by:
  8954 ;;		_find_volume
  8955 ;;		_f_mount
  8956 ;; This function uses a non-reentrant model
  8957 ;;
  8958                           
  8959                           	psect	text17
  8960  005928                     __ptext17:
  8961                           	opt stack 0
  8962  005928                     _get_ldnumber:
  8963                           	opt stack 28
  8964                           
  8965                           ;ff.c: 2118: const TCHAR *tp, *tt;
  8966                           ;ff.c: 2119: UINT i;
  8967                           ;ff.c: 2120: int vol = -1;
  8968                           
  8969                           ; BSR set to: 0
  8970                           ;incstack = 0
  8971  005928  6809               	setf	get_ldnumber@vol,c
  8972  00592A  680A               	setf	get_ldnumber@vol+1,c
  8973                           
  8974                           ;ff.c: 2129: if (*path) {
  8975  00592C  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  8976  005930  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  8977  005934  50DE               	movf	postinc2,w,c
  8978  005936  10DE               	iorwf	postinc2,w,c
  8979  005938  B4D8               	btfsc	status,2,c
  8980  00593A  D07C               	goto	l4973
  8981                           
  8982                           ;ff.c: 2130: for (tt = *path; (UINT)*tt >= (0 ? ' ' : '!') && *tt != ':'; tt++) ;
  8983  00593C  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  8984  005940  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  8985  005944  CFDE F00D          	movff	postinc2,get_ldnumber@tt
  8986  005948  CFDD F00E          	movff	postdec2,get_ldnumber@tt+1
  8987  00594C  D003               	goto	l4941
  8988  00594E                     l4939:
  8989  00594E  4A0D               	infsnz	get_ldnumber@tt,f,c
  8990  005950  2A0E               	incf	get_ldnumber@tt+1,f,c
  8991  005952  D000               	goto	l4941
  8992  005954                     l4941:
  8993  005954  0E00               	movlw	0
  8994  005956  6E06               	movwf	_get_ldnumber$724+1,c
  8995  005958  0E21               	movlw	33
  8996  00595A  D003               	goto	L9
  8997  00595C  0E00               	movlw	0
  8998  00595E  6E06               	movwf	_get_ldnumber$724+1,c
  8999  005960  0E20               	movlw	32
  9000  005962                     L9:
  9001  005962  6E05               	movwf	_get_ldnumber$724,c
  9002  005964  D000               	goto	l4945
  9003  005966                     l4945:
  9004  005966  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  9005  00596A  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  9006  00596E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9007  00596E  6AF8               	clrf	tblptru,c
  9008  005970                     	endif
  9009  005970                     	if	0	;tblptru may be non-zero
  9010  005970                     	endif
  9011  005970  0008               	tblrd		*
  9012  005972  50F5               	movf	tablat,w,c
  9013  005974  6E03               	movwf	??_get_ldnumber& (0+255),c
  9014  005976  6A04               	clrf	(??_get_ldnumber+1)& (0+255),c
  9015  005978  5005               	movf	_get_ldnumber$724,w,c
  9016  00597A  5C03               	subwf	??_get_ldnumber,w,c
  9017  00597C  5006               	movf	_get_ldnumber$724+1,w,c
  9018  00597E  5804               	subwfb	??_get_ldnumber+1,w,c
  9019  005980  A0D8               	btfss	status,0,c
  9020  005982  D00C               	goto	l4949
  9021  005984  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  9022  005988  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  9023  00598C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9024  00598C  6AF8               	clrf	tblptru,c
  9025  00598E                     	endif
  9026  00598E                     	if	0	;tblptru may be non-zero
  9027  00598E                     	endif
  9028  00598E  0008               	tblrd		*
  9029  005990  50F5               	movf	tablat,w,c
  9030  005992  0A3A               	xorlw	58
  9031  005994  B4D8               	btfsc	status,2,c
  9032  005996  D002               	goto	l4949
  9033  005998  D7DA               	goto	l4939
  9034  00599A  D000               	goto	l4949
  9035  00599C                     l4949:
  9036                           
  9037                           ;ff.c: 2131: if (*tt == ':') {
  9038  00599C  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  9039  0059A0  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  9040  0059A4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9041  0059A4  6AF8               	clrf	tblptru,c
  9042  0059A6                     	endif
  9043  0059A6                     	if	0	;tblptru may be non-zero
  9044  0059A6                     	endif
  9045  0059A6  0008               	tblrd		*
  9046  0059A8  50F5               	movf	tablat,w,c
  9047  0059AA  0A3A               	xorlw	58
  9048  0059AC  A4D8               	btfss	status,2,c
  9049  0059AE  D03D               	goto	l4971
  9050                           
  9051                           ;ff.c: 2132: tp = *path;
  9052  0059B0  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  9053  0059B4  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  9054  0059B8  CFDE F007          	movff	postinc2,get_ldnumber@tp
  9055  0059BC  CFDD F008          	movff	postdec2,get_ldnumber@tp+1
  9056                           
  9057                           ;ff.c: 2133: i = *tp++ - '0';
  9058  0059C0  C007  FFF6         	movff	get_ldnumber@tp,tblptrl
  9059  0059C4  C008  FFF7         	movff	get_ldnumber@tp+1,tblptrh
  9060  0059C8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9061  0059C8  6AF8               	clrf	tblptru,c
  9062  0059CA                     	endif
  9063  0059CA                     	if	0	;tblptru may be non-zero
  9064  0059CA                     	endif
  9065  0059CA  0008               	tblrd		*
  9066  0059CC  CFF5 F003          	movff	tablat,??_get_ldnumber
  9067  0059D0  0ED0               	movlw	208
  9068  0059D2  2403               	addwf	??_get_ldnumber,w,c
  9069  0059D4  6E0B               	movwf	get_ldnumber@i,c
  9070  0059D6  6A0C               	clrf	get_ldnumber@i+1,c
  9071  0059D8  0EFF               	movlw	255
  9072  0059DA  220C               	addwfc	get_ldnumber@i+1,f,c
  9073  0059DC  4A07               	infsnz	get_ldnumber@tp,f,c
  9074  0059DE  2A08               	incf	get_ldnumber@tp+1,f,c
  9075                           
  9076                           ;ff.c: 2134: if (i < 10 && tp == tt) {
  9077  0059E0  500C               	movf	get_ldnumber@i+1,w,c
  9078  0059E2  E11E               	bnz	l4967
  9079  0059E4  0E0A               	movlw	10
  9080  0059E6  5C0B               	subwf	get_ldnumber@i,w,c
  9081  0059E8  B0D8               	btfsc	status,0,c
  9082  0059EA  D01A               	goto	l4967
  9083  0059EC  500D               	movf	get_ldnumber@tt,w,c
  9084  0059EE  1807               	xorwf	get_ldnumber@tp,w,c
  9085  0059F0  E117               	bnz	l4967
  9086  0059F2  500E               	movf	get_ldnumber@tt+1,w,c
  9087  0059F4  1808               	xorwf	get_ldnumber@tp+1,w,c
  9088  0059F6  A4D8               	btfss	status,2,c
  9089  0059F8  D013               	goto	l4967
  9090                           
  9091                           ;ff.c: 2135: if (i < 1) {
  9092  0059FA  500B               	movf	get_ldnumber@i,w,c
  9093  0059FC  100C               	iorwf	get_ldnumber@i+1,w,c
  9094  0059FE  A4D8               	btfss	status,2,c
  9095  005A00  D00F               	goto	l4967
  9096                           
  9097                           ;ff.c: 2136: vol = (int)i;
  9098  005A02  C00B  F009         	movff	get_ldnumber@i,get_ldnumber@vol
  9099  005A06  C00C  F00A         	movff	get_ldnumber@i+1,get_ldnumber@vol+1
  9100                           
  9101                           ;ff.c: 2137: *path = ++tt;
  9102  005A0A  4A0D               	infsnz	get_ldnumber@tt,f,c
  9103  005A0C  2A0E               	incf	get_ldnumber@tt+1,f,c
  9104  005A0E  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  9105  005A12  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  9106  005A16  C00D  FFDE         	movff	get_ldnumber@tt,postinc2
  9107  005A1A  C00E  FFDD         	movff	get_ldnumber@tt+1,postdec2
  9108  005A1E  D000               	goto	l4967
  9109  005A20                     l4967:
  9110                           
  9111                           ;ff.c: 2138: }
  9112                           ;ff.c: 2139: }
  9113                           ;ff.c: 2156: return vol;
  9114  005A20  C009  F001         	movff	get_ldnumber@vol,?_get_ldnumber
  9115  005A24  C00A  F002         	movff	get_ldnumber@vol+1,?_get_ldnumber+1
  9116  005A28  0012               	return	
  9117  005A2A                     l4971:
  9118                           
  9119                           ;ff.c: 2157: }
  9120                           ;ff.c: 2161: vol = 0;
  9121  005A2A  0E00               	movlw	0
  9122  005A2C  6E0A               	movwf	get_ldnumber@vol+1,c
  9123  005A2E  0E00               	movlw	0
  9124  005A30  6E09               	movwf	get_ldnumber@vol,c
  9125  005A32  D000               	goto	l4973
  9126  005A34                     l4973:
  9127                           
  9128                           ;ff.c: 2163: }
  9129                           ;ff.c: 2164: return vol;
  9130  005A34  C009  F001         	movff	get_ldnumber@vol,?_get_ldnumber
  9131  005A38  C00A  F002         	movff	get_ldnumber@vol+1,?_get_ldnumber+1
  9132  005A3C  0012               	return	
  9133  005A3E  0012               	return		;funcret
  9134  005A40                     __end_of_get_ldnumber:
  9135                           	opt stack 0
  9136                           tblptru	equ	0xFF8
  9137                           tblptrh	equ	0xFF7
  9138                           tblptrl	equ	0xFF6
  9139                           tablat	equ	0xFF5
  9140                           prodh	equ	0xFF4
  9141                           prodl	equ	0xFF3
  9142                           indf0	equ	0xFEF
  9143                           postinc0	equ	0xFEE
  9144                           fsr0h	equ	0xFEA
  9145                           fsr0l	equ	0xFE9
  9146                           wreg	equ	0xFE8
  9147                           indf1	equ	0xFE7
  9148                           postinc1	equ	0xFE6
  9149                           postdec1	equ	0xFE5
  9150                           fsr1h	equ	0xFE2
  9151                           fsr1l	equ	0xFE1
  9152                           indf2	equ	0xFDF
  9153                           postinc2	equ	0xFDE
  9154                           postdec2	equ	0xFDD
  9155                           plusw2	equ	0xFDB
  9156                           fsr2h	equ	0xFDA
  9157                           fsr2l	equ	0xFD9
  9158                           status	equ	0xFD8
  9159                           
  9160 ;; *************** function _disk_initialize *****************
  9161 ;; Defined at:
  9162 ;;		line 298 in file "../../SD_Card_FatFs/diskio.c"
  9163 ;; Parameters:    Size  Location     Type
  9164 ;;  pdrv            1    wreg     unsigned char 
  9165 ;; Auto vars:     Size  Location     Type
  9166 ;;  pdrv            1   17[COMRAM] unsigned char 
  9167 ;;  ocr             4   18[COMRAM] unsigned char [4]
  9168 ;;  tmr             2   26[COMRAM] unsigned int 
  9169 ;;  n               1   28[COMRAM] unsigned char 
  9170 ;;  ty              1   25[COMRAM] unsigned char 
  9171 ;;  cmd             1   24[COMRAM] unsigned char 
  9172 ;; Return value:  Size  Location     Type
  9173 ;;                  1    wreg      unsigned char 
  9174 ;; Registers used:
  9175 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9176 ;; Tracked objects:
  9177 ;;		On entry : 0/0
  9178 ;;		On exit  : 0/0
  9179 ;;		Unchanged: 0/0
  9180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9182 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9183 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9184 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9185 ;;Total ram usage:       13 bytes
  9186 ;; Hardware stack levels used:    1
  9187 ;; Hardware stack levels required when called:    5
  9188 ;; This function calls:
  9189 ;;		_SPI1_Exchange8bit
  9190 ;;		_SPI1_Initialize
  9191 ;;		_SPI1_Open
  9192 ;;		_deselect
  9193 ;;		_send_cmd
  9194 ;; This function is called by:
  9195 ;;		_find_volume
  9196 ;; This function uses a non-reentrant model
  9197 ;;
  9198                           
  9199                           	psect	text18
  9200  004BC4                     __ptext18:
  9201                           	opt stack 0
  9202  004BC4                     _disk_initialize:
  9203                           	opt stack 23
  9204                           
  9205                           ;incstack = 0
  9206                           ;disk_initialize@pdrv stored from wreg
  9207  004BC4  6E12               	movwf	disk_initialize@pdrv,c
  9208                           
  9209                           ;diskio.c: 302: BYTE n, cmd, ty, ocr[4];
  9210                           ;diskio.c: 303: UINT tmr;
  9211                           ;diskio.c: 306: if (pdrv) return 0x01;
  9212  004BC6  5012               	movf	disk_initialize@pdrv,w,c
  9213  004BC8  B4D8               	btfsc	status,2,c
  9214  004BCA  D002               	goto	l96
  9215  004BCC  0E01               	movlw	1
  9216  004BCE  0012               	return	
  9217  004BD0                     l96:
  9218                           
  9219                           ;diskio.c: 308: if (Stat & 0x02) return Stat;
  9220  004BD0  0100               	movlb	0	; () banked
  9221  004BD2  A3F7               	btfss	_Stat& (0+255),1,b
  9222  004BD4  D003               	goto	l4569
  9223                           
  9224                           ; BSR set to: 0
  9225  004BD6  0100               	movlb	0	; () banked
  9226  004BD8  51F7               	movf	_Stat& (0+255),w,b
  9227                           
  9228                           ; BSR set to: 0
  9229  004BDA  0012               	return	
  9230  004BDC                     l4569:
  9231                           
  9232                           ; BSR set to: 0
  9233                           ;diskio.c: 310: SPI1_Initialize();
  9234  004BDC  EC90  F033         	call	_SPI1_Initialize	;wreg free
  9235                           
  9236                           ;diskio.c: 311: for (n = 10; n; n--) SPI1_Exchange8bit(0xFF);
  9237  004BE0  0E0A               	movlw	10
  9238  004BE2  6E1D               	movwf	disk_initialize@n,c
  9239  004BE4  D005               	goto	l4577
  9240  004BE6                     l4573:
  9241  004BE6  0EFF               	movlw	255
  9242  004BE8  EC79  F033         	call	_SPI1_Exchange8bit
  9243  004BEC  061D               	decf	disk_initialize@n,f,c
  9244  004BEE  D000               	goto	l4577
  9245  004BF0                     l4577:
  9246  004BF0  501D               	movf	disk_initialize@n,w,c
  9247  004BF2  A4D8               	btfss	status,2,c
  9248  004BF4  D7F8               	goto	l4573
  9249                           
  9250                           ;diskio.c: 313: ty = 0;
  9251  004BF6  0E00               	movlw	0
  9252  004BF8  6E1A               	movwf	disk_initialize@ty,c
  9253                           
  9254                           ;diskio.c: 314: if (send_cmd((0), 0) == 1) {
  9255  004BFA  0E00               	movlw	0
  9256  004BFC  6E0B               	movwf	send_cmd@arg,c
  9257  004BFE  0E00               	movlw	0
  9258  004C00  6E0C               	movwf	send_cmd@arg+1,c
  9259  004C02  0E00               	movlw	0
  9260  004C04  6E0D               	movwf	send_cmd@arg+2,c
  9261  004C06  0E00               	movlw	0
  9262  004C08  6E0E               	movwf	send_cmd@arg+3,c
  9263  004C0A  0E00               	movlw	0
  9264  004C0C  EC7D  F032         	call	_send_cmd
  9265  004C10  06E8               	decf	wreg,f,c
  9266  004C12  A4D8               	btfss	status,2,c
  9267  004C14  D0D1               	goto	l4653
  9268                           
  9269                           ;diskio.c: 315: if (send_cmd((8), 0x1AA) == 1) {
  9270  004C16  0EAA               	movlw	170
  9271  004C18  6E0B               	movwf	send_cmd@arg,c
  9272  004C1A  0E01               	movlw	1
  9273  004C1C  6E0C               	movwf	send_cmd@arg+1,c
  9274  004C1E  0E00               	movlw	0
  9275  004C20  6E0D               	movwf	send_cmd@arg+2,c
  9276  004C22  0E00               	movlw	0
  9277  004C24  6E0E               	movwf	send_cmd@arg+3,c
  9278  004C26  0E08               	movlw	8
  9279  004C28  EC7D  F032         	call	_send_cmd
  9280  004C2C  06E8               	decf	wreg,f,c
  9281  004C2E  A4D8               	btfss	status,2,c
  9282  004C30  D073               	goto	l4633
  9283                           
  9284                           ;diskio.c: 316: for (n = 0; n < 4; n++) ocr[n] = SPI1_Exchange8bit(0xFF);
  9285  004C32  0E00               	movlw	0
  9286  004C34  6E1D               	movwf	disk_initialize@n,c
  9287  004C36                     l4587:
  9288  004C36  0E03               	movlw	3
  9289  004C38  641D               	cpfsgt	disk_initialize@n,c
  9290  004C3A  D001               	goto	l4591
  9291  004C3C  D00E               	goto	l4597
  9292  004C3E                     l4591:
  9293  004C3E  501D               	movf	disk_initialize@n,w,c
  9294  004C40  0D01               	mullw	1
  9295  004C42  0E13               	movlw	low disk_initialize@ocr
  9296  004C44  24F3               	addwf	prodl,w,c
  9297  004C46  6ED9               	movwf	fsr2l,c
  9298  004C48  0E00               	movlw	high disk_initialize@ocr
  9299  004C4A  20F4               	addwfc	prodh,w,c
  9300  004C4C  6EDA               	movwf	fsr2h,c
  9301  004C4E  0EFF               	movlw	255
  9302  004C50  EC79  F033         	call	_SPI1_Exchange8bit
  9303  004C54  6EDF               	movwf	indf2,c
  9304  004C56  2A1D               	incf	disk_initialize@n,f,c
  9305  004C58  D7EE               	goto	l4587
  9306  004C5A                     l4597:
  9307                           
  9308                           ;diskio.c: 317: if (ocr[2] == 0x01 && ocr[3] == 0xAA) {
  9309  004C5A  0415               	decf	disk_initialize@ocr+2,w,c
  9310  004C5C  A4D8               	btfss	status,2,c
  9311  004C5E  D0AC               	goto	l4653
  9312  004C60  0EAA               	movlw	170
  9313  004C62  1816               	xorwf	disk_initialize@ocr+3,w,c
  9314  004C64  A4D8               	btfss	status,2,c
  9315  004C66  D0A8               	goto	l4653
  9316                           
  9317                           ;diskio.c: 318: for (tmr = 1000; tmr; tmr--) {
  9318  004C68  0E03               	movlw	3
  9319  004C6A  6E1C               	movwf	disk_initialize@tmr+1,c
  9320  004C6C  0EE8               	movlw	232
  9321  004C6E  6E1B               	movwf	disk_initialize@tmr,c
  9322  004C70  D01B               	goto	l107
  9323  004C72                     l4603:
  9324                           
  9325                           ;diskio.c: 319: if (send_cmd((0x80+41), 1UL << 30) == 0) break;
  9326  004C72  0E00               	movlw	0
  9327  004C74  6E0B               	movwf	send_cmd@arg,c
  9328  004C76  0E00               	movlw	0
  9329  004C78  6E0C               	movwf	send_cmd@arg+1,c
  9330  004C7A  0E00               	movlw	0
  9331  004C7C  6E0D               	movwf	send_cmd@arg+2,c
  9332  004C7E  0E40               	movlw	64
  9333  004C80  6E0E               	movwf	send_cmd@arg+3,c
  9334  004C82  0EA9               	movlw	169
  9335  004C84  EC7D  F032         	call	_send_cmd
  9336  004C88  0900               	iorlw	0
  9337  004C8A  B4D8               	btfsc	status,2,c
  9338  004C8C  D011               	goto	l4611
  9339  004C8E  D001               	goto	l4607
  9340  004C90  D00F               	goto	l4611
  9341  004C92                     l4607:
  9342                           
  9343                           ;diskio.c: 320: _delay((unsigned long)((1)*(16000000/4000.0)));
  9344  004C92  0E06               	movlw	6
  9345  004C94  6E11               	movwf	??_disk_initialize& (0+255),c
  9346  004C96  0E30               	movlw	48
  9347  004C98                     u8937:
  9348  004C98  2EE8               	decfsz	wreg,f,c
  9349  004C9A  D7FE               	goto	u8937
  9350  004C9C  2E11               	decfsz	??_disk_initialize& (0+255),f,c
  9351  004C9E  D7FC               	goto	u8937
  9352  004CA0  D000               	nop2	
  9353  004CA2  061B               	decf	disk_initialize@tmr,f,c
  9354  004CA4  A0D8               	btfss	status,0,c
  9355  004CA6  061C               	decf	disk_initialize@tmr+1,f,c
  9356  004CA8                     l107:
  9357  004CA8  501B               	movf	disk_initialize@tmr,w,c
  9358  004CAA  101C               	iorwf	disk_initialize@tmr+1,w,c
  9359  004CAC  A4D8               	btfss	status,2,c
  9360  004CAE  D7E1               	goto	l4603
  9361  004CB0                     l4611:
  9362                           
  9363                           ;diskio.c: 321: }
  9364                           ;diskio.c: 322: if (tmr && send_cmd((58), 0) == 0) {
  9365  004CB0  501B               	movf	disk_initialize@tmr,w,c
  9366  004CB2  101C               	iorwf	disk_initialize@tmr+1,w,c
  9367  004CB4  B4D8               	btfsc	status,2,c
  9368  004CB6  D080               	goto	l4653
  9369  004CB8  0E00               	movlw	0
  9370  004CBA  6E0B               	movwf	send_cmd@arg,c
  9371  004CBC  0E00               	movlw	0
  9372  004CBE  6E0C               	movwf	send_cmd@arg+1,c
  9373  004CC0  0E00               	movlw	0
  9374  004CC2  6E0D               	movwf	send_cmd@arg+2,c
  9375  004CC4  0E00               	movlw	0
  9376  004CC6  6E0E               	movwf	send_cmd@arg+3,c
  9377  004CC8  0E3A               	movlw	58
  9378  004CCA  EC7D  F032         	call	_send_cmd
  9379  004CCE  0900               	iorlw	0
  9380  004CD0  A4D8               	btfss	status,2,c
  9381  004CD2  D072               	goto	l4653
  9382                           
  9383                           ;diskio.c: 323: for (n = 0; n < 4; n++) ocr[n] = SPI1_Exchange8bit(0xFF);
  9384  004CD4  0E00               	movlw	0
  9385  004CD6  6E1D               	movwf	disk_initialize@n,c
  9386  004CD8  D00E               	goto	l4625
  9387  004CDA  D010               	goto	l113
  9388  004CDC                     l4621:
  9389  004CDC  501D               	movf	disk_initialize@n,w,c
  9390  004CDE  0D01               	mullw	1
  9391  004CE0  0E13               	movlw	low disk_initialize@ocr
  9392  004CE2  24F3               	addwf	prodl,w,c
  9393  004CE4  6ED9               	movwf	fsr2l,c
  9394  004CE6  0E00               	movlw	high disk_initialize@ocr
  9395  004CE8  20F4               	addwfc	prodh,w,c
  9396  004CEA  6EDA               	movwf	fsr2h,c
  9397  004CEC  0EFF               	movlw	255
  9398  004CEE  EC79  F033         	call	_SPI1_Exchange8bit
  9399  004CF2  6EDF               	movwf	indf2,c
  9400  004CF4  2A1D               	incf	disk_initialize@n,f,c
  9401  004CF6                     l4625:
  9402  004CF6  0E03               	movlw	3
  9403  004CF8  641D               	cpfsgt	disk_initialize@n,c
  9404  004CFA  D7F0               	goto	l4621
  9405  004CFC                     l113:
  9406                           
  9407                           ;diskio.c: 324: ty = (ocr[0] & 0x40) ? 0x04 | 0x08 : 0x04;
  9408  004CFC  BC13               	btfsc	disk_initialize@ocr,6,c
  9409  004CFE  D004               	goto	l4629
  9410  004D00  0E00               	movlw	0
  9411  004D02  6E18               	movwf	_disk_initialize$209+1,c
  9412  004D04  0E04               	movlw	4
  9413  004D06  D003               	goto	L10
  9414  004D08                     l4629:
  9415  004D08  0E00               	movlw	0
  9416  004D0A  6E18               	movwf	_disk_initialize$209+1,c
  9417  004D0C  0E0C               	movlw	12
  9418  004D0E                     L10:
  9419  004D0E  6E17               	movwf	_disk_initialize$209,c
  9420  004D10  D000               	goto	l4631
  9421  004D12                     l4631:
  9422  004D12  C017  F01A         	movff	_disk_initialize$209,disk_initialize@ty
  9423                           
  9424                           ;diskio.c: 325: }
  9425                           ;diskio.c: 326: }
  9426                           ;diskio.c: 327: } else {
  9427  004D16  D050               	goto	l4653
  9428  004D18                     l4633:
  9429                           
  9430                           ;diskio.c: 328: if (send_cmd((0x80+41), 0) <= 1) {
  9431  004D18  0E00               	movlw	0
  9432  004D1A  6E0B               	movwf	send_cmd@arg,c
  9433  004D1C  0E00               	movlw	0
  9434  004D1E  6E0C               	movwf	send_cmd@arg+1,c
  9435  004D20  0E00               	movlw	0
  9436  004D22  6E0D               	movwf	send_cmd@arg+2,c
  9437  004D24  0E00               	movlw	0
  9438  004D26  6E0E               	movwf	send_cmd@arg+3,c
  9439  004D28  0EA9               	movlw	169
  9440  004D2A  EC7D  F032         	call	_send_cmd
  9441  004D2E  6E11               	movwf	??_disk_initialize& (0+255),c
  9442  004D30  0E02               	movlw	2
  9443  004D32  6011               	cpfslt	??_disk_initialize,c
  9444  004D34  D004               	goto	l4637
  9445                           
  9446                           ;diskio.c: 329: ty = 0x02; cmd = (0x80+41);
  9447  004D36  0E02               	movlw	2
  9448  004D38  6E1A               	movwf	disk_initialize@ty,c
  9449  004D3A  0EA9               	movlw	169
  9450  004D3C  D003               	goto	L11
  9451  004D3E                     l4637:
  9452                           
  9453                           ;diskio.c: 331: ty = 0x01; cmd = (1);
  9454  004D3E  0E01               	movlw	1
  9455  004D40  6E1A               	movwf	disk_initialize@ty,c
  9456  004D42  0E01               	movlw	1
  9457  004D44                     L11:
  9458  004D44  6E19               	movwf	disk_initialize@cmd,c
  9459                           
  9460                           ;diskio.c: 332: }
  9461                           ;diskio.c: 333: for (tmr = 1000; tmr; tmr--) {
  9462  004D46  0E03               	movlw	3
  9463  004D48  6E1C               	movwf	disk_initialize@tmr+1,c
  9464  004D4A  0EE8               	movlw	232
  9465  004D4C  6E1B               	movwf	disk_initialize@tmr,c
  9466  004D4E  D01B               	goto	l121
  9467  004D50                     l4639:
  9468                           
  9469                           ;diskio.c: 334: if (send_cmd(cmd, 0) == 0) break;
  9470  004D50  0E00               	movlw	0
  9471  004D52  6E0B               	movwf	send_cmd@arg,c
  9472  004D54  0E00               	movlw	0
  9473  004D56  6E0C               	movwf	send_cmd@arg+1,c
  9474  004D58  0E00               	movlw	0
  9475  004D5A  6E0D               	movwf	send_cmd@arg+2,c
  9476  004D5C  0E00               	movlw	0
  9477  004D5E  6E0E               	movwf	send_cmd@arg+3,c
  9478  004D60  5019               	movf	disk_initialize@cmd,w,c
  9479  004D62  EC7D  F032         	call	_send_cmd
  9480  004D66  0900               	iorlw	0
  9481  004D68  B4D8               	btfsc	status,2,c
  9482  004D6A  D011               	goto	l4647
  9483  004D6C  D001               	goto	l4643
  9484  004D6E  D00F               	goto	l4647
  9485  004D70                     l4643:
  9486                           
  9487                           ;diskio.c: 335: _delay((unsigned long)((1)*(16000000/4000.0)));
  9488  004D70  0E06               	movlw	6
  9489  004D72  6E11               	movwf	??_disk_initialize& (0+255),c
  9490  004D74  0E30               	movlw	48
  9491  004D76                     u8947:
  9492  004D76  2EE8               	decfsz	wreg,f,c
  9493  004D78  D7FE               	goto	u8947
  9494  004D7A  2E11               	decfsz	??_disk_initialize& (0+255),f,c
  9495  004D7C  D7FC               	goto	u8947
  9496  004D7E  D000               	nop2	
  9497  004D80  061B               	decf	disk_initialize@tmr,f,c
  9498  004D82  A0D8               	btfss	status,0,c
  9499  004D84  061C               	decf	disk_initialize@tmr+1,f,c
  9500  004D86                     l121:
  9501  004D86  501B               	movf	disk_initialize@tmr,w,c
  9502  004D88  101C               	iorwf	disk_initialize@tmr+1,w,c
  9503  004D8A  A4D8               	btfss	status,2,c
  9504  004D8C  D7E1               	goto	l4639
  9505  004D8E                     l4647:
  9506                           
  9507                           ;diskio.c: 336: }
  9508                           ;diskio.c: 337: if (!tmr || send_cmd((16), 512) != 0)
  9509  004D8E  501B               	movf	disk_initialize@tmr,w,c
  9510  004D90  101C               	iorwf	disk_initialize@tmr+1,w,c
  9511  004D92  B4D8               	btfsc	status,2,c
  9512  004D94  D00E               	goto	l4651
  9513  004D96  0E00               	movlw	0
  9514  004D98  6E0B               	movwf	send_cmd@arg,c
  9515  004D9A  0E02               	movlw	2
  9516  004D9C  6E0C               	movwf	send_cmd@arg+1,c
  9517  004D9E  0E00               	movlw	0
  9518  004DA0  6E0D               	movwf	send_cmd@arg+2,c
  9519  004DA2  0E00               	movlw	0
  9520  004DA4  6E0E               	movwf	send_cmd@arg+3,c
  9521  004DA6  0E10               	movlw	16
  9522  004DA8  EC7D  F032         	call	_send_cmd
  9523  004DAC  0900               	iorlw	0
  9524  004DAE  B4D8               	btfsc	status,2,c
  9525  004DB0  D003               	goto	l4653
  9526  004DB2                     l4651:
  9527                           
  9528                           ;diskio.c: 338: ty = 0;
  9529  004DB2  0E00               	movlw	0
  9530  004DB4  6E1A               	movwf	disk_initialize@ty,c
  9531  004DB6  D000               	goto	l4653
  9532  004DB8                     l4653:
  9533                           
  9534                           ;diskio.c: 339: }
  9535                           ;diskio.c: 340: }
  9536                           ;diskio.c: 341: CardType = ty;
  9537  004DB8  C01A  F0D6         	movff	disk_initialize@ty,_CardType
  9538                           
  9539                           ;diskio.c: 342: deselect();
  9540  004DBC  EC9E  F033         	call	_deselect	;wreg free
  9541                           
  9542                           ;diskio.c: 344: if (ty) {
  9543  004DC0  501A               	movf	disk_initialize@ty,w,c
  9544  004DC2  B4D8               	btfsc	status,2,c
  9545  004DC4  D005               	goto	l4663
  9546                           
  9547                           ;diskio.c: 345: Stat &= ~0x01;
  9548  004DC6  0100               	movlb	0	; () banked
  9549  004DC8  91F7               	bcf	_Stat& (0+255),0,b
  9550                           
  9551                           ; BSR set to: 0
  9552                           ;diskio.c: 346: SPI1_Open();
  9553  004DCA  EC82  F033         	call	_SPI1_Open	;wreg free
  9554  004DCE  D000               	goto	l4663
  9555  004DD0                     l4663:
  9556                           
  9557                           ;diskio.c: 347: }
  9558                           ;diskio.c: 349: return Stat;
  9559  004DD0  0100               	movlb	0	; () banked
  9560  004DD2  51F7               	movf	_Stat& (0+255),w,b
  9561  004DD4  0012               	return	
  9562                           
  9563                           ; BSR set to: 0
  9564  004DD6  0012               	return		;funcret
  9565  004DD8                     __end_of_disk_initialize:
  9566                           	opt stack 0
  9567                           tblptru	equ	0xFF8
  9568                           tblptrh	equ	0xFF7
  9569                           tblptrl	equ	0xFF6
  9570                           tablat	equ	0xFF5
  9571                           prodh	equ	0xFF4
  9572                           prodl	equ	0xFF3
  9573                           indf0	equ	0xFEF
  9574                           postinc0	equ	0xFEE
  9575                           fsr0h	equ	0xFEA
  9576                           fsr0l	equ	0xFE9
  9577                           wreg	equ	0xFE8
  9578                           indf1	equ	0xFE7
  9579                           postinc1	equ	0xFE6
  9580                           postdec1	equ	0xFE5
  9581                           fsr1h	equ	0xFE2
  9582                           fsr1l	equ	0xFE1
  9583                           indf2	equ	0xFDF
  9584                           postinc2	equ	0xFDE
  9585                           postdec2	equ	0xFDD
  9586                           plusw2	equ	0xFDB
  9587                           fsr2h	equ	0xFDA
  9588                           fsr2l	equ	0xFD9
  9589                           status	equ	0xFD8
  9590                           
  9591 ;; *************** function _SPI1_Open *****************
  9592 ;; Defined at:
  9593 ;;		line 77 in file "mcc_generated_files/spi1.c"
  9594 ;; Parameters:    Size  Location     Type
  9595 ;;		None
  9596 ;; Auto vars:     Size  Location     Type
  9597 ;;		None
  9598 ;; Return value:  Size  Location     Type
  9599 ;;		None               void
  9600 ;; Registers used:
  9601 ;;		wreg, status,2
  9602 ;; Tracked objects:
  9603 ;;		On entry : 0/0
  9604 ;;		On exit  : 0/0
  9605 ;;		Unchanged: 0/0
  9606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9610 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9611 ;;Total ram usage:        0 bytes
  9612 ;; Hardware stack levels used:    1
  9613 ;; This function calls:
  9614 ;;		Nothing
  9615 ;; This function is called by:
  9616 ;;		_disk_initialize
  9617 ;; This function uses a non-reentrant model
  9618 ;;
  9619                           
  9620                           	psect	text19
  9621  006704                     __ptext19:
  9622                           	opt stack 0
  9623  006704                     _SPI1_Open:
  9624                           	opt stack 27
  9625                           
  9626                           ;spi1.c: 81: SSP1STAT = 0x40;
  9627                           
  9628                           ;incstack = 0
  9629  006704  0E40               	movlw	64
  9630  006706  6EC7               	movwf	4039,c	;volatile
  9631                           
  9632                           ;spi1.c: 84: SSP1CON1 = 0x20;
  9633  006708  0E20               	movlw	32
  9634  00670A  6EC6               	movwf	4038,c	;volatile
  9635                           
  9636                           ;spi1.c: 87: SSP1ADD = 0x00;
  9637  00670C  0E00               	movlw	0
  9638  00670E  6EC8               	movwf	4040,c	;volatile
  9639  006710  0012               	return		;funcret
  9640  006712                     __end_of_SPI1_Open:
  9641                           	opt stack 0
  9642                           tblptru	equ	0xFF8
  9643                           tblptrh	equ	0xFF7
  9644                           tblptrl	equ	0xFF6
  9645                           tablat	equ	0xFF5
  9646                           prodh	equ	0xFF4
  9647                           prodl	equ	0xFF3
  9648                           indf0	equ	0xFEF
  9649                           postinc0	equ	0xFEE
  9650                           fsr0h	equ	0xFEA
  9651                           fsr0l	equ	0xFE9
  9652                           wreg	equ	0xFE8
  9653                           indf1	equ	0xFE7
  9654                           postinc1	equ	0xFE6
  9655                           postdec1	equ	0xFE5
  9656                           fsr1h	equ	0xFE2
  9657                           fsr1l	equ	0xFE1
  9658                           indf2	equ	0xFDF
  9659                           postinc2	equ	0xFDE
  9660                           postdec2	equ	0xFDD
  9661                           plusw2	equ	0xFDB
  9662                           fsr2h	equ	0xFDA
  9663                           fsr2l	equ	0xFD9
  9664                           status	equ	0xFD8
  9665                           
  9666 ;; *************** function _check_fs *****************
  9667 ;; Defined at:
  9668 ;;		line 2175 in file "../../SD_Card_FatFs/ff.c"
  9669 ;; Parameters:    Size  Location     Type
  9670 ;;  fs              2   58[COMRAM] PTR struct .
  9671 ;;		 -> NULL(0), FatFs(558), 
  9672 ;;  sect            4   60[COMRAM] unsigned long 
  9673 ;; Auto vars:     Size  Location     Type
  9674 ;;		None
  9675 ;; Return value:  Size  Location     Type
  9676 ;;                  1    wreg      unsigned char 
  9677 ;; Registers used:
  9678 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9679 ;; Tracked objects:
  9680 ;;		On entry : 0/0
  9681 ;;		On exit  : 0/0
  9682 ;;		Unchanged: 0/0
  9683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9684 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9686 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9687 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9688 ;;Total ram usage:       10 bytes
  9689 ;; Hardware stack levels used:    1
  9690 ;; Hardware stack levels required when called:    8
  9691 ;; This function calls:
  9692 ;;		_move_window
  9693 ;; This function is called by:
  9694 ;;		_find_volume
  9695 ;; This function uses a non-reentrant model
  9696 ;;
  9697                           
  9698                           	psect	text20
  9699  005A40                     __ptext20:
  9700                           	opt stack 0
  9701  005A40                     _check_fs:
  9702                           	opt stack 20
  9703                           
  9704                           ;ff.c: 2180: fs->wflag = 0; fs->winsect = 0xFFFFFFFF;
  9705                           
  9706                           ;incstack = 0
  9707  005A40  EE20 F004          	lfsr	2,4
  9708  005A44  503B               	movf	check_fs@fs,w,c
  9709  005A46  26D9               	addwf	fsr2l,f,c
  9710  005A48  503C               	movf	check_fs@fs+1,w,c
  9711  005A4A  22DA               	addwfc	fsr2h,f,c
  9712  005A4C  0E00               	movlw	0
  9713  005A4E  6EDF               	movwf	indf2,c
  9714  005A50  EE20 F02A          	lfsr	2,42
  9715  005A54  503B               	movf	check_fs@fs,w,c
  9716  005A56  26D9               	addwf	fsr2l,f,c
  9717  005A58  503C               	movf	check_fs@fs+1,w,c
  9718  005A5A  22DA               	addwfc	fsr2h,f,c
  9719  005A5C  0EFF               	movlw	255
  9720  005A5E  6EDE               	movwf	postinc2,c
  9721  005A60  0EFF               	movlw	255
  9722  005A62  6EDE               	movwf	postinc2,c
  9723  005A64  0EFF               	movlw	255
  9724  005A66  6EDE               	movwf	postinc2,c
  9725  005A68  0EFF               	movlw	255
  9726  005A6A  6EDD               	movwf	postdec2,c
  9727                           
  9728                           ;ff.c: 2181: if (move_window(fs, sect) != FR_OK)
  9729  005A6C  C03B  F030         	movff	check_fs@fs,move_window@fs
  9730  005A70  C03C  F031         	movff	check_fs@fs+1,move_window@fs+1
  9731  005A74  C03D  F032         	movff	check_fs@sect,move_window@sector
  9732  005A78  C03E  F033         	movff	check_fs@sect+1,move_window@sector+1
  9733  005A7C  C03F  F034         	movff	check_fs@sect+2,move_window@sector+2
  9734  005A80  C040  F035         	movff	check_fs@sect+3,move_window@sector+3
  9735  005A84  ECFB  F02F         	call	_move_window	;wreg free
  9736  005A88  0900               	iorlw	0
  9737  005A8A  B4D8               	btfsc	status,2,c
  9738  005A8C  D002               	goto	l4985
  9739                           
  9740                           ;ff.c: 2182: return 3;
  9741  005A8E  0E03               	movlw	3
  9742  005A90  0012               	return	
  9743  005A92                     l4985:
  9744                           
  9745                           ;ff.c: 2184: if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
  9746  005A92  EE22 F02C          	lfsr	2,556
  9747  005A96  503B               	movf	check_fs@fs,w,c
  9748  005A98  26D9               	addwf	fsr2l,f,c
  9749  005A9A  503C               	movf	check_fs@fs+1,w,c
  9750  005A9C  22DA               	addwfc	fsr2h,f,c
  9751  005A9E  0E55               	movlw	85
  9752  005AA0  18DE               	xorwf	postinc2,w,c
  9753  005AA2  E104               	bnz	u7000
  9754  005AA4  0EAA               	movlw	170
  9755  005AA6  18DE               	xorwf	postinc2,w,c
  9756  005AA8  B4D8               	btfsc	status,2,c
  9757  005AAA  D002               	goto	l4991
  9758  005AAC                     u7000:
  9759                           
  9760                           ;ff.c: 2185: return 2;
  9761  005AAC  0E02               	movlw	2
  9762  005AAE  0012               	return	
  9763  005AB0                     l4991:
  9764                           
  9765                           ;ff.c: 2187: if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[54])) & 0xFFFFFF) == 0x544146)
  9766  005AB0  EE20 F064          	lfsr	2,100
  9767  005AB4  503B               	movf	check_fs@fs,w,c
  9768  005AB6  26D9               	addwf	fsr2l,f,c
  9769  005AB8  503C               	movf	check_fs@fs+1,w,c
  9770  005ABA  22DA               	addwfc	fsr2h,f,c
  9771  005ABC  0EFF               	movlw	255
  9772  005ABE  14DE               	andwf	postinc2,w,c
  9773  005AC0  6E41               	movwf	??_check_fs& (0+255),c
  9774  005AC2  0EFF               	movlw	255
  9775  005AC4  14DE               	andwf	postinc2,w,c
  9776  005AC6  6E42               	movwf	(??_check_fs+1)& (0+255),c
  9777  005AC8  0EFF               	movlw	255
  9778  005ACA  14DE               	andwf	postinc2,w,c
  9779  005ACC  6E43               	movwf	(??_check_fs+2)& (0+255),c
  9780  005ACE  0E00               	movlw	0
  9781  005AD0  14DE               	andwf	postinc2,w,c
  9782  005AD2  6E44               	movwf	(??_check_fs+3)& (0+255),c
  9783  005AD4  0E46               	movlw	70
  9784  005AD6  1841               	xorwf	??_check_fs,w,c
  9785  005AD8  E10A               	bnz	l4997
  9786  005ADA  0E41               	movlw	65
  9787  005ADC  1842               	xorwf	??_check_fs+1,w,c
  9788  005ADE  E107               	bnz	l4997
  9789  005AE0  0E54               	movlw	84
  9790  005AE2  1843               	xorwf	??_check_fs+2,w,c
  9791  005AE4  1044               	iorwf	??_check_fs+3,w,c
  9792  005AE6  A4D8               	btfss	status,2,c
  9793  005AE8  D002               	goto	l4997
  9794                           
  9795                           ;ff.c: 2188: return 0;
  9796  005AEA  0E00               	movlw	0
  9797  005AEC  0012               	return	
  9798  005AEE                     l4997:
  9799                           
  9800                           ;ff.c: 2189: if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[82])) & 0xFFFFFF) == 0x544146)
  9801  005AEE  EE20 F080          	lfsr	2,128
  9802  005AF2  503B               	movf	check_fs@fs,w,c
  9803  005AF4  26D9               	addwf	fsr2l,f,c
  9804  005AF6  503C               	movf	check_fs@fs+1,w,c
  9805  005AF8  22DA               	addwfc	fsr2h,f,c
  9806  005AFA  0EFF               	movlw	255
  9807  005AFC  14DE               	andwf	postinc2,w,c
  9808  005AFE  6E41               	movwf	??_check_fs& (0+255),c
  9809  005B00  0EFF               	movlw	255
  9810  005B02  14DE               	andwf	postinc2,w,c
  9811  005B04  6E42               	movwf	(??_check_fs+1)& (0+255),c
  9812  005B06  0EFF               	movlw	255
  9813  005B08  14DE               	andwf	postinc2,w,c
  9814  005B0A  6E43               	movwf	(??_check_fs+2)& (0+255),c
  9815  005B0C  0E00               	movlw	0
  9816  005B0E  14DE               	andwf	postinc2,w,c
  9817  005B10  6E44               	movwf	(??_check_fs+3)& (0+255),c
  9818  005B12  0E46               	movlw	70
  9819  005B14  1841               	xorwf	??_check_fs,w,c
  9820  005B16  E10A               	bnz	l5003
  9821  005B18  0E41               	movlw	65
  9822  005B1A  1842               	xorwf	??_check_fs+1,w,c
  9823  005B1C  E107               	bnz	l5003
  9824  005B1E  0E54               	movlw	84
  9825  005B20  1843               	xorwf	??_check_fs+2,w,c
  9826  005B22  1044               	iorwf	??_check_fs+3,w,c
  9827  005B24  A4D8               	btfss	status,2,c
  9828  005B26  D002               	goto	l5003
  9829                           
  9830                           ;ff.c: 2190: return 0;
  9831  005B28  0E00               	movlw	0
  9832  005B2A  0012               	return	
  9833  005B2C                     l5003:
  9834                           
  9835                           ;ff.c: 2192: return 1;
  9836  005B2C  0E01               	movlw	1
  9837  005B2E  0012               	return	
  9838  005B30  0012               	return		;funcret
  9839  005B32                     __end_of_check_fs:
  9840                           	opt stack 0
  9841                           tblptru	equ	0xFF8
  9842                           tblptrh	equ	0xFF7
  9843                           tblptrl	equ	0xFF6
  9844                           tablat	equ	0xFF5
  9845                           prodh	equ	0xFF4
  9846                           prodl	equ	0xFF3
  9847                           indf0	equ	0xFEF
  9848                           postinc0	equ	0xFEE
  9849                           fsr0h	equ	0xFEA
  9850                           fsr0l	equ	0xFE9
  9851                           wreg	equ	0xFE8
  9852                           indf1	equ	0xFE7
  9853                           postinc1	equ	0xFE6
  9854                           postdec1	equ	0xFE5
  9855                           fsr1h	equ	0xFE2
  9856                           fsr1l	equ	0xFE1
  9857                           indf2	equ	0xFDF
  9858                           postinc2	equ	0xFDE
  9859                           postdec2	equ	0xFDD
  9860                           plusw2	equ	0xFDB
  9861                           fsr2h	equ	0xFDA
  9862                           fsr2l	equ	0xFD9
  9863                           status	equ	0xFD8
  9864                           
  9865 ;; *************** function _f_lseek *****************
  9866 ;; Defined at:
  9867 ;;		line 3033 in file "../../SD_Card_FatFs/ff.c"
  9868 ;; Parameters:    Size  Location     Type
  9869 ;;  fp              2   13[BANK0 ] PTR struct .
  9870 ;;		 -> Fil(32), 
  9871 ;;  ofs             4   15[BANK0 ] unsigned long 
  9872 ;; Auto vars:     Size  Location     Type
  9873 ;;  clst            4   44[BANK0 ] unsigned long 
  9874 ;;  bcs             4   40[BANK0 ] unsigned long 
  9875 ;;  nsect           4   36[BANK0 ] unsigned long 
  9876 ;;  ifptr           4   31[BANK0 ] unsigned long 
  9877 ;;  res             1   35[BANK0 ] enum E88
  9878 ;; Return value:  Size  Location     Type
  9879 ;;                  1    wreg      enum E8927
  9880 ;; Registers used:
  9881 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9882 ;; Tracked objects:
  9883 ;;		On entry : 0/0
  9884 ;;		On exit  : 0/0
  9885 ;;		Unchanged: 0/0
  9886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9887 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9888 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9889 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9890 ;;      Totals:         0      35       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9891 ;;Total ram usage:       35 bytes
  9892 ;; Hardware stack levels used:    1
  9893 ;; Hardware stack levels required when called:   10
  9894 ;; This function calls:
  9895 ;;		___lldiv
  9896 ;;		_clust2sect
  9897 ;;		_create_chain
  9898 ;;		_get_fat
  9899 ;;		_validate
  9900 ;; This function is called by:
  9901 ;;		_main
  9902 ;; This function uses a non-reentrant model
  9903 ;;
  9904                           
  9905                           	psect	text21
  9906  00250A                     __ptext21:
  9907                           	opt stack 0
  9908  00250A                     _f_lseek:
  9909                           	opt stack 20
  9910                           
  9911                           ;ff.c: 3038: FRESULT res;
  9912                           ;ff.c: 3039: DWORD clst, bcs, nsect, ifptr;
  9913                           ;ff.c: 3045: res = validate(fp);
  9914                           
  9915                           ;incstack = 0
  9916  00250A  C06D  F002         	movff	f_lseek@fp,validate@obj
  9917  00250E  C06E  F003         	movff	f_lseek@fp+1,validate@obj+1
  9918  002512  EC51  F030         	call	_validate	;wreg free
  9919  002516  0100               	movlb	0	; () banked
  9920  002518  6F83               	movwf	f_lseek@res& (0+255),b
  9921                           
  9922                           ; BSR set to: 0
  9923                           ;ff.c: 3046: if (res != FR_OK) return res;
  9924  00251A  0100               	movlb	0	; () banked
  9925  00251C  5183               	movf	f_lseek@res& (0+255),w,b
  9926  00251E  0100               	movlb	0	; () banked
  9927  002520  B4D8               	btfsc	status,2,c
  9928  002522  D003               	goto	l5623
  9929                           
  9930                           ; BSR set to: 0
  9931  002524  0100               	movlb	0	; () banked
  9932  002526  5183               	movf	f_lseek@res& (0+255),w,b
  9933                           
  9934                           ; BSR set to: 0
  9935  002528  0012               	return	
  9936  00252A                     l5623:
  9937                           
  9938                           ; BSR set to: 0
  9939                           ;ff.c: 3047: if (fp->err)
  9940  00252A  0100               	movlb	0	; () banked
  9941  00252C  EE20 F005          	lfsr	2,5
  9942  002530  516D               	movf	f_lseek@fp& (0+255),w,b
  9943  002532  26D9               	addwf	fsr2l,f,c
  9944  002534  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9945  002536  22DA               	addwfc	fsr2h,f,c
  9946  002538  50DF               	movf	indf2,w,c
  9947  00253A  B4D8               	btfsc	status,2,c
  9948  00253C  D009               	goto	l5629
  9949                           
  9950                           ; BSR set to: 0
  9951                           ;ff.c: 3048: return (FRESULT)fp->err;
  9952  00253E  0100               	movlb	0	; () banked
  9953  002540  EE20 F005          	lfsr	2,5
  9954  002544  516D               	movf	f_lseek@fp& (0+255),w,b
  9955  002546  26D9               	addwf	fsr2l,f,c
  9956  002548  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9957  00254A  22DA               	addwfc	fsr2h,f,c
  9958  00254C  50DF               	movf	indf2,w,c
  9959                           
  9960                           ; BSR set to: 0
  9961  00254E  0012               	return	
  9962  002550                     l5629:
  9963                           
  9964                           ; BSR set to: 0
  9965                           ;ff.c: 3106: {
  9966                           ;ff.c: 3107: if (ofs > fp->fsize
  9967                           ;ff.c: 3109: && !(fp->flag & 0x02)
  9968                           ;ff.c: 3111: ) ofs = fp->fsize;
  9969  002550  0100               	movlb	0	; () banked
  9970  002552  EE20 F00A          	lfsr	2,10
  9971  002556  516D               	movf	f_lseek@fp& (0+255),w,b
  9972  002558  26D9               	addwf	fsr2l,f,c
  9973  00255A  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9974  00255C  22DA               	addwfc	fsr2h,f,c
  9975  00255E  0100               	movlb	0	; () banked
  9976  002560  516F               	movf	f_lseek@ofs& (0+255),w,b
  9977  002562  5CDE               	subwf	postinc2,w,c
  9978  002564  0100               	movlb	0	; () banked
  9979  002566  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  9980  002568  58DE               	subwfb	postinc2,w,c
  9981  00256A  0100               	movlb	0	; () banked
  9982  00256C  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  9983  00256E  58DE               	subwfb	postinc2,w,c
  9984  002570  0100               	movlb	0	; () banked
  9985  002572  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  9986  002574  58DE               	subwfb	postinc2,w,c
  9987  002576  B0D8               	btfsc	status,0,c
  9988  002578  D019               	goto	l693
  9989                           
  9990                           ; BSR set to: 0
  9991  00257A  0100               	movlb	0	; () banked
  9992  00257C  EE20 F004          	lfsr	2,4
  9993  002580  516D               	movf	f_lseek@fp& (0+255),w,b
  9994  002582  26D9               	addwf	fsr2l,f,c
  9995  002584  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9996  002586  22DA               	addwfc	fsr2h,f,c
  9997  002588  0100               	movlb	0	; () banked
  9998  00258A  B2DF               	btfsc	indf2,1,c
  9999  00258C  D00F               	goto	l693
 10000                           
 10001                           ; BSR set to: 0
 10002  00258E  0100               	movlb	0	; () banked
 10003  002590  EE20 F00A          	lfsr	2,10
 10004  002594  516D               	movf	f_lseek@fp& (0+255),w,b
 10005  002596  26D9               	addwf	fsr2l,f,c
 10006  002598  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10007  00259A  22DA               	addwfc	fsr2h,f,c
 10008  00259C  CFDE F06F          	movff	postinc2,f_lseek@ofs
 10009  0025A0  CFDE F070          	movff	postinc2,f_lseek@ofs+1
 10010  0025A4  CFDE F071          	movff	postinc2,f_lseek@ofs+2
 10011  0025A8  CFDE F072          	movff	postinc2,f_lseek@ofs+3
 10012  0025AC                     l693:
 10013                           
 10014                           ; BSR set to: 0
 10015                           ;ff.c: 3113: ifptr = fp->fptr;
 10016  0025AC  0100               	movlb	0	; () banked
 10017  0025AE  EE20 F006          	lfsr	2,6
 10018  0025B2  516D               	movf	f_lseek@fp& (0+255),w,b
 10019  0025B4  26D9               	addwf	fsr2l,f,c
 10020  0025B6  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10021  0025B8  22DA               	addwfc	fsr2h,f,c
 10022  0025BA  CFDE F07F          	movff	postinc2,f_lseek@ifptr
 10023  0025BE  CFDE F080          	movff	postinc2,f_lseek@ifptr+1
 10024  0025C2  CFDE F081          	movff	postinc2,f_lseek@ifptr+2
 10025  0025C6  CFDE F082          	movff	postinc2,f_lseek@ifptr+3
 10026                           
 10027                           ;ff.c: 3114: fp->fptr = nsect = 0;
 10028  0025CA  0E00               	movlw	0
 10029  0025CC  0100               	movlb	0	; () banked
 10030  0025CE  6F84               	movwf	f_lseek@nsect& (0+255),b
 10031  0025D0  0E00               	movlw	0
 10032  0025D2  6F85               	movwf	(f_lseek@nsect+1)& (0+255),b
 10033  0025D4  0E00               	movlw	0
 10034  0025D6  6F86               	movwf	(f_lseek@nsect+2)& (0+255),b
 10035  0025D8  0E00               	movlw	0
 10036  0025DA  6F87               	movwf	(f_lseek@nsect+3)& (0+255),b
 10037  0025DC  0100               	movlb	0	; () banked
 10038  0025DE  EE20 F006          	lfsr	2,6
 10039  0025E2  516D               	movf	f_lseek@fp& (0+255),w,b
 10040  0025E4  26D9               	addwf	fsr2l,f,c
 10041  0025E6  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10042  0025E8  22DA               	addwfc	fsr2h,f,c
 10043  0025EA  C084  FFDE         	movff	f_lseek@nsect,postinc2
 10044  0025EE  C085  FFDE         	movff	f_lseek@nsect+1,postinc2
 10045  0025F2  C086  FFDE         	movff	f_lseek@nsect+2,postinc2
 10046  0025F6  C087  FFDE         	movff	f_lseek@nsect+3,postinc2
 10047                           
 10048                           ; BSR set to: 0
 10049                           ;ff.c: 3115: if (ofs) {
 10050  0025FA  0100               	movlb	0	; () banked
 10051  0025FC  516F               	movf	f_lseek@ofs& (0+255),w,b
 10052  0025FE  0100               	movlb	0	; () banked
 10053  002600  1170               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
 10054  002602  0100               	movlb	0	; () banked
 10055  002604  1171               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
 10056  002606  0100               	movlb	0	; () banked
 10057  002608  1172               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
 10058  00260A  B4D8               	btfsc	status,2,c
 10059  00260C  D2D6               	goto	l5723
 10060                           
 10061                           ; BSR set to: 0
 10062                           ;ff.c: 3116: bcs = (DWORD)fp->fs->csize * ((UINT)512);
 10063  00260E  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10064  002612  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10065  002616  EE10 F002          	lfsr	1,2
 10066  00261A  50DE               	movf	postinc2,w,c
 10067  00261C  26E1               	addwf	fsr1l,f,c
 10068  00261E  50DD               	movf	postdec2,w,c
 10069  002620  22E2               	addwfc	fsr1h,f,c
 10070  002622  50E7               	movf	indf1,w,c
 10071  002624  0100               	movlb	0	; () banked
 10072  002626  6F73               	movwf	??_f_lseek& (0+255),b
 10073  002628  C073  F074         	movff	??_f_lseek,??_f_lseek+1
 10074  00262C  0100               	movlb	0	; () banked
 10075  00262E  6B75               	clrf	(??_f_lseek+2)& (0+255),b
 10076  002630  6B76               	clrf	(??_f_lseek+3)& (0+255),b
 10077  002632  6B77               	clrf	(??_f_lseek+4)& (0+255),b
 10078  002634  0E09               	movlw	9
 10079  002636                     u8115:
 10080  002636  90D8               	bcf	status,0,c
 10081  002638  0100               	movlb	0	; () banked
 10082  00263A  3774               	rlcf	(??_f_lseek+1)& (0+255),f,b
 10083  00263C  3775               	rlcf	(??_f_lseek+2)& (0+255),f,b
 10084  00263E  3776               	rlcf	(??_f_lseek+3)& (0+255),f,b
 10085  002640  3777               	rlcf	(??_f_lseek+4)& (0+255),f,b
 10086  002642  2EE8               	decfsz	wreg,f,c
 10087  002644  D7F8               	goto	u8115
 10088  002646  C074  F088         	movff	??_f_lseek+1,f_lseek@bcs
 10089  00264A  C075  F089         	movff	??_f_lseek+2,f_lseek@bcs+1
 10090  00264E  C076  F08A         	movff	??_f_lseek+3,f_lseek@bcs+2
 10091  002652  C077  F08B         	movff	??_f_lseek+4,f_lseek@bcs+3
 10092                           
 10093                           ; BSR set to: 0
 10094                           ;ff.c: 3117: if (ifptr > 0 &&
 10095                           ;ff.c: 3118: (ofs - 1) / bcs >= (ifptr - 1) / bcs) {
 10096  002656  0100               	movlb	0	; () banked
 10097  002658  517F               	movf	f_lseek@ifptr& (0+255),w,b
 10098  00265A  0100               	movlb	0	; () banked
 10099  00265C  1180               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
 10100  00265E  0100               	movlb	0	; () banked
 10101  002660  1181               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
 10102  002662  0100               	movlb	0	; () banked
 10103  002664  1182               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
 10104  002666  B4D8               	btfsc	status,2,c
 10105  002668  D0C1               	goto	l5645
 10106                           
 10107                           ; BSR set to: 0
 10108  00266A  0EFF               	movlw	255
 10109  00266C  0100               	movlb	0	; () banked
 10110  00266E  256F               	addwf	f_lseek@ofs& (0+255),w,b
 10111  002670  6E01               	movwf	___lldiv@dividend,c
 10112  002672  0EFF               	movlw	255
 10113  002674  0100               	movlb	0	; () banked
 10114  002676  2170               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
 10115  002678  6E02               	movwf	___lldiv@dividend+1,c
 10116  00267A  0EFF               	movlw	255
 10117  00267C  0100               	movlb	0	; () banked
 10118  00267E  2171               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
 10119  002680  6E03               	movwf	___lldiv@dividend+2,c
 10120  002682  0EFF               	movlw	255
 10121  002684  0100               	movlb	0	; () banked
 10122  002686  2172               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
 10123  002688  6E04               	movwf	___lldiv@dividend+3,c
 10124  00268A  C088  F005         	movff	f_lseek@bcs,___lldiv@divisor
 10125  00268E  C089  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
 10126  002692  C08A  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
 10127  002696  C08B  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
 10128  00269A  EC2B  F031         	call	___lldiv	;wreg free
 10129  00269E  C001  F073         	movff	?___lldiv,??_f_lseek
 10130  0026A2  C002  F074         	movff	?___lldiv+1,??_f_lseek+1
 10131  0026A6  C003  F075         	movff	?___lldiv+2,??_f_lseek+2
 10132  0026AA  C004  F076         	movff	?___lldiv+3,??_f_lseek+3
 10133  0026AE  0EFF               	movlw	255
 10134  0026B0  0100               	movlb	0	; () banked
 10135  0026B2  257F               	addwf	f_lseek@ifptr& (0+255),w,b
 10136  0026B4  6E01               	movwf	___lldiv@dividend,c
 10137  0026B6  0EFF               	movlw	255
 10138  0026B8  0100               	movlb	0	; () banked
 10139  0026BA  2180               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 10140  0026BC  6E02               	movwf	___lldiv@dividend+1,c
 10141  0026BE  0EFF               	movlw	255
 10142  0026C0  0100               	movlb	0	; () banked
 10143  0026C2  2181               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 10144  0026C4  6E03               	movwf	___lldiv@dividend+2,c
 10145  0026C6  0EFF               	movlw	255
 10146  0026C8  0100               	movlb	0	; () banked
 10147  0026CA  2182               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 10148  0026CC  6E04               	movwf	___lldiv@dividend+3,c
 10149  0026CE  C088  F005         	movff	f_lseek@bcs,___lldiv@divisor
 10150  0026D2  C089  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
 10151  0026D6  C08A  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
 10152  0026DA  C08B  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
 10153  0026DE  EC2B  F031         	call	___lldiv	;wreg free
 10154  0026E2  5001               	movf	?___lldiv,w,c
 10155  0026E4  0100               	movlb	0	; () banked
 10156  0026E6  5D73               	subwf	??_f_lseek& (0+255),w,b
 10157  0026E8  5002               	movf	?___lldiv+1,w,c
 10158  0026EA  0100               	movlb	0	; () banked
 10159  0026EC  5974               	subwfb	(??_f_lseek+1)& (0+255),w,b
 10160  0026EE  5003               	movf	?___lldiv+2,w,c
 10161  0026F0  0100               	movlb	0	; () banked
 10162  0026F2  5975               	subwfb	(??_f_lseek+2)& (0+255),w,b
 10163  0026F4  5004               	movf	?___lldiv+3,w,c
 10164  0026F6  0100               	movlb	0	; () banked
 10165  0026F8  5976               	subwfb	(??_f_lseek+3)& (0+255),w,b
 10166  0026FA  A0D8               	btfss	status,0,c
 10167  0026FC  D077               	goto	l5645
 10168                           
 10169                           ; BSR set to: 0
 10170                           ;ff.c: 3119: fp->fptr = (ifptr - 1) & ~(bcs - 1);
 10171  0026FE  0EFF               	movlw	255
 10172  002700  0100               	movlb	0	; () banked
 10173  002702  2588               	addwf	f_lseek@bcs& (0+255),w,b
 10174  002704  0100               	movlb	0	; () banked
 10175  002706  6F73               	movwf	??_f_lseek& (0+255),b
 10176  002708  0EFF               	movlw	255
 10177  00270A  0100               	movlb	0	; () banked
 10178  00270C  2189               	addwfc	(f_lseek@bcs+1)& (0+255),w,b
 10179  00270E  0100               	movlb	0	; () banked
 10180  002710  6F74               	movwf	(??_f_lseek+1)& (0+255),b
 10181  002712  0EFF               	movlw	255
 10182  002714  0100               	movlb	0	; () banked
 10183  002716  218A               	addwfc	(f_lseek@bcs+2)& (0+255),w,b
 10184  002718  0100               	movlb	0	; () banked
 10185  00271A  6F75               	movwf	(??_f_lseek+2)& (0+255),b
 10186  00271C  0EFF               	movlw	255
 10187  00271E  0100               	movlb	0	; () banked
 10188  002720  218B               	addwfc	(f_lseek@bcs+3)& (0+255),w,b
 10189  002722  0100               	movlb	0	; () banked
 10190  002724  6F76               	movwf	(??_f_lseek+3)& (0+255),b
 10191  002726  0100               	movlb	0	; () banked
 10192  002728  1F73               	comf	??_f_lseek& (0+255),f,b
 10193  00272A  1F74               	comf	(??_f_lseek+1)& (0+255),f,b
 10194  00272C  1F75               	comf	(??_f_lseek+2)& (0+255),f,b
 10195  00272E  1F76               	comf	(??_f_lseek+3)& (0+255),f,b
 10196  002730  0EFF               	movlw	255
 10197  002732  0100               	movlb	0	; () banked
 10198  002734  257F               	addwf	f_lseek@ifptr& (0+255),w,b
 10199  002736  0100               	movlb	0	; () banked
 10200  002738  6F77               	movwf	(??_f_lseek+4)& (0+255),b
 10201  00273A  0EFF               	movlw	255
 10202  00273C  0100               	movlb	0	; () banked
 10203  00273E  2180               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 10204  002740  0100               	movlb	0	; () banked
 10205  002742  6F78               	movwf	(??_f_lseek+5)& (0+255),b
 10206  002744  0EFF               	movlw	255
 10207  002746  0100               	movlb	0	; () banked
 10208  002748  2181               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 10209  00274A  0100               	movlb	0	; () banked
 10210  00274C  6F79               	movwf	(??_f_lseek+6)& (0+255),b
 10211  00274E  0EFF               	movlw	255
 10212  002750  0100               	movlb	0	; () banked
 10213  002752  2182               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 10214  002754  0100               	movlb	0	; () banked
 10215  002756  6F7A               	movwf	(??_f_lseek+7)& (0+255),b
 10216  002758  0100               	movlb	0	; () banked
 10217  00275A  5173               	movf	??_f_lseek& (0+255),w,b
 10218  00275C  0100               	movlb	0	; () banked
 10219  00275E  1577               	andwf	(??_f_lseek+4)& (0+255),w,b
 10220  002760  0100               	movlb	0	; () banked
 10221  002762  6F7B               	movwf	(??_f_lseek+8)& (0+255),b
 10222  002764  0100               	movlb	0	; () banked
 10223  002766  5174               	movf	(??_f_lseek+1)& (0+255),w,b
 10224  002768  0100               	movlb	0	; () banked
 10225  00276A  1578               	andwf	(??_f_lseek+5)& (0+255),w,b
 10226  00276C  0100               	movlb	0	; () banked
 10227  00276E  6F7C               	movwf	(??_f_lseek+9)& (0+255),b
 10228  002770  0100               	movlb	0	; () banked
 10229  002772  5175               	movf	(??_f_lseek+2)& (0+255),w,b
 10230  002774  0100               	movlb	0	; () banked
 10231  002776  1579               	andwf	(??_f_lseek+6)& (0+255),w,b
 10232  002778  0100               	movlb	0	; () banked
 10233  00277A  6F7D               	movwf	(??_f_lseek+10)& (0+255),b
 10234  00277C  0100               	movlb	0	; () banked
 10235  00277E  5176               	movf	(??_f_lseek+3)& (0+255),w,b
 10236  002780  0100               	movlb	0	; () banked
 10237  002782  157A               	andwf	(??_f_lseek+7)& (0+255),w,b
 10238  002784  0100               	movlb	0	; () banked
 10239  002786  6F7E               	movwf	(??_f_lseek+11)& (0+255),b
 10240  002788  0100               	movlb	0	; () banked
 10241  00278A  EE20 F006          	lfsr	2,6
 10242  00278E  516D               	movf	f_lseek@fp& (0+255),w,b
 10243  002790  26D9               	addwf	fsr2l,f,c
 10244  002792  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10245  002794  22DA               	addwfc	fsr2h,f,c
 10246  002796  C07B  FFDE         	movff	??_f_lseek+8,postinc2
 10247  00279A  C07C  FFDE         	movff	??_f_lseek+9,postinc2
 10248  00279E  C07D  FFDE         	movff	??_f_lseek+10,postinc2
 10249  0027A2  C07E  FFDE         	movff	??_f_lseek+11,postinc2
 10250                           
 10251                           ;ff.c: 3120: ofs -= fp->fptr;
 10252  0027A6  0100               	movlb	0	; () banked
 10253  0027A8  EE20 F006          	lfsr	2,6
 10254  0027AC  516D               	movf	f_lseek@fp& (0+255),w,b
 10255  0027AE  26D9               	addwf	fsr2l,f,c
 10256  0027B0  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10257  0027B2  22DA               	addwfc	fsr2h,f,c
 10258  0027B4  50DE               	movf	postinc2,w,c
 10259  0027B6  0100               	movlb	0	; () banked
 10260  0027B8  5F6F               	subwf	f_lseek@ofs& (0+255),f,b
 10261  0027BA  50DE               	movf	postinc2,w,c
 10262  0027BC  0100               	movlb	0	; () banked
 10263  0027BE  5B70               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 10264  0027C0  50DE               	movf	postinc2,w,c
 10265  0027C2  0100               	movlb	0	; () banked
 10266  0027C4  5B71               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 10267  0027C6  50DD               	movf	postdec2,w,c
 10268  0027C8  0100               	movlb	0	; () banked
 10269  0027CA  5B72               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 10270                           
 10271                           ;ff.c: 3121: clst = fp->clust;
 10272  0027CC  0100               	movlb	0	; () banked
 10273  0027CE  EE20 F012          	lfsr	2,18
 10274  0027D2  516D               	movf	f_lseek@fp& (0+255),w,b
 10275  0027D4  26D9               	addwf	fsr2l,f,c
 10276  0027D6  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10277  0027D8  22DA               	addwfc	fsr2h,f,c
 10278  0027DA  CFDE F08C          	movff	postinc2,f_lseek@clst
 10279  0027DE  CFDE F08D          	movff	postinc2,f_lseek@clst+1
 10280  0027E2  CFDE F08E          	movff	postinc2,f_lseek@clst+2
 10281  0027E6  CFDE F08F          	movff	postinc2,f_lseek@clst+3
 10282                           
 10283                           ;ff.c: 3122: } else {
 10284  0027EA  D07F               	goto	l5669
 10285  0027EC                     l5645:
 10286                           
 10287                           ; BSR set to: 0
 10288                           ;ff.c: 3123: clst = fp->sclust;
 10289  0027EC  0100               	movlb	0	; () banked
 10290  0027EE  EE20 F00E          	lfsr	2,14
 10291  0027F2  516D               	movf	f_lseek@fp& (0+255),w,b
 10292  0027F4  26D9               	addwf	fsr2l,f,c
 10293  0027F6  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10294  0027F8  22DA               	addwfc	fsr2h,f,c
 10295  0027FA  CFDE F08C          	movff	postinc2,f_lseek@clst
 10296  0027FE  CFDE F08D          	movff	postinc2,f_lseek@clst+1
 10297  002802  CFDE F08E          	movff	postinc2,f_lseek@clst+2
 10298  002806  CFDE F08F          	movff	postinc2,f_lseek@clst+3
 10299                           
 10300                           ; BSR set to: 0
 10301                           ;ff.c: 3125: if (clst == 0) {
 10302  00280A  0100               	movlb	0	; () banked
 10303  00280C  518C               	movf	f_lseek@clst& (0+255),w,b
 10304  00280E  0100               	movlb	0	; () banked
 10305  002810  118D               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 10306  002812  0100               	movlb	0	; () banked
 10307  002814  118E               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 10308  002816  0100               	movlb	0	; () banked
 10309  002818  118F               	iorwf	(f_lseek@clst+3)& (0+255),w,b
 10310  00281A  A4D8               	btfss	status,2,c
 10311  00281C  D056               	goto	l697
 10312                           
 10313                           ; BSR set to: 0
 10314                           ;ff.c: 3126: clst = create_chain(fp->fs, 0);
 10315  00281E  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10316  002822  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10317  002826  CFDE F056          	movff	postinc2,create_chain@fs
 10318  00282A  CFDD F057          	movff	postdec2,create_chain@fs+1
 10319  00282E  0E00               	movlw	0
 10320  002830  6E58               	movwf	create_chain@clst,c
 10321  002832  0E00               	movlw	0
 10322  002834  6E59               	movwf	create_chain@clst+1,c
 10323  002836  0E00               	movlw	0
 10324  002838  6E5A               	movwf	create_chain@clst+2,c
 10325  00283A  0E00               	movlw	0
 10326  00283C  6E5B               	movwf	create_chain@clst+3,c
 10327  00283E  EC59  F01F         	call	_create_chain	;wreg free
 10328  002842  C056  F08C         	movff	?_create_chain,f_lseek@clst
 10329  002846  C057  F08D         	movff	?_create_chain+1,f_lseek@clst+1
 10330  00284A  C058  F08E         	movff	?_create_chain+2,f_lseek@clst+2
 10331  00284E  C059  F08F         	movff	?_create_chain+3,f_lseek@clst+3
 10332                           
 10333                           ;ff.c: 3127: if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
 10334  002852  0100               	movlb	0	; () banked
 10335  002854  058C               	decf	f_lseek@clst& (0+255),w,b
 10336  002856  0100               	movlb	0	; () banked
 10337  002858  118D               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 10338  00285A  0100               	movlb	0	; () banked
 10339  00285C  118E               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 10340  00285E  0100               	movlb	0	; () banked
 10341  002860  118F               	iorwf	(f_lseek@clst+3)& (0+255),w,b
 10342  002862  A4D8               	btfss	status,2,c
 10343  002864  D00B               	goto	l5659
 10344                           
 10345                           ; BSR set to: 0
 10346  002866  0100               	movlb	0	; () banked
 10347  002868  EE20 F005          	lfsr	2,5
 10348  00286C  516D               	movf	f_lseek@fp& (0+255),w,b
 10349  00286E  26D9               	addwf	fsr2l,f,c
 10350  002870  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10351  002872  22DA               	addwfc	fsr2h,f,c
 10352  002874  0E02               	movlw	2
 10353  002876  6EDF               	movwf	indf2,c
 10354                           
 10355                           ; BSR set to: 0
 10356  002878  0E02               	movlw	2
 10357                           
 10358                           ; BSR set to: 0
 10359  00287A  0012               	return	
 10360  00287C                     l5659:
 10361                           
 10362                           ; BSR set to: 0
 10363                           ;ff.c: 3128: if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR
      +                          ; };
 10364  00287C  0100               	movlb	0	; () banked
 10365  00287E  298C               	incf	f_lseek@clst& (0+255),w,b
 10366  002880  E115               	bnz	l5667
 10367  002882  0100               	movlb	0	; () banked
 10368  002884  298D               	incf	(f_lseek@clst+1)& (0+255),w,b
 10369  002886  E112               	bnz	l5667
 10370  002888  0100               	movlb	0	; () banked
 10371  00288A  298E               	incf	(f_lseek@clst+2)& (0+255),w,b
 10372  00288C  E10F               	bnz	l5667
 10373  00288E  0100               	movlb	0	; () banked
 10374  002890  298F               	incf	(f_lseek@clst+3)& (0+255),w,b
 10375  002892  A4D8               	btfss	status,2,c
 10376  002894  D00B               	goto	l5667
 10377                           
 10378                           ; BSR set to: 0
 10379  002896  0100               	movlb	0	; () banked
 10380  002898  EE20 F005          	lfsr	2,5
 10381  00289C  516D               	movf	f_lseek@fp& (0+255),w,b
 10382  00289E  26D9               	addwf	fsr2l,f,c
 10383  0028A0  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10384  0028A2  22DA               	addwfc	fsr2h,f,c
 10385  0028A4  0E01               	movlw	1
 10386  0028A6  6EDF               	movwf	indf2,c
 10387                           
 10388                           ; BSR set to: 0
 10389  0028A8  0E01               	movlw	1
 10390                           
 10391                           ; BSR set to: 0
 10392  0028AA  0012               	return	
 10393  0028AC                     l5667:
 10394                           
 10395                           ; BSR set to: 0
 10396                           ;ff.c: 3129: fp->sclust = clst;
 10397  0028AC  0100               	movlb	0	; () banked
 10398  0028AE  EE20 F00E          	lfsr	2,14
 10399  0028B2  516D               	movf	f_lseek@fp& (0+255),w,b
 10400  0028B4  26D9               	addwf	fsr2l,f,c
 10401  0028B6  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10402  0028B8  22DA               	addwfc	fsr2h,f,c
 10403  0028BA  C08C  FFDE         	movff	f_lseek@clst,postinc2
 10404  0028BE  C08D  FFDE         	movff	f_lseek@clst+1,postinc2
 10405  0028C2  C08E  FFDE         	movff	f_lseek@clst+2,postinc2
 10406  0028C6  C08F  FFDE         	movff	f_lseek@clst+3,postinc2
 10407  0028CA                     l697:
 10408                           
 10409                           ; BSR set to: 0
 10410                           ;ff.c: 3130: }
 10411                           ;ff.c: 3132: fp->clust = clst;
 10412  0028CA  0100               	movlb	0	; () banked
 10413  0028CC  EE20 F012          	lfsr	2,18
 10414  0028D0  516D               	movf	f_lseek@fp& (0+255),w,b
 10415  0028D2  26D9               	addwf	fsr2l,f,c
 10416  0028D4  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10417  0028D6  22DA               	addwfc	fsr2h,f,c
 10418  0028D8  C08C  FFDE         	movff	f_lseek@clst,postinc2
 10419  0028DC  C08D  FFDE         	movff	f_lseek@clst+1,postinc2
 10420  0028E0  C08E  FFDE         	movff	f_lseek@clst+2,postinc2
 10421  0028E4  C08F  FFDE         	movff	f_lseek@clst+3,postinc2
 10422  0028E8  D000               	goto	l5669
 10423  0028EA                     l5669:
 10424                           
 10425                           ; BSR set to: 0
 10426                           ;ff.c: 3133: }
 10427                           ;ff.c: 3134: if (clst != 0) {
 10428  0028EA  0100               	movlb	0	; () banked
 10429  0028EC  518C               	movf	f_lseek@clst& (0+255),w,b
 10430  0028EE  0100               	movlb	0	; () banked
 10431  0028F0  118D               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 10432  0028F2  0100               	movlb	0	; () banked
 10433  0028F4  118E               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 10434  0028F6  0100               	movlb	0	; () banked
 10435  0028F8  118F               	iorwf	(f_lseek@clst+3)& (0+255),w,b
 10436  0028FA  A4D8               	btfss	status,2,c
 10437  0028FC  D0CC               	goto	l5705
 10438  0028FE  D15D               	goto	l5723
 10439                           
 10440                           ; BSR set to: 0
 10441                           ;ff.c: 3135: while (ofs > bcs) {
 10442  002900  D0CA               	goto	l5705
 10443  002902                     l5673:
 10444                           
 10445                           ; BSR set to: 0
 10446                           ;ff.c: 3137: if (fp->flag & 0x02) {
 10447  002902  0100               	movlb	0	; () banked
 10448  002904  EE20 F004          	lfsr	2,4
 10449  002908  516D               	movf	f_lseek@fp& (0+255),w,b
 10450  00290A  26D9               	addwf	fsr2l,f,c
 10451  00290C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10452  00290E  22DA               	addwfc	fsr2h,f,c
 10453  002910  0100               	movlb	0	; () banked
 10454  002912  A2DF               	btfss	indf2,1,c
 10455  002914  D02E               	goto	l5681
 10456                           
 10457                           ; BSR set to: 0
 10458                           ;ff.c: 3138: clst = create_chain(fp->fs, clst);
 10459  002916  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10460  00291A  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10461  00291E  CFDE F056          	movff	postinc2,create_chain@fs
 10462  002922  CFDD F057          	movff	postdec2,create_chain@fs+1
 10463  002926  C08C  F058         	movff	f_lseek@clst,create_chain@clst
 10464  00292A  C08D  F059         	movff	f_lseek@clst+1,create_chain@clst+1
 10465  00292E  C08E  F05A         	movff	f_lseek@clst+2,create_chain@clst+2
 10466  002932  C08F  F05B         	movff	f_lseek@clst+3,create_chain@clst+3
 10467  002936  EC59  F01F         	call	_create_chain	;wreg free
 10468  00293A  C056  F08C         	movff	?_create_chain,f_lseek@clst
 10469  00293E  C057  F08D         	movff	?_create_chain+1,f_lseek@clst+1
 10470  002942  C058  F08E         	movff	?_create_chain+2,f_lseek@clst+2
 10471  002946  C059  F08F         	movff	?_create_chain+3,f_lseek@clst+3
 10472                           
 10473                           ;ff.c: 3139: if (clst == 0) {
 10474  00294A  0100               	movlb	0	; () banked
 10475  00294C  518C               	movf	f_lseek@clst& (0+255),w,b
 10476  00294E  0100               	movlb	0	; () banked
 10477  002950  118D               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 10478  002952  0100               	movlb	0	; () banked
 10479  002954  118E               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 10480  002956  0100               	movlb	0	; () banked
 10481  002958  118F               	iorwf	(f_lseek@clst+3)& (0+255),w,b
 10482  00295A  A4D8               	btfss	status,2,c
 10483  00295C  D025               	goto	l5683
 10484                           
 10485                           ; BSR set to: 0
 10486                           ;ff.c: 3140: ofs = bcs; break;
 10487  00295E  C088  F06F         	movff	f_lseek@bcs,f_lseek@ofs
 10488  002962  C089  F070         	movff	f_lseek@bcs+1,f_lseek@ofs+1
 10489  002966  C08A  F071         	movff	f_lseek@bcs+2,f_lseek@ofs+2
 10490  00296A  C08B  F072         	movff	f_lseek@bcs+3,f_lseek@ofs+3
 10491  00296E  D0A5               	goto	l5707
 10492                           
 10493                           ; BSR set to: 0
 10494                           ;ff.c: 3141: }
 10495                           ;ff.c: 3142: } else
 10496  002970  D01B               	goto	l5683
 10497  002972                     l5681:
 10498                           
 10499                           ; BSR set to: 0
 10500                           ;ff.c: 3144: clst = get_fat(fp->fs, clst);
 10501  002972  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10502  002976  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10503  00297A  CFDE F03B          	movff	postinc2,get_fat@fs
 10504  00297E  CFDD F03C          	movff	postdec2,get_fat@fs+1
 10505  002982  C08C  F03D         	movff	f_lseek@clst,get_fat@clst
 10506  002986  C08D  F03E         	movff	f_lseek@clst+1,get_fat@clst+1
 10507  00298A  C08E  F03F         	movff	f_lseek@clst+2,get_fat@clst+2
 10508  00298E  C08F  F040         	movff	f_lseek@clst+3,get_fat@clst+3
 10509  002992  EC34  F021         	call	_get_fat	;wreg free
 10510  002996  C03B  F08C         	movff	?_get_fat,f_lseek@clst
 10511  00299A  C03C  F08D         	movff	?_get_fat+1,f_lseek@clst+1
 10512  00299E  C03D  F08E         	movff	?_get_fat+2,f_lseek@clst+2
 10513  0029A2  C03E  F08F         	movff	?_get_fat+3,f_lseek@clst+3
 10514  0029A6  D000               	goto	l5683
 10515  0029A8                     l5683:
 10516                           
 10517                           ;ff.c: 3145: if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR
      +                          ; };
 10518  0029A8  0100               	movlb	0	; () banked
 10519  0029AA  298C               	incf	f_lseek@clst& (0+255),w,b
 10520  0029AC  E115               	bnz	l5691
 10521  0029AE  0100               	movlb	0	; () banked
 10522  0029B0  298D               	incf	(f_lseek@clst+1)& (0+255),w,b
 10523  0029B2  E112               	bnz	l5691
 10524  0029B4  0100               	movlb	0	; () banked
 10525  0029B6  298E               	incf	(f_lseek@clst+2)& (0+255),w,b
 10526  0029B8  E10F               	bnz	l5691
 10527  0029BA  0100               	movlb	0	; () banked
 10528  0029BC  298F               	incf	(f_lseek@clst+3)& (0+255),w,b
 10529  0029BE  A4D8               	btfss	status,2,c
 10530  0029C0  D00B               	goto	l5691
 10531                           
 10532                           ; BSR set to: 0
 10533  0029C2  0100               	movlb	0	; () banked
 10534  0029C4  EE20 F005          	lfsr	2,5
 10535  0029C8  516D               	movf	f_lseek@fp& (0+255),w,b
 10536  0029CA  26D9               	addwf	fsr2l,f,c
 10537  0029CC  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10538  0029CE  22DA               	addwfc	fsr2h,f,c
 10539  0029D0  0E01               	movlw	1
 10540  0029D2  6EDF               	movwf	indf2,c
 10541                           
 10542                           ; BSR set to: 0
 10543  0029D4  0E01               	movlw	1
 10544                           
 10545                           ; BSR set to: 0
 10546  0029D6  0012               	return	
 10547  0029D8                     l5691:
 10548                           
 10549                           ; BSR set to: 0
 10550                           ;ff.c: 3146: if (clst <= 1 || clst >= fp->fs->n_fatent) { fp->err = (BYTE)(FR_INT_ERR); 
      +                          return FR_INT_ERR; };
 10551  0029D8  0100               	movlb	0	; () banked
 10552  0029DA  518F               	movf	(f_lseek@clst+3)& (0+255),w,b
 10553  0029DC  0100               	movlb	0	; () banked
 10554  0029DE  118E               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 10555  0029E0  0100               	movlb	0	; () banked
 10556  0029E2  118D               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 10557  0029E4  E105               	bnz	u8210
 10558  0029E6  0E02               	movlw	2
 10559  0029E8  0100               	movlb	0	; () banked
 10560  0029EA  5D8C               	subwf	f_lseek@clst& (0+255),w,b
 10561  0029EC  A0D8               	btfss	status,0,c
 10562  0029EE  D018               	goto	l5695
 10563  0029F0                     u8210:
 10564                           
 10565                           ; BSR set to: 0
 10566  0029F0  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10567  0029F4  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10568  0029F8  EE10 F012          	lfsr	1,18
 10569  0029FC  50DE               	movf	postinc2,w,c
 10570  0029FE  26E1               	addwf	fsr1l,f,c
 10571  002A00  50DD               	movf	postdec2,w,c
 10572  002A02  22E2               	addwfc	fsr1h,f,c
 10573  002A04  50E6               	movf	postinc1,w,c
 10574  002A06  0100               	movlb	0	; () banked
 10575  002A08  5D8C               	subwf	f_lseek@clst& (0+255),w,b
 10576  002A0A  50E6               	movf	postinc1,w,c
 10577  002A0C  0100               	movlb	0	; () banked
 10578  002A0E  598D               	subwfb	(f_lseek@clst+1)& (0+255),w,b
 10579  002A10  50E6               	movf	postinc1,w,c
 10580  002A12  0100               	movlb	0	; () banked
 10581  002A14  598E               	subwfb	(f_lseek@clst+2)& (0+255),w,b
 10582  002A16  50E6               	movf	postinc1,w,c
 10583  002A18  0100               	movlb	0	; () banked
 10584  002A1A  598F               	subwfb	(f_lseek@clst+3)& (0+255),w,b
 10585  002A1C  A0D8               	btfss	status,0,c
 10586  002A1E  D00B               	goto	l5701
 10587  002A20                     l5695:
 10588                           
 10589                           ; BSR set to: 0
 10590  002A20  0100               	movlb	0	; () banked
 10591  002A22  EE20 F005          	lfsr	2,5
 10592  002A26  516D               	movf	f_lseek@fp& (0+255),w,b
 10593  002A28  26D9               	addwf	fsr2l,f,c
 10594  002A2A  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10595  002A2C  22DA               	addwfc	fsr2h,f,c
 10596  002A2E  0E02               	movlw	2
 10597  002A30  6EDF               	movwf	indf2,c
 10598                           
 10599                           ; BSR set to: 0
 10600  002A32  0E02               	movlw	2
 10601                           
 10602                           ; BSR set to: 0
 10603  002A34  0012               	return	
 10604  002A36                     l5701:
 10605                           
 10606                           ; BSR set to: 0
 10607                           ;ff.c: 3147: fp->clust = clst;
 10608  002A36  0100               	movlb	0	; () banked
 10609  002A38  EE20 F012          	lfsr	2,18
 10610  002A3C  516D               	movf	f_lseek@fp& (0+255),w,b
 10611  002A3E  26D9               	addwf	fsr2l,f,c
 10612  002A40  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10613  002A42  22DA               	addwfc	fsr2h,f,c
 10614  002A44  C08C  FFDE         	movff	f_lseek@clst,postinc2
 10615  002A48  C08D  FFDE         	movff	f_lseek@clst+1,postinc2
 10616  002A4C  C08E  FFDE         	movff	f_lseek@clst+2,postinc2
 10617  002A50  C08F  FFDE         	movff	f_lseek@clst+3,postinc2
 10618                           
 10619                           ;ff.c: 3148: fp->fptr += bcs;
 10620  002A54  0100               	movlb	0	; () banked
 10621  002A56  EE20 F006          	lfsr	2,6
 10622  002A5A  516D               	movf	f_lseek@fp& (0+255),w,b
 10623  002A5C  26D9               	addwf	fsr2l,f,c
 10624  002A5E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10625  002A60  22DA               	addwfc	fsr2h,f,c
 10626  002A62  0100               	movlb	0	; () banked
 10627  002A64  5188               	movf	f_lseek@bcs& (0+255),w,b
 10628  002A66  26DE               	addwf	postinc2,f,c
 10629  002A68  5189               	movf	(f_lseek@bcs+1)& (0+255),w,b
 10630  002A6A  22DE               	addwfc	postinc2,f,c
 10631  002A6C  518A               	movf	(f_lseek@bcs+2)& (0+255),w,b
 10632  002A6E  22DE               	addwfc	postinc2,f,c
 10633  002A70  518B               	movf	(f_lseek@bcs+3)& (0+255),w,b
 10634  002A72  22DE               	addwfc	postinc2,f,c
 10635                           
 10636                           ; BSR set to: 0
 10637                           ;ff.c: 3149: ofs -= bcs;
 10638  002A74  0100               	movlb	0	; () banked
 10639  002A76  5188               	movf	f_lseek@bcs& (0+255),w,b
 10640  002A78  0100               	movlb	0	; () banked
 10641  002A7A  5F6F               	subwf	f_lseek@ofs& (0+255),f,b
 10642  002A7C  0100               	movlb	0	; () banked
 10643  002A7E  5189               	movf	(f_lseek@bcs+1)& (0+255),w,b
 10644  002A80  0100               	movlb	0	; () banked
 10645  002A82  5B70               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 10646  002A84  0100               	movlb	0	; () banked
 10647  002A86  518A               	movf	(f_lseek@bcs+2)& (0+255),w,b
 10648  002A88  0100               	movlb	0	; () banked
 10649  002A8A  5B71               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 10650  002A8C  0100               	movlb	0	; () banked
 10651  002A8E  518B               	movf	(f_lseek@bcs+3)& (0+255),w,b
 10652  002A90  0100               	movlb	0	; () banked
 10653  002A92  5B72               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 10654  002A94  D000               	goto	l5705
 10655  002A96                     l5705:
 10656                           
 10657                           ; BSR set to: 0
 10658  002A96  0100               	movlb	0	; () banked
 10659  002A98  516F               	movf	f_lseek@ofs& (0+255),w,b
 10660  002A9A  0100               	movlb	0	; () banked
 10661  002A9C  5D88               	subwf	f_lseek@bcs& (0+255),w,b
 10662  002A9E  0100               	movlb	0	; () banked
 10663  002AA0  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
 10664  002AA2  0100               	movlb	0	; () banked
 10665  002AA4  5989               	subwfb	(f_lseek@bcs+1)& (0+255),w,b
 10666  002AA6  0100               	movlb	0	; () banked
 10667  002AA8  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
 10668  002AAA  0100               	movlb	0	; () banked
 10669  002AAC  598A               	subwfb	(f_lseek@bcs+2)& (0+255),w,b
 10670  002AAE  0100               	movlb	0	; () banked
 10671  002AB0  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
 10672  002AB2  0100               	movlb	0	; () banked
 10673  002AB4  598B               	subwfb	(f_lseek@bcs+3)& (0+255),w,b
 10674  002AB6  A0D8               	btfss	status,0,c
 10675  002AB8  D724               	goto	l5673
 10676  002ABA                     l5707:
 10677                           
 10678                           ; BSR set to: 0
 10679                           ;ff.c: 3150: }
 10680                           ;ff.c: 3151: fp->fptr += ofs;
 10681  002ABA  0100               	movlb	0	; () banked
 10682  002ABC  EE20 F006          	lfsr	2,6
 10683  002AC0  516D               	movf	f_lseek@fp& (0+255),w,b
 10684  002AC2  26D9               	addwf	fsr2l,f,c
 10685  002AC4  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10686  002AC6  22DA               	addwfc	fsr2h,f,c
 10687  002AC8  0100               	movlb	0	; () banked
 10688  002ACA  516F               	movf	f_lseek@ofs& (0+255),w,b
 10689  002ACC  26DE               	addwf	postinc2,f,c
 10690  002ACE  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
 10691  002AD0  22DE               	addwfc	postinc2,f,c
 10692  002AD2  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
 10693  002AD4  22DE               	addwfc	postinc2,f,c
 10694  002AD6  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
 10695  002AD8  22DE               	addwfc	postinc2,f,c
 10696                           
 10697                           ; BSR set to: 0
 10698                           ;ff.c: 3152: if (ofs % ((UINT)512)) {
 10699  002ADA  0EFF               	movlw	255
 10700  002ADC  0100               	movlb	0	; () banked
 10701  002ADE  156F               	andwf	f_lseek@ofs& (0+255),w,b
 10702  002AE0  0100               	movlb	0	; () banked
 10703  002AE2  6F73               	movwf	??_f_lseek& (0+255),b
 10704  002AE4  0E01               	movlw	1
 10705  002AE6  0100               	movlb	0	; () banked
 10706  002AE8  1570               	andwf	(f_lseek@ofs+1)& (0+255),w,b
 10707  002AEA  0100               	movlb	0	; () banked
 10708  002AEC  6F74               	movwf	(??_f_lseek+1)& (0+255),b
 10709  002AEE  0E00               	movlw	0
 10710  002AF0  0100               	movlb	0	; () banked
 10711  002AF2  1571               	andwf	(f_lseek@ofs+2)& (0+255),w,b
 10712  002AF4  0100               	movlb	0	; () banked
 10713  002AF6  6F75               	movwf	(??_f_lseek+2)& (0+255),b
 10714  002AF8  0E00               	movlw	0
 10715  002AFA  0100               	movlb	0	; () banked
 10716  002AFC  1572               	andwf	(f_lseek@ofs+3)& (0+255),w,b
 10717  002AFE  0100               	movlb	0	; () banked
 10718  002B00  6F76               	movwf	(??_f_lseek+3)& (0+255),b
 10719  002B02  0100               	movlb	0	; () banked
 10720  002B04  5173               	movf	??_f_lseek& (0+255),w,b
 10721  002B06  0100               	movlb	0	; () banked
 10722  002B08  1174               	iorwf	(??_f_lseek+1)& (0+255),w,b
 10723  002B0A  0100               	movlb	0	; () banked
 10724  002B0C  1175               	iorwf	(??_f_lseek+2)& (0+255),w,b
 10725  002B0E  0100               	movlb	0	; () banked
 10726  002B10  1176               	iorwf	(??_f_lseek+3)& (0+255),w,b
 10727  002B12  B4D8               	btfsc	status,2,c
 10728  002B14  D052               	goto	l5723
 10729                           
 10730                           ; BSR set to: 0
 10731                           ;ff.c: 3153: nsect = clust2sect(fp->fs, clst);
 10732  002B16  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10733  002B1A  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10734  002B1E  CFDE F00D          	movff	postinc2,clust2sect@fs
 10735  002B22  CFDD F00E          	movff	postdec2,clust2sect@fs+1
 10736  002B26  C08C  F00F         	movff	f_lseek@clst,clust2sect@clst
 10737  002B2A  C08D  F010         	movff	f_lseek@clst+1,clust2sect@clst+1
 10738  002B2E  C08E  F011         	movff	f_lseek@clst+2,clust2sect@clst+2
 10739  002B32  C08F  F012         	movff	f_lseek@clst+3,clust2sect@clst+3
 10740  002B36  EC42  F02F         	call	_clust2sect	;wreg free
 10741  002B3A  C00D  F084         	movff	?_clust2sect,f_lseek@nsect
 10742  002B3E  C00E  F085         	movff	?_clust2sect+1,f_lseek@nsect+1
 10743  002B42  C00F  F086         	movff	?_clust2sect+2,f_lseek@nsect+2
 10744  002B46  C010  F087         	movff	?_clust2sect+3,f_lseek@nsect+3
 10745                           
 10746                           ;ff.c: 3154: if (!nsect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
 10747  002B4A  0100               	movlb	0	; () banked
 10748  002B4C  5184               	movf	f_lseek@nsect& (0+255),w,b
 10749  002B4E  0100               	movlb	0	; () banked
 10750  002B50  1185               	iorwf	(f_lseek@nsect+1)& (0+255),w,b
 10751  002B52  0100               	movlb	0	; () banked
 10752  002B54  1186               	iorwf	(f_lseek@nsect+2)& (0+255),w,b
 10753  002B56  0100               	movlb	0	; () banked
 10754  002B58  1187               	iorwf	(f_lseek@nsect+3)& (0+255),w,b
 10755  002B5A  A4D8               	btfss	status,2,c
 10756  002B5C  D00B               	goto	l5721
 10757                           
 10758                           ; BSR set to: 0
 10759  002B5E  0100               	movlb	0	; () banked
 10760  002B60  EE20 F005          	lfsr	2,5
 10761  002B64  516D               	movf	f_lseek@fp& (0+255),w,b
 10762  002B66  26D9               	addwf	fsr2l,f,c
 10763  002B68  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10764  002B6A  22DA               	addwfc	fsr2h,f,c
 10765  002B6C  0E02               	movlw	2
 10766  002B6E  6EDF               	movwf	indf2,c
 10767                           
 10768                           ; BSR set to: 0
 10769  002B70  0E02               	movlw	2
 10770                           
 10771                           ; BSR set to: 0
 10772  002B72  0012               	return	
 10773  002B74                     l5721:
 10774                           
 10775                           ; BSR set to: 0
 10776                           ;ff.c: 3155: nsect += ofs / ((UINT)512);
 10777  002B74  C06F  F073         	movff	f_lseek@ofs,??_f_lseek
 10778  002B78  C070  F074         	movff	f_lseek@ofs+1,??_f_lseek+1
 10779  002B7C  C071  F075         	movff	f_lseek@ofs+2,??_f_lseek+2
 10780  002B80  C072  F076         	movff	f_lseek@ofs+3,??_f_lseek+3
 10781  002B84  0E0A               	movlw	10
 10782  002B86  D006               	goto	u8260
 10783  002B88                     u8265:
 10784  002B88  0100               	movlb	0	; () banked
 10785  002B8A  90D8               	bcf	status,0,c
 10786  002B8C  3376               	rrcf	(??_f_lseek+3)& (0+255),f,b
 10787  002B8E  3375               	rrcf	(??_f_lseek+2)& (0+255),f,b
 10788  002B90  3374               	rrcf	(??_f_lseek+1)& (0+255),f,b
 10789  002B92  3373               	rrcf	??_f_lseek& (0+255),f,b
 10790  002B94                     u8260:
 10791  002B94  2EE8               	decfsz	wreg,f,c
 10792  002B96  D7F8               	goto	u8265
 10793  002B98  0100               	movlb	0	; () banked
 10794  002B9A  5173               	movf	??_f_lseek& (0+255),w,b
 10795  002B9C  0100               	movlb	0	; () banked
 10796  002B9E  2784               	addwf	f_lseek@nsect& (0+255),f,b
 10797  002BA0  0100               	movlb	0	; () banked
 10798  002BA2  5174               	movf	(??_f_lseek+1)& (0+255),w,b
 10799  002BA4  0100               	movlb	0	; () banked
 10800  002BA6  2385               	addwfc	(f_lseek@nsect+1)& (0+255),f,b
 10801  002BA8  0100               	movlb	0	; () banked
 10802  002BAA  5175               	movf	(??_f_lseek+2)& (0+255),w,b
 10803  002BAC  0100               	movlb	0	; () banked
 10804  002BAE  2386               	addwfc	(f_lseek@nsect+2)& (0+255),f,b
 10805  002BB0  0100               	movlb	0	; () banked
 10806  002BB2  5176               	movf	(??_f_lseek+3)& (0+255),w,b
 10807  002BB4  0100               	movlb	0	; () banked
 10808  002BB6  2387               	addwfc	(f_lseek@nsect+3)& (0+255),f,b
 10809                           
 10810                           ; BSR set to: 0
 10811                           
 10812                           ; BSR set to: 0
 10813  002BB8  D000               	goto	l5723
 10814  002BBA                     l5723:
 10815                           
 10816                           ; BSR set to: 0
 10817                           ;ff.c: 3156: }
 10818                           ;ff.c: 3157: }
 10819                           ;ff.c: 3158: }
 10820                           ;ff.c: 3159: if (fp->fptr % ((UINT)512) && nsect != fp->dsect) {
 10821  002BBA  0100               	movlb	0	; () banked
 10822  002BBC  EE20 F006          	lfsr	2,6
 10823  002BC0  516D               	movf	f_lseek@fp& (0+255),w,b
 10824  002BC2  26D9               	addwf	fsr2l,f,c
 10825  002BC4  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10826  002BC6  22DA               	addwfc	fsr2h,f,c
 10827  002BC8  0EFF               	movlw	255
 10828  002BCA  14DE               	andwf	postinc2,w,c
 10829  002BCC  0100               	movlb	0	; () banked
 10830  002BCE  6F73               	movwf	??_f_lseek& (0+255),b
 10831  002BD0  0E01               	movlw	1
 10832  002BD2  14DE               	andwf	postinc2,w,c
 10833  002BD4  0100               	movlb	0	; () banked
 10834  002BD6  6F74               	movwf	(??_f_lseek+1)& (0+255),b
 10835  002BD8  0E00               	movlw	0
 10836  002BDA  14DE               	andwf	postinc2,w,c
 10837  002BDC  0100               	movlb	0	; () banked
 10838  002BDE  6F75               	movwf	(??_f_lseek+2)& (0+255),b
 10839  002BE0  0E00               	movlw	0
 10840  002BE2  14DE               	andwf	postinc2,w,c
 10841  002BE4  0100               	movlb	0	; () banked
 10842  002BE6  6F76               	movwf	(??_f_lseek+3)& (0+255),b
 10843  002BE8  0100               	movlb	0	; () banked
 10844  002BEA  5173               	movf	??_f_lseek& (0+255),w,b
 10845  002BEC  0100               	movlb	0	; () banked
 10846  002BEE  1174               	iorwf	(??_f_lseek+1)& (0+255),w,b
 10847  002BF0  0100               	movlb	0	; () banked
 10848  002BF2  1175               	iorwf	(??_f_lseek+2)& (0+255),w,b
 10849  002BF4  0100               	movlb	0	; () banked
 10850  002BF6  1176               	iorwf	(??_f_lseek+3)& (0+255),w,b
 10851  002BF8  B4D8               	btfsc	status,2,c
 10852  002BFA  D028               	goto	l5729
 10853                           
 10854                           ; BSR set to: 0
 10855  002BFC  0100               	movlb	0	; () banked
 10856  002BFE  EE20 F016          	lfsr	2,22
 10857  002C02  516D               	movf	f_lseek@fp& (0+255),w,b
 10858  002C04  26D9               	addwf	fsr2l,f,c
 10859  002C06  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10860  002C08  22DA               	addwfc	fsr2h,f,c
 10861  002C0A  0100               	movlb	0	; () banked
 10862  002C0C  5184               	movf	f_lseek@nsect& (0+255),w,b
 10863  002C0E  18DE               	xorwf	postinc2,w,c
 10864  002C10  E10D               	bnz	u8280
 10865  002C12  0100               	movlb	0	; () banked
 10866  002C14  5185               	movf	(f_lseek@nsect+1)& (0+255),w,b
 10867  002C16  18DE               	xorwf	postinc2,w,c
 10868  002C18  E109               	bnz	u8280
 10869  002C1A  0100               	movlb	0	; () banked
 10870  002C1C  5186               	movf	(f_lseek@nsect+2)& (0+255),w,b
 10871  002C1E  18DE               	xorwf	postinc2,w,c
 10872  002C20  E105               	bnz	u8280
 10873  002C22  0100               	movlb	0	; () banked
 10874  002C24  5187               	movf	(f_lseek@nsect+3)& (0+255),w,b
 10875  002C26  18DE               	xorwf	postinc2,w,c
 10876  002C28  B4D8               	btfsc	status,2,c
 10877  002C2A  D010               	goto	l5729
 10878  002C2C                     u8280:
 10879                           
 10880                           ; BSR set to: 0
 10881                           ;ff.c: 3171: fp->dsect = nsect;
 10882  002C2C  0100               	movlb	0	; () banked
 10883  002C2E  EE20 F016          	lfsr	2,22
 10884  002C32  516D               	movf	f_lseek@fp& (0+255),w,b
 10885  002C34  26D9               	addwf	fsr2l,f,c
 10886  002C36  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10887  002C38  22DA               	addwfc	fsr2h,f,c
 10888  002C3A  C084  FFDE         	movff	f_lseek@nsect,postinc2
 10889  002C3E  C085  FFDE         	movff	f_lseek@nsect+1,postinc2
 10890  002C42  C086  FFDE         	movff	f_lseek@nsect+2,postinc2
 10891  002C46  C087  FFDE         	movff	f_lseek@nsect+3,postinc2
 10892  002C4A  D000               	goto	l5729
 10893  002C4C                     l5729:
 10894                           
 10895                           ; BSR set to: 0
 10896                           ;ff.c: 3172: }
 10897                           ;ff.c: 3174: if (fp->fptr > fp->fsize) {
 10898  002C4C  0100               	movlb	0	; () banked
 10899  002C4E  EE20 F006          	lfsr	2,6
 10900  002C52  516D               	movf	f_lseek@fp& (0+255),w,b
 10901  002C54  26D9               	addwf	fsr2l,f,c
 10902  002C56  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10903  002C58  22DA               	addwfc	fsr2h,f,c
 10904  002C5A  0100               	movlb	0	; () banked
 10905  002C5C  EE10 F00A          	lfsr	1,10
 10906  002C60  516D               	movf	f_lseek@fp& (0+255),w,b
 10907  002C62  26E1               	addwf	fsr1l,f,c
 10908  002C64  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10909  002C66  22E2               	addwfc	fsr1h,f,c
 10910  002C68  50DE               	movf	postinc2,w,c
 10911  002C6A  5CE6               	subwf	postinc1,w,c
 10912  002C6C  50DE               	movf	postinc2,w,c
 10913  002C6E  58E6               	subwfb	postinc1,w,c
 10914  002C70  50DE               	movf	postinc2,w,c
 10915  002C72  58E6               	subwfb	postinc1,w,c
 10916  002C74  50DE               	movf	postinc2,w,c
 10917  002C76  58E6               	subwfb	postinc1,w,c
 10918  002C78  B0D8               	btfsc	status,0,c
 10919  002C7A  D020               	goto	l5735
 10920                           
 10921                           ; BSR set to: 0
 10922                           ;ff.c: 3175: fp->fsize = fp->fptr;
 10923  002C7C  0100               	movlb	0	; () banked
 10924  002C7E  EE20 F006          	lfsr	2,6
 10925  002C82  516D               	movf	f_lseek@fp& (0+255),w,b
 10926  002C84  26D9               	addwf	fsr2l,f,c
 10927  002C86  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10928  002C88  22DA               	addwfc	fsr2h,f,c
 10929  002C8A  0100               	movlb	0	; () banked
 10930  002C8C  EE10 F00A          	lfsr	1,10
 10931  002C90  516D               	movf	f_lseek@fp& (0+255),w,b
 10932  002C92  26E1               	addwf	fsr1l,f,c
 10933  002C94  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10934  002C96  22E2               	addwfc	fsr1h,f,c
 10935  002C98  CFDE FFE6          	movff	postinc2,postinc1
 10936  002C9C  CFDE FFE6          	movff	postinc2,postinc1
 10937  002CA0  CFDE FFE6          	movff	postinc2,postinc1
 10938  002CA4  CFDE FFE6          	movff	postinc2,postinc1
 10939                           
 10940                           ; BSR set to: 0
 10941                           ;ff.c: 3176: fp->flag |= 0x20;
 10942  002CA8  0100               	movlb	0	; () banked
 10943  002CAA  EE20 F004          	lfsr	2,4
 10944  002CAE  516D               	movf	f_lseek@fp& (0+255),w,b
 10945  002CB0  26D9               	addwf	fsr2l,f,c
 10946  002CB2  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10947  002CB4  22DA               	addwfc	fsr2h,f,c
 10948  002CB6  0E00               	movlw	0
 10949  002CB8  8ADB               	bsf	plusw2,5,c
 10950  002CBA  D000               	goto	l5735
 10951  002CBC                     l5735:
 10952                           
 10953                           ; BSR set to: 0
 10954                           ;ff.c: 3177: }
 10955                           ;ff.c: 3179: }
 10956                           ;ff.c: 3181: return res;
 10957  002CBC  0100               	movlb	0	; () banked
 10958  002CBE  5183               	movf	f_lseek@res& (0+255),w,b
 10959  002CC0  0012               	return	
 10960                           
 10961                           ; BSR set to: 0
 10962                           
 10963                           ; BSR set to: 0
 10964  002CC2  0012               	return		;funcret
 10965  002CC4                     __end_of_f_lseek:
 10966                           	opt stack 0
 10967                           tblptru	equ	0xFF8
 10968                           tblptrh	equ	0xFF7
 10969                           tblptrl	equ	0xFF6
 10970                           tablat	equ	0xFF5
 10971                           prodh	equ	0xFF4
 10972                           prodl	equ	0xFF3
 10973                           indf0	equ	0xFEF
 10974                           postinc0	equ	0xFEE
 10975                           fsr0h	equ	0xFEA
 10976                           fsr0l	equ	0xFE9
 10977                           wreg	equ	0xFE8
 10978                           indf1	equ	0xFE7
 10979                           postinc1	equ	0xFE6
 10980                           postdec1	equ	0xFE5
 10981                           fsr1h	equ	0xFE2
 10982                           fsr1l	equ	0xFE1
 10983                           indf2	equ	0xFDF
 10984                           postinc2	equ	0xFDE
 10985                           postdec2	equ	0xFDD
 10986                           plusw2	equ	0xFDB
 10987                           fsr2h	equ	0xFDA
 10988                           fsr2l	equ	0xFD9
 10989                           status	equ	0xFD8
 10990                           
 10991 ;; *************** function _create_chain *****************
 10992 ;; Defined at:
 10993 ;;		line 990 in file "../../SD_Card_FatFs/ff.c"
 10994 ;; Parameters:    Size  Location     Type
 10995 ;;  fs              2   85[COMRAM] PTR struct .
 10996 ;;		 -> NULL(0), FatFs(558), 
 10997 ;;  clst            4   87[COMRAM] unsigned long 
 10998 ;; Auto vars:     Size  Location     Type
 10999 ;;  cs              4    9[BANK0 ] unsigned long 
 11000 ;;  ncl             4    5[BANK0 ] unsigned long 
 11001 ;;  scl             4    1[BANK0 ] unsigned long 
 11002 ;;  res             1    0[BANK0 ] enum E88
 11003 ;; Return value:  Size  Location     Type
 11004 ;;                  4   85[COMRAM] unsigned long 
 11005 ;; Registers used:
 11006 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11007 ;; Tracked objects:
 11008 ;;		On entry : 0/0
 11009 ;;		On exit  : 0/0
 11010 ;;		Unchanged: 0/0
 11011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11012 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11013 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11014 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11015 ;;      Totals:        10      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11016 ;;Total ram usage:       23 bytes
 11017 ;; Hardware stack levels used:    1
 11018 ;; Hardware stack levels required when called:    9
 11019 ;; This function calls:
 11020 ;;		_get_fat
 11021 ;;		_put_fat
 11022 ;; This function is called by:
 11023 ;;		_dir_next
 11024 ;;		_f_write
 11025 ;;		_f_lseek
 11026 ;; This function uses a non-reentrant model
 11027 ;;
 11028                           
 11029                           	psect	text22
 11030  003EB2                     __ptext22:
 11031                           	opt stack 0
 11032  003EB2                     _create_chain:
 11033                           	opt stack 20
 11034                           
 11035                           ;ff.c: 995: DWORD cs, ncl, scl;
 11036                           ;ff.c: 996: FRESULT res;
 11037                           ;ff.c: 999: if (clst == 0) {
 11038                           
 11039                           ; BSR set to: 0
 11040                           ;incstack = 0
 11041  003EB2  5058               	movf	create_chain@clst,w,c
 11042  003EB4  1059               	iorwf	create_chain@clst+1,w,c
 11043  003EB6  105A               	iorwf	create_chain@clst+2,w,c
 11044  003EB8  105B               	iorwf	create_chain@clst+3,w,c
 11045  003EBA  A4D8               	btfss	status,2,c
 11046  003EBC  D036               	goto	l4177
 11047                           
 11048                           ;ff.c: 1000: scl = fs->last_clust;
 11049  003EBE  EE20 F00A          	lfsr	2,10
 11050  003EC2  5056               	movf	create_chain@fs,w,c
 11051  003EC4  26D9               	addwf	fsr2l,f,c
 11052  003EC6  5057               	movf	create_chain@fs+1,w,c
 11053  003EC8  22DA               	addwfc	fsr2h,f,c
 11054  003ECA  CFDE F061          	movff	postinc2,create_chain@scl
 11055  003ECE  CFDE F062          	movff	postinc2,create_chain@scl+1
 11056  003ED2  CFDE F063          	movff	postinc2,create_chain@scl+2
 11057  003ED6  CFDE F064          	movff	postinc2,create_chain@scl+3
 11058                           
 11059                           ;ff.c: 1001: if (!scl || scl >= fs->n_fatent) scl = 1;
 11060  003EDA  0100               	movlb	0	; () banked
 11061  003EDC  5161               	movf	create_chain@scl& (0+255),w,b
 11062  003EDE  0100               	movlb	0	; () banked
 11063  003EE0  1162               	iorwf	(create_chain@scl+1)& (0+255),w,b
 11064  003EE2  0100               	movlb	0	; () banked
 11065  003EE4  1163               	iorwf	(create_chain@scl+2)& (0+255),w,b
 11066  003EE6  0100               	movlb	0	; () banked
 11067  003EE8  1164               	iorwf	(create_chain@scl+3)& (0+255),w,b
 11068  003EEA  B4D8               	btfsc	status,2,c
 11069  003EEC  D014               	goto	l4175
 11070                           
 11071                           ; BSR set to: 0
 11072  003EEE  EE20 F012          	lfsr	2,18
 11073  003EF2  5056               	movf	create_chain@fs,w,c
 11074  003EF4  26D9               	addwf	fsr2l,f,c
 11075  003EF6  5057               	movf	create_chain@fs+1,w,c
 11076  003EF8  22DA               	addwfc	fsr2h,f,c
 11077  003EFA  50DE               	movf	postinc2,w,c
 11078  003EFC  0100               	movlb	0	; () banked
 11079  003EFE  5D61               	subwf	create_chain@scl& (0+255),w,b
 11080  003F00  50DE               	movf	postinc2,w,c
 11081  003F02  0100               	movlb	0	; () banked
 11082  003F04  5962               	subwfb	(create_chain@scl+1)& (0+255),w,b
 11083  003F06  50DE               	movf	postinc2,w,c
 11084  003F08  0100               	movlb	0	; () banked
 11085  003F0A  5963               	subwfb	(create_chain@scl+2)& (0+255),w,b
 11086  003F0C  50DE               	movf	postinc2,w,c
 11087  003F0E  0100               	movlb	0	; () banked
 11088  003F10  5964               	subwfb	(create_chain@scl+3)& (0+255),w,b
 11089  003F12  A0D8               	btfss	status,0,c
 11090  003F14  D070               	goto	l343
 11091  003F16                     l4175:
 11092                           
 11093                           ; BSR set to: 0
 11094  003F16  0E01               	movlw	1
 11095  003F18  0100               	movlb	0	; () banked
 11096  003F1A  6F61               	movwf	create_chain@scl& (0+255),b
 11097  003F1C  0E00               	movlw	0
 11098  003F1E  6F62               	movwf	(create_chain@scl+1)& (0+255),b
 11099  003F20  0E00               	movlw	0
 11100  003F22  6F63               	movwf	(create_chain@scl+2)& (0+255),b
 11101  003F24  0E00               	movlw	0
 11102  003F26  6F64               	movwf	(create_chain@scl+3)& (0+255),b
 11103                           
 11104                           ; BSR set to: 0
 11105                           ;ff.c: 1002: }
 11106  003F28  D066               	goto	l343
 11107  003F2A                     l4177:
 11108                           
 11109                           ;ff.c: 1003: else {
 11110                           ;ff.c: 1004: cs = get_fat(fs, clst);
 11111  003F2A  C056  F03B         	movff	create_chain@fs,get_fat@fs
 11112  003F2E  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
 11113  003F32  C058  F03D         	movff	create_chain@clst,get_fat@clst
 11114  003F36  C059  F03E         	movff	create_chain@clst+1,get_fat@clst+1
 11115  003F3A  C05A  F03F         	movff	create_chain@clst+2,get_fat@clst+2
 11116  003F3E  C05B  F040         	movff	create_chain@clst+3,get_fat@clst+3
 11117  003F42  EC34  F021         	call	_get_fat	;wreg free
 11118  003F46  C03B  F069         	movff	?_get_fat,create_chain@cs
 11119  003F4A  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
 11120  003F4E  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
 11121  003F52  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
 11122                           
 11123                           ;ff.c: 1005: if (cs < 2) return 1;
 11124  003F56  0100               	movlb	0	; () banked
 11125  003F58  516C               	movf	(create_chain@cs+3)& (0+255),w,b
 11126  003F5A  0100               	movlb	0	; () banked
 11127  003F5C  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
 11128  003F5E  0100               	movlb	0	; () banked
 11129  003F60  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
 11130  003F62  E10E               	bnz	l4185
 11131  003F64  0E02               	movlw	2
 11132  003F66  0100               	movlb	0	; () banked
 11133  003F68  5D69               	subwf	create_chain@cs& (0+255),w,b
 11134  003F6A  B0D8               	btfsc	status,0,c
 11135  003F6C  D009               	goto	l4185
 11136                           
 11137                           ; BSR set to: 0
 11138  003F6E  0E01               	movlw	1
 11139  003F70  6E56               	movwf	?_create_chain,c
 11140  003F72  0E00               	movlw	0
 11141  003F74  6E57               	movwf	?_create_chain+1,c
 11142  003F76  0E00               	movlw	0
 11143  003F78  6E58               	movwf	?_create_chain+2,c
 11144  003F7A  0E00               	movlw	0
 11145  003F7C  6E59               	movwf	?_create_chain+3,c
 11146                           
 11147                           ; BSR set to: 0
 11148  003F7E  0012               	return	
 11149  003F80                     l4185:
 11150                           
 11151                           ; BSR set to: 0
 11152                           ;ff.c: 1006: if (cs == 0xFFFFFFFF) return cs;
 11153  003F80  0100               	movlb	0	; () banked
 11154  003F82  2969               	incf	create_chain@cs& (0+255),w,b
 11155  003F84  E113               	bnz	l4189
 11156  003F86  0100               	movlb	0	; () banked
 11157  003F88  296A               	incf	(create_chain@cs+1)& (0+255),w,b
 11158  003F8A  E110               	bnz	l4189
 11159  003F8C  0100               	movlb	0	; () banked
 11160  003F8E  296B               	incf	(create_chain@cs+2)& (0+255),w,b
 11161  003F90  E10D               	bnz	l4189
 11162  003F92  0100               	movlb	0	; () banked
 11163  003F94  296C               	incf	(create_chain@cs+3)& (0+255),w,b
 11164  003F96  A4D8               	btfss	status,2,c
 11165  003F98  D009               	goto	l4189
 11166                           
 11167                           ; BSR set to: 0
 11168  003F9A  C069  F056         	movff	create_chain@cs,?_create_chain
 11169  003F9E  C06A  F057         	movff	create_chain@cs+1,?_create_chain+1
 11170  003FA2  C06B  F058         	movff	create_chain@cs+2,?_create_chain+2
 11171  003FA6  C06C  F059         	movff	create_chain@cs+3,?_create_chain+3
 11172  003FAA  0012               	return	
 11173  003FAC                     l4189:
 11174                           
 11175                           ; BSR set to: 0
 11176                           ;ff.c: 1007: if (cs < fs->n_fatent) return cs;
 11177  003FAC  EE20 F012          	lfsr	2,18
 11178  003FB0  5056               	movf	create_chain@fs,w,c
 11179  003FB2  26D9               	addwf	fsr2l,f,c
 11180  003FB4  5057               	movf	create_chain@fs+1,w,c
 11181  003FB6  22DA               	addwfc	fsr2h,f,c
 11182  003FB8  50DE               	movf	postinc2,w,c
 11183  003FBA  0100               	movlb	0	; () banked
 11184  003FBC  5D69               	subwf	create_chain@cs& (0+255),w,b
 11185  003FBE  50DE               	movf	postinc2,w,c
 11186  003FC0  0100               	movlb	0	; () banked
 11187  003FC2  596A               	subwfb	(create_chain@cs+1)& (0+255),w,b
 11188  003FC4  50DE               	movf	postinc2,w,c
 11189  003FC6  0100               	movlb	0	; () banked
 11190  003FC8  596B               	subwfb	(create_chain@cs+2)& (0+255),w,b
 11191  003FCA  50DE               	movf	postinc2,w,c
 11192  003FCC  0100               	movlb	0	; () banked
 11193  003FCE  596C               	subwfb	(create_chain@cs+3)& (0+255),w,b
 11194  003FD0  B0D8               	btfsc	status,0,c
 11195  003FD2  D009               	goto	l347
 11196                           
 11197                           ; BSR set to: 0
 11198  003FD4  C069  F056         	movff	create_chain@cs,?_create_chain
 11199  003FD8  C06A  F057         	movff	create_chain@cs+1,?_create_chain+1
 11200  003FDC  C06B  F058         	movff	create_chain@cs+2,?_create_chain+2
 11201  003FE0  C06C  F059         	movff	create_chain@cs+3,?_create_chain+3
 11202  003FE4  0012               	return	
 11203  003FE6                     l347:
 11204                           
 11205                           ; BSR set to: 0
 11206                           ;ff.c: 1008: scl = clst;
 11207  003FE6  C058  F061         	movff	create_chain@clst,create_chain@scl
 11208  003FEA  C059  F062         	movff	create_chain@clst+1,create_chain@scl+1
 11209  003FEE  C05A  F063         	movff	create_chain@clst+2,create_chain@scl+2
 11210  003FF2  C05B  F064         	movff	create_chain@clst+3,create_chain@scl+3
 11211  003FF6                     l343:
 11212                           
 11213                           ; BSR set to: 0
 11214                           ;ff.c: 1009: }
 11215                           ;ff.c: 1011: ncl = scl;
 11216  003FF6  C061  F065         	movff	create_chain@scl,create_chain@ncl
 11217  003FFA  C062  F066         	movff	create_chain@scl+1,create_chain@ncl+1
 11218  003FFE  C063  F067         	movff	create_chain@scl+2,create_chain@ncl+2
 11219  004002  C064  F068         	movff	create_chain@scl+3,create_chain@ncl+3
 11220  004006  D000               	goto	l4193
 11221  004008                     l4193:
 11222                           
 11223                           ; BSR set to: 0
 11224                           ;ff.c: 1013: ncl++;
 11225  004008  0E01               	movlw	1
 11226  00400A  0100               	movlb	0	; () banked
 11227  00400C  2765               	addwf	create_chain@ncl& (0+255),f,b
 11228  00400E  0E00               	movlw	0
 11229  004010  2366               	addwfc	(create_chain@ncl+1)& (0+255),f,b
 11230  004012  2367               	addwfc	(create_chain@ncl+2)& (0+255),f,b
 11231  004014  2368               	addwfc	(create_chain@ncl+3)& (0+255),f,b
 11232                           
 11233                           ; BSR set to: 0
 11234                           ;ff.c: 1014: if (ncl >= fs->n_fatent) {
 11235  004016  EE20 F012          	lfsr	2,18
 11236  00401A  5056               	movf	create_chain@fs,w,c
 11237  00401C  26D9               	addwf	fsr2l,f,c
 11238  00401E  5057               	movf	create_chain@fs+1,w,c
 11239  004020  22DA               	addwfc	fsr2h,f,c
 11240  004022  50DE               	movf	postinc2,w,c
 11241  004024  0100               	movlb	0	; () banked
 11242  004026  5D65               	subwf	create_chain@ncl& (0+255),w,b
 11243  004028  50DE               	movf	postinc2,w,c
 11244  00402A  0100               	movlb	0	; () banked
 11245  00402C  5966               	subwfb	(create_chain@ncl+1)& (0+255),w,b
 11246  00402E  50DE               	movf	postinc2,w,c
 11247  004030  0100               	movlb	0	; () banked
 11248  004032  5967               	subwfb	(create_chain@ncl+2)& (0+255),w,b
 11249  004034  50DE               	movf	postinc2,w,c
 11250  004036  0100               	movlb	0	; () banked
 11251  004038  5968               	subwfb	(create_chain@ncl+3)& (0+255),w,b
 11252  00403A  A0D8               	btfss	status,0,c
 11253  00403C  D025               	goto	l4205
 11254                           
 11255                           ; BSR set to: 0
 11256                           ;ff.c: 1015: ncl = 2;
 11257  00403E  0E02               	movlw	2
 11258  004040  0100               	movlb	0	; () banked
 11259  004042  6F65               	movwf	create_chain@ncl& (0+255),b
 11260  004044  0E00               	movlw	0
 11261  004046  6F66               	movwf	(create_chain@ncl+1)& (0+255),b
 11262  004048  0E00               	movlw	0
 11263  00404A  6F67               	movwf	(create_chain@ncl+2)& (0+255),b
 11264  00404C  0E00               	movlw	0
 11265  00404E  6F68               	movwf	(create_chain@ncl+3)& (0+255),b
 11266                           
 11267                           ; BSR set to: 0
 11268                           ;ff.c: 1016: if (ncl > scl) return 0;
 11269  004050  0100               	movlb	0	; () banked
 11270  004052  5165               	movf	create_chain@ncl& (0+255),w,b
 11271  004054  0100               	movlb	0	; () banked
 11272  004056  5D61               	subwf	create_chain@scl& (0+255),w,b
 11273  004058  0100               	movlb	0	; () banked
 11274  00405A  5166               	movf	(create_chain@ncl+1)& (0+255),w,b
 11275  00405C  0100               	movlb	0	; () banked
 11276  00405E  5962               	subwfb	(create_chain@scl+1)& (0+255),w,b
 11277  004060  0100               	movlb	0	; () banked
 11278  004062  5167               	movf	(create_chain@ncl+2)& (0+255),w,b
 11279  004064  0100               	movlb	0	; () banked
 11280  004066  5963               	subwfb	(create_chain@scl+2)& (0+255),w,b
 11281  004068  0100               	movlb	0	; () banked
 11282  00406A  5168               	movf	(create_chain@ncl+3)& (0+255),w,b
 11283  00406C  0100               	movlb	0	; () banked
 11284  00406E  5964               	subwfb	(create_chain@scl+3)& (0+255),w,b
 11285  004070  B0D8               	btfsc	status,0,c
 11286  004072  D00A               	goto	l4205
 11287                           
 11288                           ; BSR set to: 0
 11289  004074  0E00               	movlw	0
 11290  004076  6E56               	movwf	?_create_chain,c
 11291  004078  0E00               	movlw	0
 11292  00407A  6E57               	movwf	?_create_chain+1,c
 11293  00407C  0E00               	movlw	0
 11294  00407E  6E58               	movwf	?_create_chain+2,c
 11295  004080  0E00               	movlw	0
 11296  004082  6E59               	movwf	?_create_chain+3,c
 11297                           
 11298                           ; BSR set to: 0
 11299  004084  0012               	return	
 11300                           
 11301                           ; BSR set to: 0
 11302  004086  D000               	goto	l4205
 11303  004088                     l4205:
 11304                           
 11305                           ; BSR set to: 0
 11306                           ;ff.c: 1017: }
 11307                           ;ff.c: 1018: cs = get_fat(fs, ncl);
 11308  004088  C056  F03B         	movff	create_chain@fs,get_fat@fs
 11309  00408C  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
 11310  004090  C065  F03D         	movff	create_chain@ncl,get_fat@clst
 11311  004094  C066  F03E         	movff	create_chain@ncl+1,get_fat@clst+1
 11312  004098  C067  F03F         	movff	create_chain@ncl+2,get_fat@clst+2
 11313  00409C  C068  F040         	movff	create_chain@ncl+3,get_fat@clst+3
 11314  0040A0  EC34  F021         	call	_get_fat	;wreg free
 11315  0040A4  C03B  F069         	movff	?_get_fat,create_chain@cs
 11316  0040A8  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
 11317  0040AC  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
 11318  0040B0  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
 11319                           
 11320                           ;ff.c: 1019: if (cs == 0) break;
 11321  0040B4  0100               	movlb	0	; () banked
 11322  0040B6  5169               	movf	create_chain@cs& (0+255),w,b
 11323  0040B8  0100               	movlb	0	; () banked
 11324  0040BA  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
 11325  0040BC  0100               	movlb	0	; () banked
 11326  0040BE  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
 11327  0040C0  0100               	movlb	0	; () banked
 11328  0040C2  116C               	iorwf	(create_chain@cs+3)& (0+255),w,b
 11329  0040C4  B4D8               	btfsc	status,2,c
 11330  0040C6  D041               	goto	l4221
 11331  0040C8  D001               	goto	l4211
 11332                           
 11333                           ; BSR set to: 0
 11334  0040CA  D03F               	goto	l4221
 11335  0040CC                     l4211:
 11336                           
 11337                           ; BSR set to: 0
 11338                           ;ff.c: 1020: if (cs == 0xFFFFFFFF || cs == 1)
 11339  0040CC  0100               	movlb	0	; () banked
 11340  0040CE  2969               	incf	create_chain@cs& (0+255),w,b
 11341  0040D0  E10A               	bnz	u5440
 11342  0040D2  0100               	movlb	0	; () banked
 11343  0040D4  296A               	incf	(create_chain@cs+1)& (0+255),w,b
 11344  0040D6  E107               	bnz	u5440
 11345  0040D8  0100               	movlb	0	; () banked
 11346  0040DA  296B               	incf	(create_chain@cs+2)& (0+255),w,b
 11347  0040DC  E104               	bnz	u5440
 11348  0040DE  0100               	movlb	0	; () banked
 11349  0040E0  296C               	incf	(create_chain@cs+3)& (0+255),w,b
 11350  0040E2  B4D8               	btfsc	status,2,c
 11351  0040E4  D00A               	goto	l355
 11352  0040E6                     u5440:
 11353                           
 11354                           ; BSR set to: 0
 11355  0040E6  0100               	movlb	0	; () banked
 11356  0040E8  0569               	decf	create_chain@cs& (0+255),w,b
 11357  0040EA  0100               	movlb	0	; () banked
 11358  0040EC  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
 11359  0040EE  0100               	movlb	0	; () banked
 11360  0040F0  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
 11361  0040F2  0100               	movlb	0	; () banked
 11362  0040F4  116C               	iorwf	(create_chain@cs+3)& (0+255),w,b
 11363  0040F6  A4D8               	btfss	status,2,c
 11364  0040F8  D009               	goto	l4215
 11365  0040FA                     l355:
 11366                           
 11367                           ; BSR set to: 0
 11368                           ;ff.c: 1021: return cs;
 11369  0040FA  C069  F056         	movff	create_chain@cs,?_create_chain
 11370  0040FE  C06A  F057         	movff	create_chain@cs+1,?_create_chain+1
 11371  004102  C06B  F058         	movff	create_chain@cs+2,?_create_chain+2
 11372  004106  C06C  F059         	movff	create_chain@cs+3,?_create_chain+3
 11373  00410A  0012               	return	
 11374  00410C                     l4215:
 11375                           
 11376                           ; BSR set to: 0
 11377                           ;ff.c: 1022: if (ncl == scl) return 0;
 11378  00410C  0100               	movlb	0	; () banked
 11379  00410E  5161               	movf	create_chain@scl& (0+255),w,b
 11380  004110  0100               	movlb	0	; () banked
 11381  004112  1965               	xorwf	create_chain@ncl& (0+255),w,b
 11382  004114  E10F               	bnz	u5461
 11383  004116  0100               	movlb	0	; () banked
 11384  004118  5162               	movf	(create_chain@scl+1)& (0+255),w,b
 11385  00411A  0100               	movlb	0	; () banked
 11386  00411C  1966               	xorwf	(create_chain@ncl+1)& (0+255),w,b
 11387  00411E  E10A               	bnz	u5461
 11388  004120  0100               	movlb	0	; () banked
 11389  004122  5163               	movf	(create_chain@scl+2)& (0+255),w,b
 11390  004124  0100               	movlb	0	; () banked
 11391  004126  1967               	xorwf	(create_chain@ncl+2)& (0+255),w,b
 11392  004128  E105               	bnz	u5461
 11393  00412A  0100               	movlb	0	; () banked
 11394  00412C  5164               	movf	(create_chain@scl+3)& (0+255),w,b
 11395  00412E  0100               	movlb	0	; () banked
 11396  004130  1968               	xorwf	(create_chain@ncl+3)& (0+255),w,b
 11397  004132  A4D8               	btfss	status,2,c
 11398  004134                     u5461:
 11399  004134  D769               	goto	l4193
 11400                           
 11401                           ; BSR set to: 0
 11402  004136  0E00               	movlw	0
 11403  004138  6E56               	movwf	?_create_chain,c
 11404  00413A  0E00               	movlw	0
 11405  00413C  6E57               	movwf	?_create_chain+1,c
 11406  00413E  0E00               	movlw	0
 11407  004140  6E58               	movwf	?_create_chain+2,c
 11408  004142  0E00               	movlw	0
 11409  004144  6E59               	movwf	?_create_chain+3,c
 11410                           
 11411                           ; BSR set to: 0
 11412  004146  0012               	return	
 11413                           
 11414                           ; BSR set to: 0
 11415                           ;ff.c: 1023: }
 11416  004148  D75F               	goto	l4193
 11417  00414A                     l4221:
 11418                           
 11419                           ; BSR set to: 0
 11420                           ;ff.c: 1025: res = put_fat(fs, ncl, 0x0FFFFFFF);
 11421  00414A  C056  F03B         	movff	create_chain@fs,put_fat@fs
 11422  00414E  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
 11423  004152  C065  F03D         	movff	create_chain@ncl,put_fat@clst
 11424  004156  C066  F03E         	movff	create_chain@ncl+1,put_fat@clst+1
 11425  00415A  C067  F03F         	movff	create_chain@ncl+2,put_fat@clst+2
 11426  00415E  C068  F040         	movff	create_chain@ncl+3,put_fat@clst+3
 11427  004162  0EFF               	movlw	255
 11428  004164  6E41               	movwf	put_fat@val,c
 11429  004166  0EFF               	movlw	255
 11430  004168  6E42               	movwf	put_fat@val+1,c
 11431  00416A  0EFF               	movlw	255
 11432  00416C  6E43               	movwf	put_fat@val+2,c
 11433  00416E  0E0F               	movlw	15
 11434  004170  6E44               	movwf	put_fat@val+3,c
 11435  004172  EC4D  F01D         	call	_put_fat	;wreg free
 11436  004176  0100               	movlb	0	; () banked
 11437  004178  6F60               	movwf	create_chain@res& (0+255),b
 11438                           
 11439                           ; BSR set to: 0
 11440                           ;ff.c: 1026: if (res == FR_OK && clst != 0) {
 11441  00417A  0100               	movlb	0	; () banked
 11442  00417C  5160               	movf	create_chain@res& (0+255),w,b
 11443  00417E  0100               	movlb	0	; () banked
 11444  004180  A4D8               	btfss	status,2,c
 11445  004182  D01F               	goto	l4229
 11446                           
 11447                           ; BSR set to: 0
 11448  004184  5058               	movf	create_chain@clst,w,c
 11449  004186  1059               	iorwf	create_chain@clst+1,w,c
 11450  004188  105A               	iorwf	create_chain@clst+2,w,c
 11451  00418A  105B               	iorwf	create_chain@clst+3,w,c
 11452  00418C  B4D8               	btfsc	status,2,c
 11453  00418E  D019               	goto	l4229
 11454                           
 11455                           ; BSR set to: 0
 11456                           ;ff.c: 1027: res = put_fat(fs, clst, ncl);
 11457  004190  C056  F03B         	movff	create_chain@fs,put_fat@fs
 11458  004194  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
 11459  004198  C058  F03D         	movff	create_chain@clst,put_fat@clst
 11460  00419C  C059  F03E         	movff	create_chain@clst+1,put_fat@clst+1
 11461  0041A0  C05A  F03F         	movff	create_chain@clst+2,put_fat@clst+2
 11462  0041A4  C05B  F040         	movff	create_chain@clst+3,put_fat@clst+3
 11463  0041A8  C065  F041         	movff	create_chain@ncl,put_fat@val
 11464  0041AC  C066  F042         	movff	create_chain@ncl+1,put_fat@val+1
 11465  0041B0  C067  F043         	movff	create_chain@ncl+2,put_fat@val+2
 11466  0041B4  C068  F044         	movff	create_chain@ncl+3,put_fat@val+3
 11467  0041B8  EC4D  F01D         	call	_put_fat	;wreg free
 11468  0041BC  0100               	movlb	0	; () banked
 11469  0041BE  6F60               	movwf	create_chain@res& (0+255),b
 11470  0041C0  D000               	goto	l4229
 11471  0041C2                     l4229:
 11472                           
 11473                           ; BSR set to: 0
 11474                           ;ff.c: 1028: }
 11475                           ;ff.c: 1029: if (res == FR_OK) {
 11476  0041C2  0100               	movlb	0	; () banked
 11477  0041C4  5160               	movf	create_chain@res& (0+255),w,b
 11478  0041C6  0100               	movlb	0	; () banked
 11479  0041C8  A4D8               	btfss	status,2,c
 11480  0041CA  D031               	goto	l4235
 11481                           
 11482                           ; BSR set to: 0
 11483                           ;ff.c: 1030: fs->last_clust = ncl;
 11484  0041CC  EE20 F00A          	lfsr	2,10
 11485  0041D0  5056               	movf	create_chain@fs,w,c
 11486  0041D2  26D9               	addwf	fsr2l,f,c
 11487  0041D4  5057               	movf	create_chain@fs+1,w,c
 11488  0041D6  22DA               	addwfc	fsr2h,f,c
 11489  0041D8  C065  FFDE         	movff	create_chain@ncl,postinc2
 11490  0041DC  C066  FFDE         	movff	create_chain@ncl+1,postinc2
 11491  0041E0  C067  FFDE         	movff	create_chain@ncl+2,postinc2
 11492  0041E4  C068  FFDE         	movff	create_chain@ncl+3,postinc2
 11493                           
 11494                           ;ff.c: 1031: if (fs->free_clust != 0xFFFFFFFF) {
 11495  0041E8  EE20 F00E          	lfsr	2,14
 11496  0041EC  5056               	movf	create_chain@fs,w,c
 11497  0041EE  26D9               	addwf	fsr2l,f,c
 11498  0041F0  5057               	movf	create_chain@fs+1,w,c
 11499  0041F2  22DA               	addwfc	fsr2h,f,c
 11500  0041F4  28DE               	incf	postinc2,w,c
 11501  0041F6  E107               	bnz	u5500
 11502  0041F8  28DE               	incf	postinc2,w,c
 11503  0041FA  E105               	bnz	u5500
 11504  0041FC  28DE               	incf	postinc2,w,c
 11505  0041FE  E103               	bnz	u5500
 11506  004200  28DE               	incf	postinc2,w,c
 11507  004202  B4D8               	btfsc	status,2,c
 11508  004204  D028               	goto	l360
 11509  004206                     u5500:
 11510                           
 11511                           ; BSR set to: 0
 11512                           ;ff.c: 1032: fs->free_clust--;
 11513  004206  EE20 F00E          	lfsr	2,14
 11514  00420A  5056               	movf	create_chain@fs,w,c
 11515  00420C  26D9               	addwf	fsr2l,f,c
 11516  00420E  5057               	movf	create_chain@fs+1,w,c
 11517  004210  22DA               	addwfc	fsr2h,f,c
 11518  004212  06DE               	decf	postinc2,f,c
 11519  004214  0E00               	movlw	0
 11520  004216  5ADE               	subwfb	postinc2,f,c
 11521  004218  5ADE               	subwfb	postinc2,f,c
 11522  00421A  5ADE               	subwfb	postinc2,f,c
 11523                           
 11524                           ;ff.c: 1033: fs->fsi_flag |= 1;
 11525  00421C  EE20 F005          	lfsr	2,5
 11526  004220  5056               	movf	create_chain@fs,w,c
 11527  004222  26D9               	addwf	fsr2l,f,c
 11528  004224  5057               	movf	create_chain@fs+1,w,c
 11529  004226  22DA               	addwfc	fsr2h,f,c
 11530  004228  0E00               	movlw	0
 11531  00422A  80DB               	bsf	plusw2,0,c
 11532                           
 11533                           ; BSR set to: 0
 11534                           ;ff.c: 1034: }
 11535                           ;ff.c: 1035: } else {
 11536  00422C  D014               	goto	l360
 11537  00422E                     l4235:
 11538                           
 11539                           ; BSR set to: 0
 11540                           ;ff.c: 1036: ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 11541  00422E  0100               	movlb	0	; () banked
 11542  004230  0560               	decf	create_chain@res& (0+255),w,b
 11543  004232  B4D8               	btfsc	status,2,c
 11544  004234  D00A               	goto	l362
 11545                           
 11546                           ; BSR set to: 0
 11547  004236  0E01               	movlw	1
 11548  004238  0100               	movlb	0	; () banked
 11549  00423A  6F65               	movwf	create_chain@ncl& (0+255),b
 11550  00423C  0E00               	movlw	0
 11551  00423E  6F66               	movwf	(create_chain@ncl+1)& (0+255),b
 11552  004240  0E00               	movlw	0
 11553  004242  6F67               	movwf	(create_chain@ncl+2)& (0+255),b
 11554  004244  0E00               	movlw	0
 11555  004246  6F68               	movwf	(create_chain@ncl+3)& (0+255),b
 11556  004248  D006               	goto	l360
 11557  00424A                     l362:
 11558                           
 11559                           ; BSR set to: 0
 11560  00424A  0100               	movlb	0	; () banked
 11561  00424C  6965               	setf	create_chain@ncl& (0+255),b
 11562  00424E  6966               	setf	(create_chain@ncl+1)& (0+255),b
 11563  004250  6967               	setf	(create_chain@ncl+2)& (0+255),b
 11564  004252  6968               	setf	(create_chain@ncl+3)& (0+255),b
 11565  004254  D000               	goto	l360
 11566  004256                     l360:
 11567                           
 11568                           ; BSR set to: 0
 11569                           ;ff.c: 1037: }
 11570                           ;ff.c: 1039: return ncl;
 11571  004256  C065  F056         	movff	create_chain@ncl,?_create_chain
 11572  00425A  C066  F057         	movff	create_chain@ncl+1,?_create_chain+1
 11573  00425E  C067  F058         	movff	create_chain@ncl+2,?_create_chain+2
 11574  004262  C068  F059         	movff	create_chain@ncl+3,?_create_chain+3
 11575                           
 11576                           ; BSR set to: 0
 11577  004266  0012               	return		;funcret
 11578  004268                     __end_of_create_chain:
 11579                           	opt stack 0
 11580                           tblptru	equ	0xFF8
 11581                           tblptrh	equ	0xFF7
 11582                           tblptrl	equ	0xFF6
 11583                           tablat	equ	0xFF5
 11584                           prodh	equ	0xFF4
 11585                           prodl	equ	0xFF3
 11586                           indf0	equ	0xFEF
 11587                           postinc0	equ	0xFEE
 11588                           fsr0h	equ	0xFEA
 11589                           fsr0l	equ	0xFE9
 11590                           wreg	equ	0xFE8
 11591                           indf1	equ	0xFE7
 11592                           postinc1	equ	0xFE6
 11593                           postdec1	equ	0xFE5
 11594                           fsr1h	equ	0xFE2
 11595                           fsr1l	equ	0xFE1
 11596                           indf2	equ	0xFDF
 11597                           postinc2	equ	0xFDE
 11598                           postdec2	equ	0xFDD
 11599                           plusw2	equ	0xFDB
 11600                           fsr2h	equ	0xFDA
 11601                           fsr2l	equ	0xFD9
 11602                           status	equ	0xFD8
 11603                           
 11604 ;; *************** function _put_fat *****************
 11605 ;; Defined at:
 11606 ;;		line 873 in file "../../SD_Card_FatFs/ff.c"
 11607 ;; Parameters:    Size  Location     Type
 11608 ;;  fs              2   58[COMRAM] PTR struct .
 11609 ;;		 -> NULL(0), FatFs(558), 
 11610 ;;  clst            4   60[COMRAM] unsigned long 
 11611 ;;  val             4   64[COMRAM] unsigned long 
 11612 ;; Auto vars:     Size  Location     Type
 11613 ;;  p               2   83[COMRAM] PTR unsigned char 
 11614 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
 11615 ;;  bc              2   80[COMRAM] unsigned int 
 11616 ;;  res             1   82[COMRAM] enum E88
 11617 ;; Return value:  Size  Location     Type
 11618 ;;                  1    wreg      enum E88
 11619 ;; Registers used:
 11620 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11621 ;; Tracked objects:
 11622 ;;		On entry : 0/0
 11623 ;;		On exit  : 0/0
 11624 ;;		Unchanged: 0/0
 11625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11626 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11627 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11628 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11629 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11630 ;;Total ram usage:       27 bytes
 11631 ;; Hardware stack levels used:    1
 11632 ;; Hardware stack levels required when called:    8
 11633 ;; This function calls:
 11634 ;;		_move_window
 11635 ;; This function is called by:
 11636 ;;		_remove_chain
 11637 ;;		_create_chain
 11638 ;; This function uses a non-reentrant model
 11639 ;;
 11640                           
 11641                           	psect	text23
 11642  003A9A                     __ptext23:
 11643                           	opt stack 0
 11644  003A9A                     _put_fat:
 11645                           	opt stack 20
 11646                           
 11647                           ;ff.c: 879: UINT bc;
 11648                           ;ff.c: 880: BYTE *p;
 11649                           ;ff.c: 881: FRESULT res;
 11650                           ;ff.c: 884: if (clst < 2 || clst >= fs->n_fatent) {
 11651                           
 11652                           ; BSR set to: 0
 11653                           ;incstack = 0
 11654  003A9A  5040               	movf	put_fat@clst+3,w,c
 11655  003A9C  103F               	iorwf	put_fat@clst+2,w,c
 11656  003A9E  103E               	iorwf	put_fat@clst+1,w,c
 11657  003AA0  E104               	bnz	u5190
 11658  003AA2  0E02               	movlw	2
 11659  003AA4  5C3D               	subwf	put_fat@clst,w,c
 11660  003AA6  A0D8               	btfss	status,0,c
 11661  003AA8  D1EE               	goto	l4129
 11662  003AAA                     u5190:
 11663  003AAA  EE20 F012          	lfsr	2,18
 11664  003AAE  503B               	movf	put_fat@fs,w,c
 11665  003AB0  26D9               	addwf	fsr2l,f,c
 11666  003AB2  503C               	movf	put_fat@fs+1,w,c
 11667  003AB4  22DA               	addwfc	fsr2h,f,c
 11668  003AB6  50DE               	movf	postinc2,w,c
 11669  003AB8  5C3D               	subwf	put_fat@clst,w,c
 11670  003ABA  50DE               	movf	postinc2,w,c
 11671  003ABC  583E               	subwfb	put_fat@clst+1,w,c
 11672  003ABE  50DE               	movf	postinc2,w,c
 11673  003AC0  583F               	subwfb	put_fat@clst+2,w,c
 11674  003AC2  50DE               	movf	postinc2,w,c
 11675  003AC4  5840               	subwfb	put_fat@clst+3,w,c
 11676  003AC6  A0D8               	btfss	status,0,c
 11677  003AC8  D1E1               	goto	l4131
 11678  003ACA  D1DD               	goto	l4129
 11679                           
 11680                           ;ff.c: 888: switch (fs->fs_type) {
 11681                           
 11682                           ;ff.c: 887: } else {
 11683                           
 11684                           ;ff.c: 885: res = FR_INT_ERR;
 11685  003ACC  D1DF               	goto	l4131
 11686  003ACE                     l304:
 11687                           
 11688                           ;ff.c: 890: bc = (UINT)clst; bc += bc / 2;
 11689  003ACE  C03D  F051         	movff	put_fat@clst,put_fat@bc
 11690  003AD2  C03E  F052         	movff	put_fat@clst+1,put_fat@bc+1
 11691  003AD6  90D8               	bcf	status,0,c
 11692  003AD8  3052               	rrcf	put_fat@bc+1,w,c
 11693  003ADA  6E46               	movwf	(??_put_fat+1)& (0+255),c
 11694  003ADC  3051               	rrcf	put_fat@bc,w,c
 11695  003ADE  6E45               	movwf	??_put_fat& (0+255),c
 11696  003AE0  5045               	movf	??_put_fat,w,c
 11697  003AE2  2651               	addwf	put_fat@bc,f,c
 11698  003AE4  5046               	movf	??_put_fat+1,w,c
 11699  003AE6  2252               	addwfc	put_fat@bc+1,f,c
 11700                           
 11701                           ;ff.c: 891: res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
 11702  003AE8  C03B  F030         	movff	put_fat@fs,move_window@fs
 11703  003AEC  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 11704  003AF0  EE20 F01E          	lfsr	2,30
 11705  003AF4  503B               	movf	put_fat@fs,w,c
 11706  003AF6  26D9               	addwf	fsr2l,f,c
 11707  003AF8  503C               	movf	put_fat@fs+1,w,c
 11708  003AFA  22DA               	addwfc	fsr2h,f,c
 11709  003AFC  CFDE F045          	movff	postinc2,??_put_fat
 11710  003B00  CFDE F046          	movff	postinc2,??_put_fat+1
 11711  003B04  CFDE F047          	movff	postinc2,??_put_fat+2
 11712  003B08  CFDE F048          	movff	postinc2,??_put_fat+3
 11713  003B0C  C051  F049         	movff	put_fat@bc,??_put_fat+4
 11714  003B10  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
 11715  003B14  0E09               	movlw	9
 11716  003B16  6E4B               	movwf	(??_put_fat+6)& (0+255),c
 11717  003B18                     u5215:
 11718  003B18  90D8               	bcf	status,0,c
 11719  003B1A  324A               	rrcf	??_put_fat+5,f,c
 11720  003B1C  3249               	rrcf	??_put_fat+4,f,c
 11721  003B1E  2E4B               	decfsz	(??_put_fat+6)& (0+255),f,c
 11722  003B20  D7FB               	goto	u5215
 11723  003B22  5049               	movf	??_put_fat+4,w,c
 11724  003B24  2445               	addwf	??_put_fat,w,c
 11725  003B26  6E32               	movwf	move_window@sector,c
 11726  003B28  504A               	movf	??_put_fat+5,w,c
 11727  003B2A  2046               	addwfc	??_put_fat+1,w,c
 11728  003B2C  6E33               	movwf	move_window@sector+1,c
 11729  003B2E  0E00               	movlw	0
 11730  003B30  2047               	addwfc	??_put_fat+2,w,c
 11731  003B32  6E34               	movwf	move_window@sector+2,c
 11732  003B34  0E00               	movlw	0
 11733  003B36  2048               	addwfc	??_put_fat+3,w,c
 11734  003B38  6E35               	movwf	move_window@sector+3,c
 11735  003B3A  ECFB  F02F         	call	_move_window	;wreg free
 11736  003B3E  6E53               	movwf	put_fat@res,c
 11737                           
 11738                           ;ff.c: 892: if (res != FR_OK) break;
 11739  003B40  5053               	movf	put_fat@res,w,c
 11740  003B42  A4D8               	btfss	status,2,c
 11741  003B44  D1B3               	goto	l4133
 11742  003B46  D001               	goto	l4077
 11743  003B48  D1B1               	goto	l4133
 11744  003B4A                     l4077:
 11745                           
 11746                           ;ff.c: 893: p = &fs->win[bc++ % ((UINT)512)];
 11747  003B4A  0EFF               	movlw	255
 11748  003B4C  6E45               	movwf	??_put_fat& (0+255),c
 11749  003B4E  0E01               	movlw	1
 11750  003B50  6E46               	movwf	(??_put_fat+1)& (0+255),c
 11751  003B52  C051  F047         	movff	put_fat@bc,??_put_fat+2
 11752  003B56  C052  F048         	movff	put_fat@bc+1,??_put_fat+3
 11753  003B5A  5045               	movf	??_put_fat,w,c
 11754  003B5C  1647               	andwf	??_put_fat+2,f,c
 11755  003B5E  5046               	movf	??_put_fat+1,w,c
 11756  003B60  1648               	andwf	??_put_fat+3,f,c
 11757  003B62  0E2E               	movlw	46
 11758  003B64  2647               	addwf	??_put_fat+2,f,c
 11759  003B66  0E00               	movlw	0
 11760  003B68  2248               	addwfc	??_put_fat+3,f,c
 11761  003B6A  5047               	movf	??_put_fat+2,w,c
 11762  003B6C  243B               	addwf	put_fat@fs,w,c
 11763  003B6E  6E54               	movwf	put_fat@p,c
 11764  003B70  5048               	movf	??_put_fat+3,w,c
 11765  003B72  203C               	addwfc	put_fat@fs+1,w,c
 11766  003B74  6E55               	movwf	put_fat@p+1,c
 11767  003B76  4A51               	infsnz	put_fat@bc,f,c
 11768  003B78  2A52               	incf	put_fat@bc+1,f,c
 11769                           
 11770                           ;ff.c: 894: *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 11771  003B7A  B03D               	btfsc	put_fat@clst,0,c
 11772  003B7C  D004               	goto	l4085
 11773  003B7E  C041  F04D         	movff	put_fat@val,_put_fat$476
 11774  003B82  6A4E               	clrf	_put_fat$476+1,c
 11775  003B84  D01B               	goto	l4087
 11776  003B86                     l4085:
 11777  003B86  5041               	movf	put_fat@val,w,c
 11778  003B88  6E45               	movwf	??_put_fat& (0+255),c
 11779  003B8A  6A46               	clrf	(??_put_fat+1)& (0+255),c
 11780  003B8C  3A45               	swapf	??_put_fat,f,c
 11781  003B8E  3A46               	swapf	??_put_fat+1,f,c
 11782  003B90  0EF0               	movlw	240
 11783  003B92  1646               	andwf	??_put_fat+1,f,c
 11784  003B94  5045               	movf	??_put_fat,w,c
 11785  003B96  0B0F               	andlw	15
 11786  003B98  1246               	iorwf	??_put_fat+1,f,c
 11787  003B9A  0EF0               	movlw	240
 11788  003B9C  1645               	andwf	??_put_fat,f,c
 11789  003B9E  C054  FFD9         	movff	put_fat@p,fsr2l
 11790  003BA2  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11791  003BA6  50DF               	movf	indf2,w,c
 11792  003BA8  0B0F               	andlw	15
 11793  003BAA  6E47               	movwf	(??_put_fat+2)& (0+255),c
 11794  003BAC  6A48               	clrf	(??_put_fat+3)& (0+255),c
 11795  003BAE  5045               	movf	??_put_fat,w,c
 11796  003BB0  1047               	iorwf	??_put_fat+2,w,c
 11797  003BB2  6E4D               	movwf	_put_fat$476,c
 11798  003BB4  5046               	movf	??_put_fat+1,w,c
 11799  003BB6  1048               	iorwf	??_put_fat+3,w,c
 11800  003BB8  6E4E               	movwf	_put_fat$476+1,c
 11801  003BBA  D000               	goto	l4087
 11802  003BBC                     l4087:
 11803  003BBC  C054  FFD9         	movff	put_fat@p,fsr2l
 11804  003BC0  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11805  003BC4  C04D  FFDF         	movff	_put_fat$476,indf2
 11806                           
 11807                           ;ff.c: 895: fs->wflag = 1;
 11808  003BC8  EE20 F004          	lfsr	2,4
 11809  003BCC  503B               	movf	put_fat@fs,w,c
 11810  003BCE  26D9               	addwf	fsr2l,f,c
 11811  003BD0  503C               	movf	put_fat@fs+1,w,c
 11812  003BD2  22DA               	addwfc	fsr2h,f,c
 11813  003BD4  0E01               	movlw	1
 11814  003BD6  6EDF               	movwf	indf2,c
 11815                           
 11816                           ;ff.c: 896: res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
 11817  003BD8  C03B  F030         	movff	put_fat@fs,move_window@fs
 11818  003BDC  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 11819  003BE0  EE20 F01E          	lfsr	2,30
 11820  003BE4  503B               	movf	put_fat@fs,w,c
 11821  003BE6  26D9               	addwf	fsr2l,f,c
 11822  003BE8  503C               	movf	put_fat@fs+1,w,c
 11823  003BEA  22DA               	addwfc	fsr2h,f,c
 11824  003BEC  CFDE F045          	movff	postinc2,??_put_fat
 11825  003BF0  CFDE F046          	movff	postinc2,??_put_fat+1
 11826  003BF4  CFDE F047          	movff	postinc2,??_put_fat+2
 11827  003BF8  CFDE F048          	movff	postinc2,??_put_fat+3
 11828  003BFC  C051  F049         	movff	put_fat@bc,??_put_fat+4
 11829  003C00  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
 11830  003C04  0E09               	movlw	9
 11831  003C06  6E4B               	movwf	(??_put_fat+6)& (0+255),c
 11832  003C08                     u5245:
 11833  003C08  90D8               	bcf	status,0,c
 11834  003C0A  324A               	rrcf	??_put_fat+5,f,c
 11835  003C0C  3249               	rrcf	??_put_fat+4,f,c
 11836  003C0E  2E4B               	decfsz	(??_put_fat+6)& (0+255),f,c
 11837  003C10  D7FB               	goto	u5245
 11838  003C12  5049               	movf	??_put_fat+4,w,c
 11839  003C14  2445               	addwf	??_put_fat,w,c
 11840  003C16  6E32               	movwf	move_window@sector,c
 11841  003C18  504A               	movf	??_put_fat+5,w,c
 11842  003C1A  2046               	addwfc	??_put_fat+1,w,c
 11843  003C1C  6E33               	movwf	move_window@sector+1,c
 11844  003C1E  0E00               	movlw	0
 11845  003C20  2047               	addwfc	??_put_fat+2,w,c
 11846  003C22  6E34               	movwf	move_window@sector+2,c
 11847  003C24  0E00               	movlw	0
 11848  003C26  2048               	addwfc	??_put_fat+3,w,c
 11849  003C28  6E35               	movwf	move_window@sector+3,c
 11850  003C2A  ECFB  F02F         	call	_move_window	;wreg free
 11851  003C2E  6E53               	movwf	put_fat@res,c
 11852                           
 11853                           ;ff.c: 897: if (res != FR_OK) break;
 11854  003C30  5053               	movf	put_fat@res,w,c
 11855  003C32  A4D8               	btfss	status,2,c
 11856  003C34  D13B               	goto	l4133
 11857  003C36  D001               	goto	l4097
 11858  003C38  D139               	goto	l4133
 11859  003C3A                     l4097:
 11860                           
 11861                           ;ff.c: 898: p = &fs->win[bc % ((UINT)512)];
 11862  003C3A  0EFF               	movlw	255
 11863  003C3C  6E45               	movwf	??_put_fat& (0+255),c
 11864  003C3E  0E01               	movlw	1
 11865  003C40  6E46               	movwf	(??_put_fat+1)& (0+255),c
 11866  003C42  C051  F047         	movff	put_fat@bc,??_put_fat+2
 11867  003C46  C052  F048         	movff	put_fat@bc+1,??_put_fat+3
 11868  003C4A  5045               	movf	??_put_fat,w,c
 11869  003C4C  1647               	andwf	??_put_fat+2,f,c
 11870  003C4E  5046               	movf	??_put_fat+1,w,c
 11871  003C50  1648               	andwf	??_put_fat+3,f,c
 11872  003C52  0E2E               	movlw	46
 11873  003C54  2647               	addwf	??_put_fat+2,f,c
 11874  003C56  0E00               	movlw	0
 11875  003C58  2248               	addwfc	??_put_fat+3,f,c
 11876  003C5A  5047               	movf	??_put_fat+2,w,c
 11877  003C5C  243B               	addwf	put_fat@fs,w,c
 11878  003C5E  6E54               	movwf	put_fat@p,c
 11879  003C60  5048               	movf	??_put_fat+3,w,c
 11880  003C62  203C               	addwfc	put_fat@fs+1,w,c
 11881  003C64  6E55               	movwf	put_fat@p+1,c
 11882                           
 11883                           ;ff.c: 899: *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F
      +                          ));
 11884  003C66  B03D               	btfsc	put_fat@clst,0,c
 11885  003C68  D01B               	goto	l4103
 11886  003C6A  C041  F045         	movff	put_fat@val,??_put_fat
 11887  003C6E  C042  F046         	movff	put_fat@val+1,??_put_fat+1
 11888  003C72  C043  F047         	movff	put_fat@val+2,??_put_fat+2
 11889  003C76  C044  F048         	movff	put_fat@val+3,??_put_fat+3
 11890  003C7A  C046  F045         	movff	??_put_fat+1,??_put_fat
 11891  003C7E  C047  F046         	movff	??_put_fat+2,??_put_fat+1
 11892  003C82  C048  F047         	movff	??_put_fat+3,??_put_fat+2
 11893  003C86  6A48               	clrf	??_put_fat+3,c
 11894  003C88  0E0F               	movlw	15
 11895  003C8A  1645               	andwf	??_put_fat,f,c
 11896  003C8C  C054  FFD9         	movff	put_fat@p,fsr2l
 11897  003C90  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11898  003C94  50DF               	movf	indf2,w,c
 11899  003C96  0BF0               	andlw	240
 11900  003C98  1045               	iorwf	??_put_fat,w,c
 11901  003C9A  6E49               	movwf	(??_put_fat+4)& (0+255),c
 11902  003C9C  5049               	movf	??_put_fat+4,w,c
 11903  003C9E  D012               	goto	L12
 11904  003CA0                     l4103:
 11905  003CA0  C041  F045         	movff	put_fat@val,??_put_fat
 11906  003CA4  C042  F046         	movff	put_fat@val+1,??_put_fat+1
 11907  003CA8  C043  F047         	movff	put_fat@val+2,??_put_fat+2
 11908  003CAC  C044  F048         	movff	put_fat@val+3,??_put_fat+3
 11909  003CB0  0E05               	movlw	5
 11910  003CB2  D005               	goto	u5270
 11911  003CB4                     u5275:
 11912  003CB4  90D8               	bcf	status,0,c
 11913  003CB6  3248               	rrcf	??_put_fat+3,f,c
 11914  003CB8  3247               	rrcf	??_put_fat+2,f,c
 11915  003CBA  3246               	rrcf	??_put_fat+1,f,c
 11916  003CBC  3245               	rrcf	??_put_fat,f,c
 11917  003CBE                     u5270:
 11918  003CBE  2EE8               	decfsz	wreg,f,c
 11919  003CC0  D7F9               	goto	u5275
 11920  003CC2  5045               	movf	??_put_fat,w,c
 11921  003CC4                     L12:
 11922  003CC4  6E4F               	movwf	_put_fat$477,c
 11923  003CC6  6A50               	clrf	_put_fat$477+1,c
 11924  003CC8  D000               	goto	l4105
 11925  003CCA                     l4105:
 11926  003CCA  C054  FFD9         	movff	put_fat@p,fsr2l
 11927  003CCE  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11928  003CD2  C04F  FFDF         	movff	_put_fat$477,indf2
 11929  003CD6  D0CE               	goto	l4127
 11930  003CD8                     l4107:
 11931                           
 11932                           ;ff.c: 904: res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2)));
 11933  003CD8  C03B  F030         	movff	put_fat@fs,move_window@fs
 11934  003CDC  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 11935  003CE0  EE20 F01E          	lfsr	2,30
 11936  003CE4  503B               	movf	put_fat@fs,w,c
 11937  003CE6  26D9               	addwf	fsr2l,f,c
 11938  003CE8  503C               	movf	put_fat@fs+1,w,c
 11939  003CEA  22DA               	addwfc	fsr2h,f,c
 11940  003CEC  CFDE F045          	movff	postinc2,??_put_fat
 11941  003CF0  CFDE F046          	movff	postinc2,??_put_fat+1
 11942  003CF4  CFDE F047          	movff	postinc2,??_put_fat+2
 11943  003CF8  CFDE F048          	movff	postinc2,??_put_fat+3
 11944  003CFC  C03D  F049         	movff	put_fat@clst,??_put_fat+4
 11945  003D00  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
 11946  003D04  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
 11947  003D08  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
 11948  003D0C  C04A  F049         	movff	??_put_fat+5,??_put_fat+4
 11949  003D10  C04B  F04A         	movff	??_put_fat+6,??_put_fat+5
 11950  003D14  C04C  F04B         	movff	??_put_fat+7,??_put_fat+6
 11951  003D18  6A4C               	clrf	??_put_fat+7,c
 11952  003D1A  5045               	movf	??_put_fat,w,c
 11953  003D1C  2449               	addwf	??_put_fat+4,w,c
 11954  003D1E  6E32               	movwf	move_window@sector,c
 11955  003D20  5046               	movf	??_put_fat+1,w,c
 11956  003D22  204A               	addwfc	??_put_fat+5,w,c
 11957  003D24  6E33               	movwf	move_window@sector+1,c
 11958  003D26  5047               	movf	??_put_fat+2,w,c
 11959  003D28  204B               	addwfc	??_put_fat+6,w,c
 11960  003D2A  6E34               	movwf	move_window@sector+2,c
 11961  003D2C  5048               	movf	??_put_fat+3,w,c
 11962  003D2E  204C               	addwfc	??_put_fat+7,w,c
 11963  003D30  6E35               	movwf	move_window@sector+3,c
 11964  003D32  ECFB  F02F         	call	_move_window	;wreg free
 11965  003D36  6E53               	movwf	put_fat@res,c
 11966                           
 11967                           ;ff.c: 905: if (res != FR_OK) break;
 11968  003D38  5053               	movf	put_fat@res,w,c
 11969  003D3A  A4D8               	btfss	status,2,c
 11970  003D3C  D0B7               	goto	l4133
 11971  003D3E  D001               	goto	l4113
 11972  003D40  D0B5               	goto	l4133
 11973  003D42                     l4113:
 11974                           
 11975                           ;ff.c: 906: p = &fs->win[clst * 2 % ((UINT)512)];
 11976  003D42  0EFF               	movlw	255
 11977  003D44  6E45               	movwf	??_put_fat& (0+255),c
 11978  003D46  0E01               	movlw	1
 11979  003D48  6E46               	movwf	(??_put_fat+1)& (0+255),c
 11980  003D4A  C03D  F047         	movff	put_fat@clst,??_put_fat+2
 11981  003D4E  C03E  F048         	movff	put_fat@clst+1,??_put_fat+3
 11982  003D52  90D8               	bcf	status,0,c
 11983  003D54  3647               	rlcf	??_put_fat+2,f,c
 11984  003D56  3648               	rlcf	??_put_fat+3,f,c
 11985  003D58  5045               	movf	??_put_fat,w,c
 11986  003D5A  1647               	andwf	??_put_fat+2,f,c
 11987  003D5C  5046               	movf	??_put_fat+1,w,c
 11988  003D5E  1648               	andwf	??_put_fat+3,f,c
 11989  003D60  0E2E               	movlw	46
 11990  003D62  2647               	addwf	??_put_fat+2,f,c
 11991  003D64  0E00               	movlw	0
 11992  003D66  2248               	addwfc	??_put_fat+3,f,c
 11993  003D68  5047               	movf	??_put_fat+2,w,c
 11994  003D6A  243B               	addwf	put_fat@fs,w,c
 11995  003D6C  6E54               	movwf	put_fat@p,c
 11996  003D6E  5048               	movf	??_put_fat+3,w,c
 11997  003D70  203C               	addwfc	put_fat@fs+1,w,c
 11998  003D72  6E55               	movwf	put_fat@p+1,c
 11999                           
 12000                           ;ff.c: 907: *(WORD*)(BYTE*)(p)=(WORD)((WORD)val);
 12001  003D74  C054  FFD9         	movff	put_fat@p,fsr2l
 12002  003D78  C055  FFDA         	movff	put_fat@p+1,fsr2h
 12003  003D7C  C041  FFDE         	movff	put_fat@val,postinc2
 12004  003D80  C042  FFDD         	movff	put_fat@val+1,postdec2
 12005  003D84  D077               	goto	l4127
 12006  003D86                     l4117:
 12007                           
 12008                           ;ff.c: 912: res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4)));
 12009  003D86  C03B  F030         	movff	put_fat@fs,move_window@fs
 12010  003D8A  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 12011  003D8E  EE20 F01E          	lfsr	2,30
 12012  003D92  503B               	movf	put_fat@fs,w,c
 12013  003D94  26D9               	addwf	fsr2l,f,c
 12014  003D96  503C               	movf	put_fat@fs+1,w,c
 12015  003D98  22DA               	addwfc	fsr2h,f,c
 12016  003D9A  CFDE F045          	movff	postinc2,??_put_fat
 12017  003D9E  CFDE F046          	movff	postinc2,??_put_fat+1
 12018  003DA2  CFDE F047          	movff	postinc2,??_put_fat+2
 12019  003DA6  CFDE F048          	movff	postinc2,??_put_fat+3
 12020  003DAA  C03D  F049         	movff	put_fat@clst,??_put_fat+4
 12021  003DAE  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
 12022  003DB2  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
 12023  003DB6  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
 12024  003DBA  0E08               	movlw	8
 12025  003DBC  D005               	goto	u5290
 12026  003DBE                     u5295:
 12027  003DBE  90D8               	bcf	status,0,c
 12028  003DC0  324C               	rrcf	??_put_fat+7,f,c
 12029  003DC2  324B               	rrcf	??_put_fat+6,f,c
 12030  003DC4  324A               	rrcf	??_put_fat+5,f,c
 12031  003DC6  3249               	rrcf	??_put_fat+4,f,c
 12032  003DC8                     u5290:
 12033  003DC8  2EE8               	decfsz	wreg,f,c
 12034  003DCA  D7F9               	goto	u5295
 12035  003DCC  5045               	movf	??_put_fat,w,c
 12036  003DCE  2449               	addwf	??_put_fat+4,w,c
 12037  003DD0  6E32               	movwf	move_window@sector,c
 12038  003DD2  5046               	movf	??_put_fat+1,w,c
 12039  003DD4  204A               	addwfc	??_put_fat+5,w,c
 12040  003DD6  6E33               	movwf	move_window@sector+1,c
 12041  003DD8  5047               	movf	??_put_fat+2,w,c
 12042  003DDA  204B               	addwfc	??_put_fat+6,w,c
 12043  003DDC  6E34               	movwf	move_window@sector+2,c
 12044  003DDE  5048               	movf	??_put_fat+3,w,c
 12045  003DE0  204C               	addwfc	??_put_fat+7,w,c
 12046  003DE2  6E35               	movwf	move_window@sector+3,c
 12047  003DE4  ECFB  F02F         	call	_move_window	;wreg free
 12048  003DE8  6E53               	movwf	put_fat@res,c
 12049                           
 12050                           ;ff.c: 913: if (res != FR_OK) break;
 12051  003DEA  5053               	movf	put_fat@res,w,c
 12052  003DEC  A4D8               	btfss	status,2,c
 12053  003DEE  D05E               	goto	l4133
 12054  003DF0  D001               	goto	l4123
 12055  003DF2  D05C               	goto	l4133
 12056  003DF4                     l4123:
 12057                           
 12058                           ;ff.c: 914: p = &fs->win[clst * 4 % ((UINT)512)];
 12059  003DF4  0EFF               	movlw	255
 12060  003DF6  6E45               	movwf	??_put_fat& (0+255),c
 12061  003DF8  0E01               	movlw	1
 12062  003DFA  6E46               	movwf	(??_put_fat+1)& (0+255),c
 12063  003DFC  C03D  F047         	movff	put_fat@clst,??_put_fat+2
 12064  003E00  C03E  F048         	movff	put_fat@clst+1,??_put_fat+3
 12065  003E04  90D8               	bcf	status,0,c
 12066  003E06  3647               	rlcf	??_put_fat+2,f,c
 12067  003E08  3648               	rlcf	??_put_fat+3,f,c
 12068  003E0A  90D8               	bcf	status,0,c
 12069  003E0C  3647               	rlcf	??_put_fat+2,f,c
 12070  003E0E  3648               	rlcf	??_put_fat+3,f,c
 12071  003E10  5045               	movf	??_put_fat,w,c
 12072  003E12  1647               	andwf	??_put_fat+2,f,c
 12073  003E14  5046               	movf	??_put_fat+1,w,c
 12074  003E16  1648               	andwf	??_put_fat+3,f,c
 12075  003E18  0E2E               	movlw	46
 12076  003E1A  2647               	addwf	??_put_fat+2,f,c
 12077  003E1C  0E00               	movlw	0
 12078  003E1E  2248               	addwfc	??_put_fat+3,f,c
 12079  003E20  5047               	movf	??_put_fat+2,w,c
 12080  003E22  243B               	addwf	put_fat@fs,w,c
 12081  003E24  6E54               	movwf	put_fat@p,c
 12082  003E26  5048               	movf	??_put_fat+3,w,c
 12083  003E28  203C               	addwfc	put_fat@fs+1,w,c
 12084  003E2A  6E55               	movwf	put_fat@p+1,c
 12085                           
 12086                           ;ff.c: 915: val |= (DWORD)(*(DWORD*)(BYTE*)(p)) & 0xF0000000;
 12087  003E2C  C054  FFD9         	movff	put_fat@p,fsr2l
 12088  003E30  C055  FFDA         	movff	put_fat@p+1,fsr2h
 12089  003E34  0E00               	movlw	0
 12090  003E36  14DE               	andwf	postinc2,w,c
 12091  003E38  6E45               	movwf	??_put_fat& (0+255),c
 12092  003E3A  0E00               	movlw	0
 12093  003E3C  14DE               	andwf	postinc2,w,c
 12094  003E3E  6E46               	movwf	(??_put_fat+1)& (0+255),c
 12095  003E40  0E00               	movlw	0
 12096  003E42  14DE               	andwf	postinc2,w,c
 12097  003E44  6E47               	movwf	(??_put_fat+2)& (0+255),c
 12098  003E46  0EF0               	movlw	240
 12099  003E48  14DE               	andwf	postinc2,w,c
 12100  003E4A  6E48               	movwf	(??_put_fat+3)& (0+255),c
 12101  003E4C  5045               	movf	??_put_fat,w,c
 12102  003E4E  1241               	iorwf	put_fat@val,f,c
 12103  003E50  5046               	movf	??_put_fat+1,w,c
 12104  003E52  1242               	iorwf	put_fat@val+1,f,c
 12105  003E54  5047               	movf	??_put_fat+2,w,c
 12106  003E56  1243               	iorwf	put_fat@val+2,f,c
 12107  003E58  5048               	movf	??_put_fat+3,w,c
 12108  003E5A  1244               	iorwf	put_fat@val+3,f,c
 12109                           
 12110                           ;ff.c: 916: *(DWORD*)(BYTE*)(p)=(DWORD)(val);
 12111  003E5C  C054  FFD9         	movff	put_fat@p,fsr2l
 12112  003E60  C055  FFDA         	movff	put_fat@p+1,fsr2h
 12113  003E64  C041  FFDE         	movff	put_fat@val,postinc2
 12114  003E68  C042  FFDE         	movff	put_fat@val+1,postinc2
 12115  003E6C  C043  FFDE         	movff	put_fat@val+2,postinc2
 12116  003E70  C044  FFDE         	movff	put_fat@val+3,postinc2
 12117  003E74                     l4127:
 12118                           
 12119                           ;ff.c: 917: fs->wflag = 1;
 12120  003E74  EE20 F004          	lfsr	2,4
 12121  003E78  503B               	movf	put_fat@fs,w,c
 12122  003E7A  26D9               	addwf	fsr2l,f,c
 12123  003E7C  503C               	movf	put_fat@fs+1,w,c
 12124  003E7E  22DA               	addwfc	fsr2h,f,c
 12125  003E80  0E01               	movlw	1
 12126  003E82  6EDF               	movwf	indf2,c
 12127                           
 12128                           ;ff.c: 918: break;
 12129  003E84  D013               	goto	l4133
 12130  003E86                     l4129:
 12131                           
 12132                           ;ff.c: 921: res = FR_INT_ERR;
 12133  003E86  0E02               	movlw	2
 12134  003E88  6E53               	movwf	put_fat@res,c
 12135                           
 12136                           ;ff.c: 922: }
 12137  003E8A  D010               	goto	l4133
 12138  003E8C                     l4131:
 12139  003E8C  C03B  FFD9         	movff	put_fat@fs,fsr2l
 12140  003E90  C03C  FFDA         	movff	put_fat@fs+1,fsr2h
 12141  003E94  50DF               	movf	indf2,w,c
 12142                           
 12143                           ; Switch size 1, requested type "space"
 12144                           ; Number of cases is 3, Range of values is 1 to 3
 12145                           ; switch strategies available:
 12146                           ; Name         Instructions Cycles
 12147                           ; simple_byte           10     6 (average)
 12148                           ;	Chosen strategy is simple_byte
 12149  003E96  0A01               	xorlw	1	; case 1
 12150  003E98  B4D8               	btfsc	status,2,c
 12151  003E9A  D619               	goto	l304
 12152  003E9C  0A03               	xorlw	3	; case 2
 12153  003E9E  B4D8               	btfsc	status,2,c
 12154  003EA0  D71B               	goto	l4107
 12155  003EA2  0A01               	xorlw	1	; case 3
 12156  003EA4  B4D8               	btfsc	status,2,c
 12157  003EA6  D76F               	goto	l4117
 12158  003EA8  D7EE               	goto	l4129
 12159  003EAA  D000               	goto	l4133
 12160  003EAC                     l4133:
 12161                           
 12162                           ;ff.c: 923: }
 12163                           ;ff.c: 925: return res;
 12164  003EAC  5053               	movf	put_fat@res,w,c
 12165  003EAE  0012               	return	
 12166  003EB0  0012               	return		;funcret
 12167  003EB2                     __end_of_put_fat:
 12168                           	opt stack 0
 12169                           tblptru	equ	0xFF8
 12170                           tblptrh	equ	0xFF7
 12171                           tblptrl	equ	0xFF6
 12172                           tablat	equ	0xFF5
 12173                           prodh	equ	0xFF4
 12174                           prodl	equ	0xFF3
 12175                           indf0	equ	0xFEF
 12176                           postinc0	equ	0xFEE
 12177                           fsr0h	equ	0xFEA
 12178                           fsr0l	equ	0xFE9
 12179                           wreg	equ	0xFE8
 12180                           indf1	equ	0xFE7
 12181                           postinc1	equ	0xFE6
 12182                           postdec1	equ	0xFE5
 12183                           fsr1h	equ	0xFE2
 12184                           fsr1l	equ	0xFE1
 12185                           indf2	equ	0xFDF
 12186                           postinc2	equ	0xFDE
 12187                           postdec2	equ	0xFDD
 12188                           plusw2	equ	0xFDB
 12189                           fsr2h	equ	0xFDA
 12190                           fsr2l	equ	0xFD9
 12191                           status	equ	0xFD8
 12192                           
 12193 ;; *************** function _get_fat *****************
 12194 ;; Defined at:
 12195 ;;		line 818 in file "../../SD_Card_FatFs/ff.c"
 12196 ;; Parameters:    Size  Location     Type
 12197 ;;  fs              2   58[COMRAM] PTR struct .
 12198 ;;		 -> NULL(0), FatFs(558), 
 12199 ;;  clst            4   60[COMRAM] unsigned long 
 12200 ;; Auto vars:     Size  Location     Type
 12201 ;;  val             4   74[COMRAM] unsigned long 
 12202 ;;  bc              2   82[COMRAM] unsigned int 
 12203 ;;  p               2   80[COMRAM] PTR unsigned char 
 12204 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
 12205 ;;  wc              2   78[COMRAM] unsigned int 
 12206 ;; Return value:  Size  Location     Type
 12207 ;;                  4   58[COMRAM] unsigned long 
 12208 ;; Registers used:
 12209 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12210 ;; Tracked objects:
 12211 ;;		On entry : 0/0
 12212 ;;		On exit  : 0/0
 12213 ;;		Unchanged: 0/0
 12214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12215 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12216 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12217 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12218 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12219 ;;Total ram usage:       26 bytes
 12220 ;; Hardware stack levels used:    1
 12221 ;; Hardware stack levels required when called:    8
 12222 ;; This function calls:
 12223 ;;		_move_window
 12224 ;; This function is called by:
 12225 ;;		_remove_chain
 12226 ;;		_create_chain
 12227 ;;		_dir_sdi
 12228 ;;		_dir_next
 12229 ;;		_f_lseek
 12230 ;;		_f_read
 12231 ;; This function uses a non-reentrant model
 12232 ;;
 12233                           
 12234                           	psect	text24
 12235  004268                     __ptext24:
 12236                           	opt stack 0
 12237  004268                     _get_fat:
 12238                           	opt stack 20
 12239                           
 12240                           ;ff.c: 823: UINT wc, bc;
 12241                           ;ff.c: 824: BYTE *p;
 12242                           ;ff.c: 825: DWORD val;
 12243                           ;ff.c: 828: if (clst < 2 || clst >= fs->n_fatent) {
 12244                           
 12245                           ;incstack = 0
 12246  004268  5040               	movf	get_fat@clst+3,w,c
 12247  00426A  103F               	iorwf	get_fat@clst+2,w,c
 12248  00426C  103E               	iorwf	get_fat@clst+1,w,c
 12249  00426E  E104               	bnz	u5080
 12250  004270  0E02               	movlw	2
 12251  004272  5C3D               	subwf	get_fat@clst,w,c
 12252  004274  A0D8               	btfss	status,0,c
 12253  004276  D19A               	goto	l4059
 12254  004278                     u5080:
 12255  004278  EE20 F012          	lfsr	2,18
 12256  00427C  503B               	movf	get_fat@fs,w,c
 12257  00427E  26D9               	addwf	fsr2l,f,c
 12258  004280  503C               	movf	get_fat@fs+1,w,c
 12259  004282  22DA               	addwfc	fsr2h,f,c
 12260  004284  50DE               	movf	postinc2,w,c
 12261  004286  5C3D               	subwf	get_fat@clst,w,c
 12262  004288  50DE               	movf	postinc2,w,c
 12263  00428A  583E               	subwfb	get_fat@clst+1,w,c
 12264  00428C  50DE               	movf	postinc2,w,c
 12265  00428E  583F               	subwfb	get_fat@clst+2,w,c
 12266  004290  50DE               	movf	postinc2,w,c
 12267  004292  5840               	subwfb	get_fat@clst+3,w,c
 12268  004294  B0D8               	btfsc	status,0,c
 12269  004296  D18A               	goto	l4059
 12270                           
 12271                           ;ff.c: 832: val = 0xFFFFFFFF;
 12272                           
 12273                           ;ff.c: 831: } else {
 12274                           
 12275                           ;ff.c: 829: val = 1;
 12276  004298  684B               	setf	get_fat@val,c
 12277  00429A  684C               	setf	get_fat@val+1,c
 12278  00429C  684D               	setf	get_fat@val+2,c
 12279  00429E  684E               	setf	get_fat@val+3,c
 12280                           
 12281                           ;ff.c: 834: switch (fs->fs_type) {
 12282  0042A0  D18E               	goto	l4061
 12283  0042A2                     l283:
 12284                           
 12285                           ;ff.c: 836: bc = (UINT)clst; bc += bc / 2;
 12286  0042A2  C03D  F053         	movff	get_fat@clst,get_fat@bc
 12287  0042A6  C03E  F054         	movff	get_fat@clst+1,get_fat@bc+1
 12288  0042AA  90D8               	bcf	status,0,c
 12289  0042AC  3054               	rrcf	get_fat@bc+1,w,c
 12290  0042AE  6E42               	movwf	(??_get_fat+1)& (0+255),c
 12291  0042B0  3053               	rrcf	get_fat@bc,w,c
 12292  0042B2  6E41               	movwf	??_get_fat& (0+255),c
 12293  0042B4  5041               	movf	??_get_fat,w,c
 12294  0042B6  2653               	addwf	get_fat@bc,f,c
 12295  0042B8  5042               	movf	??_get_fat+1,w,c
 12296  0042BA  2254               	addwfc	get_fat@bc+1,f,c
 12297                           
 12298                           ;ff.c: 837: if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 12299  0042BC  C03B  F030         	movff	get_fat@fs,move_window@fs
 12300  0042C0  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 12301  0042C4  EE20 F01E          	lfsr	2,30
 12302  0042C8  503B               	movf	get_fat@fs,w,c
 12303  0042CA  26D9               	addwf	fsr2l,f,c
 12304  0042CC  503C               	movf	get_fat@fs+1,w,c
 12305  0042CE  22DA               	addwfc	fsr2h,f,c
 12306  0042D0  CFDE F041          	movff	postinc2,??_get_fat
 12307  0042D4  CFDE F042          	movff	postinc2,??_get_fat+1
 12308  0042D8  CFDE F043          	movff	postinc2,??_get_fat+2
 12309  0042DC  CFDE F044          	movff	postinc2,??_get_fat+3
 12310  0042E0  C053  F045         	movff	get_fat@bc,??_get_fat+4
 12311  0042E4  C054  F046         	movff	get_fat@bc+1,??_get_fat+5
 12312  0042E8  0E09               	movlw	9
 12313  0042EA  6E47               	movwf	(??_get_fat+6)& (0+255),c
 12314  0042EC                     u5105:
 12315  0042EC  90D8               	bcf	status,0,c
 12316  0042EE  3246               	rrcf	??_get_fat+5,f,c
 12317  0042F0  3245               	rrcf	??_get_fat+4,f,c
 12318  0042F2  2E47               	decfsz	(??_get_fat+6)& (0+255),f,c
 12319  0042F4  D7FB               	goto	u5105
 12320  0042F6  5045               	movf	??_get_fat+4,w,c
 12321  0042F8  2441               	addwf	??_get_fat,w,c
 12322  0042FA  6E32               	movwf	move_window@sector,c
 12323  0042FC  5046               	movf	??_get_fat+5,w,c
 12324  0042FE  2042               	addwfc	??_get_fat+1,w,c
 12325  004300  6E33               	movwf	move_window@sector+1,c
 12326  004302  0E00               	movlw	0
 12327  004304  2043               	addwfc	??_get_fat+2,w,c
 12328  004306  6E34               	movwf	move_window@sector+2,c
 12329  004308  0E00               	movlw	0
 12330  00430A  2044               	addwfc	??_get_fat+3,w,c
 12331  00430C  6E35               	movwf	move_window@sector+3,c
 12332  00430E  ECFB  F02F         	call	_move_window	;wreg free
 12333  004312  0900               	iorlw	0
 12334  004314  A4D8               	btfss	status,2,c
 12335  004316  D162               	goto	l281
 12336  004318  D001               	goto	l4025
 12337  00431A  D160               	goto	l281
 12338  00431C                     l4025:
 12339                           
 12340                           ;ff.c: 838: wc = fs->win[bc++ % ((UINT)512)];
 12341  00431C  0EFF               	movlw	255
 12342  00431E  6E41               	movwf	??_get_fat& (0+255),c
 12343  004320  0E01               	movlw	1
 12344  004322  6E42               	movwf	(??_get_fat+1)& (0+255),c
 12345  004324  C053  F043         	movff	get_fat@bc,??_get_fat+2
 12346  004328  C054  F044         	movff	get_fat@bc+1,??_get_fat+3
 12347  00432C  5041               	movf	??_get_fat,w,c
 12348  00432E  1643               	andwf	??_get_fat+2,f,c
 12349  004330  5042               	movf	??_get_fat+1,w,c
 12350  004332  1644               	andwf	??_get_fat+3,f,c
 12351  004334  0E2E               	movlw	46
 12352  004336  2643               	addwf	??_get_fat+2,f,c
 12353  004338  0E00               	movlw	0
 12354  00433A  2244               	addwfc	??_get_fat+3,f,c
 12355  00433C  5043               	movf	??_get_fat+2,w,c
 12356  00433E  243B               	addwf	get_fat@fs,w,c
 12357  004340  6ED9               	movwf	fsr2l,c
 12358  004342  5044               	movf	??_get_fat+3,w,c
 12359  004344  203C               	addwfc	get_fat@fs+1,w,c
 12360  004346  6EDA               	movwf	fsr2h,c
 12361  004348  50DF               	movf	indf2,w,c
 12362  00434A  6E45               	movwf	(??_get_fat+4)& (0+255),c
 12363  00434C  5045               	movf	??_get_fat+4,w,c
 12364  00434E  6E4F               	movwf	get_fat@wc,c
 12365  004350  6A50               	clrf	get_fat@wc+1,c
 12366  004352  4A53               	infsnz	get_fat@bc,f,c
 12367  004354  2A54               	incf	get_fat@bc+1,f,c
 12368                           
 12369                           ;ff.c: 839: if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 12370  004356  C03B  F030         	movff	get_fat@fs,move_window@fs
 12371  00435A  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 12372  00435E  EE20 F01E          	lfsr	2,30
 12373  004362  503B               	movf	get_fat@fs,w,c
 12374  004364  26D9               	addwf	fsr2l,f,c
 12375  004366  503C               	movf	get_fat@fs+1,w,c
 12376  004368  22DA               	addwfc	fsr2h,f,c
 12377  00436A  CFDE F041          	movff	postinc2,??_get_fat
 12378  00436E  CFDE F042          	movff	postinc2,??_get_fat+1
 12379  004372  CFDE F043          	movff	postinc2,??_get_fat+2
 12380  004376  CFDE F044          	movff	postinc2,??_get_fat+3
 12381  00437A  C053  F045         	movff	get_fat@bc,??_get_fat+4
 12382  00437E  C054  F046         	movff	get_fat@bc+1,??_get_fat+5
 12383  004382  0E09               	movlw	9
 12384  004384  6E47               	movwf	(??_get_fat+6)& (0+255),c
 12385  004386                     u5125:
 12386  004386  90D8               	bcf	status,0,c
 12387  004388  3246               	rrcf	??_get_fat+5,f,c
 12388  00438A  3245               	rrcf	??_get_fat+4,f,c
 12389  00438C  2E47               	decfsz	(??_get_fat+6)& (0+255),f,c
 12390  00438E  D7FB               	goto	u5125
 12391  004390  5045               	movf	??_get_fat+4,w,c
 12392  004392  2441               	addwf	??_get_fat,w,c
 12393  004394  6E32               	movwf	move_window@sector,c
 12394  004396  5046               	movf	??_get_fat+5,w,c
 12395  004398  2042               	addwfc	??_get_fat+1,w,c
 12396  00439A  6E33               	movwf	move_window@sector+1,c
 12397  00439C  0E00               	movlw	0
 12398  00439E  2043               	addwfc	??_get_fat+2,w,c
 12399  0043A0  6E34               	movwf	move_window@sector+2,c
 12400  0043A2  0E00               	movlw	0
 12401  0043A4  2044               	addwfc	??_get_fat+3,w,c
 12402  0043A6  6E35               	movwf	move_window@sector+3,c
 12403  0043A8  ECFB  F02F         	call	_move_window	;wreg free
 12404  0043AC  0900               	iorlw	0
 12405  0043AE  A4D8               	btfss	status,2,c
 12406  0043B0  D115               	goto	l281
 12407  0043B2  D001               	goto	l4033
 12408  0043B4  D113               	goto	l281
 12409  0043B6                     l4033:
 12410                           
 12411                           ;ff.c: 840: wc |= fs->win[bc % ((UINT)512)] << 8;
 12412  0043B6  0EFF               	movlw	255
 12413  0043B8  6E41               	movwf	??_get_fat& (0+255),c
 12414  0043BA  0E01               	movlw	1
 12415  0043BC  6E42               	movwf	(??_get_fat+1)& (0+255),c
 12416  0043BE  C053  F043         	movff	get_fat@bc,??_get_fat+2
 12417  0043C2  C054  F044         	movff	get_fat@bc+1,??_get_fat+3
 12418  0043C6  5041               	movf	??_get_fat,w,c
 12419  0043C8  1643               	andwf	??_get_fat+2,f,c
 12420  0043CA  5042               	movf	??_get_fat+1,w,c
 12421  0043CC  1644               	andwf	??_get_fat+3,f,c
 12422  0043CE  0E2E               	movlw	46
 12423  0043D0  2643               	addwf	??_get_fat+2,f,c
 12424  0043D2  0E00               	movlw	0
 12425  0043D4  2244               	addwfc	??_get_fat+3,f,c
 12426  0043D6  5043               	movf	??_get_fat+2,w,c
 12427  0043D8  243B               	addwf	get_fat@fs,w,c
 12428  0043DA  6ED9               	movwf	fsr2l,c
 12429  0043DC  5044               	movf	??_get_fat+3,w,c
 12430  0043DE  203C               	addwfc	get_fat@fs+1,w,c
 12431  0043E0  6EDA               	movwf	fsr2h,c
 12432  0043E2  50DF               	movf	indf2,w,c
 12433  0043E4  6E45               	movwf	(??_get_fat+4)& (0+255),c
 12434  0043E6  5045               	movf	??_get_fat+4,w,c
 12435  0043E8  6E47               	movwf	(??_get_fat+6)& (0+255),c
 12436  0043EA  6A46               	clrf	(??_get_fat+5)& (0+255),c
 12437  0043EC  5046               	movf	??_get_fat+5,w,c
 12438  0043EE  124F               	iorwf	get_fat@wc,f,c
 12439  0043F0  5047               	movf	??_get_fat+6,w,c
 12440  0043F2  1250               	iorwf	get_fat@wc+1,f,c
 12441                           
 12442                           ;ff.c: 841: val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 12443  0043F4  B03D               	btfsc	get_fat@clst,0,c
 12444  0043F6  D007               	goto	l4039
 12445  0043F8  0EFF               	movlw	255
 12446  0043FA  144F               	andwf	get_fat@wc,w,c
 12447  0043FC  6E49               	movwf	_get_fat$450,c
 12448  0043FE  0E0F               	movlw	15
 12449  004400  1450               	andwf	get_fat@wc+1,w,c
 12450  004402  6E4A               	movwf	_get_fat$450+1,c
 12451  004404  D010               	goto	l4041
 12452  004406                     l4039:
 12453  004406  C04F  F041         	movff	get_fat@wc,??_get_fat
 12454  00440A  C050  F042         	movff	get_fat@wc+1,??_get_fat+1
 12455  00440E  0E04               	movlw	4
 12456  004410  6E43               	movwf	(??_get_fat+2)& (0+255),c
 12457  004412                     u5155:
 12458  004412  90D8               	bcf	status,0,c
 12459  004414  3242               	rrcf	??_get_fat+1,f,c
 12460  004416  3241               	rrcf	??_get_fat,f,c
 12461  004418  2E43               	decfsz	(??_get_fat+2)& (0+255),f,c
 12462  00441A  D7FB               	goto	u5155
 12463  00441C  C041  F049         	movff	??_get_fat,_get_fat$450
 12464  004420  C042  F04A         	movff	??_get_fat+1,_get_fat$450+1
 12465  004424  D000               	goto	l4041
 12466  004426                     l4041:
 12467  004426  C049  F04B         	movff	_get_fat$450,get_fat@val
 12468  00442A  C04A  F04C         	movff	_get_fat$450+1,get_fat@val+1
 12469  00442E  D059               	goto	L15
 12470  004430                     l4043:
 12471                           
 12472                           ;ff.c: 845: if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2))) != FR_OK) brea
      +                          k;
 12473  004430  C03B  F030         	movff	get_fat@fs,move_window@fs
 12474  004434  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 12475  004438  EE20 F01E          	lfsr	2,30
 12476  00443C  503B               	movf	get_fat@fs,w,c
 12477  00443E  26D9               	addwf	fsr2l,f,c
 12478  004440  503C               	movf	get_fat@fs+1,w,c
 12479  004442  22DA               	addwfc	fsr2h,f,c
 12480  004444  CFDE F041          	movff	postinc2,??_get_fat
 12481  004448  CFDE F042          	movff	postinc2,??_get_fat+1
 12482  00444C  CFDE F043          	movff	postinc2,??_get_fat+2
 12483  004450  CFDE F044          	movff	postinc2,??_get_fat+3
 12484  004454  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 12485  004458  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 12486  00445C  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 12487  004460  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 12488  004464  C046  F045         	movff	??_get_fat+5,??_get_fat+4
 12489  004468  C047  F046         	movff	??_get_fat+6,??_get_fat+5
 12490  00446C  C048  F047         	movff	??_get_fat+7,??_get_fat+6
 12491  004470  6A48               	clrf	??_get_fat+7,c
 12492  004472  5041               	movf	??_get_fat,w,c
 12493  004474  2445               	addwf	??_get_fat+4,w,c
 12494  004476  6E32               	movwf	move_window@sector,c
 12495  004478  5042               	movf	??_get_fat+1,w,c
 12496  00447A  2046               	addwfc	??_get_fat+5,w,c
 12497  00447C  6E33               	movwf	move_window@sector+1,c
 12498  00447E  5043               	movf	??_get_fat+2,w,c
 12499  004480  2047               	addwfc	??_get_fat+6,w,c
 12500  004482  6E34               	movwf	move_window@sector+2,c
 12501  004484  5044               	movf	??_get_fat+3,w,c
 12502  004486  2048               	addwfc	??_get_fat+7,w,c
 12503  004488  6E35               	movwf	move_window@sector+3,c
 12504  00448A  ECFB  F02F         	call	_move_window	;wreg free
 12505  00448E  0900               	iorlw	0
 12506  004490  A4D8               	btfss	status,2,c
 12507  004492  D0A4               	goto	l281
 12508  004494  D001               	goto	l4047
 12509  004496  D0A2               	goto	l281
 12510  004498                     l4047:
 12511                           
 12512                           ;ff.c: 846: p = &fs->win[clst * 2 % ((UINT)512)];
 12513  004498  0EFF               	movlw	255
 12514  00449A  6E41               	movwf	??_get_fat& (0+255),c
 12515  00449C  0E01               	movlw	1
 12516  00449E  6E42               	movwf	(??_get_fat+1)& (0+255),c
 12517  0044A0  C03D  F043         	movff	get_fat@clst,??_get_fat+2
 12518  0044A4  C03E  F044         	movff	get_fat@clst+1,??_get_fat+3
 12519  0044A8  90D8               	bcf	status,0,c
 12520  0044AA  3643               	rlcf	??_get_fat+2,f,c
 12521  0044AC  3644               	rlcf	??_get_fat+3,f,c
 12522  0044AE  5041               	movf	??_get_fat,w,c
 12523  0044B0  1643               	andwf	??_get_fat+2,f,c
 12524  0044B2  5042               	movf	??_get_fat+1,w,c
 12525  0044B4  1644               	andwf	??_get_fat+3,f,c
 12526  0044B6  0E2E               	movlw	46
 12527  0044B8  2643               	addwf	??_get_fat+2,f,c
 12528  0044BA  0E00               	movlw	0
 12529  0044BC  2244               	addwfc	??_get_fat+3,f,c
 12530  0044BE  5043               	movf	??_get_fat+2,w,c
 12531  0044C0  243B               	addwf	get_fat@fs,w,c
 12532  0044C2  6E51               	movwf	get_fat@p,c
 12533  0044C4  5044               	movf	??_get_fat+3,w,c
 12534  0044C6  203C               	addwfc	get_fat@fs+1,w,c
 12535  0044C8  6E52               	movwf	get_fat@p+1,c
 12536                           
 12537                           ;ff.c: 847: val = (WORD)(*(WORD*)(BYTE*)(p));
 12538  0044CA  C051  FFD9         	movff	get_fat@p,fsr2l
 12539  0044CE  C052  FFDA         	movff	get_fat@p+1,fsr2h
 12540  0044D2  CFDE F041          	movff	postinc2,??_get_fat
 12541  0044D6  CFDD F042          	movff	postdec2,??_get_fat+1
 12542  0044DA  C041  F04B         	movff	??_get_fat,get_fat@val
 12543  0044DE  C042  F04C         	movff	??_get_fat+1,get_fat@val+1
 12544  0044E2                     L15:
 12545  0044E2  6A4D               	clrf	get_fat@val+2,c
 12546  0044E4  6A4E               	clrf	get_fat@val+3,c
 12547                           
 12548                           ;ff.c: 848: break;
 12549  0044E6  D07A               	goto	l281
 12550  0044E8                     l4051:
 12551                           
 12552                           ;ff.c: 851: if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4))) != FR_OK) brea
      +                          k;
 12553  0044E8  C03B  F030         	movff	get_fat@fs,move_window@fs
 12554  0044EC  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 12555  0044F0  EE20 F01E          	lfsr	2,30
 12556  0044F4  503B               	movf	get_fat@fs,w,c
 12557  0044F6  26D9               	addwf	fsr2l,f,c
 12558  0044F8  503C               	movf	get_fat@fs+1,w,c
 12559  0044FA  22DA               	addwfc	fsr2h,f,c
 12560  0044FC  CFDE F041          	movff	postinc2,??_get_fat
 12561  004500  CFDE F042          	movff	postinc2,??_get_fat+1
 12562  004504  CFDE F043          	movff	postinc2,??_get_fat+2
 12563  004508  CFDE F044          	movff	postinc2,??_get_fat+3
 12564  00450C  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 12565  004510  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 12566  004514  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 12567  004518  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 12568  00451C  0E08               	movlw	8
 12569  00451E  D005               	goto	u5170
 12570  004520                     u5175:
 12571  004520  90D8               	bcf	status,0,c
 12572  004522  3248               	rrcf	??_get_fat+7,f,c
 12573  004524  3247               	rrcf	??_get_fat+6,f,c
 12574  004526  3246               	rrcf	??_get_fat+5,f,c
 12575  004528  3245               	rrcf	??_get_fat+4,f,c
 12576  00452A                     u5170:
 12577  00452A  2EE8               	decfsz	wreg,f,c
 12578  00452C  D7F9               	goto	u5175
 12579  00452E  5041               	movf	??_get_fat,w,c
 12580  004530  2445               	addwf	??_get_fat+4,w,c
 12581  004532  6E32               	movwf	move_window@sector,c
 12582  004534  5042               	movf	??_get_fat+1,w,c
 12583  004536  2046               	addwfc	??_get_fat+5,w,c
 12584  004538  6E33               	movwf	move_window@sector+1,c
 12585  00453A  5043               	movf	??_get_fat+2,w,c
 12586  00453C  2047               	addwfc	??_get_fat+6,w,c
 12587  00453E  6E34               	movwf	move_window@sector+2,c
 12588  004540  5044               	movf	??_get_fat+3,w,c
 12589  004542  2048               	addwfc	??_get_fat+7,w,c
 12590  004544  6E35               	movwf	move_window@sector+3,c
 12591  004546  ECFB  F02F         	call	_move_window	;wreg free
 12592  00454A  0900               	iorlw	0
 12593  00454C  A4D8               	btfss	status,2,c
 12594  00454E  D046               	goto	l281
 12595  004550  D001               	goto	l4055
 12596  004552  D044               	goto	l281
 12597  004554                     l4055:
 12598                           
 12599                           ;ff.c: 852: p = &fs->win[clst * 4 % ((UINT)512)];
 12600  004554  0EFF               	movlw	255
 12601  004556  6E41               	movwf	??_get_fat& (0+255),c
 12602  004558  0E01               	movlw	1
 12603  00455A  6E42               	movwf	(??_get_fat+1)& (0+255),c
 12604  00455C  C03D  F043         	movff	get_fat@clst,??_get_fat+2
 12605  004560  C03E  F044         	movff	get_fat@clst+1,??_get_fat+3
 12606  004564  90D8               	bcf	status,0,c
 12607  004566  3643               	rlcf	??_get_fat+2,f,c
 12608  004568  3644               	rlcf	??_get_fat+3,f,c
 12609  00456A  90D8               	bcf	status,0,c
 12610  00456C  3643               	rlcf	??_get_fat+2,f,c
 12611  00456E  3644               	rlcf	??_get_fat+3,f,c
 12612  004570  5041               	movf	??_get_fat,w,c
 12613  004572  1643               	andwf	??_get_fat+2,f,c
 12614  004574  5042               	movf	??_get_fat+1,w,c
 12615  004576  1644               	andwf	??_get_fat+3,f,c
 12616  004578  0E2E               	movlw	46
 12617  00457A  2643               	addwf	??_get_fat+2,f,c
 12618  00457C  0E00               	movlw	0
 12619  00457E  2244               	addwfc	??_get_fat+3,f,c
 12620  004580  5043               	movf	??_get_fat+2,w,c
 12621  004582  243B               	addwf	get_fat@fs,w,c
 12622  004584  6E51               	movwf	get_fat@p,c
 12623  004586  5044               	movf	??_get_fat+3,w,c
 12624  004588  203C               	addwfc	get_fat@fs+1,w,c
 12625  00458A  6E52               	movwf	get_fat@p+1,c
 12626                           
 12627                           ;ff.c: 853: val = (DWORD)(*(DWORD*)(BYTE*)(p)) & 0x0FFFFFFF;
 12628  00458C  C051  FFD9         	movff	get_fat@p,fsr2l
 12629  004590  C052  FFDA         	movff	get_fat@p+1,fsr2h
 12630  004594  0EFF               	movlw	255
 12631  004596  14DE               	andwf	postinc2,w,c
 12632  004598  6E4B               	movwf	get_fat@val,c
 12633  00459A  0EFF               	movlw	255
 12634  00459C  14DE               	andwf	postinc2,w,c
 12635  00459E  6E4C               	movwf	get_fat@val+1,c
 12636  0045A0  0EFF               	movlw	255
 12637  0045A2  14DE               	andwf	postinc2,w,c
 12638  0045A4  6E4D               	movwf	get_fat@val+2,c
 12639  0045A6  0E0F               	movlw	15
 12640  0045A8  14DE               	andwf	postinc2,w,c
 12641  0045AA  D007               	goto	L16
 12642  0045AC                     l4059:
 12643                           
 12644                           ;ff.c: 857: val = 1;
 12645  0045AC  0E01               	movlw	1
 12646  0045AE  6E4B               	movwf	get_fat@val,c
 12647  0045B0  0E00               	movlw	0
 12648  0045B2  6E4C               	movwf	get_fat@val+1,c
 12649  0045B4  0E00               	movlw	0
 12650  0045B6  6E4D               	movwf	get_fat@val+2,c
 12651  0045B8  0E00               	movlw	0
 12652  0045BA                     L16:
 12653  0045BA  6E4E               	movwf	get_fat@val+3,c
 12654                           
 12655                           ;ff.c: 858: }
 12656  0045BC  D00F               	goto	l281
 12657  0045BE                     l4061:
 12658  0045BE  C03B  FFD9         	movff	get_fat@fs,fsr2l
 12659  0045C2  C03C  FFDA         	movff	get_fat@fs+1,fsr2h
 12660  0045C6  50DF               	movf	indf2,w,c
 12661                           
 12662                           ; Switch size 1, requested type "space"
 12663                           ; Number of cases is 3, Range of values is 1 to 3
 12664                           ; switch strategies available:
 12665                           ; Name         Instructions Cycles
 12666                           ; simple_byte           10     6 (average)
 12667                           ;	Chosen strategy is simple_byte
 12668  0045C8  0A01               	xorlw	1	; case 1
 12669  0045CA  B4D8               	btfsc	status,2,c
 12670  0045CC  D66A               	goto	l283
 12671  0045CE  0A03               	xorlw	3	; case 2
 12672  0045D0  B4D8               	btfsc	status,2,c
 12673  0045D2  D72E               	goto	l4043
 12674  0045D4  0A01               	xorlw	1	; case 3
 12675  0045D6  B4D8               	btfsc	status,2,c
 12676  0045D8  D787               	goto	l4051
 12677  0045DA  D7E8               	goto	l4059
 12678  0045DC                     l281:
 12679                           
 12680                           ;ff.c: 859: }
 12681                           ;ff.c: 861: return val;
 12682  0045DC  C04B  F03B         	movff	get_fat@val,?_get_fat
 12683  0045E0  C04C  F03C         	movff	get_fat@val+1,?_get_fat+1
 12684  0045E4  C04D  F03D         	movff	get_fat@val+2,?_get_fat+2
 12685  0045E8  C04E  F03E         	movff	get_fat@val+3,?_get_fat+3
 12686  0045EC  0012               	return		;funcret
 12687  0045EE                     __end_of_get_fat:
 12688                           	opt stack 0
 12689                           tblptru	equ	0xFF8
 12690                           tblptrh	equ	0xFF7
 12691                           tblptrl	equ	0xFF6
 12692                           tablat	equ	0xFF5
 12693                           prodh	equ	0xFF4
 12694                           prodl	equ	0xFF3
 12695                           indf0	equ	0xFEF
 12696                           postinc0	equ	0xFEE
 12697                           fsr0h	equ	0xFEA
 12698                           fsr0l	equ	0xFE9
 12699                           wreg	equ	0xFE8
 12700                           indf1	equ	0xFE7
 12701                           postinc1	equ	0xFE6
 12702                           postdec1	equ	0xFE5
 12703                           fsr1h	equ	0xFE2
 12704                           fsr1l	equ	0xFE1
 12705                           indf2	equ	0xFDF
 12706                           postinc2	equ	0xFDE
 12707                           postdec2	equ	0xFDD
 12708                           plusw2	equ	0xFDB
 12709                           fsr2h	equ	0xFDA
 12710                           fsr2l	equ	0xFD9
 12711                           status	equ	0xFD8
 12712                           
 12713 ;; *************** function _clust2sect *****************
 12714 ;; Defined at:
 12715 ;;		line 800 in file "../../SD_Card_FatFs/ff.c"
 12716 ;; Parameters:    Size  Location     Type
 12717 ;;  fs              2   12[COMRAM] PTR struct .
 12718 ;;		 -> NULL(0), FatFs(558), 
 12719 ;;  clst            4   14[COMRAM] unsigned long 
 12720 ;; Auto vars:     Size  Location     Type
 12721 ;;		None
 12722 ;; Return value:  Size  Location     Type
 12723 ;;                  4   12[COMRAM] unsigned long 
 12724 ;; Registers used:
 12725 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12726 ;; Tracked objects:
 12727 ;;		On entry : 0/0
 12728 ;;		On exit  : 0/0
 12729 ;;		Unchanged: 0/0
 12730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12731 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12733 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12734 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12735 ;;Total ram usage:       11 bytes
 12736 ;; Hardware stack levels used:    1
 12737 ;; Hardware stack levels required when called:    1
 12738 ;; This function calls:
 12739 ;;		___lmul
 12740 ;; This function is called by:
 12741 ;;		_dir_sdi
 12742 ;;		_dir_next
 12743 ;;		_f_write
 12744 ;;		_f_lseek
 12745 ;;		_f_read
 12746 ;; This function uses a non-reentrant model
 12747 ;;
 12748                           
 12749                           	psect	text25
 12750  005E84                     __ptext25:
 12751                           	opt stack 0
 12752  005E84                     _clust2sect:
 12753                           	opt stack 28
 12754                           
 12755                           ;ff.c: 805: clst -= 2;
 12756                           
 12757                           ;incstack = 0
 12758  005E84  0E02               	movlw	2
 12759  005E86  5E0F               	subwf	clust2sect@clst,f,c
 12760  005E88  0E00               	movlw	0
 12761  005E8A  5A10               	subwfb	clust2sect@clst+1,f,c
 12762  005E8C  5A11               	subwfb	clust2sect@clst+2,f,c
 12763  005E8E  5A12               	subwfb	clust2sect@clst+3,f,c
 12764                           
 12765                           ;ff.c: 806: if (clst >= fs->n_fatent - 2) return 0;
 12766  005E90  EE20 F012          	lfsr	2,18
 12767  005E94  500D               	movf	clust2sect@fs,w,c
 12768  005E96  26D9               	addwf	fsr2l,f,c
 12769  005E98  500E               	movf	clust2sect@fs+1,w,c
 12770  005E9A  22DA               	addwfc	fsr2h,f,c
 12771  005E9C  0EFE               	movlw	254
 12772  005E9E  24DE               	addwf	postinc2,w,c
 12773  005EA0  6E13               	movwf	??_clust2sect& (0+255),c
 12774  005EA2  0EFF               	movlw	255
 12775  005EA4  20DE               	addwfc	postinc2,w,c
 12776  005EA6  6E14               	movwf	(??_clust2sect+1)& (0+255),c
 12777  005EA8  0EFF               	movlw	255
 12778  005EAA  20DE               	addwfc	postinc2,w,c
 12779  005EAC  6E15               	movwf	(??_clust2sect+2)& (0+255),c
 12780  005EAE  0EFF               	movlw	255
 12781  005EB0  20DE               	addwfc	postinc2,w,c
 12782  005EB2  6E16               	movwf	(??_clust2sect+3)& (0+255),c
 12783  005EB4  5013               	movf	??_clust2sect,w,c
 12784  005EB6  5C0F               	subwf	clust2sect@clst,w,c
 12785  005EB8  5014               	movf	??_clust2sect+1,w,c
 12786  005EBA  5810               	subwfb	clust2sect@clst+1,w,c
 12787  005EBC  5015               	movf	??_clust2sect+2,w,c
 12788  005EBE  5811               	subwfb	clust2sect@clst+2,w,c
 12789  005EC0  5016               	movf	??_clust2sect+3,w,c
 12790  005EC2  5812               	subwfb	clust2sect@clst+3,w,c
 12791  005EC4  A0D8               	btfss	status,0,c
 12792  005EC6  D009               	goto	l4163
 12793  005EC8  0E00               	movlw	0
 12794  005ECA  6E0D               	movwf	?_clust2sect,c
 12795  005ECC  0E00               	movlw	0
 12796  005ECE  6E0E               	movwf	?_clust2sect+1,c
 12797  005ED0  0E00               	movlw	0
 12798  005ED2  6E0F               	movwf	?_clust2sect+2,c
 12799  005ED4  0E00               	movlw	0
 12800  005ED6  6E10               	movwf	?_clust2sect+3,c
 12801  005ED8  0012               	return	
 12802  005EDA                     l4163:
 12803                           
 12804                           ;ff.c: 807: return clst * fs->csize + fs->database;
 12805  005EDA  EE20 F026          	lfsr	2,38
 12806  005EDE  500D               	movf	clust2sect@fs,w,c
 12807  005EE0  26D9               	addwf	fsr2l,f,c
 12808  005EE2  500E               	movf	clust2sect@fs+1,w,c
 12809  005EE4  22DA               	addwfc	fsr2h,f,c
 12810  005EE6  CFDE F013          	movff	postinc2,??_clust2sect
 12811  005EEA  CFDE F014          	movff	postinc2,??_clust2sect+1
 12812  005EEE  CFDE F015          	movff	postinc2,??_clust2sect+2
 12813  005EF2  CFDE F016          	movff	postinc2,??_clust2sect+3
 12814  005EF6  EE20 F002          	lfsr	2,2
 12815  005EFA  500D               	movf	clust2sect@fs,w,c
 12816  005EFC  26D9               	addwf	fsr2l,f,c
 12817  005EFE  500E               	movf	clust2sect@fs+1,w,c
 12818  005F00  22DA               	addwfc	fsr2h,f,c
 12819  005F02  50DF               	movf	indf2,w,c
 12820  005F04  6E17               	movwf	(??_clust2sect+4)& (0+255),c
 12821  005F06  5017               	movf	??_clust2sect+4,w,c
 12822  005F08  6E01               	movwf	___lmul@multiplier,c
 12823  005F0A  6A02               	clrf	___lmul@multiplier+1,c
 12824  005F0C  6A03               	clrf	___lmul@multiplier+2,c
 12825  005F0E  6A04               	clrf	___lmul@multiplier+3,c
 12826  005F10  C00F  F005         	movff	clust2sect@clst,___lmul@multiplicand
 12827  005F14  C010  F006         	movff	clust2sect@clst+1,___lmul@multiplicand+1
 12828  005F18  C011  F007         	movff	clust2sect@clst+2,___lmul@multiplicand+2
 12829  005F1C  C012  F008         	movff	clust2sect@clst+3,___lmul@multiplicand+3
 12830  005F20  EC25  F032         	call	___lmul	;wreg free
 12831  005F24  5013               	movf	??_clust2sect,w,c
 12832  005F26  2401               	addwf	?___lmul,w,c
 12833  005F28  6E0D               	movwf	?_clust2sect,c
 12834  005F2A  5014               	movf	??_clust2sect+1,w,c
 12835  005F2C  2002               	addwfc	?___lmul+1,w,c
 12836  005F2E  6E0E               	movwf	?_clust2sect+1,c
 12837  005F30  5015               	movf	??_clust2sect+2,w,c
 12838  005F32  2003               	addwfc	?___lmul+2,w,c
 12839  005F34  6E0F               	movwf	?_clust2sect+2,c
 12840  005F36  5016               	movf	??_clust2sect+3,w,c
 12841  005F38  2004               	addwfc	?___lmul+3,w,c
 12842  005F3A  6E10               	movwf	?_clust2sect+3,c
 12843  005F3C  0012               	return	
 12844  005F3E  0012               	return		;funcret
 12845  005F40                     __end_of_clust2sect:
 12846                           	opt stack 0
 12847                           tblptru	equ	0xFF8
 12848                           tblptrh	equ	0xFF7
 12849                           tblptrl	equ	0xFF6
 12850                           tablat	equ	0xFF5
 12851                           prodh	equ	0xFF4
 12852                           prodl	equ	0xFF3
 12853                           indf0	equ	0xFEF
 12854                           postinc0	equ	0xFEE
 12855                           fsr0h	equ	0xFEA
 12856                           fsr0l	equ	0xFE9
 12857                           wreg	equ	0xFE8
 12858                           indf1	equ	0xFE7
 12859                           postinc1	equ	0xFE6
 12860                           postdec1	equ	0xFE5
 12861                           fsr1h	equ	0xFE2
 12862                           fsr1l	equ	0xFE1
 12863                           indf2	equ	0xFDF
 12864                           postinc2	equ	0xFDE
 12865                           postdec2	equ	0xFDD
 12866                           plusw2	equ	0xFDB
 12867                           fsr2h	equ	0xFDA
 12868                           fsr2l	equ	0xFD9
 12869                           status	equ	0xFD8
 12870                           
 12871 ;; *************** function ___lmul *****************
 12872 ;; Defined at:
 12873 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul32.c"
 12874 ;; Parameters:    Size  Location     Type
 12875 ;;  multiplier      4    0[COMRAM] unsigned long 
 12876 ;;  multiplicand    4    4[COMRAM] unsigned long 
 12877 ;; Auto vars:     Size  Location     Type
 12878 ;;  product         4    8[COMRAM] unsigned long 
 12879 ;; Return value:  Size  Location     Type
 12880 ;;                  4    0[COMRAM] unsigned long 
 12881 ;; Registers used:
 12882 ;;		wreg, status,2, status,0
 12883 ;; Tracked objects:
 12884 ;;		On entry : 0/0
 12885 ;;		On exit  : 0/0
 12886 ;;		Unchanged: 0/0
 12887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12888 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12889 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12891 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12892 ;;Total ram usage:       12 bytes
 12893 ;; Hardware stack levels used:    1
 12894 ;; This function calls:
 12895 ;;		Nothing
 12896 ;; This function is called by:
 12897 ;;		_clust2sect
 12898 ;;		_find_volume
 12899 ;; This function uses a non-reentrant model
 12900 ;;
 12901                           
 12902                           	psect	text26
 12903  00644A                     __ptext26:
 12904                           	opt stack 0
 12905  00644A                     ___lmul:
 12906                           	opt stack 28
 12907                           
 12908                           ;incstack = 0
 12909  00644A  0E00               	movlw	0
 12910  00644C  6E09               	movwf	___lmul@product,c
 12911  00644E  0E00               	movlw	0
 12912  006450  6E0A               	movwf	___lmul@product+1,c
 12913  006452  0E00               	movlw	0
 12914  006454  6E0B               	movwf	___lmul@product+2,c
 12915  006456  0E00               	movlw	0
 12916  006458  6E0C               	movwf	___lmul@product+3,c
 12917  00645A  D000               	goto	l4139
 12918  00645C                     l4139:
 12919  00645C  A001               	btfss	___lmul@multiplier,0,c
 12920  00645E  D009               	goto	l4143
 12921  006460  5005               	movf	___lmul@multiplicand,w,c
 12922  006462  2609               	addwf	___lmul@product,f,c
 12923  006464  5006               	movf	___lmul@multiplicand+1,w,c
 12924  006466  220A               	addwfc	___lmul@product+1,f,c
 12925  006468  5007               	movf	___lmul@multiplicand+2,w,c
 12926  00646A  220B               	addwfc	___lmul@product+2,f,c
 12927  00646C  5008               	movf	___lmul@multiplicand+3,w,c
 12928  00646E  220C               	addwfc	___lmul@product+3,f,c
 12929  006470  D000               	goto	l4143
 12930  006472                     l4143:
 12931  006472  90D8               	bcf	status,0,c
 12932  006474  3605               	rlcf	___lmul@multiplicand,f,c
 12933  006476  3606               	rlcf	___lmul@multiplicand+1,f,c
 12934  006478  3607               	rlcf	___lmul@multiplicand+2,f,c
 12935  00647A  3608               	rlcf	___lmul@multiplicand+3,f,c
 12936  00647C  90D8               	bcf	status,0,c
 12937  00647E  3204               	rrcf	___lmul@multiplier+3,f,c
 12938  006480  3203               	rrcf	___lmul@multiplier+2,f,c
 12939  006482  3202               	rrcf	___lmul@multiplier+1,f,c
 12940  006484  3201               	rrcf	___lmul@multiplier,f,c
 12941  006486  5001               	movf	___lmul@multiplier,w,c
 12942  006488  1002               	iorwf	___lmul@multiplier+1,w,c
 12943  00648A  1003               	iorwf	___lmul@multiplier+2,w,c
 12944  00648C  1004               	iorwf	___lmul@multiplier+3,w,c
 12945  00648E  A4D8               	btfss	status,2,c
 12946  006490  D7E5               	goto	l4139
 12947  006492  C009  F001         	movff	___lmul@product,?___lmul
 12948  006496  C00A  F002         	movff	___lmul@product+1,?___lmul+1
 12949  00649A  C00B  F003         	movff	___lmul@product+2,?___lmul+2
 12950  00649E  C00C  F004         	movff	___lmul@product+3,?___lmul+3
 12951  0064A2  0012               	return		;funcret
 12952  0064A4                     __end_of___lmul:
 12953                           	opt stack 0
 12954                           tblptru	equ	0xFF8
 12955                           tblptrh	equ	0xFF7
 12956                           tblptrl	equ	0xFF6
 12957                           tablat	equ	0xFF5
 12958                           prodh	equ	0xFF4
 12959                           prodl	equ	0xFF3
 12960                           indf0	equ	0xFEF
 12961                           postinc0	equ	0xFEE
 12962                           fsr0h	equ	0xFEA
 12963                           fsr0l	equ	0xFE9
 12964                           wreg	equ	0xFE8
 12965                           indf1	equ	0xFE7
 12966                           postinc1	equ	0xFE6
 12967                           postdec1	equ	0xFE5
 12968                           fsr1h	equ	0xFE2
 12969                           fsr1l	equ	0xFE1
 12970                           indf2	equ	0xFDF
 12971                           postinc2	equ	0xFDE
 12972                           postdec2	equ	0xFDD
 12973                           plusw2	equ	0xFDB
 12974                           fsr2h	equ	0xFDA
 12975                           fsr2l	equ	0xFD9
 12976                           status	equ	0xFD8
 12977                           
 12978 ;; *************** function ___lldiv *****************
 12979 ;; Defined at:
 12980 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
 12981 ;; Parameters:    Size  Location     Type
 12982 ;;  dividend        4    0[COMRAM] unsigned long 
 12983 ;;  divisor         4    4[COMRAM] unsigned long 
 12984 ;; Auto vars:     Size  Location     Type
 12985 ;;  quotient        4    8[COMRAM] unsigned long 
 12986 ;;  counter         1   12[COMRAM] unsigned char 
 12987 ;; Return value:  Size  Location     Type
 12988 ;;                  4    0[COMRAM] unsigned long 
 12989 ;; Registers used:
 12990 ;;		wreg, status,2, status,0
 12991 ;; Tracked objects:
 12992 ;;		On entry : 0/0
 12993 ;;		On exit  : 0/0
 12994 ;;		Unchanged: 0/0
 12995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12996 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12997 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12999 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13000 ;;Total ram usage:       13 bytes
 13001 ;; Hardware stack levels used:    1
 13002 ;; This function calls:
 13003 ;;		Nothing
 13004 ;; This function is called by:
 13005 ;;		_find_volume
 13006 ;;		_f_lseek
 13007 ;; This function uses a non-reentrant model
 13008 ;;
 13009                           
 13010                           	psect	text27
 13011  006256                     __ptext27:
 13012                           	opt stack 0
 13013  006256                     ___lldiv:
 13014                           	opt stack 28
 13015                           
 13016                           ;incstack = 0
 13017  006256  0E00               	movlw	0
 13018  006258  6E09               	movwf	___lldiv@quotient,c
 13019  00625A  0E00               	movlw	0
 13020  00625C  6E0A               	movwf	___lldiv@quotient+1,c
 13021  00625E  0E00               	movlw	0
 13022  006260  6E0B               	movwf	___lldiv@quotient+2,c
 13023  006262  0E00               	movlw	0
 13024  006264  6E0C               	movwf	___lldiv@quotient+3,c
 13025  006266  5005               	movf	___lldiv@divisor,w,c
 13026  006268  1006               	iorwf	___lldiv@divisor+1,w,c
 13027  00626A  1007               	iorwf	___lldiv@divisor+2,w,c
 13028  00626C  1008               	iorwf	___lldiv@divisor+3,w,c
 13029  00626E  B4D8               	btfsc	status,2,c
 13030  006270  D02F               	goto	l1275
 13031  006272  0E01               	movlw	1
 13032  006274  6E0D               	movwf	___lldiv@counter,c
 13033  006276  D007               	goto	l5033
 13034  006278                     l5031:
 13035  006278  90D8               	bcf	status,0,c
 13036  00627A  3605               	rlcf	___lldiv@divisor,f,c
 13037  00627C  3606               	rlcf	___lldiv@divisor+1,f,c
 13038  00627E  3607               	rlcf	___lldiv@divisor+2,f,c
 13039  006280  3608               	rlcf	___lldiv@divisor+3,f,c
 13040  006282  2A0D               	incf	___lldiv@counter,f,c
 13041  006284  D000               	goto	l5033
 13042  006286                     l5033:
 13043  006286  BE08               	btfsc	___lldiv@divisor+3,7,c
 13044  006288  D002               	goto	l5035
 13045  00628A  D7F6               	goto	l5031
 13046  00628C  D000               	goto	l5035
 13047  00628E                     l5035:
 13048  00628E  90D8               	bcf	status,0,c
 13049  006290  3609               	rlcf	___lldiv@quotient,f,c
 13050  006292  360A               	rlcf	___lldiv@quotient+1,f,c
 13051  006294  360B               	rlcf	___lldiv@quotient+2,f,c
 13052  006296  360C               	rlcf	___lldiv@quotient+3,f,c
 13053  006298  5005               	movf	___lldiv@divisor,w,c
 13054  00629A  5C01               	subwf	___lldiv@dividend,w,c
 13055  00629C  5006               	movf	___lldiv@divisor+1,w,c
 13056  00629E  5802               	subwfb	___lldiv@dividend+1,w,c
 13057  0062A0  5007               	movf	___lldiv@divisor+2,w,c
 13058  0062A2  5803               	subwfb	___lldiv@dividend+2,w,c
 13059  0062A4  5008               	movf	___lldiv@divisor+3,w,c
 13060  0062A6  5804               	subwfb	___lldiv@dividend+3,w,c
 13061  0062A8  A0D8               	btfss	status,0,c
 13062  0062AA  D00A               	goto	l5043
 13063  0062AC  5005               	movf	___lldiv@divisor,w,c
 13064  0062AE  5E01               	subwf	___lldiv@dividend,f,c
 13065  0062B0  5006               	movf	___lldiv@divisor+1,w,c
 13066  0062B2  5A02               	subwfb	___lldiv@dividend+1,f,c
 13067  0062B4  5007               	movf	___lldiv@divisor+2,w,c
 13068  0062B6  5A03               	subwfb	___lldiv@dividend+2,f,c
 13069  0062B8  5008               	movf	___lldiv@divisor+3,w,c
 13070  0062BA  5A04               	subwfb	___lldiv@dividend+3,f,c
 13071  0062BC  8009               	bsf	___lldiv@quotient,0,c
 13072  0062BE  D000               	goto	l5043
 13073  0062C0                     l5043:
 13074  0062C0  90D8               	bcf	status,0,c
 13075  0062C2  3208               	rrcf	___lldiv@divisor+3,f,c
 13076  0062C4  3207               	rrcf	___lldiv@divisor+2,f,c
 13077  0062C6  3206               	rrcf	___lldiv@divisor+1,f,c
 13078  0062C8  3205               	rrcf	___lldiv@divisor,f,c
 13079  0062CA  2E0D               	decfsz	___lldiv@counter,f,c
 13080  0062CC  D7E0               	goto	l5035
 13081  0062CE  D000               	goto	l1275
 13082  0062D0                     l1275:
 13083  0062D0  C009  F001         	movff	___lldiv@quotient,?___lldiv
 13084  0062D4  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 13085  0062D8  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 13086  0062DC  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 13087  0062E0  0012               	return		;funcret
 13088  0062E2                     __end_of___lldiv:
 13089                           	opt stack 0
 13090                           tblptru	equ	0xFF8
 13091                           tblptrh	equ	0xFF7
 13092                           tblptrl	equ	0xFF6
 13093                           tablat	equ	0xFF5
 13094                           prodh	equ	0xFF4
 13095                           prodl	equ	0xFF3
 13096                           indf0	equ	0xFEF
 13097                           postinc0	equ	0xFEE
 13098                           fsr0h	equ	0xFEA
 13099                           fsr0l	equ	0xFE9
 13100                           wreg	equ	0xFE8
 13101                           indf1	equ	0xFE7
 13102                           postinc1	equ	0xFE6
 13103                           postdec1	equ	0xFE5
 13104                           fsr1h	equ	0xFE2
 13105                           fsr1l	equ	0xFE1
 13106                           indf2	equ	0xFDF
 13107                           postinc2	equ	0xFDE
 13108                           postdec2	equ	0xFDD
 13109                           plusw2	equ	0xFDB
 13110                           fsr2h	equ	0xFDA
 13111                           fsr2l	equ	0xFD9
 13112                           status	equ	0xFD8
 13113                           
 13114 ;; *************** function _f_close *****************
 13115 ;; Defined at:
 13116 ;;		line 2861 in file "../../SD_Card_FatFs/ff.c"
 13117 ;; Parameters:    Size  Location     Type
 13118 ;;  fp              2   77[COMRAM] PTR struct .
 13119 ;;		 -> Fil(32), 
 13120 ;; Auto vars:     Size  Location     Type
 13121 ;;  res             1   79[COMRAM] enum E88
 13122 ;; Return value:  Size  Location     Type
 13123 ;;                  1    wreg      enum E8927
 13124 ;; Registers used:
 13125 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13126 ;; Tracked objects:
 13127 ;;		On entry : 0/0
 13128 ;;		On exit  : 0/0
 13129 ;;		Unchanged: 0/0
 13130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13131 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13132 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13134 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13135 ;;Total ram usage:        3 bytes
 13136 ;; Hardware stack levels used:    1
 13137 ;; Hardware stack levels required when called:    9
 13138 ;; This function calls:
 13139 ;;		_f_sync
 13140 ;;		_validate
 13141 ;; This function is called by:
 13142 ;;		_main
 13143 ;; This function uses a non-reentrant model
 13144 ;;
 13145                           
 13146                           	psect	text28
 13147  0065C8                     __ptext28:
 13148                           	opt stack 0
 13149  0065C8                     _f_close:
 13150                           	opt stack 21
 13151                           
 13152                           ;ff.c: 2865: FRESULT res;
 13153                           ;ff.c: 2869: res = f_sync(fp);
 13154                           
 13155                           ;incstack = 0
 13156  0065C8  C04E  F045         	movff	f_close@fp,f_sync@fp
 13157  0065CC  C04F  F046         	movff	f_close@fp+1,f_sync@fp+1
 13158  0065D0  EC26  F02A         	call	_f_sync	;wreg free
 13159  0065D4  6E50               	movwf	f_close@res,c
 13160                           
 13161                           ;ff.c: 2870: if (res == FR_OK)
 13162  0065D6  5050               	movf	f_close@res,w,c
 13163  0065D8  A4D8               	btfss	status,2,c
 13164  0065DA  0012               	return	
 13165                           
 13166                           ;ff.c: 2872: {
 13167                           ;ff.c: 2873: res = validate(fp);
 13168  0065DC  C04E  F002         	movff	f_close@fp,validate@obj
 13169  0065E0  C04F  F003         	movff	f_close@fp+1,validate@obj+1
 13170  0065E4  EC51  F030         	call	_validate	;wreg free
 13171  0065E8  6E50               	movwf	f_close@res,c
 13172                           
 13173                           ;ff.c: 2874: if (res == FR_OK) {
 13174  0065EA  5050               	movf	f_close@res,w,c
 13175  0065EC  A4D8               	btfss	status,2,c
 13176  0065EE  0012               	return	
 13177                           
 13178                           ;ff.c: 2882: fp->fs = 0;
 13179  0065F0  C04E  FFD9         	movff	f_close@fp,fsr2l
 13180  0065F4  C04F  FFDA         	movff	f_close@fp+1,fsr2h
 13181  0065F8  0E00               	movlw	0
 13182  0065FA  6EDE               	movwf	postinc2,c
 13183  0065FC  0E00               	movlw	0
 13184  0065FE  6EDD               	movwf	postdec2,c
 13185  006600  0012               	return	
 13186                           
 13187                           ;ff.c: 2886: }
 13188                           ;ff.c: 2887: }
 13189                           ;ff.c: 2888: return res;
 13190                           ;	Return value of _f_close is never used
 13191  006602  0012               	return		;funcret
 13192  006604                     __end_of_f_close:
 13193                           	opt stack 0
 13194                           tblptru	equ	0xFF8
 13195                           tblptrh	equ	0xFF7
 13196                           tblptrl	equ	0xFF6
 13197                           tablat	equ	0xFF5
 13198                           prodh	equ	0xFF4
 13199                           prodl	equ	0xFF3
 13200                           indf0	equ	0xFEF
 13201                           postinc0	equ	0xFEE
 13202                           fsr0h	equ	0xFEA
 13203                           fsr0l	equ	0xFE9
 13204                           wreg	equ	0xFE8
 13205                           indf1	equ	0xFE7
 13206                           postinc1	equ	0xFE6
 13207                           postdec1	equ	0xFE5
 13208                           fsr1h	equ	0xFE2
 13209                           fsr1l	equ	0xFE1
 13210                           indf2	equ	0xFDF
 13211                           postinc2	equ	0xFDE
 13212                           postdec2	equ	0xFDD
 13213                           plusw2	equ	0xFDB
 13214                           fsr2h	equ	0xFDA
 13215                           fsr2l	equ	0xFD9
 13216                           status	equ	0xFD8
 13217                           
 13218 ;; *************** function _f_sync *****************
 13219 ;; Defined at:
 13220 ;;		line 2813 in file "../../SD_Card_FatFs/ff.c"
 13221 ;; Parameters:    Size  Location     Type
 13222 ;;  fp              2   68[COMRAM] PTR struct .
 13223 ;;		 -> Fil(32), 
 13224 ;; Auto vars:     Size  Location     Type
 13225 ;;  tm              4   70[COMRAM] unsigned long 
 13226 ;;  dir             2   75[COMRAM] PTR unsigned char 
 13227 ;;		 -> NULL(0), FatFs(558), 
 13228 ;;  res             1   74[COMRAM] enum E88
 13229 ;; Return value:  Size  Location     Type
 13230 ;;                  1    wreg      enum E88
 13231 ;; Registers used:
 13232 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13233 ;; Tracked objects:
 13234 ;;		On entry : 0/0
 13235 ;;		On exit  : 0/0
 13236 ;;		Unchanged: 0/0
 13237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13238 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13239 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13241 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13242 ;;Total ram usage:        9 bytes
 13243 ;; Hardware stack levels used:    1
 13244 ;; Hardware stack levels required when called:    8
 13245 ;; This function calls:
 13246 ;;		_move_window
 13247 ;;		_st_clust
 13248 ;;		_sync_fs
 13249 ;;		_validate
 13250 ;; This function is called by:
 13251 ;;		_f_close
 13252 ;; This function uses a non-reentrant model
 13253 ;;
 13254                           
 13255                           	psect	text29
 13256  00544C                     __ptext29:
 13257                           	opt stack 0
 13258  00544C                     _f_sync:
 13259                           	opt stack 21
 13260                           
 13261                           ;ff.c: 2817: FRESULT res;
 13262                           ;ff.c: 2818: DWORD tm;
 13263                           ;ff.c: 2819: BYTE *dir;
 13264                           ;ff.c: 2822: res = validate(fp);
 13265                           
 13266                           ;incstack = 0
 13267  00544C  C045  F002         	movff	f_sync@fp,validate@obj
 13268  005450  C046  F003         	movff	f_sync@fp+1,validate@obj+1
 13269  005454  EC51  F030         	call	_validate	;wreg free
 13270  005458  6E4B               	movwf	f_sync@res,c
 13271                           
 13272                           ;ff.c: 2823: if (res == FR_OK) {
 13273  00545A  504B               	movf	f_sync@res,w,c
 13274  00545C  A4D8               	btfss	status,2,c
 13275  00545E  D09E               	goto	l5447
 13276                           
 13277                           ;ff.c: 2824: if (fp->flag & 0x20) {
 13278  005460  EE20 F004          	lfsr	2,4
 13279  005464  5045               	movf	f_sync@fp,w,c
 13280  005466  26D9               	addwf	fsr2l,f,c
 13281  005468  5046               	movf	f_sync@fp+1,w,c
 13282  00546A  22DA               	addwfc	fsr2h,f,c
 13283  00546C  AADF               	btfss	indf2,5,c
 13284  00546E  D096               	goto	l5447
 13285                           
 13286                           ;ff.c: 2833: res = move_window(fp->fs, fp->dir_sect);
 13287  005470  C045  FFD9         	movff	f_sync@fp,fsr2l
 13288  005474  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 13289  005478  CFDE F030          	movff	postinc2,move_window@fs
 13290  00547C  CFDD F031          	movff	postdec2,move_window@fs+1
 13291  005480  EE20 F01A          	lfsr	2,26
 13292  005484  5045               	movf	f_sync@fp,w,c
 13293  005486  26D9               	addwf	fsr2l,f,c
 13294  005488  5046               	movf	f_sync@fp+1,w,c
 13295  00548A  22DA               	addwfc	fsr2h,f,c
 13296  00548C  CFDE F032          	movff	postinc2,move_window@sector
 13297  005490  CFDE F033          	movff	postinc2,move_window@sector+1
 13298  005494  CFDE F034          	movff	postinc2,move_window@sector+2
 13299  005498  CFDE F035          	movff	postinc2,move_window@sector+3
 13300  00549C  ECFB  F02F         	call	_move_window	;wreg free
 13301  0054A0  6E4B               	movwf	f_sync@res,c
 13302                           
 13303                           ;ff.c: 2834: if (res == FR_OK) {
 13304  0054A2  504B               	movf	f_sync@res,w,c
 13305  0054A4  A4D8               	btfss	status,2,c
 13306  0054A6  D07A               	goto	l5447
 13307                           
 13308                           ;ff.c: 2835: dir = fp->dir_ptr;
 13309  0054A8  EE20 F01E          	lfsr	2,30
 13310  0054AC  5045               	movf	f_sync@fp,w,c
 13311  0054AE  26D9               	addwf	fsr2l,f,c
 13312  0054B0  5046               	movf	f_sync@fp+1,w,c
 13313  0054B2  22DA               	addwfc	fsr2h,f,c
 13314  0054B4  CFDE F04C          	movff	postinc2,f_sync@dir
 13315  0054B8  CFDD F04D          	movff	postdec2,f_sync@dir+1
 13316                           
 13317                           ;ff.c: 2836: dir[11] |= 0x20;
 13318  0054BC  EE20 F00B          	lfsr	2,11
 13319  0054C0  504C               	movf	f_sync@dir,w,c
 13320  0054C2  26D9               	addwf	fsr2l,f,c
 13321  0054C4  504D               	movf	f_sync@dir+1,w,c
 13322  0054C6  22DA               	addwfc	fsr2h,f,c
 13323  0054C8  0E00               	movlw	0
 13324  0054CA  8ADB               	bsf	plusw2,5,c
 13325                           
 13326                           ;ff.c: 2837: *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(fp->fsize);
 13327  0054CC  EE20 F00A          	lfsr	2,10
 13328  0054D0  5045               	movf	f_sync@fp,w,c
 13329  0054D2  26D9               	addwf	fsr2l,f,c
 13330  0054D4  5046               	movf	f_sync@fp+1,w,c
 13331  0054D6  22DA               	addwfc	fsr2h,f,c
 13332  0054D8  EE10 F01C          	lfsr	1,28
 13333  0054DC  504C               	movf	f_sync@dir,w,c
 13334  0054DE  26E1               	addwf	fsr1l,f,c
 13335  0054E0  504D               	movf	f_sync@dir+1,w,c
 13336  0054E2  22E2               	addwfc	fsr1h,f,c
 13337  0054E4  CFDE FFE6          	movff	postinc2,postinc1
 13338  0054E8  CFDE FFE6          	movff	postinc2,postinc1
 13339  0054EC  CFDE FFE6          	movff	postinc2,postinc1
 13340  0054F0  CFDE FFE6          	movff	postinc2,postinc1
 13341                           
 13342                           ;ff.c: 2838: st_clust(dir, fp->sclust);
 13343  0054F4  C04C  F001         	movff	f_sync@dir,st_clust@dir
 13344  0054F8  C04D  F002         	movff	f_sync@dir+1,st_clust@dir+1
 13345  0054FC  EE20 F00E          	lfsr	2,14
 13346  005500  5045               	movf	f_sync@fp,w,c
 13347  005502  26D9               	addwf	fsr2l,f,c
 13348  005504  5046               	movf	f_sync@fp+1,w,c
 13349  005506  22DA               	addwfc	fsr2h,f,c
 13350  005508  CFDE F003          	movff	postinc2,st_clust@cl
 13351  00550C  CFDE F004          	movff	postinc2,st_clust@cl+1
 13352  005510  CFDE F005          	movff	postinc2,st_clust@cl+2
 13353  005514  CFDE F006          	movff	postinc2,st_clust@cl+3
 13354  005518  EC35  F033         	call	_st_clust	;wreg free
 13355                           
 13356                           ;ff.c: 2839: tm = ((DWORD)(2015 - 1980) << 25 | (DWORD)1 << 21 | (DWORD)1 << 16);
 13357  00551C  0E00               	movlw	0
 13358  00551E  6E47               	movwf	f_sync@tm,c
 13359  005520  0E00               	movlw	0
 13360  005522  6E48               	movwf	f_sync@tm+1,c
 13361  005524  0E21               	movlw	33
 13362  005526  6E49               	movwf	f_sync@tm+2,c
 13363  005528  0E46               	movlw	70
 13364  00552A  6E4A               	movwf	f_sync@tm+3,c
 13365                           
 13366                           ;ff.c: 2840: *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(tm);
 13367  00552C  EE20 F016          	lfsr	2,22
 13368  005530  504C               	movf	f_sync@dir,w,c
 13369  005532  26D9               	addwf	fsr2l,f,c
 13370  005534  504D               	movf	f_sync@dir+1,w,c
 13371  005536  22DA               	addwfc	fsr2h,f,c
 13372  005538  C047  FFDE         	movff	f_sync@tm,postinc2
 13373  00553C  C048  FFDE         	movff	f_sync@tm+1,postinc2
 13374  005540  C049  FFDE         	movff	f_sync@tm+2,postinc2
 13375  005544  C04A  FFDE         	movff	f_sync@tm+3,postinc2
 13376                           
 13377                           ;ff.c: 2841: *(WORD*)(BYTE*)(dir + 18)=(WORD)(0);
 13378  005548  EE20 F012          	lfsr	2,18
 13379  00554C  504C               	movf	f_sync@dir,w,c
 13380  00554E  26D9               	addwf	fsr2l,f,c
 13381  005550  504D               	movf	f_sync@dir+1,w,c
 13382  005552  22DA               	addwfc	fsr2h,f,c
 13383  005554  0E00               	movlw	0
 13384  005556  6EDE               	movwf	postinc2,c
 13385  005558  0E00               	movlw	0
 13386  00555A  6EDD               	movwf	postdec2,c
 13387                           
 13388                           ;ff.c: 2842: fp->flag &= ~0x20;
 13389  00555C  EE20 F004          	lfsr	2,4
 13390  005560  5045               	movf	f_sync@fp,w,c
 13391  005562  26D9               	addwf	fsr2l,f,c
 13392  005564  5046               	movf	f_sync@fp+1,w,c
 13393  005566  22DA               	addwfc	fsr2h,f,c
 13394  005568  0EDF               	movlw	223
 13395  00556A  16DF               	andwf	indf2,f,c
 13396                           
 13397                           ;ff.c: 2843: fp->fs->wflag = 1;
 13398  00556C  C045  FFD9         	movff	f_sync@fp,fsr2l
 13399  005570  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 13400  005574  EE10 F004          	lfsr	1,4
 13401  005578  50DE               	movf	postinc2,w,c
 13402  00557A  26E1               	addwf	fsr1l,f,c
 13403  00557C  50DD               	movf	postdec2,w,c
 13404  00557E  22E2               	addwfc	fsr1h,f,c
 13405  005580  0E01               	movlw	1
 13406  005582  6EE7               	movwf	indf1,c
 13407                           
 13408                           ;ff.c: 2844: res = sync_fs(fp->fs);
 13409  005584  C045  FFD9         	movff	f_sync@fp,fsr2l
 13410  005588  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 13411  00558C  CFDE F03A          	movff	postinc2,sync_fs@fs
 13412  005590  CFDD F03B          	movff	postdec2,sync_fs@fs+1
 13413  005594  ECEC  F026         	call	_sync_fs	;wreg free
 13414  005598  6E4B               	movwf	f_sync@res,c
 13415  00559A  D000               	goto	l5447
 13416  00559C                     l5447:
 13417                           
 13418                           ;ff.c: 2845: }
 13419                           ;ff.c: 2846: }
 13420                           ;ff.c: 2847: }
 13421                           ;ff.c: 2849: return res;
 13422  00559C  504B               	movf	f_sync@res,w,c
 13423  00559E  0012               	return	
 13424  0055A0  0012               	return		;funcret
 13425  0055A2                     __end_of_f_sync:
 13426                           	opt stack 0
 13427                           tblptru	equ	0xFF8
 13428                           tblptrh	equ	0xFF7
 13429                           tblptrl	equ	0xFF6
 13430                           tablat	equ	0xFF5
 13431                           prodh	equ	0xFF4
 13432                           prodl	equ	0xFF3
 13433                           indf0	equ	0xFEF
 13434                           postinc0	equ	0xFEE
 13435                           fsr0h	equ	0xFEA
 13436                           fsr0l	equ	0xFE9
 13437                           wreg	equ	0xFE8
 13438                           indf1	equ	0xFE7
 13439                           postinc1	equ	0xFE6
 13440                           postdec1	equ	0xFE5
 13441                           fsr1h	equ	0xFE2
 13442                           fsr1l	equ	0xFE1
 13443                           indf2	equ	0xFDF
 13444                           postinc2	equ	0xFDE
 13445                           postdec2	equ	0xFDD
 13446                           plusw2	equ	0xFDB
 13447                           fsr2h	equ	0xFDA
 13448                           fsr2l	equ	0xFD9
 13449                           status	equ	0xFD8
 13450                           
 13451 ;; *************** function _validate *****************
 13452 ;; Defined at:
 13453 ;;		line 2372 in file "../../SD_Card_FatFs/ff.c"
 13454 ;; Parameters:    Size  Location     Type
 13455 ;;  obj             2    1[COMRAM] PTR void 
 13456 ;;		 -> Fil(32), 
 13457 ;; Auto vars:     Size  Location     Type
 13458 ;;  fil             2    7[COMRAM] PTR struct .
 13459 ;;		 -> Fil(32), 
 13460 ;; Return value:  Size  Location     Type
 13461 ;;                  1    wreg      enum E88
 13462 ;; Registers used:
 13463 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13464 ;; Tracked objects:
 13465 ;;		On entry : 0/0
 13466 ;;		On exit  : 0/0
 13467 ;;		Unchanged: 0/0
 13468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13469 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13470 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13471 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13472 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13473 ;;Total ram usage:        8 bytes
 13474 ;; Hardware stack levels used:    1
 13475 ;; Hardware stack levels required when called:    1
 13476 ;; This function calls:
 13477 ;;		_disk_status
 13478 ;; This function is called by:
 13479 ;;		_f_write
 13480 ;;		_f_sync
 13481 ;;		_f_close
 13482 ;;		_f_lseek
 13483 ;;		_f_read
 13484 ;; This function uses a non-reentrant model
 13485 ;;
 13486                           
 13487                           	psect	text30
 13488  0060A2                     __ptext30:
 13489                           	opt stack 0
 13490  0060A2                     _validate:
 13491                           	opt stack 28
 13492                           
 13493                           ;ff.c: 2376: FIL *fil = (FIL*)obj;
 13494                           
 13495                           ;incstack = 0
 13496  0060A2  C002  F008         	movff	validate@obj,validate@fil
 13497  0060A6  C003  F009         	movff	validate@obj+1,validate@fil+1
 13498                           
 13499                           ;ff.c: 2379: if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (dis
      +                          k_status(fil->fs->drv) & 0x01))
 13500  0060AA  5008               	movf	validate@fil,w,c
 13501  0060AC  1009               	iorwf	validate@fil+1,w,c
 13502  0060AE  B4D8               	btfsc	status,2,c
 13503  0060B0  D03E               	goto	l5017
 13504  0060B2  C008  FFD9         	movff	validate@fil,fsr2l
 13505  0060B6  C009  FFDA         	movff	validate@fil+1,fsr2h
 13506  0060BA  50DE               	movf	postinc2,w,c
 13507  0060BC  10DE               	iorwf	postinc2,w,c
 13508  0060BE  B4D8               	btfsc	status,2,c
 13509  0060C0  D036               	goto	l5017
 13510  0060C2  C008  FFD9         	movff	validate@fil,fsr2l
 13511  0060C6  C009  FFDA         	movff	validate@fil+1,fsr2h
 13512  0060CA  CFDE F004          	movff	postinc2,??_validate
 13513  0060CE  CFDD F005          	movff	postdec2,??_validate+1
 13514  0060D2  C004  FFD9         	movff	??_validate,fsr2l
 13515  0060D6  C005  FFDA         	movff	??_validate+1,fsr2h
 13516  0060DA  50DF               	movf	indf2,w,c
 13517  0060DC  B4D8               	btfsc	status,2,c
 13518  0060DE  D027               	goto	l5017
 13519  0060E0  EE20 F002          	lfsr	2,2
 13520  0060E4  5008               	movf	validate@fil,w,c
 13521  0060E6  26D9               	addwf	fsr2l,f,c
 13522  0060E8  5009               	movf	validate@fil+1,w,c
 13523  0060EA  22DA               	addwfc	fsr2h,f,c
 13524  0060EC  C008  FFE1         	movff	validate@fil,fsr1l
 13525  0060F0  C009  FFE2         	movff	validate@fil+1,fsr1h
 13526  0060F4  EE00 F006          	lfsr	0,6
 13527  0060F8  50E6               	movf	postinc1,w,c
 13528  0060FA  26E9               	addwf	fsr0l,f,c
 13529  0060FC  50E5               	movf	postdec1,w,c
 13530  0060FE  22EA               	addwfc	fsr0h,f,c
 13531  006100  50DE               	movf	postinc2,w,c
 13532  006102  18EE               	xorwf	postinc0,w,c
 13533  006104  E114               	bnz	l5017
 13534  006106  50DE               	movf	postinc2,w,c
 13535  006108  18EE               	xorwf	postinc0,w,c
 13536  00610A  A4D8               	btfss	status,2,c
 13537  00610C  D010               	goto	l5017
 13538  00610E  C008  FFD9         	movff	validate@fil,fsr2l
 13539  006112  C009  FFDA         	movff	validate@fil+1,fsr2h
 13540  006116  EE10 F001          	lfsr	1,1
 13541  00611A  50DE               	movf	postinc2,w,c
 13542  00611C  26E1               	addwf	fsr1l,f,c
 13543  00611E  50DD               	movf	postdec2,w,c
 13544  006120  22E2               	addwfc	fsr1h,f,c
 13545  006122  50E7               	movf	indf1,w,c
 13546  006124  EC6F  F033         	call	_disk_status
 13547  006128  6E04               	movwf	??_validate& (0+255),c
 13548  00612A  A004               	btfss	??_validate,0,c
 13549  00612C  D002               	goto	l5021
 13550  00612E                     l5017:
 13551                           
 13552                           ;ff.c: 2380: return FR_INVALID_OBJECT;
 13553  00612E  0E09               	movlw	9
 13554  006130  0012               	return	
 13555  006132                     l5021:
 13556                           
 13557                           ;ff.c: 2382: ;
 13558                           ;ff.c: 2384: return FR_OK;
 13559  006132  0E00               	movlw	0
 13560  006134  0012               	return	
 13561  006136  0012               	return		;funcret
 13562  006138                     __end_of_validate:
 13563                           	opt stack 0
 13564                           tblptru	equ	0xFF8
 13565                           tblptrh	equ	0xFF7
 13566                           tblptrl	equ	0xFF6
 13567                           tablat	equ	0xFF5
 13568                           prodh	equ	0xFF4
 13569                           prodl	equ	0xFF3
 13570                           indf0	equ	0xFEF
 13571                           postinc0	equ	0xFEE
 13572                           fsr0h	equ	0xFEA
 13573                           fsr0l	equ	0xFE9
 13574                           wreg	equ	0xFE8
 13575                           indf1	equ	0xFE7
 13576                           postinc1	equ	0xFE6
 13577                           postdec1	equ	0xFE5
 13578                           fsr1h	equ	0xFE2
 13579                           fsr1l	equ	0xFE1
 13580                           indf2	equ	0xFDF
 13581                           postinc2	equ	0xFDE
 13582                           postdec2	equ	0xFDD
 13583                           plusw2	equ	0xFDB
 13584                           fsr2h	equ	0xFDA
 13585                           fsr2l	equ	0xFD9
 13586                           status	equ	0xFD8
 13587                           
 13588 ;; *************** function _disk_status *****************
 13589 ;; Defined at:
 13590 ;;		line 358 in file "../../SD_Card_FatFs/diskio.c"
 13591 ;; Parameters:    Size  Location     Type
 13592 ;;  pdrv            1    wreg     unsigned char 
 13593 ;; Auto vars:     Size  Location     Type
 13594 ;;  pdrv            1    0[COMRAM] unsigned char 
 13595 ;; Return value:  Size  Location     Type
 13596 ;;                  1    wreg      unsigned char 
 13597 ;; Registers used:
 13598 ;;		wreg, status,2
 13599 ;; Tracked objects:
 13600 ;;		On entry : 0/0
 13601 ;;		On exit  : 0/0
 13602 ;;		Unchanged: 0/0
 13603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13605 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13607 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13608 ;;Total ram usage:        1 bytes
 13609 ;; Hardware stack levels used:    1
 13610 ;; This function calls:
 13611 ;;		Nothing
 13612 ;; This function is called by:
 13613 ;;		_find_volume
 13614 ;;		_validate
 13615 ;; This function uses a non-reentrant model
 13616 ;;
 13617                           
 13618                           	psect	text31
 13619  0066DE                     __ptext31:
 13620                           	opt stack 0
 13621  0066DE                     _disk_status:
 13622                           	opt stack 28
 13623                           
 13624                           ;incstack = 0
 13625                           ;disk_status@pdrv stored from wreg
 13626  0066DE  6E01               	movwf	disk_status@pdrv,c
 13627                           
 13628                           ;diskio.c: 362: if (pdrv) return 0x01;
 13629  0066E0  5001               	movf	disk_status@pdrv,w,c
 13630  0066E2  B4D8               	btfsc	status,2,c
 13631  0066E4  D002               	goto	l4255
 13632  0066E6  0E01               	movlw	1
 13633  0066E8  0012               	return	
 13634  0066EA                     l4255:
 13635                           
 13636                           ;diskio.c: 363: return Stat;
 13637  0066EA  0100               	movlb	0	; () banked
 13638  0066EC  51F7               	movf	_Stat& (0+255),w,b
 13639  0066EE  0012               	return	
 13640                           
 13641                           ; BSR set to: 0
 13642  0066F0  0012               	return		;funcret
 13643  0066F2                     __end_of_disk_status:
 13644                           	opt stack 0
 13645                           tblptru	equ	0xFF8
 13646                           tblptrh	equ	0xFF7
 13647                           tblptrl	equ	0xFF6
 13648                           tablat	equ	0xFF5
 13649                           prodh	equ	0xFF4
 13650                           prodl	equ	0xFF3
 13651                           indf0	equ	0xFEF
 13652                           postinc0	equ	0xFEE
 13653                           fsr0h	equ	0xFEA
 13654                           fsr0l	equ	0xFE9
 13655                           wreg	equ	0xFE8
 13656                           indf1	equ	0xFE7
 13657                           postinc1	equ	0xFE6
 13658                           postdec1	equ	0xFE5
 13659                           fsr1h	equ	0xFE2
 13660                           fsr1l	equ	0xFE1
 13661                           indf2	equ	0xFDF
 13662                           postinc2	equ	0xFDE
 13663                           postdec2	equ	0xFDD
 13664                           plusw2	equ	0xFDB
 13665                           fsr2h	equ	0xFDA
 13666                           fsr2l	equ	0xFD9
 13667                           status	equ	0xFD8
 13668                           
 13669 ;; *************** function _sync_fs *****************
 13670 ;; Defined at:
 13671 ;;		line 760 in file "../../SD_Card_FatFs/ff.c"
 13672 ;; Parameters:    Size  Location     Type
 13673 ;;  fs              2   57[COMRAM] PTR struct .
 13674 ;;		 -> NULL(0), FatFs(558), 
 13675 ;; Auto vars:     Size  Location     Type
 13676 ;;  res             1   67[COMRAM] enum E88
 13677 ;; Return value:  Size  Location     Type
 13678 ;;                  1    wreg      enum E88
 13679 ;; Registers used:
 13680 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13681 ;; Tracked objects:
 13682 ;;		On entry : 0/0
 13683 ;;		On exit  : 0/0
 13684 ;;		Unchanged: 0/0
 13685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13686 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13687 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13688 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13689 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13690 ;;Total ram usage:       11 bytes
 13691 ;; Hardware stack levels used:    1
 13692 ;; Hardware stack levels required when called:    7
 13693 ;; This function calls:
 13694 ;;		_disk_ioctl
 13695 ;;		_disk_write
 13696 ;;		_mem_set
 13697 ;;		_sync_window
 13698 ;; This function is called by:
 13699 ;;		_f_sync
 13700 ;; This function uses a non-reentrant model
 13701 ;;
 13702                           
 13703                           	psect	text32
 13704  004DD8                     __ptext32:
 13705                           	opt stack 0
 13706  004DD8                     _sync_fs:
 13707                           	opt stack 21
 13708                           
 13709                           ;ff.c: 764: FRESULT res;
 13710                           ;ff.c: 767: res = sync_window(fs);
 13711                           
 13712                           ;incstack = 0
 13713  004DD8  C03A  F01B         	movff	sync_fs@fs,sync_window@fs
 13714  004DDC  C03B  F01C         	movff	sync_fs@fs+1,sync_window@fs+1
 13715  004DE0  EC6C  F029         	call	_sync_window	;wreg free
 13716  004DE4  6E44               	movwf	sync_fs@res,c
 13717                           
 13718                           ;ff.c: 768: if (res == FR_OK) {
 13719  004DE6  5044               	movf	sync_fs@res,w,c
 13720  004DE8  A4D8               	btfss	status,2,c
 13721  004DEA  D0D6               	goto	l268
 13722                           
 13723                           ;ff.c: 770: if (fs->fs_type == 3 && fs->fsi_flag == 1) {
 13724  004DEC  C03A  FFD9         	movff	sync_fs@fs,fsr2l
 13725  004DF0  C03B  FFDA         	movff	sync_fs@fs+1,fsr2h
 13726  004DF4  0E03               	movlw	3
 13727  004DF6  18DE               	xorwf	postinc2,w,c
 13728  004DF8  A4D8               	btfss	status,2,c
 13729  004DFA  D0B9               	goto	l4713
 13730  004DFC  EE20 F005          	lfsr	2,5
 13731  004E00  503A               	movf	sync_fs@fs,w,c
 13732  004E02  26D9               	addwf	fsr2l,f,c
 13733  004E04  503B               	movf	sync_fs@fs+1,w,c
 13734  004E06  22DA               	addwfc	fsr2h,f,c
 13735  004E08  04DE               	decf	postinc2,w,c
 13736  004E0A  A4D8               	btfss	status,2,c
 13737  004E0C  D0B0               	goto	l4713
 13738                           
 13739                           ;ff.c: 772: mem_set(fs->win, 0, ((UINT)512));
 13740  004E0E  0E2E               	movlw	46
 13741  004E10  243A               	addwf	sync_fs@fs,w,c
 13742  004E12  6E01               	movwf	mem_set@dst,c
 13743  004E14  0E00               	movlw	0
 13744  004E16  203B               	addwfc	sync_fs@fs+1,w,c
 13745  004E18  6E02               	movwf	mem_set@dst+1,c
 13746  004E1A  0E00               	movlw	0
 13747  004E1C  6E04               	movwf	mem_set@val+1,c
 13748  004E1E  0E00               	movlw	0
 13749  004E20  6E03               	movwf	mem_set@val,c
 13750  004E22  0E02               	movlw	2
 13751  004E24  6E06               	movwf	mem_set@cnt+1,c
 13752  004E26  0E00               	movlw	0
 13753  004E28  6E05               	movwf	mem_set@cnt,c
 13754  004E2A  EC1E  F033         	call	_mem_set	;wreg free
 13755                           
 13756                           ;ff.c: 773: *(WORD*)(BYTE*)(fs->win + 510)=(WORD)(0xAA55);
 13757  004E2E  EE22 F02C          	lfsr	2,556
 13758  004E32  503A               	movf	sync_fs@fs,w,c
 13759  004E34  26D9               	addwf	fsr2l,f,c
 13760  004E36  503B               	movf	sync_fs@fs+1,w,c
 13761  004E38  22DA               	addwfc	fsr2h,f,c
 13762  004E3A  0E55               	movlw	85
 13763  004E3C  6EDE               	movwf	postinc2,c
 13764  004E3E  0EAA               	movlw	170
 13765  004E40  6EDD               	movwf	postdec2,c
 13766                           
 13767                           ;ff.c: 774: *(DWORD*)(BYTE*)(fs->win + 0)=(DWORD)(0x41615252);
 13768  004E42  EE20 F02E          	lfsr	2,46
 13769  004E46  503A               	movf	sync_fs@fs,w,c
 13770  004E48  26D9               	addwf	fsr2l,f,c
 13771  004E4A  503B               	movf	sync_fs@fs+1,w,c
 13772  004E4C  22DA               	addwfc	fsr2h,f,c
 13773  004E4E  0E52               	movlw	82
 13774  004E50  6EDE               	movwf	postinc2,c
 13775  004E52  0E52               	movlw	82
 13776  004E54  6EDE               	movwf	postinc2,c
 13777  004E56  0E61               	movlw	97
 13778  004E58  6EDE               	movwf	postinc2,c
 13779  004E5A  0E41               	movlw	65
 13780  004E5C  6EDD               	movwf	postdec2,c
 13781                           
 13782                           ;ff.c: 775: *(DWORD*)(BYTE*)(fs->win + 484)=(DWORD)(0x61417272);
 13783  004E5E  EE22 F012          	lfsr	2,530
 13784  004E62  503A               	movf	sync_fs@fs,w,c
 13785  004E64  26D9               	addwf	fsr2l,f,c
 13786  004E66  503B               	movf	sync_fs@fs+1,w,c
 13787  004E68  22DA               	addwfc	fsr2h,f,c
 13788  004E6A  0E72               	movlw	114
 13789  004E6C  6EDE               	movwf	postinc2,c
 13790  004E6E  0E72               	movlw	114
 13791  004E70  6EDE               	movwf	postinc2,c
 13792  004E72  0E41               	movlw	65
 13793  004E74  6EDE               	movwf	postinc2,c
 13794  004E76  0E61               	movlw	97
 13795  004E78  6EDD               	movwf	postdec2,c
 13796                           
 13797                           ;ff.c: 776: *(DWORD*)(BYTE*)(fs->win + 488)=(DWORD)(fs->free_clust);
 13798  004E7A  EE20 F00E          	lfsr	2,14
 13799  004E7E  503A               	movf	sync_fs@fs,w,c
 13800  004E80  26D9               	addwf	fsr2l,f,c
 13801  004E82  503B               	movf	sync_fs@fs+1,w,c
 13802  004E84  22DA               	addwfc	fsr2h,f,c
 13803  004E86  EE12 F016          	lfsr	1,534
 13804  004E8A  503A               	movf	sync_fs@fs,w,c
 13805  004E8C  26E1               	addwf	fsr1l,f,c
 13806  004E8E  503B               	movf	sync_fs@fs+1,w,c
 13807  004E90  22E2               	addwfc	fsr1h,f,c
 13808  004E92  CFDE FFE6          	movff	postinc2,postinc1
 13809  004E96  CFDE FFE6          	movff	postinc2,postinc1
 13810  004E9A  CFDE FFE6          	movff	postinc2,postinc1
 13811  004E9E  CFDE FFE6          	movff	postinc2,postinc1
 13812                           
 13813                           ;ff.c: 777: *(DWORD*)(BYTE*)(fs->win + 492)=(DWORD)(fs->last_clust);
 13814  004EA2  EE20 F00A          	lfsr	2,10
 13815  004EA6  503A               	movf	sync_fs@fs,w,c
 13816  004EA8  26D9               	addwf	fsr2l,f,c
 13817  004EAA  503B               	movf	sync_fs@fs+1,w,c
 13818  004EAC  22DA               	addwfc	fsr2h,f,c
 13819  004EAE  EE12 F01A          	lfsr	1,538
 13820  004EB2  503A               	movf	sync_fs@fs,w,c
 13821  004EB4  26E1               	addwf	fsr1l,f,c
 13822  004EB6  503B               	movf	sync_fs@fs+1,w,c
 13823  004EB8  22E2               	addwfc	fsr1h,f,c
 13824  004EBA  CFDE FFE6          	movff	postinc2,postinc1
 13825  004EBE  CFDE FFE6          	movff	postinc2,postinc1
 13826  004EC2  CFDE FFE6          	movff	postinc2,postinc1
 13827  004EC6  CFDE FFE6          	movff	postinc2,postinc1
 13828                           
 13829                           ;ff.c: 779: fs->winsect = fs->volbase + 1;
 13830  004ECA  EE20 F01A          	lfsr	2,26
 13831  004ECE  503A               	movf	sync_fs@fs,w,c
 13832  004ED0  26D9               	addwf	fsr2l,f,c
 13833  004ED2  503B               	movf	sync_fs@fs+1,w,c
 13834  004ED4  22DA               	addwfc	fsr2h,f,c
 13835  004ED6  CFDE F03C          	movff	postinc2,??_sync_fs
 13836  004EDA  CFDE F03D          	movff	postinc2,??_sync_fs+1
 13837  004EDE  CFDE F03E          	movff	postinc2,??_sync_fs+2
 13838  004EE2  CFDE F03F          	movff	postinc2,??_sync_fs+3
 13839  004EE6  0E01               	movlw	1
 13840  004EE8  243C               	addwf	??_sync_fs,w,c
 13841  004EEA  6E40               	movwf	(??_sync_fs+4)& (0+255),c
 13842  004EEC  0E00               	movlw	0
 13843  004EEE  203D               	addwfc	??_sync_fs+1,w,c
 13844  004EF0  6E41               	movwf	(??_sync_fs+5)& (0+255),c
 13845  004EF2  0E00               	movlw	0
 13846  004EF4  203E               	addwfc	??_sync_fs+2,w,c
 13847  004EF6  6E42               	movwf	(??_sync_fs+6)& (0+255),c
 13848  004EF8  0E00               	movlw	0
 13849  004EFA  203F               	addwfc	??_sync_fs+3,w,c
 13850  004EFC  6E43               	movwf	(??_sync_fs+7)& (0+255),c
 13851  004EFE  EE20 F02A          	lfsr	2,42
 13852  004F02  503A               	movf	sync_fs@fs,w,c
 13853  004F04  26D9               	addwf	fsr2l,f,c
 13854  004F06  503B               	movf	sync_fs@fs+1,w,c
 13855  004F08  22DA               	addwfc	fsr2h,f,c
 13856  004F0A  C040  FFDE         	movff	??_sync_fs+4,postinc2
 13857  004F0E  C041  FFDE         	movff	??_sync_fs+5,postinc2
 13858  004F12  C042  FFDE         	movff	??_sync_fs+6,postinc2
 13859  004F16  C043  FFDE         	movff	??_sync_fs+7,postinc2
 13860                           
 13861                           ;ff.c: 780: disk_write(fs->drv, fs->win, fs->winsect, 1);
 13862  004F1A  0E2E               	movlw	46
 13863  004F1C  243A               	addwf	sync_fs@fs,w,c
 13864  004F1E  6E11               	movwf	disk_write@buff,c
 13865  004F20  0E00               	movlw	0
 13866  004F22  203B               	addwfc	sync_fs@fs+1,w,c
 13867  004F24  6E12               	movwf	disk_write@buff+1,c
 13868  004F26  EE20 F02A          	lfsr	2,42
 13869  004F2A  503A               	movf	sync_fs@fs,w,c
 13870  004F2C  26D9               	addwf	fsr2l,f,c
 13871  004F2E  503B               	movf	sync_fs@fs+1,w,c
 13872  004F30  22DA               	addwfc	fsr2h,f,c
 13873  004F32  CFDE F013          	movff	postinc2,disk_write@sector
 13874  004F36  CFDE F014          	movff	postinc2,disk_write@sector+1
 13875  004F3A  CFDE F015          	movff	postinc2,disk_write@sector+2
 13876  004F3E  CFDE F016          	movff	postinc2,disk_write@sector+3
 13877  004F42  0E00               	movlw	0
 13878  004F44  6E18               	movwf	disk_write@count+1,c
 13879  004F46  0E01               	movlw	1
 13880  004F48  6E17               	movwf	disk_write@count,c
 13881  004F4A  EE20 F001          	lfsr	2,1
 13882  004F4E  503A               	movf	sync_fs@fs,w,c
 13883  004F50  26D9               	addwf	fsr2l,f,c
 13884  004F52  503B               	movf	sync_fs@fs+1,w,c
 13885  004F54  22DA               	addwfc	fsr2h,f,c
 13886  004F56  50DF               	movf	indf2,w,c
 13887  004F58  ECD1  F02A         	call	_disk_write
 13888                           
 13889                           ;ff.c: 781: fs->fsi_flag = 0;
 13890  004F5C  EE20 F005          	lfsr	2,5
 13891  004F60  503A               	movf	sync_fs@fs,w,c
 13892  004F62  26D9               	addwf	fsr2l,f,c
 13893  004F64  503B               	movf	sync_fs@fs+1,w,c
 13894  004F66  22DA               	addwfc	fsr2h,f,c
 13895  004F68  0E00               	movlw	0
 13896  004F6A  6EDF               	movwf	indf2,c
 13897  004F6C  D000               	goto	l4713
 13898  004F6E                     l4713:
 13899                           
 13900                           ;ff.c: 782: }
 13901                           ;ff.c: 784: if (disk_ioctl(fs->drv, 0, 0) != RES_OK)
 13902  004F6E  0E00               	movlw	0
 13903  004F70  6E11               	movwf	disk_ioctl@cmd,c
 13904  004F72  0E00               	movlw	0
 13905  004F74  6E12               	movwf	disk_ioctl@buff,c
 13906  004F76  0E00               	movlw	0
 13907  004F78  6E13               	movwf	disk_ioctl@buff+1,c
 13908  004F7A  EE20 F001          	lfsr	2,1
 13909  004F7E  503A               	movf	sync_fs@fs,w,c
 13910  004F80  26D9               	addwf	fsr2l,f,c
 13911  004F82  503B               	movf	sync_fs@fs+1,w,c
 13912  004F84  22DA               	addwfc	fsr2h,f,c
 13913  004F86  50DF               	movf	indf2,w,c
 13914  004F88  ECC4  F018         	call	_disk_ioctl
 13915  004F8C  0900               	iorlw	0
 13916  004F8E  B4D8               	btfsc	status,2,c
 13917  004F90  D003               	goto	l268
 13918                           
 13919                           ;ff.c: 785: res = FR_DISK_ERR;
 13920  004F92  0E01               	movlw	1
 13921  004F94  6E44               	movwf	sync_fs@res,c
 13922  004F96  D000               	goto	l268
 13923  004F98                     l268:
 13924                           
 13925                           ;ff.c: 786: }
 13926                           ;ff.c: 788: return res;
 13927  004F98  5044               	movf	sync_fs@res,w,c
 13928  004F9A  0012               	return	
 13929  004F9C  0012               	return		;funcret
 13930  004F9E                     __end_of_sync_fs:
 13931                           	opt stack 0
 13932                           tblptru	equ	0xFF8
 13933                           tblptrh	equ	0xFF7
 13934                           tblptrl	equ	0xFF6
 13935                           tablat	equ	0xFF5
 13936                           prodh	equ	0xFF4
 13937                           prodl	equ	0xFF3
 13938                           indf0	equ	0xFEF
 13939                           postinc0	equ	0xFEE
 13940                           fsr0h	equ	0xFEA
 13941                           fsr0l	equ	0xFE9
 13942                           wreg	equ	0xFE8
 13943                           indf1	equ	0xFE7
 13944                           postinc1	equ	0xFE6
 13945                           postdec1	equ	0xFE5
 13946                           fsr1h	equ	0xFE2
 13947                           fsr1l	equ	0xFE1
 13948                           indf2	equ	0xFDF
 13949                           postinc2	equ	0xFDE
 13950                           postdec2	equ	0xFDD
 13951                           plusw2	equ	0xFDB
 13952                           fsr2h	equ	0xFDA
 13953                           fsr2l	equ	0xFD9
 13954                           status	equ	0xFD8
 13955                           
 13956 ;; *************** function _mem_set *****************
 13957 ;; Defined at:
 13958 ;;		line 524 in file "../../SD_Card_FatFs/ff.c"
 13959 ;; Parameters:    Size  Location     Type
 13960 ;;  dst             2    0[COMRAM] PTR void 
 13961 ;;		 -> f_open@sfn(12), NULL(0), FatFs(558), 
 13962 ;;  val             2    2[COMRAM] int 
 13963 ;;  cnt             2    4[COMRAM] unsigned int 
 13964 ;; Auto vars:     Size  Location     Type
 13965 ;;  d               2    6[COMRAM] PTR unsigned char 
 13966 ;;		 -> f_open@sfn(12), NULL(0), FatFs(558), 
 13967 ;; Return value:  Size  Location     Type
 13968 ;;		None               void
 13969 ;; Registers used:
 13970 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13971 ;; Tracked objects:
 13972 ;;		On entry : 0/0
 13973 ;;		On exit  : 0/0
 13974 ;;		Unchanged: 0/0
 13975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13976 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13977 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13979 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13980 ;;Total ram usage:        8 bytes
 13981 ;; Hardware stack levels used:    1
 13982 ;; This function calls:
 13983 ;;		Nothing
 13984 ;; This function is called by:
 13985 ;;		_sync_fs
 13986 ;;		_dir_next
 13987 ;;		_dir_register
 13988 ;;		_create_name
 13989 ;; This function uses a non-reentrant model
 13990 ;;
 13991                           
 13992                           	psect	text33
 13993  00663C                     __ptext33:
 13994                           	opt stack 0
 13995  00663C                     _mem_set:
 13996                           	opt stack 26
 13997                           
 13998                           ;ff.c: 525: BYTE *d = (BYTE*)dst;
 13999                           
 14000                           ;incstack = 0
 14001  00663C  C001  F007         	movff	mem_set@dst,mem_set@d
 14002  006640  C002  F008         	movff	mem_set@dst+1,mem_set@d+1
 14003                           
 14004                           ;ff.c: 527: while (cnt--)
 14005  006644  D009               	goto	l4153
 14006  006646                     l4149:
 14007                           
 14008                           ;ff.c: 528: *d++ = (BYTE)val;
 14009  006646  C007  FFD9         	movff	mem_set@d,fsr2l
 14010  00664A  C008  FFDA         	movff	mem_set@d+1,fsr2h
 14011  00664E  C003  FFDF         	movff	mem_set@val,indf2
 14012  006652  4A07               	infsnz	mem_set@d,f,c
 14013  006654  2A08               	incf	mem_set@d+1,f,c
 14014  006656  D000               	goto	l4153
 14015  006658                     l4153:
 14016  006658  0605               	decf	mem_set@cnt,f,c
 14017  00665A  A0D8               	btfss	status,0,c
 14018  00665C  0606               	decf	mem_set@cnt+1,f,c
 14019  00665E  2805               	incf	mem_set@cnt,w,c
 14020  006660  E1F2               	bnz	l4149
 14021  006662  2806               	incf	mem_set@cnt+1,w,c
 14022  006664  A4D8               	btfss	status,2,c
 14023  006666  D7EF               	goto	l4149
 14024  006668  0012               	return		;funcret
 14025  00666A                     __end_of_mem_set:
 14026                           	opt stack 0
 14027                           tblptru	equ	0xFF8
 14028                           tblptrh	equ	0xFF7
 14029                           tblptrl	equ	0xFF6
 14030                           tablat	equ	0xFF5
 14031                           prodh	equ	0xFF4
 14032                           prodl	equ	0xFF3
 14033                           indf0	equ	0xFEF
 14034                           postinc0	equ	0xFEE
 14035                           fsr0h	equ	0xFEA
 14036                           fsr0l	equ	0xFE9
 14037                           wreg	equ	0xFE8
 14038                           indf1	equ	0xFE7
 14039                           postinc1	equ	0xFE6
 14040                           postdec1	equ	0xFE5
 14041                           fsr1h	equ	0xFE2
 14042                           fsr1l	equ	0xFE1
 14043                           indf2	equ	0xFDF
 14044                           postinc2	equ	0xFDE
 14045                           postdec2	equ	0xFDD
 14046                           plusw2	equ	0xFDB
 14047                           fsr2h	equ	0xFDA
 14048                           fsr2l	equ	0xFD9
 14049                           status	equ	0xFD8
 14050                           
 14051 ;; *************** function _disk_ioctl *****************
 14052 ;; Defined at:
 14053 ;;		line 448 in file "../../SD_Card_FatFs/diskio.c"
 14054 ;; Parameters:    Size  Location     Type
 14055 ;;  pdrv            1    wreg     unsigned char 
 14056 ;;  cmd             1   16[COMRAM] unsigned char 
 14057 ;;  buff            2   17[COMRAM] PTR void 
 14058 ;;		 -> NULL(0), 
 14059 ;; Auto vars:     Size  Location     Type
 14060 ;;  pdrv            1   48[COMRAM] unsigned char 
 14061 ;;  csd            16   32[COMRAM] unsigned char [16]
 14062 ;;  csize           4   49[COMRAM] unsigned long 
 14063 ;;  ptr             2   55[COMRAM] PTR unsigned char 
 14064 ;;		 -> NULL(0), 
 14065 ;;  n               1   54[COMRAM] unsigned char 
 14066 ;;  res             1   53[COMRAM] enum E38
 14067 ;; Return value:  Size  Location     Type
 14068 ;;                  1    wreg      enum E38
 14069 ;; Registers used:
 14070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14071 ;; Tracked objects:
 14072 ;;		On entry : 0/0
 14073 ;;		On exit  : 0/0
 14074 ;;		Unchanged: 0/0
 14075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14076 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14077 ;;      Locals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14078 ;;      Temps:         13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14079 ;;      Totals:        41       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14080 ;;Total ram usage:       41 bytes
 14081 ;; Hardware stack levels used:    1
 14082 ;; Hardware stack levels required when called:    5
 14083 ;; This function calls:
 14084 ;;		_SPI1_Exchange8bit
 14085 ;;		___wmul
 14086 ;;		_deselect
 14087 ;;		_rcvr_datablock
 14088 ;;		_select
 14089 ;;		_send_cmd
 14090 ;; This function is called by:
 14091 ;;		_sync_fs
 14092 ;; This function uses a non-reentrant model
 14093 ;;
 14094                           
 14095                           	psect	text34
 14096  003188                     __ptext34:
 14097                           	opt stack 0
 14098  003188                     _disk_ioctl:
 14099                           	opt stack 22
 14100                           
 14101                           ;incstack = 0
 14102                           ;disk_ioctl@pdrv stored from wreg
 14103  003188  6E31               	movwf	disk_ioctl@pdrv,c
 14104                           
 14105                           ;diskio.c: 454: DRESULT res;
 14106                           ;diskio.c: 455: BYTE n, csd[16], *ptr = buff;
 14107  00318A  C012  F038         	movff	disk_ioctl@buff,disk_ioctl@ptr
 14108  00318E  C013  F039         	movff	disk_ioctl@buff+1,disk_ioctl@ptr+1
 14109                           
 14110                           ;diskio.c: 456: DWORD csize;
 14111                           ;diskio.c: 459: if (pdrv) return RES_PARERR;
 14112  003192  5031               	movf	disk_ioctl@pdrv,w,c
 14113  003194  B4D8               	btfsc	status,2,c
 14114  003196  D002               	goto	l4267
 14115  003198  0E04               	movlw	4
 14116  00319A  0012               	return	
 14117  00319C                     l4267:
 14118                           
 14119                           ;diskio.c: 461: res = RES_ERROR;
 14120  00319C  0E01               	movlw	1
 14121  00319E  6E36               	movwf	disk_ioctl@res,c
 14122                           
 14123                           ;diskio.c: 463: if (Stat & 0x01) return RES_NOTRDY;
 14124  0031A0  0100               	movlb	0	; () banked
 14125  0031A2  A1F7               	btfss	_Stat& (0+255),0,b
 14126  0031A4  D233               	goto	l4365
 14127                           
 14128                           ; BSR set to: 0
 14129  0031A6  0E03               	movlw	3
 14130                           
 14131                           ; BSR set to: 0
 14132  0031A8  0012               	return	
 14133                           
 14134                           ; BSR set to: 0
 14135                           ;diskio.c: 465: switch (cmd) {
 14136  0031AA  D230               	goto	l4365
 14137  0031AC                     l4275:
 14138                           
 14139                           ;diskio.c: 467: if (select()) res = RES_OK;
 14140  0031AC  EC5E  F033         	call	_select	;wreg free
 14141  0031B0  D224               	goto	L20
 14142                           
 14143                           ;diskio.c: 468: break;
 14144  0031B2  D246               	goto	l4367
 14145  0031B4                     l4279:
 14146                           
 14147                           ;diskio.c: 471: if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 14148  0031B4  0E00               	movlw	0
 14149  0031B6  6E0B               	movwf	send_cmd@arg,c
 14150  0031B8  0E00               	movlw	0
 14151  0031BA  6E0C               	movwf	send_cmd@arg+1,c
 14152  0031BC  0E00               	movlw	0
 14153  0031BE  6E0D               	movwf	send_cmd@arg+2,c
 14154  0031C0  0E00               	movlw	0
 14155  0031C2  6E0E               	movwf	send_cmd@arg+3,c
 14156  0031C4  0E09               	movlw	9
 14157  0031C6  EC7D  F032         	call	_send_cmd
 14158  0031CA  0900               	iorlw	0
 14159  0031CC  A4D8               	btfss	status,2,c
 14160  0031CE  D238               	goto	l4367
 14161  0031D0  0E21               	movlw	low disk_ioctl@csd
 14162  0031D2  6E02               	movwf	rcvr_datablock@buff,c
 14163  0031D4  0E00               	movlw	high disk_ioctl@csd
 14164  0031D6  6E03               	movwf	rcvr_datablock@buff+1,c
 14165  0031D8  0E00               	movlw	0
 14166  0031DA  6E05               	movwf	rcvr_datablock@btr+1,c
 14167  0031DC  0E10               	movlw	16
 14168  0031DE  6E04               	movwf	rcvr_datablock@btr,c
 14169  0031E0  ECB2  F031         	call	_rcvr_datablock	;wreg free
 14170  0031E4  0900               	iorlw	0
 14171  0031E6  B4D8               	btfsc	status,2,c
 14172  0031E8  D22B               	goto	l4367
 14173                           
 14174                           ;diskio.c: 472: if ((csd[0] >> 6) == 1) {
 14175  0031EA  4421               	rlncf	disk_ioctl@csd,w,c
 14176  0031EC  46E8               	rlncf	wreg,f,c
 14177  0031EE  0B03               	andlw	3
 14178  0031F0  06E8               	decf	wreg,f,c
 14179  0031F2  A4D8               	btfss	status,2,c
 14180  0031F4  D04E               	goto	l4289
 14181                           
 14182                           ;diskio.c: 473: csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 14183  0031F6  C028  F014         	movff	disk_ioctl@csd+7,??_disk_ioctl
 14184  0031FA  0E3F               	movlw	63
 14185  0031FC  1614               	andwf	??_disk_ioctl,f,c
 14186  0031FE  C014  F015         	movff	??_disk_ioctl,??_disk_ioctl+1
 14187  003202  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 14188  003204  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 14189  003206  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 14190  003208  C016  F018         	movff	??_disk_ioctl+2,??_disk_ioctl+4
 14191  00320C  C015  F017         	movff	??_disk_ioctl+1,??_disk_ioctl+3
 14192  003210  6A16               	clrf	??_disk_ioctl+2,c
 14193  003212  6A15               	clrf	??_disk_ioctl+1,c
 14194  003214  5029               	movf	disk_ioctl@csd+8,w,c
 14195  003216  6E1A               	movwf	(??_disk_ioctl+6)& (0+255),c
 14196  003218  6A19               	clrf	(??_disk_ioctl+5)& (0+255),c
 14197  00321A  502A               	movf	disk_ioctl@csd+9,w,c
 14198  00321C  6E1B               	movwf	(??_disk_ioctl+7)& (0+255),c
 14199  00321E  6A1C               	clrf	(??_disk_ioctl+8)& (0+255),c
 14200  003220  5019               	movf	??_disk_ioctl+5,w,c
 14201  003222  261B               	addwf	??_disk_ioctl+7,f,c
 14202  003224  501A               	movf	??_disk_ioctl+6,w,c
 14203  003226  221C               	addwfc	??_disk_ioctl+8,f,c
 14204  003228  501B               	movf	??_disk_ioctl+7,w,c
 14205  00322A  2415               	addwf	??_disk_ioctl+1,w,c
 14206  00322C  6E1D               	movwf	(??_disk_ioctl+9)& (0+255),c
 14207  00322E  501C               	movf	??_disk_ioctl+8,w,c
 14208  003230  2016               	addwfc	??_disk_ioctl+2,w,c
 14209  003232  6E1E               	movwf	(??_disk_ioctl+10)& (0+255),c
 14210  003234  0E00               	movlw	0
 14211  003236  2017               	addwfc	??_disk_ioctl+3,w,c
 14212  003238  6E1F               	movwf	(??_disk_ioctl+11)& (0+255),c
 14213  00323A  0E00               	movlw	0
 14214  00323C  2018               	addwfc	??_disk_ioctl+4,w,c
 14215  00323E  6E20               	movwf	(??_disk_ioctl+12)& (0+255),c
 14216  003240  0E01               	movlw	1
 14217  003242  241D               	addwf	??_disk_ioctl+9,w,c
 14218  003244  6E32               	movwf	disk_ioctl@csize,c
 14219  003246  0E00               	movlw	0
 14220  003248  201E               	addwfc	??_disk_ioctl+10,w,c
 14221  00324A  6E33               	movwf	disk_ioctl@csize+1,c
 14222  00324C  0E00               	movlw	0
 14223  00324E  201F               	addwfc	??_disk_ioctl+11,w,c
 14224  003250  6E34               	movwf	disk_ioctl@csize+2,c
 14225  003252  0E00               	movlw	0
 14226  003254  2020               	addwfc	??_disk_ioctl+12,w,c
 14227  003256  6E35               	movwf	disk_ioctl@csize+3,c
 14228                           
 14229                           ;diskio.c: 474: *(DWORD*)buff = csize << 10;
 14230  003258  C032  F014         	movff	disk_ioctl@csize,??_disk_ioctl
 14231  00325C  C033  F015         	movff	disk_ioctl@csize+1,??_disk_ioctl+1
 14232  003260  C034  F016         	movff	disk_ioctl@csize+2,??_disk_ioctl+2
 14233  003264  C035  F017         	movff	disk_ioctl@csize+3,??_disk_ioctl+3
 14234  003268  0E0A               	movlw	10
 14235  00326A                     u5595:
 14236  00326A  90D8               	bcf	status,0,c
 14237  00326C  3614               	rlcf	??_disk_ioctl,f,c
 14238  00326E  3615               	rlcf	??_disk_ioctl+1,f,c
 14239  003270  3616               	rlcf	??_disk_ioctl+2,f,c
 14240  003272  3617               	rlcf	??_disk_ioctl+3,f,c
 14241  003274  2EE8               	decfsz	wreg,f,c
 14242  003276  D7F9               	goto	u5595
 14243  003278  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 14244  00327C  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 14245  003280  C014  FFDE         	movff	??_disk_ioctl,postinc2
 14246  003284  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 14247  003288  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 14248  00328C  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 14249                           
 14250                           ;diskio.c: 475: } else {
 14251  003290  D1B7               	goto	l4361
 14252  003292                     l4289:
 14253                           
 14254                           ;diskio.c: 476: n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 14255  003292  C02A  F014         	movff	disk_ioctl@csd+9,??_disk_ioctl
 14256  003296  0E03               	movlw	3
 14257  003298  1614               	andwf	??_disk_ioctl,f,c
 14258  00329A  90D8               	bcf	status,0,c
 14259  00329C  3414               	rlcf	??_disk_ioctl,w,c
 14260  00329E  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 14261  0032A0  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 14262  0032A2  AE2B               	btfss	disk_ioctl@csd+10,7,c
 14263  0032A4  D001               	bra	u5605
 14264  0032A6  2A16               	incf	(??_disk_ioctl+2)& (0+255),f,c
 14265  0032A8                     u5605:
 14266  0032A8  0E01               	movlw	1
 14267  0032AA  1616               	andwf	??_disk_ioctl+2,f,c
 14268  0032AC  5026               	movf	disk_ioctl@csd+5,w,c
 14269  0032AE  0B0F               	andlw	15
 14270  0032B0  2416               	addwf	??_disk_ioctl+2,w,c
 14271  0032B2  2415               	addwf	??_disk_ioctl+1,w,c
 14272  0032B4  0F02               	addlw	2
 14273  0032B6  6E37               	movwf	disk_ioctl@n,c
 14274                           
 14275                           ;diskio.c: 477: csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10)
      +                           + 1;
 14276  0032B8  5027               	movf	disk_ioctl@csd+6,w,c
 14277  0032BA  0B03               	andlw	3
 14278  0032BC  6E14               	movwf	??_disk_ioctl& (0+255),c
 14279  0032BE  6A15               	clrf	(??_disk_ioctl+1)& (0+255),c
 14280  0032C0  0E0A               	movlw	10
 14281  0032C2                     u5615:
 14282  0032C2  90D8               	bcf	status,0,c
 14283  0032C4  3614               	rlcf	??_disk_ioctl,f,c
 14284  0032C6  3615               	rlcf	??_disk_ioctl+1,f,c
 14285  0032C8  2EE8               	decfsz	wreg,f,c
 14286  0032CA  D7FB               	goto	u5615
 14287  0032CC  5028               	movf	disk_ioctl@csd+7,w,c
 14288  0032CE  6E16               	movwf	(??_disk_ioctl+2)& (0+255),c
 14289  0032D0  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 14290  0032D2  90D8               	bcf	status,0,c
 14291  0032D4  3616               	rlcf	??_disk_ioctl+2,f,c
 14292  0032D6  3617               	rlcf	??_disk_ioctl+3,f,c
 14293  0032D8  90D8               	bcf	status,0,c
 14294  0032DA  3616               	rlcf	??_disk_ioctl+2,f,c
 14295  0032DC  3617               	rlcf	??_disk_ioctl+3,f,c
 14296  0032DE  4429               	rlncf	disk_ioctl@csd+8,w,c
 14297  0032E0  46E8               	rlncf	wreg,f,c
 14298  0032E2  0B03               	andlw	3
 14299  0032E4  6E18               	movwf	(??_disk_ioctl+4)& (0+255),c
 14300  0032E6  6A19               	clrf	(??_disk_ioctl+5)& (0+255),c
 14301  0032E8  5016               	movf	??_disk_ioctl+2,w,c
 14302  0032EA  2618               	addwf	??_disk_ioctl+4,f,c
 14303  0032EC  5017               	movf	??_disk_ioctl+3,w,c
 14304  0032EE  2219               	addwfc	??_disk_ioctl+5,f,c
 14305  0032F0  5014               	movf	??_disk_ioctl,w,c
 14306  0032F2  2618               	addwf	??_disk_ioctl+4,f,c
 14307  0032F4  5015               	movf	??_disk_ioctl+1,w,c
 14308  0032F6  2219               	addwfc	??_disk_ioctl+5,f,c
 14309  0032F8  0E01               	movlw	1
 14310  0032FA  2618               	addwf	??_disk_ioctl+4,f,c
 14311  0032FC  0E00               	movlw	0
 14312  0032FE  2219               	addwfc	??_disk_ioctl+5,f,c
 14313  003300  C018  F032         	movff	??_disk_ioctl+4,disk_ioctl@csize
 14314  003304  C019  F033         	movff	??_disk_ioctl+5,disk_ioctl@csize+1
 14315  003308  6A34               	clrf	disk_ioctl@csize+2,c
 14316  00330A  6A35               	clrf	disk_ioctl@csize+3,c
 14317                           
 14318                           ;diskio.c: 478: *(DWORD*)buff = csize << (n - 9);
 14319  00330C  C037  F014         	movff	disk_ioctl@n,??_disk_ioctl
 14320  003310  0EF7               	movlw	-9
 14321  003312  2614               	addwf	??_disk_ioctl,f,c
 14322  003314  C032  F015         	movff	disk_ioctl@csize,??_disk_ioctl+1
 14323  003318  C033  F016         	movff	disk_ioctl@csize+1,??_disk_ioctl+2
 14324  00331C  C034  F017         	movff	disk_ioctl@csize+2,??_disk_ioctl+3
 14325  003320  C035  F018         	movff	disk_ioctl@csize+3,??_disk_ioctl+4
 14326  003324  2A14               	incf	??_disk_ioctl,f,c
 14327  003326  D005               	goto	u5620
 14328  003328                     u5625:
 14329  003328  90D8               	bcf	status,0,c
 14330  00332A  3615               	rlcf	??_disk_ioctl+1,f,c
 14331  00332C  3616               	rlcf	??_disk_ioctl+2,f,c
 14332  00332E  3617               	rlcf	??_disk_ioctl+3,f,c
 14333  003330  3618               	rlcf	??_disk_ioctl+4,f,c
 14334  003332                     u5620:
 14335  003332  2E14               	decfsz	??_disk_ioctl,f,c
 14336  003334  D7F9               	goto	u5625
 14337  003336  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 14338  00333A  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 14339  00333E  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 14340  003342  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 14341  003346  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 14342  00334A  C018  FFDE         	movff	??_disk_ioctl+4,postinc2
 14343  00334E  D158               	goto	l4361
 14344  003350  D157               	goto	l4361
 14345                           
 14346                           ;diskio.c: 481: }
 14347                           ;diskio.c: 482: break;
 14348                           
 14349                           ;diskio.c: 479: }
 14350                           ;diskio.c: 480: res = RES_OK;
 14351  003352  D176               	goto	l4367
 14352  003354                     l181:
 14353                           
 14354                           ;diskio.c: 485: if (CardType & 0x04) {
 14355  003354  0100               	movlb	0	; () banked
 14356  003356  A5D6               	btfss	_CardType& (0+255),2,b
 14357  003358  D04A               	goto	l4313
 14358                           
 14359                           ; BSR set to: 0
 14360                           ;diskio.c: 486: if (send_cmd((0x80+13), 0) == 0) {
 14361  00335A  0E00               	movlw	0
 14362  00335C  6E0B               	movwf	send_cmd@arg,c
 14363  00335E  0E00               	movlw	0
 14364  003360  6E0C               	movwf	send_cmd@arg+1,c
 14365  003362  0E00               	movlw	0
 14366  003364  6E0D               	movwf	send_cmd@arg+2,c
 14367  003366  0E00               	movlw	0
 14368  003368  6E0E               	movwf	send_cmd@arg+3,c
 14369  00336A  0E8D               	movlw	141
 14370  00336C  EC7D  F032         	call	_send_cmd
 14371  003370  0900               	iorlw	0
 14372  003372  A4D8               	btfss	status,2,c
 14373  003374  D165               	goto	l4367
 14374                           
 14375                           ;diskio.c: 487: SPI1_Exchange8bit(0xFF);
 14376  003376  0EFF               	movlw	255
 14377  003378  EC79  F033         	call	_SPI1_Exchange8bit
 14378                           
 14379                           ;diskio.c: 488: if (rcvr_datablock(csd, 16)) {
 14380  00337C  0E21               	movlw	low disk_ioctl@csd
 14381  00337E  6E02               	movwf	rcvr_datablock@buff,c
 14382  003380  0E00               	movlw	high disk_ioctl@csd
 14383  003382  6E03               	movwf	rcvr_datablock@buff+1,c
 14384  003384  0E00               	movlw	0
 14385  003386  6E05               	movwf	rcvr_datablock@btr+1,c
 14386  003388  0E10               	movlw	16
 14387  00338A  6E04               	movwf	rcvr_datablock@btr,c
 14388  00338C  ECB2  F031         	call	_rcvr_datablock	;wreg free
 14389  003390  0900               	iorlw	0
 14390  003392  B4D8               	btfsc	status,2,c
 14391  003394  D155               	goto	l4367
 14392                           
 14393                           ;diskio.c: 489: for (n = 64 - 16; n; n--) SPI1_Exchange8bit(0xFF);
 14394  003396  0E30               	movlw	48
 14395  003398  6E37               	movwf	disk_ioctl@n,c
 14396  00339A  D005               	goto	l4307
 14397  00339C                     l4303:
 14398  00339C  0EFF               	movlw	255
 14399  00339E  EC79  F033         	call	_SPI1_Exchange8bit
 14400  0033A2  0637               	decf	disk_ioctl@n,f,c
 14401  0033A4  D000               	goto	l4307
 14402  0033A6                     l4307:
 14403  0033A6  5037               	movf	disk_ioctl@n,w,c
 14404  0033A8  A4D8               	btfss	status,2,c
 14405  0033AA  D7F8               	goto	l4303
 14406                           
 14407                           ;diskio.c: 490: *(DWORD*)buff = 16UL << (csd[10] >> 4);
 14408  0033AC  C02B  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 14409  0033B0  3A14               	swapf	??_disk_ioctl,f,c
 14410  0033B2  0E0F               	movlw	15
 14411  0033B4  1614               	andwf	??_disk_ioctl,f,c
 14412  0033B6  0E10               	movlw	16
 14413  0033B8  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 14414  0033BA  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 14415  0033BC  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 14416  0033BE  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 14417  0033C0  2A14               	incf	??_disk_ioctl,f,c
 14418  0033C2  D005               	goto	u5670
 14419  0033C4                     u5675:
 14420  0033C4  90D8               	bcf	status,0,c
 14421  0033C6  3615               	rlcf	??_disk_ioctl+1,f,c
 14422  0033C8  3616               	rlcf	??_disk_ioctl+2,f,c
 14423  0033CA  3617               	rlcf	??_disk_ioctl+3,f,c
 14424  0033CC  3618               	rlcf	??_disk_ioctl+4,f,c
 14425  0033CE                     u5670:
 14426  0033CE  2E14               	decfsz	??_disk_ioctl,f,c
 14427  0033D0  D7F9               	goto	u5675
 14428  0033D2  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 14429  0033D6  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 14430  0033DA  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 14431  0033DE  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 14432  0033E2  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 14433  0033E6  C018  FFDE         	movff	??_disk_ioctl+4,postinc2
 14434  0033EA  D10A               	goto	l4361
 14435                           
 14436                           ;diskio.c: 492: }
 14437                           ;diskio.c: 493: }
 14438                           ;diskio.c: 494: } else {
 14439                           
 14440                           ;diskio.c: 491: res = RES_OK;
 14441  0033EC  D129               	goto	l4367
 14442  0033EE                     l4313:
 14443                           
 14444                           ;diskio.c: 495: if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 14445  0033EE  0E00               	movlw	0
 14446  0033F0  6E0B               	movwf	send_cmd@arg,c
 14447  0033F2  0E00               	movlw	0
 14448  0033F4  6E0C               	movwf	send_cmd@arg+1,c
 14449  0033F6  0E00               	movlw	0
 14450  0033F8  6E0D               	movwf	send_cmd@arg+2,c
 14451  0033FA  0E00               	movlw	0
 14452  0033FC  6E0E               	movwf	send_cmd@arg+3,c
 14453  0033FE  0E09               	movlw	9
 14454  003400  EC7D  F032         	call	_send_cmd
 14455  003404  0900               	iorlw	0
 14456  003406  A4D8               	btfss	status,2,c
 14457  003408  D11B               	goto	l4367
 14458  00340A  0E21               	movlw	low disk_ioctl@csd
 14459  00340C  6E02               	movwf	rcvr_datablock@buff,c
 14460  00340E  0E00               	movlw	high disk_ioctl@csd
 14461  003410  6E03               	movwf	rcvr_datablock@buff+1,c
 14462  003412  0E00               	movlw	0
 14463  003414  6E05               	movwf	rcvr_datablock@btr+1,c
 14464  003416  0E10               	movlw	16
 14465  003418  6E04               	movwf	rcvr_datablock@btr,c
 14466  00341A  ECB2  F031         	call	_rcvr_datablock	;wreg free
 14467  00341E  0900               	iorlw	0
 14468  003420  B4D8               	btfsc	status,2,c
 14469  003422  D10E               	goto	l4367
 14470                           
 14471                           ;diskio.c: 496: if (CardType & 0x02) {
 14472  003424  0100               	movlb	0	; () banked
 14473  003426  A3D6               	btfss	_CardType& (0+255),1,b
 14474  003428  D02A               	goto	l4321
 14475                           
 14476                           ; BSR set to: 0
 14477                           ;diskio.c: 497: *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 
      +                          1) << ((csd[13] >> 6) - 1);
 14478  00342A  C02E  F014         	movff	disk_ioctl@csd+13,??_disk_ioctl
 14479  00342E  0E06               	movlw	6
 14480  003430  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 14481  003432                     u5715:
 14482  003432  90D8               	bcf	status,0,c
 14483  003434  3214               	rrcf	??_disk_ioctl,f,c
 14484  003436  2E15               	decfsz	(??_disk_ioctl+1)& (0+255),f,c
 14485  003438  D7FC               	goto	u5715
 14486  00343A  0EFF               	movlw	-1
 14487  00343C  2614               	addwf	??_disk_ioctl,f,c
 14488  00343E  502B               	movf	disk_ioctl@csd+10,w,c
 14489  003440  0B3F               	andlw	63
 14490  003442  6E16               	movwf	(??_disk_ioctl+2)& (0+255),c
 14491  003444  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 14492  003446  90D8               	bcf	status,0,c
 14493  003448  3616               	rlcf	??_disk_ioctl+2,f,c
 14494  00344A  3617               	rlcf	??_disk_ioctl+3,f,c
 14495  00344C  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 14496  00344E  AE2C               	btfss	disk_ioctl@csd+11,7,c
 14497  003450  D001               	bra	u5725
 14498  003452  2A18               	incf	(??_disk_ioctl+4)& (0+255),f,c
 14499  003454                     u5725:
 14500  003454  0E01               	movlw	1
 14501  003456  1618               	andwf	??_disk_ioctl+4,f,c
 14502  003458  5018               	movf	??_disk_ioctl+4,w,c
 14503  00345A  2616               	addwf	??_disk_ioctl+2,f,c
 14504  00345C  0E00               	movlw	0
 14505  00345E  2217               	addwfc	??_disk_ioctl+3,f,c
 14506  003460  0E01               	movlw	1
 14507  003462  2616               	addwf	??_disk_ioctl+2,f,c
 14508  003464  0E00               	movlw	0
 14509  003466  2217               	addwfc	??_disk_ioctl+3,f,c
 14510  003468  2A14               	incf	??_disk_ioctl,f,c
 14511  00346A  D003               	goto	u5734
 14512  00346C                     u5735:
 14513  00346C  90D8               	bcf	status,0,c
 14514  00346E  3616               	rlcf	??_disk_ioctl+2,f,c
 14515  003470  3617               	rlcf	??_disk_ioctl+3,f,c
 14516  003472                     u5734:
 14517  003472  2E14               	decfsz	??_disk_ioctl,f,c
 14518  003474  D7FB               	goto	u5735
 14519  003476  5016               	movf	??_disk_ioctl+2,w,c
 14520  003478  6E19               	movwf	(??_disk_ioctl+5)& (0+255),c
 14521  00347A  5017               	movf	??_disk_ioctl+3,w,c
 14522  00347C  D034               	goto	L17
 14523  00347E                     l4321:
 14524                           
 14525                           ;diskio.c: 499: *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 
      +                          3) + ((csd[11] & 224) >> 5) + 1);
 14526  00347E  C02B  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 14527  003482  90D8               	bcf	status,0,c
 14528  003484  3214               	rrcf	??_disk_ioctl,f,c
 14529  003486  90D8               	bcf	status,0,c
 14530  003488  3214               	rrcf	??_disk_ioctl,f,c
 14531  00348A  0E1F               	movlw	31
 14532  00348C  1614               	andwf	??_disk_ioctl,f,c
 14533  00348E  0E01               	movlw	1
 14534  003490  2414               	addwf	??_disk_ioctl,w,c
 14535  003492  6E01               	movwf	___wmul@multiplier,c
 14536  003494  6A02               	clrf	___wmul@multiplier+1,c
 14537  003496  0E00               	movlw	0
 14538  003498  2202               	addwfc	___wmul@multiplier+1,f,c
 14539  00349A  502C               	movf	disk_ioctl@csd+11,w,c
 14540  00349C  0B03               	andlw	3
 14541  00349E  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 14542  0034A0  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 14543  0034A2  90D8               	bcf	status,0,c
 14544  0034A4  3615               	rlcf	??_disk_ioctl+1,f,c
 14545  0034A6  3616               	rlcf	??_disk_ioctl+2,f,c
 14546  0034A8  90D8               	bcf	status,0,c
 14547  0034AA  3615               	rlcf	??_disk_ioctl+1,f,c
 14548  0034AC  3616               	rlcf	??_disk_ioctl+2,f,c
 14549  0034AE  90D8               	bcf	status,0,c
 14550  0034B0  3615               	rlcf	??_disk_ioctl+1,f,c
 14551  0034B2  3616               	rlcf	??_disk_ioctl+2,f,c
 14552  0034B4  C02C  F017         	movff	disk_ioctl@csd+11,??_disk_ioctl+3
 14553  0034B8  0E05               	movlw	5
 14554  0034BA  6E18               	movwf	(??_disk_ioctl+4)& (0+255),c
 14555  0034BC                     u5745:
 14556  0034BC  90D8               	bcf	status,0,c
 14557  0034BE  3217               	rrcf	??_disk_ioctl+3,f,c
 14558  0034C0  2E18               	decfsz	(??_disk_ioctl+4)& (0+255),f,c
 14559  0034C2  D7FC               	goto	u5745
 14560  0034C4  0E07               	movlw	7
 14561  0034C6  1617               	andwf	??_disk_ioctl+3,f,c
 14562  0034C8  5017               	movf	??_disk_ioctl+3,w,c
 14563  0034CA  2615               	addwf	??_disk_ioctl+1,f,c
 14564  0034CC  0E00               	movlw	0
 14565  0034CE  2216               	addwfc	??_disk_ioctl+2,f,c
 14566  0034D0  0E01               	movlw	1
 14567  0034D2  2415               	addwf	??_disk_ioctl+1,w,c
 14568  0034D4  6E03               	movwf	___wmul@multiplicand,c
 14569  0034D6  0E00               	movlw	0
 14570  0034D8  2016               	addwfc	??_disk_ioctl+2,w,c
 14571  0034DA  6E04               	movwf	___wmul@multiplicand+1,c
 14572  0034DC  EC4A  F033         	call	___wmul	;wreg free
 14573  0034E0  5001               	movf	?___wmul,w,c
 14574  0034E2  6E19               	movwf	(??_disk_ioctl+5)& (0+255),c
 14575  0034E4  5002               	movf	?___wmul+1,w,c
 14576  0034E6                     L17:
 14577  0034E6  6E1A               	movwf	(??_disk_ioctl+6)& (0+255),c
 14578  0034E8  6A1B               	clrf	(??_disk_ioctl+7)& (0+255),c
 14579  0034EA  6A1C               	clrf	(??_disk_ioctl+8)& (0+255),c
 14580  0034EC  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 14581  0034F0  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 14582  0034F4  C019  FFDE         	movff	??_disk_ioctl+5,postinc2
 14583  0034F8  C01A  FFDE         	movff	??_disk_ioctl+6,postinc2
 14584  0034FC  C01B  FFDE         	movff	??_disk_ioctl+7,postinc2
 14585  003500  C01C  FFDE         	movff	??_disk_ioctl+8,postinc2
 14586  003504  D07D               	goto	l4361
 14587  003506  D07C               	goto	l4361
 14588                           
 14589                           ;diskio.c: 502: }
 14590                           ;diskio.c: 503: }
 14591                           ;diskio.c: 504: break;
 14592                           
 14593                           ;diskio.c: 500: }
 14594                           ;diskio.c: 501: res = RES_OK;
 14595  003508  D09B               	goto	l4367
 14596  00350A                     l4325:
 14597                           
 14598                           ;diskio.c: 509: *ptr = CardType;
 14599  00350A  C038  FFD9         	movff	disk_ioctl@ptr,fsr2l
 14600  00350E  C039  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 14601  003512  C0D6  FFDF         	movff	_CardType,indf2
 14602  003516  D074               	goto	l4361
 14603  003518                     l4329:
 14604                           
 14605                           ;diskio.c: 514: if (send_cmd((9), 0) == 0
 14606                           ;diskio.c: 515: && rcvr_datablock(ptr, 16))
 14607  003518  0E00               	movlw	0
 14608  00351A  6E0B               	movwf	send_cmd@arg,c
 14609  00351C  0E00               	movlw	0
 14610  00351E  6E0C               	movwf	send_cmd@arg+1,c
 14611  003520  0E00               	movlw	0
 14612  003522  6E0D               	movwf	send_cmd@arg+2,c
 14613  003524  0E00               	movlw	0
 14614  003526  6E0E               	movwf	send_cmd@arg+3,c
 14615  003528  0E09               	movlw	9
 14616  00352A  EC7D  F032         	call	_send_cmd
 14617  00352E  0900               	iorlw	0
 14618  003530  A4D8               	btfss	status,2,c
 14619  003532  D086               	goto	l4367
 14620  003534  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 14621  003538  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 14622  00353C  0E00               	movlw	0
 14623  00353E  6E05               	movwf	rcvr_datablock@btr+1,c
 14624  003540  0E10               	movlw	16
 14625  003542  6E04               	movwf	rcvr_datablock@btr,c
 14626  003544  ECB2  F031         	call	_rcvr_datablock	;wreg free
 14627  003548  D058               	goto	L20
 14628                           
 14629                           ;diskio.c: 517: break;
 14630                           
 14631                           ;diskio.c: 516: res = RES_OK;
 14632  00354A  D07A               	goto	l4367
 14633  00354C                     l4335:
 14634                           
 14635                           ;diskio.c: 520: if (send_cmd((10), 0) == 0
 14636                           ;diskio.c: 521: && rcvr_datablock(ptr, 16))
 14637  00354C  0E00               	movlw	0
 14638  00354E  6E0B               	movwf	send_cmd@arg,c
 14639  003550  0E00               	movlw	0
 14640  003552  6E0C               	movwf	send_cmd@arg+1,c
 14641  003554  0E00               	movlw	0
 14642  003556  6E0D               	movwf	send_cmd@arg+2,c
 14643  003558  0E00               	movlw	0
 14644  00355A  6E0E               	movwf	send_cmd@arg+3,c
 14645  00355C  0E0A               	movlw	10
 14646  00355E  EC7D  F032         	call	_send_cmd
 14647  003562  0900               	iorlw	0
 14648  003564  A4D8               	btfss	status,2,c
 14649  003566  D06C               	goto	l4367
 14650  003568  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 14651  00356C  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 14652  003570  0E00               	movlw	0
 14653  003572  6E05               	movwf	rcvr_datablock@btr+1,c
 14654  003574  0E10               	movlw	16
 14655  003576  6E04               	movwf	rcvr_datablock@btr,c
 14656  003578  ECB2  F031         	call	_rcvr_datablock	;wreg free
 14657  00357C  D03E               	goto	L20
 14658                           
 14659                           ;diskio.c: 523: break;
 14660                           
 14661                           ;diskio.c: 522: res = RES_OK;
 14662  00357E  D060               	goto	l4367
 14663  003580                     l4341:
 14664                           
 14665                           ;diskio.c: 526: if (send_cmd((58), 0) == 0) {
 14666  003580  0E00               	movlw	0
 14667  003582  6E0B               	movwf	send_cmd@arg,c
 14668  003584  0E00               	movlw	0
 14669  003586  6E0C               	movwf	send_cmd@arg+1,c
 14670  003588  0E00               	movlw	0
 14671  00358A  6E0D               	movwf	send_cmd@arg+2,c
 14672  00358C  0E00               	movlw	0
 14673  00358E  6E0E               	movwf	send_cmd@arg+3,c
 14674  003590  0E3A               	movlw	58
 14675  003592  EC7D  F032         	call	_send_cmd
 14676  003596  0900               	iorlw	0
 14677  003598  A4D8               	btfss	status,2,c
 14678  00359A  D052               	goto	l4367
 14679                           
 14680                           ;diskio.c: 527: for (n = 4; n; n--) *ptr++ = SPI1_Exchange8bit(0xFF);
 14681  00359C  0E04               	movlw	4
 14682  00359E  6E37               	movwf	disk_ioctl@n,c
 14683  0035A0  D00C               	goto	l4351
 14684  0035A2                     l4345:
 14685  0035A2  0EFF               	movlw	255
 14686  0035A4  EC79  F033         	call	_SPI1_Exchange8bit
 14687  0035A8  C038  FFD9         	movff	disk_ioctl@ptr,fsr2l
 14688  0035AC  C039  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 14689  0035B0  6EDF               	movwf	indf2,c
 14690  0035B2  4A38               	infsnz	disk_ioctl@ptr,f,c
 14691  0035B4  2A39               	incf	disk_ioctl@ptr+1,f,c
 14692  0035B6  0637               	decf	disk_ioctl@n,f,c
 14693  0035B8  D000               	goto	l4351
 14694  0035BA                     l4351:
 14695  0035BA  5037               	movf	disk_ioctl@n,w,c
 14696  0035BC  A4D8               	btfss	status,2,c
 14697  0035BE  D7F1               	goto	l4345
 14698  0035C0  D01F               	goto	l4361
 14699                           
 14700                           ;diskio.c: 529: }
 14701                           ;diskio.c: 530: break;
 14702                           
 14703                           ;diskio.c: 528: res = RES_OK;
 14704  0035C2  D03E               	goto	l4367
 14705  0035C4                     l4355:
 14706                           
 14707                           ;diskio.c: 533: if (send_cmd((0x80+13), 0) == 0) {
 14708  0035C4  0E00               	movlw	0
 14709  0035C6  6E0B               	movwf	send_cmd@arg,c
 14710  0035C8  0E00               	movlw	0
 14711  0035CA  6E0C               	movwf	send_cmd@arg+1,c
 14712  0035CC  0E00               	movlw	0
 14713  0035CE  6E0D               	movwf	send_cmd@arg+2,c
 14714  0035D0  0E00               	movlw	0
 14715  0035D2  6E0E               	movwf	send_cmd@arg+3,c
 14716  0035D4  0E8D               	movlw	141
 14717  0035D6  EC7D  F032         	call	_send_cmd
 14718  0035DA  0900               	iorlw	0
 14719  0035DC  A4D8               	btfss	status,2,c
 14720  0035DE  D030               	goto	l4367
 14721                           
 14722                           ;diskio.c: 534: SPI1_Exchange8bit(0xFF);
 14723  0035E0  0EFF               	movlw	255
 14724  0035E2  EC79  F033         	call	_SPI1_Exchange8bit
 14725                           
 14726                           ;diskio.c: 535: if (rcvr_datablock(ptr, 64))
 14727  0035E6  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 14728  0035EA  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 14729  0035EE  0E00               	movlw	0
 14730  0035F0  6E05               	movwf	rcvr_datablock@btr+1,c
 14731  0035F2  0E40               	movlw	64
 14732  0035F4  6E04               	movwf	rcvr_datablock@btr,c
 14733  0035F6  ECB2  F031         	call	_rcvr_datablock	;wreg free
 14734  0035FA                     L20:
 14735  0035FA  0900               	iorlw	0
 14736  0035FC  B4D8               	btfsc	status,2,c
 14737  0035FE  D020               	goto	l4367
 14738  003600                     l4361:
 14739                           
 14740                           ;diskio.c: 536: res = RES_OK;
 14741  003600  0E00               	movlw	0
 14742  003602  D002               	goto	L18
 14743                           
 14744                           ;diskio.c: 537: }
 14745                           ;diskio.c: 538: break;
 14746  003604  D01D               	goto	l4367
 14747  003606                     l4363:
 14748                           
 14749                           ;diskio.c: 541: res = RES_PARERR;
 14750  003606  0E04               	movlw	4
 14751  003608                     L18:
 14752  003608  6E36               	movwf	disk_ioctl@res,c
 14753                           
 14754                           ;diskio.c: 542: }
 14755  00360A  D01A               	goto	l4367
 14756  00360C                     l4365:
 14757  00360C  5011               	movf	disk_ioctl@cmd,w,c
 14758                           
 14759                           ; Switch size 1, requested type "space"
 14760                           ; Number of cases is 8, Range of values is 0 to 14
 14761                           ; switch strategies available:
 14762                           ; Name         Instructions Cycles
 14763                           ; simple_byte           25    13 (average)
 14764                           ;	Chosen strategy is simple_byte
 14765  00360E  0A00               	xorlw	0	; case 0
 14766  003610  B4D8               	btfsc	status,2,c
 14767  003612  D5CC               	goto	l4275
 14768  003614  0A01               	xorlw	1	; case 1
 14769  003616  B4D8               	btfsc	status,2,c
 14770  003618  D5CD               	goto	l4279
 14771  00361A  0A02               	xorlw	2	; case 3
 14772  00361C  B4D8               	btfsc	status,2,c
 14773  00361E  D69A               	goto	l181
 14774  003620  0A09               	xorlw	9	; case 10
 14775  003622  B4D8               	btfsc	status,2,c
 14776  003624  D772               	goto	l4325
 14777  003626  0A01               	xorlw	1	; case 11
 14778  003628  B4D8               	btfsc	status,2,c
 14779  00362A  D776               	goto	l4329
 14780  00362C  0A07               	xorlw	7	; case 12
 14781  00362E  B4D8               	btfsc	status,2,c
 14782  003630  D78D               	goto	l4335
 14783  003632  0A01               	xorlw	1	; case 13
 14784  003634  B4D8               	btfsc	status,2,c
 14785  003636  D7A4               	goto	l4341
 14786  003638  0A03               	xorlw	3	; case 14
 14787  00363A  B4D8               	btfsc	status,2,c
 14788  00363C  D7C3               	goto	l4355
 14789  00363E  D7E3               	goto	l4363
 14790  003640                     l4367:
 14791                           
 14792                           ;diskio.c: 544: deselect();
 14793  003640  EC9E  F033         	call	_deselect	;wreg free
 14794                           
 14795                           ;diskio.c: 546: return res;
 14796  003644  5036               	movf	disk_ioctl@res,w,c
 14797  003646  0012               	return	
 14798  003648  0012               	return		;funcret
 14799  00364A                     __end_of_disk_ioctl:
 14800                           	opt stack 0
 14801                           tblptru	equ	0xFF8
 14802                           tblptrh	equ	0xFF7
 14803                           tblptrl	equ	0xFF6
 14804                           tablat	equ	0xFF5
 14805                           prodh	equ	0xFF4
 14806                           prodl	equ	0xFF3
 14807                           indf0	equ	0xFEF
 14808                           postinc0	equ	0xFEE
 14809                           fsr0h	equ	0xFEA
 14810                           fsr0l	equ	0xFE9
 14811                           wreg	equ	0xFE8
 14812                           indf1	equ	0xFE7
 14813                           postinc1	equ	0xFE6
 14814                           postdec1	equ	0xFE5
 14815                           fsr1h	equ	0xFE2
 14816                           fsr1l	equ	0xFE1
 14817                           indf2	equ	0xFDF
 14818                           postinc2	equ	0xFDE
 14819                           postdec2	equ	0xFDD
 14820                           plusw2	equ	0xFDB
 14821                           fsr2h	equ	0xFDA
 14822                           fsr2l	equ	0xFD9
 14823                           status	equ	0xFD8
 14824                           
 14825 ;; *************** function ___wmul *****************
 14826 ;; Defined at:
 14827 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 14828 ;; Parameters:    Size  Location     Type
 14829 ;;  multiplier      2    0[COMRAM] unsigned int 
 14830 ;;  multiplicand    2    2[COMRAM] unsigned int 
 14831 ;; Auto vars:     Size  Location     Type
 14832 ;;  product         2    4[COMRAM] unsigned int 
 14833 ;; Return value:  Size  Location     Type
 14834 ;;                  2    0[COMRAM] unsigned int 
 14835 ;; Registers used:
 14836 ;;		wreg, status,2, status,0, prodl, prodh
 14837 ;; Tracked objects:
 14838 ;;		On entry : 0/0
 14839 ;;		On exit  : 0/0
 14840 ;;		Unchanged: 0/0
 14841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14842 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14843 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14845 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14846 ;;Total ram usage:        6 bytes
 14847 ;; Hardware stack levels used:    1
 14848 ;; This function calls:
 14849 ;;		Nothing
 14850 ;; This function is called by:
 14851 ;;		_disk_ioctl
 14852 ;; This function uses a non-reentrant model
 14853 ;;
 14854                           
 14855                           	psect	text35
 14856  006694                     __ptext35:
 14857                           	opt stack 0
 14858  006694                     ___wmul:
 14859                           	opt stack 26
 14860                           
 14861                           ;incstack = 0
 14862  006694  5001               	movf	___wmul@multiplier,w,c
 14863  006696  0203               	mulwf	___wmul@multiplicand,c
 14864  006698  CFF3 F005          	movff	prodl,___wmul@product
 14865  00669C  CFF4 F006          	movff	prodh,___wmul@product+1
 14866  0066A0  5001               	movf	___wmul@multiplier,w,c
 14867  0066A2  0204               	mulwf	___wmul@multiplicand+1,c
 14868  0066A4  50F3               	movf	prodl,w,c
 14869  0066A6  2606               	addwf	___wmul@product+1,f,c
 14870  0066A8  5002               	movf	___wmul@multiplier+1,w,c
 14871  0066AA  0203               	mulwf	___wmul@multiplicand,c
 14872  0066AC  50F3               	movf	prodl,w,c
 14873  0066AE  2606               	addwf	___wmul@product+1,f,c
 14874  0066B0  C005  F001         	movff	___wmul@product,?___wmul
 14875  0066B4  C006  F002         	movff	___wmul@product+1,?___wmul+1
 14876  0066B8  0012               	return	
 14877  0066BA  0012               	return		;funcret
 14878  0066BC                     __end_of___wmul:
 14879                           	opt stack 0
 14880                           tblptru	equ	0xFF8
 14881                           tblptrh	equ	0xFF7
 14882                           tblptrl	equ	0xFF6
 14883                           tablat	equ	0xFF5
 14884                           prodh	equ	0xFF4
 14885                           prodl	equ	0xFF3
 14886                           indf0	equ	0xFEF
 14887                           postinc0	equ	0xFEE
 14888                           fsr0h	equ	0xFEA
 14889                           fsr0l	equ	0xFE9
 14890                           wreg	equ	0xFE8
 14891                           indf1	equ	0xFE7
 14892                           postinc1	equ	0xFE6
 14893                           postdec1	equ	0xFE5
 14894                           fsr1h	equ	0xFE2
 14895                           fsr1l	equ	0xFE1
 14896                           indf2	equ	0xFDF
 14897                           postinc2	equ	0xFDE
 14898                           postdec2	equ	0xFDD
 14899                           plusw2	equ	0xFDB
 14900                           fsr2h	equ	0xFDA
 14901                           fsr2l	equ	0xFD9
 14902                           status	equ	0xFD8
 14903                           
 14904 ;; *************** function _st_clust *****************
 14905 ;; Defined at:
 14906 ;;		line 1252 in file "../../SD_Card_FatFs/ff.c"
 14907 ;; Parameters:    Size  Location     Type
 14908 ;;  dir             2    0[COMRAM] PTR unsigned char 
 14909 ;;		 -> NULL(0), FatFs(558), 
 14910 ;;  cl              4    2[COMRAM] unsigned long 
 14911 ;; Auto vars:     Size  Location     Type
 14912 ;;		None
 14913 ;; Return value:  Size  Location     Type
 14914 ;;		None               void
 14915 ;; Registers used:
 14916 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14917 ;; Tracked objects:
 14918 ;;		On entry : 0/0
 14919 ;;		On exit  : 0/0
 14920 ;;		Unchanged: 0/0
 14921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14922 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14925 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14926 ;;Total ram usage:        6 bytes
 14927 ;; Hardware stack levels used:    1
 14928 ;; This function calls:
 14929 ;;		Nothing
 14930 ;; This function is called by:
 14931 ;;		_f_open
 14932 ;;		_f_sync
 14933 ;; This function uses a non-reentrant model
 14934 ;;
 14935                           
 14936                           	psect	text36
 14937  00666A                     __ptext36:
 14938                           	opt stack 0
 14939  00666A                     _st_clust:
 14940                           	opt stack 29
 14941                           
 14942                           ;ff.c: 1257: *(WORD*)(BYTE*)(dir + 26)=(WORD)(cl);
 14943                           
 14944                           ;incstack = 0
 14945  00666A  EE20 F01A          	lfsr	2,26
 14946  00666E  5001               	movf	st_clust@dir,w,c
 14947  006670  26D9               	addwf	fsr2l,f,c
 14948  006672  5002               	movf	st_clust@dir+1,w,c
 14949  006674  22DA               	addwfc	fsr2h,f,c
 14950  006676  C003  FFDE         	movff	st_clust@cl,postinc2
 14951  00667A  C004  FFDD         	movff	st_clust@cl+1,postdec2
 14952                           
 14953                           ;ff.c: 1258: *(WORD*)(BYTE*)(dir + 20)=(WORD)(cl >> 16);
 14954  00667E  EE20 F014          	lfsr	2,20
 14955  006682  5001               	movf	st_clust@dir,w,c
 14956  006684  26D9               	addwf	fsr2l,f,c
 14957  006686  5002               	movf	st_clust@dir+1,w,c
 14958  006688  22DA               	addwfc	fsr2h,f,c
 14959  00668A  C005  FFDE         	movff	st_clust@cl+2,postinc2
 14960  00668E  C006  FFDD         	movff	st_clust@cl+3,postdec2
 14961  006692  0012               	return		;funcret
 14962  006694                     __end_of_st_clust:
 14963                           	opt stack 0
 14964                           tblptru	equ	0xFF8
 14965                           tblptrh	equ	0xFF7
 14966                           tblptrl	equ	0xFF6
 14967                           tablat	equ	0xFF5
 14968                           prodh	equ	0xFF4
 14969                           prodl	equ	0xFF3
 14970                           indf0	equ	0xFEF
 14971                           postinc0	equ	0xFEE
 14972                           fsr0h	equ	0xFEA
 14973                           fsr0l	equ	0xFE9
 14974                           wreg	equ	0xFE8
 14975                           indf1	equ	0xFE7
 14976                           postinc1	equ	0xFE6
 14977                           postdec1	equ	0xFE5
 14978                           fsr1h	equ	0xFE2
 14979                           fsr1l	equ	0xFE1
 14980                           indf2	equ	0xFDF
 14981                           postinc2	equ	0xFDE
 14982                           postdec2	equ	0xFDD
 14983                           plusw2	equ	0xFDB
 14984                           fsr2h	equ	0xFDA
 14985                           fsr2l	equ	0xFD9
 14986                           status	equ	0xFD8
 14987                           
 14988 ;; *************** function _move_window *****************
 14989 ;; Defined at:
 14990 ;;		line 729 in file "../../SD_Card_FatFs/ff.c"
 14991 ;; Parameters:    Size  Location     Type
 14992 ;;  fs              2   47[COMRAM] PTR struct .
 14993 ;;		 -> NULL(0), FatFs(558), 
 14994 ;;  sector          4   49[COMRAM] unsigned long 
 14995 ;; Auto vars:     Size  Location     Type
 14996 ;;  res             1   57[COMRAM] enum E88
 14997 ;; Return value:  Size  Location     Type
 14998 ;;                  1    wreg      enum E88
 14999 ;; Registers used:
 15000 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15001 ;; Tracked objects:
 15002 ;;		On entry : 0/0
 15003 ;;		On exit  : 0/0
 15004 ;;		Unchanged: 0/0
 15005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15006 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15007 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15008 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15009 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15010 ;;Total ram usage:       11 bytes
 15011 ;; Hardware stack levels used:    1
 15012 ;; Hardware stack levels required when called:    7
 15013 ;; This function calls:
 15014 ;;		_disk_read
 15015 ;;		_sync_window
 15016 ;; This function is called by:
 15017 ;;		_get_fat
 15018 ;;		_put_fat
 15019 ;;		_dir_alloc
 15020 ;;		_dir_find
 15021 ;;		_dir_register
 15022 ;;		_check_fs
 15023 ;;		_find_volume
 15024 ;;		_f_open
 15025 ;;		_f_write
 15026 ;;		_f_sync
 15027 ;;		_f_read
 15028 ;; This function uses a non-reentrant model
 15029 ;;
 15030                           
 15031                           	psect	text37
 15032  005FF6                     __ptext37:
 15033                           	opt stack 0
 15034  005FF6                     _move_window:
 15035                           	opt stack 22
 15036                           
 15037                           ;ff.c: 734: FRESULT res = FR_OK;
 15038                           
 15039                           ;incstack = 0
 15040  005FF6  0E00               	movlw	0
 15041  005FF8  6E3A               	movwf	move_window@res,c
 15042                           
 15043                           ;ff.c: 737: if (sector != fs->winsect) {
 15044  005FFA  EE20 F02A          	lfsr	2,42
 15045  005FFE  5030               	movf	move_window@fs,w,c
 15046  006000  26D9               	addwf	fsr2l,f,c
 15047  006002  5031               	movf	move_window@fs+1,w,c
 15048  006004  22DA               	addwfc	fsr2h,f,c
 15049  006006  5032               	movf	move_window@sector,w,c
 15050  006008  18DE               	xorwf	postinc2,w,c
 15051  00600A  E10A               	bnz	u5050
 15052  00600C  5033               	movf	move_window@sector+1,w,c
 15053  00600E  18DE               	xorwf	postinc2,w,c
 15054  006010  E107               	bnz	u5050
 15055  006012  5034               	movf	move_window@sector+2,w,c
 15056  006014  18DE               	xorwf	postinc2,w,c
 15057  006016  E104               	bnz	u5050
 15058  006018  5035               	movf	move_window@sector+3,w,c
 15059  00601A  18DE               	xorwf	postinc2,w,c
 15060  00601C  B4D8               	btfsc	status,2,c
 15061  00601E  D03E               	goto	l4009
 15062  006020                     u5050:
 15063                           
 15064                           ;ff.c: 739: res = sync_window(fs);
 15065  006020  C030  F01B         	movff	move_window@fs,sync_window@fs
 15066  006024  C031  F01C         	movff	move_window@fs+1,sync_window@fs+1
 15067  006028  EC6C  F029         	call	_sync_window	;wreg free
 15068  00602C  6E3A               	movwf	move_window@res,c
 15069                           
 15070                           ;ff.c: 741: if (res == FR_OK) {
 15071  00602E  503A               	movf	move_window@res,w,c
 15072  006030  A4D8               	btfss	status,2,c
 15073  006032  D034               	goto	l4009
 15074                           
 15075                           ;ff.c: 742: if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 15076  006034  0E2E               	movlw	46
 15077  006036  2430               	addwf	move_window@fs,w,c
 15078  006038  6E11               	movwf	disk_read@buff,c
 15079  00603A  0E00               	movlw	0
 15080  00603C  2031               	addwfc	move_window@fs+1,w,c
 15081  00603E  6E12               	movwf	disk_read@buff+1,c
 15082  006040  C032  F013         	movff	move_window@sector,disk_read@sector
 15083  006044  C033  F014         	movff	move_window@sector+1,disk_read@sector+1
 15084  006048  C034  F015         	movff	move_window@sector+2,disk_read@sector+2
 15085  00604C  C035  F016         	movff	move_window@sector+3,disk_read@sector+3
 15086  006050  0E00               	movlw	0
 15087  006052  6E18               	movwf	disk_read@count+1,c
 15088  006054  0E01               	movlw	1
 15089  006056  6E17               	movwf	disk_read@count,c
 15090  006058  EE20 F001          	lfsr	2,1
 15091  00605C  5030               	movf	move_window@fs,w,c
 15092  00605E  26D9               	addwf	fsr2l,f,c
 15093  006060  5031               	movf	move_window@fs+1,w,c
 15094  006062  22DA               	addwfc	fsr2h,f,c
 15095  006064  50DF               	movf	indf2,w,c
 15096  006066  EC0D  F02E         	call	_disk_read
 15097  00606A  0900               	iorlw	0
 15098  00606C  B4D8               	btfsc	status,2,c
 15099  00606E  D007               	goto	l4007
 15100                           
 15101                           ;ff.c: 743: sector = 0xFFFFFFFF;
 15102  006070  6832               	setf	move_window@sector,c
 15103  006072  6833               	setf	move_window@sector+1,c
 15104  006074  6834               	setf	move_window@sector+2,c
 15105  006076  6835               	setf	move_window@sector+3,c
 15106                           
 15107                           ;ff.c: 744: res = FR_DISK_ERR;
 15108  006078  0E01               	movlw	1
 15109  00607A  6E3A               	movwf	move_window@res,c
 15110  00607C  D000               	goto	l4007
 15111  00607E                     l4007:
 15112                           
 15113                           ;ff.c: 745: }
 15114                           ;ff.c: 746: fs->winsect = sector;
 15115  00607E  EE20 F02A          	lfsr	2,42
 15116  006082  5030               	movf	move_window@fs,w,c
 15117  006084  26D9               	addwf	fsr2l,f,c
 15118  006086  5031               	movf	move_window@fs+1,w,c
 15119  006088  22DA               	addwfc	fsr2h,f,c
 15120  00608A  C032  FFDE         	movff	move_window@sector,postinc2
 15121  00608E  C033  FFDE         	movff	move_window@sector+1,postinc2
 15122  006092  C034  FFDE         	movff	move_window@sector+2,postinc2
 15123  006096  C035  FFDE         	movff	move_window@sector+3,postinc2
 15124  00609A  D000               	goto	l4009
 15125  00609C                     l4009:
 15126                           
 15127                           ;ff.c: 747: }
 15128                           ;ff.c: 748: }
 15129                           ;ff.c: 749: return res;
 15130  00609C  503A               	movf	move_window@res,w,c
 15131  00609E  0012               	return	
 15132  0060A0  0012               	return		;funcret
 15133  0060A2                     __end_of_move_window:
 15134                           	opt stack 0
 15135                           tblptru	equ	0xFF8
 15136                           tblptrh	equ	0xFF7
 15137                           tblptrl	equ	0xFF6
 15138                           tablat	equ	0xFF5
 15139                           prodh	equ	0xFF4
 15140                           prodl	equ	0xFF3
 15141                           indf0	equ	0xFEF
 15142                           postinc0	equ	0xFEE
 15143                           fsr0h	equ	0xFEA
 15144                           fsr0l	equ	0xFE9
 15145                           wreg	equ	0xFE8
 15146                           indf1	equ	0xFE7
 15147                           postinc1	equ	0xFE6
 15148                           postdec1	equ	0xFE5
 15149                           fsr1h	equ	0xFE2
 15150                           fsr1l	equ	0xFE1
 15151                           indf2	equ	0xFDF
 15152                           postinc2	equ	0xFDE
 15153                           postdec2	equ	0xFDD
 15154                           plusw2	equ	0xFDB
 15155                           fsr2h	equ	0xFDA
 15156                           fsr2l	equ	0xFD9
 15157                           status	equ	0xFD8
 15158                           
 15159 ;; *************** function _sync_window *****************
 15160 ;; Defined at:
 15161 ;;		line 700 in file "../../SD_Card_FatFs/ff.c"
 15162 ;; Parameters:    Size  Location     Type
 15163 ;;  fs              2   26[COMRAM] PTR struct .
 15164 ;;		 -> NULL(0), FatFs(558), 
 15165 ;; Auto vars:     Size  Location     Type
 15166 ;;  wsect           4   43[COMRAM] unsigned long 
 15167 ;;  nf              2   41[COMRAM] unsigned int 
 15168 ;;  res             1   40[COMRAM] enum E88
 15169 ;; Return value:  Size  Location     Type
 15170 ;;                  1    wreg      enum E88
 15171 ;; Registers used:
 15172 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15173 ;; Tracked objects:
 15174 ;;		On entry : 0/0
 15175 ;;		On exit  : 0/0
 15176 ;;		Unchanged: 0/0
 15177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15178 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15179 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15180 ;;      Temps:         12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15181 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15182 ;;Total ram usage:       21 bytes
 15183 ;; Hardware stack levels used:    1
 15184 ;; Hardware stack levels required when called:    6
 15185 ;; This function calls:
 15186 ;;		_disk_write
 15187 ;; This function is called by:
 15188 ;;		_move_window
 15189 ;;		_sync_fs
 15190 ;;		_dir_next
 15191 ;;		_f_write
 15192 ;; This function uses a non-reentrant model
 15193 ;;
 15194                           
 15195                           	psect	text38
 15196  0052D8                     __ptext38:
 15197                           	opt stack 0
 15198  0052D8                     _sync_window:
 15199                           	opt stack 23
 15200                           
 15201                           ;ff.c: 704: DWORD wsect;
 15202                           ;ff.c: 705: UINT nf;
 15203                           ;ff.c: 706: FRESULT res = FR_OK;
 15204                           
 15205                           ;incstack = 0
 15206  0052D8  0E00               	movlw	0
 15207  0052DA  6E29               	movwf	sync_window@res,c
 15208                           
 15209                           ;ff.c: 709: if (fs->wflag) {
 15210  0052DC  EE20 F004          	lfsr	2,4
 15211  0052E0  501B               	movf	sync_window@fs,w,c
 15212  0052E2  26D9               	addwf	fsr2l,f,c
 15213  0052E4  501C               	movf	sync_window@fs+1,w,c
 15214  0052E6  22DA               	addwfc	fsr2h,f,c
 15215  0052E8  50DF               	movf	indf2,w,c
 15216  0052EA  B4D8               	btfsc	status,2,c
 15217  0052EC  D0AC               	goto	l3989
 15218                           
 15219                           ;ff.c: 710: wsect = fs->winsect;
 15220  0052EE  EE20 F02A          	lfsr	2,42
 15221  0052F2  501B               	movf	sync_window@fs,w,c
 15222  0052F4  26D9               	addwf	fsr2l,f,c
 15223  0052F6  501C               	movf	sync_window@fs+1,w,c
 15224  0052F8  22DA               	addwfc	fsr2h,f,c
 15225  0052FA  CFDE F02C          	movff	postinc2,sync_window@wsect
 15226  0052FE  CFDE F02D          	movff	postinc2,sync_window@wsect+1
 15227  005302  CFDE F02E          	movff	postinc2,sync_window@wsect+2
 15228  005306  CFDE F02F          	movff	postinc2,sync_window@wsect+3
 15229                           
 15230                           ;ff.c: 711: if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 15231  00530A  0E2E               	movlw	46
 15232  00530C  241B               	addwf	sync_window@fs,w,c
 15233  00530E  6E11               	movwf	disk_write@buff,c
 15234  005310  0E00               	movlw	0
 15235  005312  201C               	addwfc	sync_window@fs+1,w,c
 15236  005314  6E12               	movwf	disk_write@buff+1,c
 15237  005316  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 15238  00531A  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 15239  00531E  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 15240  005322  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 15241  005326  0E00               	movlw	0
 15242  005328  6E18               	movwf	disk_write@count+1,c
 15243  00532A  0E01               	movlw	1
 15244  00532C  6E17               	movwf	disk_write@count,c
 15245  00532E  EE20 F001          	lfsr	2,1
 15246  005332  501B               	movf	sync_window@fs,w,c
 15247  005334  26D9               	addwf	fsr2l,f,c
 15248  005336  501C               	movf	sync_window@fs+1,w,c
 15249  005338  22DA               	addwfc	fsr2h,f,c
 15250  00533A  50DF               	movf	indf2,w,c
 15251  00533C  ECD1  F02A         	call	_disk_write
 15252  005340  0900               	iorlw	0
 15253  005342  B4D8               	btfsc	status,2,c
 15254  005344  D003               	goto	l3971
 15255                           
 15256                           ;ff.c: 712: res = FR_DISK_ERR;
 15257  005346  0E01               	movlw	1
 15258  005348  6E29               	movwf	sync_window@res,c
 15259                           
 15260                           ;ff.c: 713: } else {
 15261  00534A  D07D               	goto	l3989
 15262  00534C                     l3971:
 15263                           
 15264                           ;ff.c: 714: fs->wflag = 0;
 15265  00534C  EE20 F004          	lfsr	2,4
 15266  005350  501B               	movf	sync_window@fs,w,c
 15267  005352  26D9               	addwf	fsr2l,f,c
 15268  005354  501C               	movf	sync_window@fs+1,w,c
 15269  005356  22DA               	addwfc	fsr2h,f,c
 15270  005358  0E00               	movlw	0
 15271  00535A  6EDF               	movwf	indf2,c
 15272                           
 15273                           ;ff.c: 715: if (wsect - fs->fatbase < fs->fsize) {
 15274  00535C  EE20 F016          	lfsr	2,22
 15275  005360  501B               	movf	sync_window@fs,w,c
 15276  005362  26D9               	addwf	fsr2l,f,c
 15277  005364  501C               	movf	sync_window@fs+1,w,c
 15278  005366  22DA               	addwfc	fsr2h,f,c
 15279  005368  EE10 F01E          	lfsr	1,30
 15280  00536C  501B               	movf	sync_window@fs,w,c
 15281  00536E  26E1               	addwf	fsr1l,f,c
 15282  005370  501C               	movf	sync_window@fs+1,w,c
 15283  005372  22E2               	addwfc	fsr1h,f,c
 15284  005374  CFE6 F021          	movff	postinc1,??_sync_window+4
 15285  005378  CFE6 F022          	movff	postinc1,??_sync_window+5
 15286  00537C  CFE6 F023          	movff	postinc1,??_sync_window+6
 15287  005380  CFE6 F024          	movff	postinc1,??_sync_window+7
 15288  005384  1E21               	comf	??_sync_window+4,f,c
 15289  005386  1E22               	comf	??_sync_window+5,f,c
 15290  005388  1E23               	comf	??_sync_window+6,f,c
 15291  00538A  1E24               	comf	??_sync_window+7,f,c
 15292  00538C  2A21               	incf	??_sync_window+4,f,c
 15293  00538E  0E00               	movlw	0
 15294  005390  2222               	addwfc	??_sync_window+5,f,c
 15295  005392  2223               	addwfc	??_sync_window+6,f,c
 15296  005394  2224               	addwfc	??_sync_window+7,f,c
 15297  005396  502C               	movf	sync_window@wsect,w,c
 15298  005398  2421               	addwf	??_sync_window+4,w,c
 15299  00539A  6E25               	movwf	(??_sync_window+8)& (0+255),c
 15300  00539C  502D               	movf	sync_window@wsect+1,w,c
 15301  00539E  2022               	addwfc	??_sync_window+5,w,c
 15302  0053A0  6E26               	movwf	(??_sync_window+9)& (0+255),c
 15303  0053A2  502E               	movf	sync_window@wsect+2,w,c
 15304  0053A4  2023               	addwfc	??_sync_window+6,w,c
 15305  0053A6  6E27               	movwf	(??_sync_window+10)& (0+255),c
 15306  0053A8  502F               	movf	sync_window@wsect+3,w,c
 15307  0053AA  2024               	addwfc	??_sync_window+7,w,c
 15308  0053AC  6E28               	movwf	(??_sync_window+11)& (0+255),c
 15309  0053AE  50DE               	movf	postinc2,w,c
 15310  0053B0  5C25               	subwf	??_sync_window+8,w,c
 15311  0053B2  50DE               	movf	postinc2,w,c
 15312  0053B4  5826               	subwfb	??_sync_window+9,w,c
 15313  0053B6  50DE               	movf	postinc2,w,c
 15314  0053B8  5827               	subwfb	??_sync_window+10,w,c
 15315  0053BA  50DE               	movf	postinc2,w,c
 15316  0053BC  5828               	subwfb	??_sync_window+11,w,c
 15317  0053BE  B0D8               	btfsc	status,0,c
 15318  0053C0  D042               	goto	l3989
 15319                           
 15320                           ;ff.c: 716: for (nf = fs->n_fats; nf >= 2; nf--) {
 15321  0053C2  EE20 F003          	lfsr	2,3
 15322  0053C6  501B               	movf	sync_window@fs,w,c
 15323  0053C8  26D9               	addwf	fsr2l,f,c
 15324  0053CA  501C               	movf	sync_window@fs+1,w,c
 15325  0053CC  22DA               	addwfc	fsr2h,f,c
 15326  0053CE  50DF               	movf	indf2,w,c
 15327  0053D0  6E1D               	movwf	??_sync_window& (0+255),c
 15328  0053D2  501D               	movf	??_sync_window,w,c
 15329  0053D4  6E2A               	movwf	sync_window@nf,c
 15330  0053D6  6A2B               	clrf	sync_window@nf+1,c
 15331  0053D8                     l3977:
 15332  0053D8  502B               	movf	sync_window@nf+1,w,c
 15333  0053DA  E106               	bnz	l3981
 15334  0053DC  0E02               	movlw	2
 15335  0053DE  5C2A               	subwf	sync_window@nf,w,c
 15336  0053E0  A0D8               	btfss	status,0,c
 15337  0053E2  D031               	goto	l3989
 15338  0053E4  D001               	goto	l3981
 15339  0053E6  D02F               	goto	l3989
 15340  0053E8                     l3981:
 15341                           
 15342                           ;ff.c: 717: wsect += fs->fsize;
 15343  0053E8  EE20 F016          	lfsr	2,22
 15344  0053EC  501B               	movf	sync_window@fs,w,c
 15345  0053EE  26D9               	addwf	fsr2l,f,c
 15346  0053F0  501C               	movf	sync_window@fs+1,w,c
 15347  0053F2  22DA               	addwfc	fsr2h,f,c
 15348  0053F4  50DE               	movf	postinc2,w,c
 15349  0053F6  262C               	addwf	sync_window@wsect,f,c
 15350  0053F8  50DE               	movf	postinc2,w,c
 15351  0053FA  222D               	addwfc	sync_window@wsect+1,f,c
 15352  0053FC  50DE               	movf	postinc2,w,c
 15353  0053FE  222E               	addwfc	sync_window@wsect+2,f,c
 15354  005400  50DD               	movf	postdec2,w,c
 15355  005402  222F               	addwfc	sync_window@wsect+3,f,c
 15356                           
 15357                           ;ff.c: 718: disk_write(fs->drv, fs->win, wsect, 1);
 15358  005404  0E2E               	movlw	46
 15359  005406  241B               	addwf	sync_window@fs,w,c
 15360  005408  6E11               	movwf	disk_write@buff,c
 15361  00540A  0E00               	movlw	0
 15362  00540C  201C               	addwfc	sync_window@fs+1,w,c
 15363  00540E  6E12               	movwf	disk_write@buff+1,c
 15364  005410  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 15365  005414  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 15366  005418  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 15367  00541C  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 15368  005420  0E00               	movlw	0
 15369  005422  6E18               	movwf	disk_write@count+1,c
 15370  005424  0E01               	movlw	1
 15371  005426  6E17               	movwf	disk_write@count,c
 15372  005428  EE20 F001          	lfsr	2,1
 15373  00542C  501B               	movf	sync_window@fs,w,c
 15374  00542E  26D9               	addwf	fsr2l,f,c
 15375  005430  501C               	movf	sync_window@fs+1,w,c
 15376  005432  22DA               	addwfc	fsr2h,f,c
 15377  005434  50DF               	movf	indf2,w,c
 15378  005436  ECD1  F02A         	call	_disk_write
 15379  00543A  062A               	decf	sync_window@nf,f,c
 15380  00543C  A0D8               	btfss	status,0,c
 15381  00543E  062B               	decf	sync_window@nf+1,f,c
 15382  005440  D7CB               	goto	l3977
 15383  005442  D7D2               	goto	l3981
 15384  005444  D000               	goto	l3989
 15385  005446                     l3989:
 15386                           
 15387                           ;ff.c: 719: }
 15388                           ;ff.c: 720: }
 15389                           ;ff.c: 721: }
 15390                           ;ff.c: 722: }
 15391                           ;ff.c: 723: return res;
 15392  005446  5029               	movf	sync_window@res,w,c
 15393  005448  0012               	return	
 15394  00544A  0012               	return		;funcret
 15395  00544C                     __end_of_sync_window:
 15396                           	opt stack 0
 15397                           tblptru	equ	0xFF8
 15398                           tblptrh	equ	0xFF7
 15399                           tblptrl	equ	0xFF6
 15400                           tablat	equ	0xFF5
 15401                           prodh	equ	0xFF4
 15402                           prodl	equ	0xFF3
 15403                           indf0	equ	0xFEF
 15404                           postinc0	equ	0xFEE
 15405                           fsr0h	equ	0xFEA
 15406                           fsr0l	equ	0xFE9
 15407                           wreg	equ	0xFE8
 15408                           indf1	equ	0xFE7
 15409                           postinc1	equ	0xFE6
 15410                           postdec1	equ	0xFE5
 15411                           fsr1h	equ	0xFE2
 15412                           fsr1l	equ	0xFE1
 15413                           indf2	equ	0xFDF
 15414                           postinc2	equ	0xFDE
 15415                           postdec2	equ	0xFDD
 15416                           plusw2	equ	0xFDB
 15417                           fsr2h	equ	0xFDA
 15418                           fsr2l	equ	0xFD9
 15419                           status	equ	0xFD8
 15420                           
 15421 ;; *************** function _disk_write *****************
 15422 ;; Defined at:
 15423 ;;		line 407 in file "../../SD_Card_FatFs/diskio.c"
 15424 ;; Parameters:    Size  Location     Type
 15425 ;;  pdrv            1    wreg     unsigned char 
 15426 ;;  buff            2   16[COMRAM] PTR const unsigned char 
 15427 ;;		 -> FatFs.win(512), NULL(0), STR_3(55), FatFs(558), 
 15428 ;;  sector          4   18[COMRAM] unsigned long 
 15429 ;;  count           2   22[COMRAM] unsigned int 
 15430 ;; Auto vars:     Size  Location     Type
 15431 ;;  pdrv            1   25[COMRAM] unsigned char 
 15432 ;; Return value:  Size  Location     Type
 15433 ;;                  1    wreg      enum E38
 15434 ;; Registers used:
 15435 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15436 ;; Tracked objects:
 15437 ;;		On entry : 0/0
 15438 ;;		On exit  : 0/0
 15439 ;;		Unchanged: 0/0
 15440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15441 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15442 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15443 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15444 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15445 ;;Total ram usage:       10 bytes
 15446 ;; Hardware stack levels used:    1
 15447 ;; Hardware stack levels required when called:    5
 15448 ;; This function calls:
 15449 ;;		_deselect
 15450 ;;		_send_cmd
 15451 ;;		_xmit_datablock
 15452 ;; This function is called by:
 15453 ;;		_sync_window
 15454 ;;		_sync_fs
 15455 ;;		_f_write
 15456 ;; This function uses a non-reentrant model
 15457 ;;
 15458                           
 15459                           	psect	text39
 15460  0055A2                     __ptext39:
 15461                           	opt stack 0
 15462  0055A2                     _disk_write:
 15463                           	opt stack 23
 15464                           
 15465                           ;incstack = 0
 15466                           ;disk_write@pdrv stored from wreg
 15467  0055A2  6E1A               	movwf	disk_write@pdrv,c
 15468                           
 15469                           ;diskio.c: 414: if (pdrv || !count) return RES_PARERR;
 15470  0055A4  501A               	movf	disk_write@pdrv,w,c
 15471  0055A6  A4D8               	btfss	status,2,c
 15472  0055A8  D004               	goto	l3883
 15473  0055AA  5017               	movf	disk_write@count,w,c
 15474  0055AC  1018               	iorwf	disk_write@count+1,w,c
 15475  0055AE  A4D8               	btfss	status,2,c
 15476  0055B0  D002               	goto	l152
 15477  0055B2                     l3883:
 15478  0055B2  0E04               	movlw	4
 15479  0055B4  0012               	return	
 15480  0055B6                     l152:
 15481                           
 15482                           ;diskio.c: 415: if (Stat & 0x01) return RES_NOTRDY;
 15483  0055B6  0100               	movlb	0	; () banked
 15484  0055B8  A1F7               	btfss	_Stat& (0+255),0,b
 15485  0055BA  D002               	goto	l156
 15486                           
 15487                           ; BSR set to: 0
 15488  0055BC  0E03               	movlw	3
 15489                           
 15490                           ; BSR set to: 0
 15491  0055BE  0012               	return	
 15492  0055C0                     l156:
 15493                           
 15494                           ; BSR set to: 0
 15495                           ;diskio.c: 416: if (Stat & 0x04) return RES_WRPRT;
 15496  0055C0  0100               	movlb	0	; () banked
 15497  0055C2  A5F7               	btfss	_Stat& (0+255),2,b
 15498  0055C4  D002               	goto	l157
 15499                           
 15500                           ; BSR set to: 0
 15501  0055C6  0E02               	movlw	2
 15502                           
 15503                           ; BSR set to: 0
 15504  0055C8  0012               	return	
 15505  0055CA                     l157:
 15506                           
 15507                           ; BSR set to: 0
 15508                           ;diskio.c: 418: if (!(CardType & 0x08)) sector *= 512;
 15509  0055CA  0100               	movlb	0	; () banked
 15510  0055CC  B7D6               	btfsc	_CardType& (0+255),3,b
 15511  0055CE  D008               	goto	l158
 15512                           
 15513                           ; BSR set to: 0
 15514  0055D0  0E09               	movlw	9
 15515  0055D2                     u4755:
 15516  0055D2  90D8               	bcf	status,0,c
 15517  0055D4  3613               	rlcf	disk_write@sector,f,c
 15518  0055D6  3614               	rlcf	disk_write@sector+1,f,c
 15519  0055D8  3615               	rlcf	disk_write@sector+2,f,c
 15520  0055DA  3616               	rlcf	disk_write@sector+3,f,c
 15521  0055DC  2EE8               	decfsz	wreg,f,c
 15522  0055DE  D7F9               	goto	u4755
 15523  0055E0                     l158:
 15524                           
 15525                           ; BSR set to: 0
 15526                           ;diskio.c: 420: if (count == 1) {
 15527  0055E0  0417               	decf	disk_write@count,w,c
 15528  0055E2  1018               	iorwf	disk_write@count+1,w,c
 15529  0055E4  A4D8               	btfss	status,2,c
 15530  0055E6  D026               	goto	l3903
 15531                           
 15532                           ; BSR set to: 0
 15533                           ;diskio.c: 421: if ((send_cmd((24), sector) == 0)
 15534                           ;diskio.c: 422: && xmit_datablock(buff, 0xFE))
 15535  0055E8  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 15536  0055EC  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 15537  0055F0  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 15538  0055F4  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 15539  0055F8  0E18               	movlw	24
 15540  0055FA  EC7D  F032         	call	_send_cmd
 15541  0055FE  0900               	iorlw	0
 15542  005600  A4D8               	btfss	status,2,c
 15543  005602  D065               	goto	l3917
 15544  005604  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 15545  005608  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 15546  00560C  6A06               	clrf	xmit_datablock@buff+2,c
 15547  00560E  5004               	movf	xmit_datablock@buff,w,c
 15548  005610  1005               	iorwf	xmit_datablock@buff+1,w,c
 15549  005612  B4D8               	btfsc	status,2,c
 15550  005614  D003               	goto	u4781
 15551  005616  0E0F               	movlw	(high __ramtop+-1)
 15552  005618  6412               	cpfsgt	disk_write@buff+1,c
 15553  00561A  8A06               	bsf	xmit_datablock@buff+2,5,c
 15554  00561C                     u4781:
 15555  00561C  0EFE               	movlw	254
 15556  00561E  6E07               	movwf	xmit_datablock@token,c
 15557  005620  ECE4  F030         	call	_xmit_datablock	;wreg free
 15558  005624  0900               	iorlw	0
 15559  005626  B4D8               	btfsc	status,2,c
 15560  005628  D052               	goto	l3917
 15561                           
 15562                           ;diskio.c: 423: count = 0;
 15563  00562A  0E00               	movlw	0
 15564  00562C  6E18               	movwf	disk_write@count+1,c
 15565  00562E  0E00               	movlw	0
 15566  005630  D04C               	goto	L21
 15567                           
 15568                           ;diskio.c: 424: }
 15569  005632  D04D               	goto	l3917
 15570  005634                     l3903:
 15571                           
 15572                           ;diskio.c: 425: else {
 15573                           ;diskio.c: 426: if (CardType & (0x02|0x04)) send_cmd((0x80+23), count);
 15574  005634  C0D6  F019         	movff	_CardType,??_disk_write
 15575  005638  0E06               	movlw	6
 15576  00563A  1619               	andwf	??_disk_write,f,c
 15577  00563C  B4D8               	btfsc	status,2,c
 15578  00563E  D009               	goto	l162
 15579  005640  C017  F00B         	movff	disk_write@count,send_cmd@arg
 15580  005644  C018  F00C         	movff	disk_write@count+1,send_cmd@arg+1
 15581  005648  6A0D               	clrf	send_cmd@arg+2,c
 15582  00564A  6A0E               	clrf	send_cmd@arg+3,c
 15583  00564C  0E97               	movlw	151
 15584  00564E  EC7D  F032         	call	_send_cmd
 15585  005652                     l162:
 15586                           
 15587                           ;diskio.c: 427: if (send_cmd((25), sector) == 0) {
 15588  005652  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 15589  005656  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 15590  00565A  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 15591  00565E  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 15592  005662  0E19               	movlw	25
 15593  005664  EC7D  F032         	call	_send_cmd
 15594  005668  0900               	iorlw	0
 15595  00566A  A4D8               	btfss	status,2,c
 15596  00566C  D030               	goto	l3917
 15597  00566E                     l3907:
 15598                           
 15599                           ;diskio.c: 429: if (!xmit_datablock(buff, 0xFC)) break;
 15600  00566E  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 15601  005672  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 15602  005676  6A06               	clrf	xmit_datablock@buff+2,c
 15603  005678  5004               	movf	xmit_datablock@buff,w,c
 15604  00567A  1005               	iorwf	xmit_datablock@buff+1,w,c
 15605  00567C  B4D8               	btfsc	status,2,c
 15606  00567E  D003               	goto	u4821
 15607  005680  0E0F               	movlw	(high __ramtop+-1)
 15608  005682  6412               	cpfsgt	disk_write@buff+1,c
 15609  005684  8A06               	bsf	xmit_datablock@buff+2,5,c
 15610  005686                     u4821:
 15611  005686  0EFC               	movlw	252
 15612  005688  6E07               	movwf	xmit_datablock@token,c
 15613  00568A  ECE4  F030         	call	_xmit_datablock	;wreg free
 15614  00568E  0900               	iorlw	0
 15615  005690  B4D8               	btfsc	status,2,c
 15616  005692  D00B               	goto	l3913
 15617  005694  D001               	goto	l3911
 15618  005696  D009               	goto	l3913
 15619  005698                     l3911:
 15620                           
 15621                           ;diskio.c: 430: buff += 512;
 15622  005698  0E02               	movlw	2
 15623  00569A  2612               	addwf	disk_write@buff+1,f,c
 15624                           
 15625                           ;diskio.c: 431: } while (--count);
 15626  00569C  0617               	decf	disk_write@count,f,c
 15627  00569E  A0D8               	btfss	status,0,c
 15628  0056A0  0618               	decf	disk_write@count+1,f,c
 15629  0056A2  5017               	movf	disk_write@count,w,c
 15630  0056A4  1018               	iorwf	disk_write@count+1,w,c
 15631  0056A6  A4D8               	btfss	status,2,c
 15632  0056A8  D7E2               	goto	l3907
 15633  0056AA                     l3913:
 15634                           
 15635                           ;diskio.c: 432: if (!xmit_datablock(0, 0xFD))
 15636  0056AA  0E00               	movlw	0
 15637  0056AC  6E04               	movwf	xmit_datablock@buff,c
 15638  0056AE  0E00               	movlw	0
 15639  0056B0  6E05               	movwf	xmit_datablock@buff+1,c
 15640  0056B2  0E00               	movlw	0
 15641  0056B4  6E06               	movwf	xmit_datablock@buff+2,c
 15642  0056B6  0EFD               	movlw	253
 15643  0056B8  6E07               	movwf	xmit_datablock@token,c
 15644  0056BA  ECE4  F030         	call	_xmit_datablock	;wreg free
 15645  0056BE  0900               	iorlw	0
 15646  0056C0  A4D8               	btfss	status,2,c
 15647  0056C2  D005               	goto	l3917
 15648                           
 15649                           ;diskio.c: 433: count = 1;
 15650  0056C4  0E00               	movlw	0
 15651  0056C6  6E18               	movwf	disk_write@count+1,c
 15652  0056C8  0E01               	movlw	1
 15653  0056CA                     L21:
 15654  0056CA  6E17               	movwf	disk_write@count,c
 15655  0056CC  D000               	goto	l3917
 15656  0056CE                     l3917:
 15657                           
 15658                           ;diskio.c: 434: }
 15659                           ;diskio.c: 435: }
 15660                           ;diskio.c: 436: deselect();
 15661  0056CE  EC9E  F033         	call	_deselect	;wreg free
 15662                           
 15663                           ;diskio.c: 438: return count ? RES_ERROR : RES_OK;
 15664  0056D2  5017               	movf	disk_write@count,w,c
 15665  0056D4  1018               	iorwf	disk_write@count+1,w,c
 15666  0056D6  B4D8               	btfsc	status,2,c
 15667  0056D8  D002               	goto	u4860
 15668  0056DA  0E01               	movlw	1
 15669  0056DC  0012               	return	
 15670  0056DE                     u4860:
 15671  0056DE  0E00               	movlw	0
 15672  0056E0  0012               	return	
 15673  0056E2  0012               	return		;funcret
 15674  0056E4                     __end_of_disk_write:
 15675                           	opt stack 0
 15676                           tblptru	equ	0xFF8
 15677                           tblptrh	equ	0xFF7
 15678                           tblptrl	equ	0xFF6
 15679                           tablat	equ	0xFF5
 15680                           prodh	equ	0xFF4
 15681                           prodl	equ	0xFF3
 15682                           indf0	equ	0xFEF
 15683                           postinc0	equ	0xFEE
 15684                           fsr0h	equ	0xFEA
 15685                           fsr0l	equ	0xFE9
 15686                           wreg	equ	0xFE8
 15687                           indf1	equ	0xFE7
 15688                           postinc1	equ	0xFE6
 15689                           postdec1	equ	0xFE5
 15690                           fsr1h	equ	0xFE2
 15691                           fsr1l	equ	0xFE1
 15692                           indf2	equ	0xFDF
 15693                           postinc2	equ	0xFDE
 15694                           postdec2	equ	0xFDD
 15695                           plusw2	equ	0xFDB
 15696                           fsr2h	equ	0xFDA
 15697                           fsr2l	equ	0xFD9
 15698                           status	equ	0xFD8
 15699                           
 15700 ;; *************** function _xmit_datablock *****************
 15701 ;; Defined at:
 15702 ;;		line 157 in file "../../SD_Card_FatFs/diskio.c"
 15703 ;; Parameters:    Size  Location     Type
 15704 ;;  buff            3    3[COMRAM] PTR const unsigned char 
 15705 ;;		 -> FatFs.win(512), NULL(0), ROM(65535), STR_3(55), 
 15706 ;;		 -> FatFs(558), 
 15707 ;;  token           1    6[COMRAM] unsigned char 
 15708 ;; Auto vars:     Size  Location     Type
 15709 ;;  i               2    7[COMRAM] unsigned int 
 15710 ;;  resp            1    9[COMRAM] unsigned char 
 15711 ;; Return value:  Size  Location     Type
 15712 ;;                  1    wreg      unsigned char 
 15713 ;; Registers used:
 15714 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15715 ;; Tracked objects:
 15716 ;;		On entry : 0/0
 15717 ;;		On exit  : 0/0
 15718 ;;		Unchanged: 0/0
 15719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15720 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15721 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15723 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15724 ;;Total ram usage:        7 bytes
 15725 ;; Hardware stack levels used:    1
 15726 ;; Hardware stack levels required when called:    2
 15727 ;; This function calls:
 15728 ;;		_SPI1_Exchange8bit
 15729 ;;		_wait_ready
 15730 ;; This function is called by:
 15731 ;;		_disk_write
 15732 ;; This function uses a non-reentrant model
 15733 ;;
 15734                           
 15735                           	psect	text40
 15736  0061C8                     __ptext40:
 15737                           	opt stack 0
 15738  0061C8                     _xmit_datablock:
 15739                           	opt stack 25
 15740                           
 15741                           ;diskio.c: 162: BYTE resp;
 15742                           ;diskio.c: 163: WORD i;
 15743                           ;diskio.c: 166: if (!wait_ready()) return 0;
 15744                           
 15745                           ;incstack = 0
 15746  0061C8  ECC3  F032         	call	_wait_ready	;wreg free
 15747  0061CC  0900               	iorlw	0
 15748  0061CE  A4D8               	btfss	status,2,c
 15749  0061D0  D002               	goto	l3809
 15750  0061D2  0E00               	movlw	0
 15751  0061D4  0012               	return	
 15752  0061D6                     l3809:
 15753                           
 15754                           ;diskio.c: 168: SPI1_Exchange8bit(token);
 15755  0061D6  5007               	movf	xmit_datablock@token,w,c
 15756  0061D8  EC79  F033         	call	_SPI1_Exchange8bit
 15757                           
 15758                           ;diskio.c: 169: if (token != 0xFD) {
 15759  0061DC  0EFD               	movlw	253
 15760  0061DE  1807               	xorwf	xmit_datablock@token,w,c
 15761  0061E0  B4D8               	btfsc	status,2,c
 15762  0061E2  D036               	goto	l3829
 15763                           
 15764                           ;diskio.c: 170: i = 512;
 15765  0061E4  0E02               	movlw	2
 15766  0061E6  6E09               	movwf	xmit_datablock@i+1,c
 15767  0061E8  0E00               	movlw	0
 15768  0061EA  6E08               	movwf	xmit_datablock@i,c
 15769  0061EC  D000               	goto	l3815
 15770  0061EE                     l3815:
 15771                           
 15772                           ;diskio.c: 172: SPI1_Exchange8bit(*buff++);
 15773  0061EE  C004  FFF6         	movff	xmit_datablock@buff,tblptrl
 15774  0061F2  C005  FFF7         	movff	xmit_datablock@buff+1,tblptrh
 15775  0061F6  C006  FFF8         	movff	xmit_datablock@buff+2,tblptru
 15776  0061FA  BAF8               	btfsc	tblptru,5,c
 15777  0061FC  D003               	bra	u4617
 15778  0061FE  0008               	tblrd		*
 15779  006200  50F5               	movf	tablat,w,c
 15780  006202  D005               	bra	u4610
 15781  006204                     u4617:
 15782  006204  CFF6 FFE9          	movff	tblptrl,fsr0l
 15783  006208  CFF7 FFEA          	movff	tblptrh,fsr0h
 15784  00620C  50EF               	movf	indf0,w,c
 15785  00620E                     u4610:
 15786  00620E  EC79  F033         	call	_SPI1_Exchange8bit
 15787  006212  0E01               	movlw	1
 15788  006214  2604               	addwf	xmit_datablock@buff,f,c
 15789  006216  0E00               	movlw	0
 15790  006218  2205               	addwfc	xmit_datablock@buff+1,f,c
 15791  00621A  0E00               	movlw	0
 15792  00621C  2206               	addwfc	xmit_datablock@buff+2,f,c
 15793                           
 15794                           ;diskio.c: 173: while (--i);
 15795  00621E  0608               	decf	xmit_datablock@i,f,c
 15796  006220  A0D8               	btfss	status,0,c
 15797  006222  0609               	decf	xmit_datablock@i+1,f,c
 15798  006224  5008               	movf	xmit_datablock@i,w,c
 15799  006226  1009               	iorwf	xmit_datablock@i+1,w,c
 15800  006228  A4D8               	btfss	status,2,c
 15801  00622A  D7E1               	goto	l3815
 15802                           
 15803                           ;diskio.c: 174: SPI1_Exchange8bit(0xFF);
 15804  00622C  0EFF               	movlw	255
 15805  00622E  EC79  F033         	call	_SPI1_Exchange8bit
 15806                           
 15807                           ;diskio.c: 175: SPI1_Exchange8bit(0xFF);
 15808  006232  0EFF               	movlw	255
 15809  006234  EC79  F033         	call	_SPI1_Exchange8bit
 15810                           
 15811                           ;diskio.c: 176: resp = SPI1_Exchange8bit(0xFF);
 15812  006238  0EFF               	movlw	255
 15813  00623A  EC79  F033         	call	_SPI1_Exchange8bit
 15814  00623E  6E0A               	movwf	xmit_datablock@resp,c
 15815                           
 15816                           ;diskio.c: 177: if ((resp & 0x1F) != 0x05)
 15817  006240  500A               	movf	xmit_datablock@resp,w,c
 15818  006242  0B1F               	andlw	31
 15819  006244  0A05               	xorlw	5
 15820  006246  B4D8               	btfsc	status,2,c
 15821  006248  D003               	goto	l3829
 15822                           
 15823                           ;diskio.c: 178: return 0;
 15824  00624A  0E00               	movlw	0
 15825  00624C  0012               	return	
 15826  00624E  D000               	goto	l3829
 15827  006250                     l3829:
 15828                           
 15829                           ;diskio.c: 179: }
 15830                           ;diskio.c: 181: return 1;
 15831  006250  0E01               	movlw	1
 15832  006252  0012               	return	
 15833  006254  0012               	return		;funcret
 15834  006256                     __end_of_xmit_datablock:
 15835                           	opt stack 0
 15836                           tblptru	equ	0xFF8
 15837                           tblptrh	equ	0xFF7
 15838                           tblptrl	equ	0xFF6
 15839                           tablat	equ	0xFF5
 15840                           prodh	equ	0xFF4
 15841                           prodl	equ	0xFF3
 15842                           indf0	equ	0xFEF
 15843                           postinc0	equ	0xFEE
 15844                           fsr0h	equ	0xFEA
 15845                           fsr0l	equ	0xFE9
 15846                           wreg	equ	0xFE8
 15847                           indf1	equ	0xFE7
 15848                           postinc1	equ	0xFE6
 15849                           postdec1	equ	0xFE5
 15850                           fsr1h	equ	0xFE2
 15851                           fsr1l	equ	0xFE1
 15852                           indf2	equ	0xFDF
 15853                           postinc2	equ	0xFDE
 15854                           postdec2	equ	0xFDD
 15855                           plusw2	equ	0xFDB
 15856                           fsr2h	equ	0xFDA
 15857                           fsr2l	equ	0xFD9
 15858                           status	equ	0xFD8
 15859                           
 15860 ;; *************** function _disk_read *****************
 15861 ;; Defined at:
 15862 ;;		line 372 in file "../../SD_Card_FatFs/diskio.c"
 15863 ;; Parameters:    Size  Location     Type
 15864 ;;  pdrv            1    wreg     unsigned char 
 15865 ;;  buff            2   16[COMRAM] PTR unsigned char 
 15866 ;;		 -> NULL(0), FatFs(558), 
 15867 ;;  sector          4   18[COMRAM] unsigned long 
 15868 ;;  count           2   22[COMRAM] unsigned int 
 15869 ;; Auto vars:     Size  Location     Type
 15870 ;;  pdrv            1   24[COMRAM] unsigned char 
 15871 ;;  cmd             1   27[COMRAM] unsigned char 
 15872 ;; Return value:  Size  Location     Type
 15873 ;;                  1    wreg      enum E38
 15874 ;; Registers used:
 15875 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15876 ;; Tracked objects:
 15877 ;;		On entry : 0/0
 15878 ;;		On exit  : 0/0
 15879 ;;		Unchanged: 0/0
 15880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15881 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15882 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15884 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15885 ;;Total ram usage:       12 bytes
 15886 ;; Hardware stack levels used:    1
 15887 ;; Hardware stack levels required when called:    5
 15888 ;; This function calls:
 15889 ;;		_deselect
 15890 ;;		_rcvr_datablock
 15891 ;;		_send_cmd
 15892 ;; This function is called by:
 15893 ;;		_move_window
 15894 ;;		_f_read
 15895 ;; This function uses a non-reentrant model
 15896 ;;
 15897                           
 15898                           	psect	text41
 15899  005C1A                     __ptext41:
 15900                           	opt stack 0
 15901  005C1A                     _disk_read:
 15902                           	opt stack 23
 15903                           
 15904                           ;incstack = 0
 15905                           ;disk_read@pdrv stored from wreg
 15906  005C1A  6E19               	movwf	disk_read@pdrv,c
 15907                           
 15908                           ;diskio.c: 379: BYTE cmd;
 15909                           ;diskio.c: 382: if (pdrv || !count) return RES_PARERR;
 15910  005C1C  5019               	movf	disk_read@pdrv,w,c
 15911  005C1E  A4D8               	btfss	status,2,c
 15912  005C20  D004               	goto	l3927
 15913  005C22  5017               	movf	disk_read@count,w,c
 15914  005C24  1018               	iorwf	disk_read@count+1,w,c
 15915  005C26  A4D8               	btfss	status,2,c
 15916  005C28  D002               	goto	l135
 15917  005C2A                     l3927:
 15918  005C2A  0E04               	movlw	4
 15919  005C2C  0012               	return	
 15920  005C2E                     l135:
 15921                           
 15922                           ;diskio.c: 383: if (Stat & 0x01) return RES_NOTRDY;
 15923  005C2E  0100               	movlb	0	; () banked
 15924  005C30  A1F7               	btfss	_Stat& (0+255),0,b
 15925  005C32  D002               	goto	l139
 15926                           
 15927                           ; BSR set to: 0
 15928  005C34  0E03               	movlw	3
 15929                           
 15930                           ; BSR set to: 0
 15931  005C36  0012               	return	
 15932  005C38                     l139:
 15933                           
 15934                           ; BSR set to: 0
 15935                           ;diskio.c: 385: if (!(CardType & 0x08)) sector *= 512;
 15936  005C38  0100               	movlb	0	; () banked
 15937  005C3A  B7D6               	btfsc	_CardType& (0+255),3,b
 15938  005C3C  D008               	goto	l140
 15939                           
 15940                           ; BSR set to: 0
 15941  005C3E  0E09               	movlw	9
 15942  005C40                     u4925:
 15943  005C40  90D8               	bcf	status,0,c
 15944  005C42  3613               	rlcf	disk_read@sector,f,c
 15945  005C44  3614               	rlcf	disk_read@sector+1,f,c
 15946  005C46  3615               	rlcf	disk_read@sector+2,f,c
 15947  005C48  3616               	rlcf	disk_read@sector+3,f,c
 15948  005C4A  2EE8               	decfsz	wreg,f,c
 15949  005C4C  D7F9               	goto	u4925
 15950  005C4E                     l140:
 15951                           
 15952                           ; BSR set to: 0
 15953                           ;diskio.c: 387: cmd = count > 1 ? (18) : (17);
 15954  005C4E  5018               	movf	disk_read@count+1,w,c
 15955  005C50  E108               	bnz	l3939
 15956  005C52  0E02               	movlw	2
 15957  005C54  5C17               	subwf	disk_read@count,w,c
 15958  005C56  B0D8               	btfsc	status,0,c
 15959  005C58  D004               	goto	l3939
 15960                           
 15961                           ; BSR set to: 0
 15962  005C5A  0E00               	movlw	0
 15963  005C5C  6E1B               	movwf	_disk_read$218+1,c
 15964  005C5E  0E11               	movlw	17
 15965  005C60  D003               	goto	L22
 15966  005C62                     l3939:
 15967                           
 15968                           ; BSR set to: 0
 15969  005C62  0E00               	movlw	0
 15970  005C64  6E1B               	movwf	_disk_read$218+1,c
 15971  005C66  0E12               	movlw	18
 15972  005C68                     L22:
 15973  005C68  6E1A               	movwf	_disk_read$218,c
 15974  005C6A  D000               	goto	l3941
 15975  005C6C                     l3941:
 15976                           
 15977                           ; BSR set to: 0
 15978  005C6C  C01A  F01C         	movff	_disk_read$218,disk_read@cmd
 15979                           
 15980                           ; BSR set to: 0
 15981                           ;diskio.c: 388: if (send_cmd(cmd, sector) == 0) {
 15982  005C70  C013  F00B         	movff	disk_read@sector,send_cmd@arg
 15983  005C74  C014  F00C         	movff	disk_read@sector+1,send_cmd@arg+1
 15984  005C78  C015  F00D         	movff	disk_read@sector+2,send_cmd@arg+2
 15985  005C7C  C016  F00E         	movff	disk_read@sector+3,send_cmd@arg+3
 15986  005C80  501C               	movf	disk_read@cmd,w,c
 15987  005C82  EC7D  F032         	call	_send_cmd
 15988  005C86  0900               	iorlw	0
 15989  005C88  A4D8               	btfss	status,2,c
 15990  005C8A  D028               	goto	l3955
 15991  005C8C                     l3945:
 15992                           
 15993                           ;diskio.c: 390: if (!rcvr_datablock(buff, 512)) break;
 15994  005C8C  C011  F002         	movff	disk_read@buff,rcvr_datablock@buff
 15995  005C90  C012  F003         	movff	disk_read@buff+1,rcvr_datablock@buff+1
 15996  005C94  0E02               	movlw	2
 15997  005C96  6E05               	movwf	rcvr_datablock@btr+1,c
 15998  005C98  0E00               	movlw	0
 15999  005C9A  6E04               	movwf	rcvr_datablock@btr,c
 16000  005C9C  ECB2  F031         	call	_rcvr_datablock	;wreg free
 16001  005CA0  0900               	iorlw	0
 16002  005CA2  B4D8               	btfsc	status,2,c
 16003  005CA4  D00B               	goto	l3951
 16004  005CA6  D001               	goto	l3949
 16005  005CA8  D009               	goto	l3951
 16006  005CAA                     l3949:
 16007                           
 16008                           ;diskio.c: 391: buff += 512;
 16009  005CAA  0E02               	movlw	2
 16010  005CAC  2612               	addwf	disk_read@buff+1,f,c
 16011                           
 16012                           ;diskio.c: 392: } while (--count);
 16013  005CAE  0617               	decf	disk_read@count,f,c
 16014  005CB0  A0D8               	btfss	status,0,c
 16015  005CB2  0618               	decf	disk_read@count+1,f,c
 16016  005CB4  5017               	movf	disk_read@count,w,c
 16017  005CB6  1018               	iorwf	disk_read@count+1,w,c
 16018  005CB8  A4D8               	btfss	status,2,c
 16019  005CBA  D7E8               	goto	l3945
 16020  005CBC                     l3951:
 16021                           
 16022                           ;diskio.c: 393: if (cmd == (18)) send_cmd((12), 0);
 16023  005CBC  0E12               	movlw	18
 16024  005CBE  181C               	xorwf	disk_read@cmd,w,c
 16025  005CC0  A4D8               	btfss	status,2,c
 16026  005CC2  D00C               	goto	l3955
 16027  005CC4  0E00               	movlw	0
 16028  005CC6  6E0B               	movwf	send_cmd@arg,c
 16029  005CC8  0E00               	movlw	0
 16030  005CCA  6E0C               	movwf	send_cmd@arg+1,c
 16031  005CCC  0E00               	movlw	0
 16032  005CCE  6E0D               	movwf	send_cmd@arg+2,c
 16033  005CD0  0E00               	movlw	0
 16034  005CD2  6E0E               	movwf	send_cmd@arg+3,c
 16035  005CD4  0E0C               	movlw	12
 16036  005CD6  EC7D  F032         	call	_send_cmd
 16037  005CDA  D000               	goto	l3955
 16038  005CDC                     l3955:
 16039                           
 16040                           ;diskio.c: 394: }
 16041                           ;diskio.c: 395: deselect();
 16042  005CDC  EC9E  F033         	call	_deselect	;wreg free
 16043                           
 16044                           ;diskio.c: 397: return count ? RES_ERROR : RES_OK;
 16045  005CE0  5017               	movf	disk_read@count,w,c
 16046  005CE2  1018               	iorwf	disk_read@count+1,w,c
 16047  005CE4  B4D8               	btfsc	status,2,c
 16048  005CE6  D002               	goto	u4980
 16049  005CE8  0E01               	movlw	1
 16050  005CEA  0012               	return	
 16051  005CEC                     u4980:
 16052  005CEC  0E00               	movlw	0
 16053  005CEE  0012               	return	
 16054  005CF0  0012               	return		;funcret
 16055  005CF2                     __end_of_disk_read:
 16056                           	opt stack 0
 16057                           tblptru	equ	0xFF8
 16058                           tblptrh	equ	0xFF7
 16059                           tblptrl	equ	0xFF6
 16060                           tablat	equ	0xFF5
 16061                           prodh	equ	0xFF4
 16062                           prodl	equ	0xFF3
 16063                           indf0	equ	0xFEF
 16064                           postinc0	equ	0xFEE
 16065                           fsr0h	equ	0xFEA
 16066                           fsr0l	equ	0xFE9
 16067                           wreg	equ	0xFE8
 16068                           indf1	equ	0xFE7
 16069                           postinc1	equ	0xFE6
 16070                           postdec1	equ	0xFE5
 16071                           fsr1h	equ	0xFE2
 16072                           fsr1l	equ	0xFE1
 16073                           indf2	equ	0xFDF
 16074                           postinc2	equ	0xFDE
 16075                           postdec2	equ	0xFDD
 16076                           plusw2	equ	0xFDB
 16077                           fsr2h	equ	0xFDA
 16078                           fsr2l	equ	0xFD9
 16079                           status	equ	0xFD8
 16080                           
 16081 ;; *************** function _send_cmd *****************
 16082 ;; Defined at:
 16083 ;;		line 233 in file "../../SD_Card_FatFs/diskio.c"
 16084 ;; Parameters:    Size  Location     Type
 16085 ;;  cmd             1    wreg     unsigned char 
 16086 ;;  arg             4   10[COMRAM] unsigned long 
 16087 ;; Auto vars:     Size  Location     Type
 16088 ;;  cmd             1   14[COMRAM] unsigned char 
 16089 ;;  res             1   15[COMRAM] unsigned char 
 16090 ;; Return value:  Size  Location     Type
 16091 ;;                  1    wreg      unsigned char 
 16092 ;; Registers used:
 16093 ;;		wreg, status,2, status,0, cstack
 16094 ;; Tracked objects:
 16095 ;;		On entry : 0/0
 16096 ;;		On exit  : 0/0
 16097 ;;		Unchanged: 0/0
 16098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16099 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16100 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16102 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16103 ;;Total ram usage:        6 bytes
 16104 ;; Hardware stack levels used:    1
 16105 ;; Hardware stack levels required when called:    4
 16106 ;; This function calls:
 16107 ;;		___send_cmd
 16108 ;; This function is called by:
 16109 ;;		_disk_initialize
 16110 ;;		_disk_read
 16111 ;;		_disk_write
 16112 ;;		_disk_ioctl
 16113 ;; This function uses a non-reentrant model
 16114 ;;
 16115                           
 16116                           	psect	text42
 16117  0064FA                     __ptext42:
 16118                           	opt stack 0
 16119  0064FA                     _send_cmd:
 16120                           	opt stack 23
 16121                           
 16122                           ;incstack = 0
 16123                           ;send_cmd@cmd stored from wreg
 16124  0064FA  6E0F               	movwf	send_cmd@cmd,c
 16125                           
 16126                           ;diskio.c: 241: BYTE res;
 16127                           ;diskio.c: 244: if (cmd & 0x80) {
 16128  0064FC  AE0F               	btfss	send_cmd@cmd,7,c
 16129  0064FE  D013               	goto	l3845
 16130                           
 16131                           ;diskio.c: 245: cmd &= 0x7F;
 16132  006500  9E0F               	bcf	send_cmd@cmd,7,c
 16133                           
 16134                           ;diskio.c: 247: res = __send_cmd((55), 0);
 16135  006502  0E00               	movlw	0
 16136  006504  6E04               	movwf	___send_cmd@arg,c
 16137  006506  0E00               	movlw	0
 16138  006508  6E05               	movwf	___send_cmd@arg+1,c
 16139  00650A  0E00               	movlw	0
 16140  00650C  6E06               	movwf	___send_cmd@arg+2,c
 16141  00650E  0E00               	movlw	0
 16142  006510  6E07               	movwf	___send_cmd@arg+3,c
 16143  006512  0E37               	movlw	55
 16144  006514  EC9C  F030         	call	___send_cmd
 16145  006518  6E10               	movwf	send_cmd@res,c
 16146                           
 16147                           ;diskio.c: 251: if (res > 1) return res;
 16148  00651A  0E01               	movlw	1
 16149  00651C  6410               	cpfsgt	send_cmd@res,c
 16150  00651E  D003               	goto	l3845
 16151  006520  5010               	movf	send_cmd@res,w,c
 16152  006522  0012               	return	
 16153  006524  D000               	goto	l3845
 16154  006526                     l3845:
 16155                           
 16156                           ;diskio.c: 252: }
 16157                           ;diskio.c: 255: return __send_cmd(cmd, arg);
 16158  006526  C00B  F004         	movff	send_cmd@arg,___send_cmd@arg
 16159  00652A  C00C  F005         	movff	send_cmd@arg+1,___send_cmd@arg+1
 16160  00652E  C00D  F006         	movff	send_cmd@arg+2,___send_cmd@arg+2
 16161  006532  C00E  F007         	movff	send_cmd@arg+3,___send_cmd@arg+3
 16162  006536  500F               	movf	send_cmd@cmd,w,c
 16163  006538  EC9C  F030         	call	___send_cmd
 16164  00653C  0012               	return	
 16165  00653E  0012               	return		;funcret
 16166  006540                     __end_of_send_cmd:
 16167                           	opt stack 0
 16168                           tblptru	equ	0xFF8
 16169                           tblptrh	equ	0xFF7
 16170                           tblptrl	equ	0xFF6
 16171                           tablat	equ	0xFF5
 16172                           prodh	equ	0xFF4
 16173                           prodl	equ	0xFF3
 16174                           indf0	equ	0xFEF
 16175                           postinc0	equ	0xFEE
 16176                           fsr0h	equ	0xFEA
 16177                           fsr0l	equ	0xFE9
 16178                           wreg	equ	0xFE8
 16179                           indf1	equ	0xFE7
 16180                           postinc1	equ	0xFE6
 16181                           postdec1	equ	0xFE5
 16182                           fsr1h	equ	0xFE2
 16183                           fsr1l	equ	0xFE1
 16184                           indf2	equ	0xFDF
 16185                           postinc2	equ	0xFDE
 16186                           postdec2	equ	0xFDD
 16187                           plusw2	equ	0xFDB
 16188                           fsr2h	equ	0xFDA
 16189                           fsr2l	equ	0xFD9
 16190                           status	equ	0xFD8
 16191                           
 16192 ;; *************** function ___send_cmd *****************
 16193 ;; Defined at:
 16194 ;;		line 196 in file "../../SD_Card_FatFs/diskio.c"
 16195 ;; Parameters:    Size  Location     Type
 16196 ;;  cmd             1    wreg     unsigned char 
 16197 ;;  arg             4    3[COMRAM] unsigned long 
 16198 ;; Auto vars:     Size  Location     Type
 16199 ;;  cmd             1    9[COMRAM] unsigned char 
 16200 ;;  n               1    8[COMRAM] unsigned char 
 16201 ;;  res             1    7[COMRAM] unsigned char 
 16202 ;; Return value:  Size  Location     Type
 16203 ;;                  1    wreg      unsigned char 
 16204 ;; Registers used:
 16205 ;;		wreg, status,2, status,0, cstack
 16206 ;; Tracked objects:
 16207 ;;		On entry : 0/0
 16208 ;;		On exit  : 0/0
 16209 ;;		Unchanged: 0/0
 16210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16211 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16212 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16214 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16215 ;;Total ram usage:        7 bytes
 16216 ;; Hardware stack levels used:    1
 16217 ;; Hardware stack levels required when called:    3
 16218 ;; This function calls:
 16219 ;;		_SPI1_Exchange8bit
 16220 ;;		_deselect
 16221 ;;		_select
 16222 ;; This function is called by:
 16223 ;;		_send_cmd
 16224 ;; This function uses a non-reentrant model
 16225 ;;
 16226                           
 16227                           	psect	text43
 16228  006138                     __ptext43:
 16229                           	opt stack 0
 16230  006138                     ___send_cmd:
 16231                           	opt stack 23
 16232                           
 16233                           ;incstack = 0
 16234                           ;___send_cmd@cmd stored from wreg
 16235  006138  6E0A               	movwf	___send_cmd@cmd,c
 16236                           
 16237                           ;diskio.c: 201: BYTE n, res;
 16238                           ;diskio.c: 205: if (cmd != (12)) {
 16239  00613A  0E0C               	movlw	12
 16240  00613C  180A               	xorwf	___send_cmd@cmd,w,c
 16241  00613E  B4D8               	btfsc	status,2,c
 16242  006140  D00A               	goto	l3765
 16243                           
 16244                           ;diskio.c: 206: deselect();
 16245  006142  EC9E  F033         	call	_deselect	;wreg free
 16246                           
 16247                           ;diskio.c: 207: if (!select()) return 0xFF;
 16248  006146  EC5E  F033         	call	_select	;wreg free
 16249  00614A  0900               	iorlw	0
 16250  00614C  A4D8               	btfss	status,2,c
 16251  00614E  D003               	goto	l3765
 16252  006150  0EFF               	movlw	255
 16253  006152  0012               	return	
 16254  006154  D000               	goto	l3765
 16255  006156                     l3765:
 16256                           
 16257                           ;diskio.c: 208: }
 16258                           ;diskio.c: 211: SPI1_Exchange8bit(0x40 | cmd);
 16259  006156  500A               	movf	___send_cmd@cmd,w,c
 16260  006158  0940               	iorlw	64
 16261  00615A  EC79  F033         	call	_SPI1_Exchange8bit
 16262                           
 16263                           ;diskio.c: 212: SPI1_Exchange8bit((BYTE)(arg >> 24));
 16264  00615E  5007               	movf	___send_cmd@arg+3,w,c
 16265  006160  EC79  F033         	call	_SPI1_Exchange8bit
 16266                           
 16267                           ;diskio.c: 213: SPI1_Exchange8bit((BYTE)(arg >> 16));
 16268  006164  5006               	movf	___send_cmd@arg+2,w,c
 16269  006166  EC79  F033         	call	_SPI1_Exchange8bit
 16270                           
 16271                           ;diskio.c: 214: SPI1_Exchange8bit((BYTE)(arg >> 8));
 16272  00616A  5005               	movf	___send_cmd@arg+1,w,c
 16273  00616C  EC79  F033         	call	_SPI1_Exchange8bit
 16274                           
 16275                           ;diskio.c: 215: SPI1_Exchange8bit((BYTE)arg);
 16276  006170  5004               	movf	___send_cmd@arg,w,c
 16277  006172  EC79  F033         	call	_SPI1_Exchange8bit
 16278                           
 16279                           ;diskio.c: 216: n = 0x01;
 16280  006176  0E01               	movlw	1
 16281  006178  6E09               	movwf	___send_cmd@n,c
 16282                           
 16283                           ;diskio.c: 217: if (cmd == (0)) n = 0x95;
 16284  00617A  500A               	movf	___send_cmd@cmd,w,c
 16285  00617C  A4D8               	btfss	status,2,c
 16286  00617E  D003               	goto	l3781
 16287  006180  0E95               	movlw	149
 16288  006182  6E09               	movwf	___send_cmd@n,c
 16289  006184  D000               	goto	l3781
 16290  006186                     l3781:
 16291                           
 16292                           ;diskio.c: 218: if (cmd == (8)) n = 0x87;
 16293  006186  0E08               	movlw	8
 16294  006188  180A               	xorwf	___send_cmd@cmd,w,c
 16295  00618A  A4D8               	btfss	status,2,c
 16296  00618C  D003               	goto	l3785
 16297  00618E  0E87               	movlw	135
 16298  006190  6E09               	movwf	___send_cmd@n,c
 16299  006192  D000               	goto	l3785
 16300  006194                     l3785:
 16301                           
 16302                           ;diskio.c: 219: SPI1_Exchange8bit(n);
 16303  006194  5009               	movf	___send_cmd@n,w,c
 16304  006196  EC79  F033         	call	_SPI1_Exchange8bit
 16305                           
 16306                           ;diskio.c: 222: if (cmd == (12)) SPI1_Exchange8bit(0xFF);
 16307  00619A  0E0C               	movlw	12
 16308  00619C  180A               	xorwf	___send_cmd@cmd,w,c
 16309  00619E  A4D8               	btfss	status,2,c
 16310  0061A0  D004               	goto	l3791
 16311  0061A2  0EFF               	movlw	255
 16312  0061A4  EC79  F033         	call	_SPI1_Exchange8bit
 16313  0061A8  D000               	goto	l3791
 16314  0061AA                     l3791:
 16315                           
 16316                           ;diskio.c: 223: n = 10;
 16317  0061AA  0E0A               	movlw	10
 16318  0061AC  6E09               	movwf	___send_cmd@n,c
 16319  0061AE  D000               	goto	l3793
 16320  0061B0                     l3793:
 16321                           
 16322                           ;diskio.c: 225: res = SPI1_Exchange8bit(0xFF);
 16323  0061B0  0EFF               	movlw	255
 16324  0061B2  EC79  F033         	call	_SPI1_Exchange8bit
 16325  0061B6  6E08               	movwf	___send_cmd@res,c
 16326                           
 16327                           ;diskio.c: 226: while ((res & 0x80) && --n);
 16328  0061B8  AE08               	btfss	___send_cmd@res,7,c
 16329  0061BA  D003               	goto	l3799
 16330  0061BC  2E09               	decfsz	___send_cmd@n,f,c
 16331  0061BE  D7F8               	goto	l3793
 16332  0061C0  D000               	goto	l3799
 16333  0061C2                     l3799:
 16334                           
 16335                           ;diskio.c: 228: return res;
 16336  0061C2  5008               	movf	___send_cmd@res,w,c
 16337  0061C4  0012               	return	
 16338  0061C6  0012               	return		;funcret
 16339  0061C8                     __end_of___send_cmd:
 16340                           	opt stack 0
 16341                           tblptru	equ	0xFF8
 16342                           tblptrh	equ	0xFF7
 16343                           tblptrl	equ	0xFF6
 16344                           tablat	equ	0xFF5
 16345                           prodh	equ	0xFF4
 16346                           prodl	equ	0xFF3
 16347                           indf0	equ	0xFEF
 16348                           postinc0	equ	0xFEE
 16349                           fsr0h	equ	0xFEA
 16350                           fsr0l	equ	0xFE9
 16351                           wreg	equ	0xFE8
 16352                           indf1	equ	0xFE7
 16353                           postinc1	equ	0xFE6
 16354                           postdec1	equ	0xFE5
 16355                           fsr1h	equ	0xFE2
 16356                           fsr1l	equ	0xFE1
 16357                           indf2	equ	0xFDF
 16358                           postinc2	equ	0xFDE
 16359                           postdec2	equ	0xFDD
 16360                           plusw2	equ	0xFDB
 16361                           fsr2h	equ	0xFDA
 16362                           fsr2l	equ	0xFD9
 16363                           status	equ	0xFD8
 16364                           
 16365 ;; *************** function _select *****************
 16366 ;; Defined at:
 16367 ;;		line 107 in file "../../SD_Card_FatFs/diskio.c"
 16368 ;; Parameters:    Size  Location     Type
 16369 ;;		None
 16370 ;; Auto vars:     Size  Location     Type
 16371 ;;		None
 16372 ;; Return value:  Size  Location     Type
 16373 ;;                  1    wreg      unsigned char 
 16374 ;; Registers used:
 16375 ;;		wreg, status,2, status,0, cstack
 16376 ;; Tracked objects:
 16377 ;;		On entry : 0/0
 16378 ;;		On exit  : 0/0
 16379 ;;		Unchanged: 0/0
 16380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16385 ;;Total ram usage:        0 bytes
 16386 ;; Hardware stack levels used:    1
 16387 ;; Hardware stack levels required when called:    2
 16388 ;; This function calls:
 16389 ;;		_SPI1_Exchange8bit
 16390 ;;		_deselect
 16391 ;;		_wait_ready
 16392 ;; This function is called by:
 16393 ;;		___send_cmd
 16394 ;;		_disk_ioctl
 16395 ;; This function uses a non-reentrant model
 16396 ;;
 16397                           
 16398                           	psect	text44
 16399  0066BC                     __ptext44:
 16400                           	opt stack 0
 16401  0066BC                     _select:
 16402                           	opt stack 23
 16403                           
 16404                           ;incstack = 0
 16405                           ;diskio.c: 109: do { LATC0 = 0; } while(0);
 16406  0066BC  908B               	bcf	3979,0,c	;volatile
 16407  0066BE  D000               	goto	l3741
 16408  0066C0                     l3741:
 16409                           
 16410                           ;diskio.c: 110: SPI1_Exchange8bit(0xFF);
 16411  0066C0  0EFF               	movlw	255
 16412  0066C2  EC79  F033         	call	_SPI1_Exchange8bit
 16413                           
 16414                           ;diskio.c: 111: if (wait_ready()) return 1;
 16415  0066C6  ECC3  F032         	call	_wait_ready	;wreg free
 16416  0066CA  0900               	iorlw	0
 16417  0066CC  B4D8               	btfsc	status,2,c
 16418  0066CE  D002               	goto	l3749
 16419  0066D0  0E01               	movlw	1
 16420  0066D2  0012               	return	
 16421  0066D4                     l3749:
 16422                           
 16423                           ;diskio.c: 113: deselect();
 16424  0066D4  EC9E  F033         	call	_deselect	;wreg free
 16425                           
 16426                           ;diskio.c: 114: return 0;
 16427  0066D8  0E00               	movlw	0
 16428  0066DA  0012               	return	
 16429  0066DC  0012               	return		;funcret
 16430  0066DE                     __end_of_select:
 16431                           	opt stack 0
 16432                           tblptru	equ	0xFF8
 16433                           tblptrh	equ	0xFF7
 16434                           tblptrl	equ	0xFF6
 16435                           tablat	equ	0xFF5
 16436                           prodh	equ	0xFF4
 16437                           prodl	equ	0xFF3
 16438                           indf0	equ	0xFEF
 16439                           postinc0	equ	0xFEE
 16440                           fsr0h	equ	0xFEA
 16441                           fsr0l	equ	0xFE9
 16442                           wreg	equ	0xFE8
 16443                           indf1	equ	0xFE7
 16444                           postinc1	equ	0xFE6
 16445                           postdec1	equ	0xFE5
 16446                           fsr1h	equ	0xFE2
 16447                           fsr1l	equ	0xFE1
 16448                           indf2	equ	0xFDF
 16449                           postinc2	equ	0xFDE
 16450                           postdec2	equ	0xFDD
 16451                           plusw2	equ	0xFDB
 16452                           fsr2h	equ	0xFDA
 16453                           fsr2l	equ	0xFD9
 16454                           status	equ	0xFD8
 16455                           
 16456 ;; *************** function _wait_ready *****************
 16457 ;; Defined at:
 16458 ;;		line 74 in file "../../SD_Card_FatFs/diskio.c"
 16459 ;; Parameters:    Size  Location     Type
 16460 ;;		None
 16461 ;; Auto vars:     Size  Location     Type
 16462 ;;  tmr             2    1[COMRAM] unsigned int 
 16463 ;; Return value:  Size  Location     Type
 16464 ;;                  1    wreg      unsigned char 
 16465 ;; Registers used:
 16466 ;;		wreg, status,2, status,0, cstack
 16467 ;; Tracked objects:
 16468 ;;		On entry : 0/0
 16469 ;;		On exit  : 0/0
 16470 ;;		Unchanged: 0/0
 16471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16473 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16475 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16476 ;;Total ram usage:        2 bytes
 16477 ;; Hardware stack levels used:    1
 16478 ;; Hardware stack levels required when called:    1
 16479 ;; This function calls:
 16480 ;;		_SPI1_Exchange8bit
 16481 ;; This function is called by:
 16482 ;;		_select
 16483 ;;		_xmit_datablock
 16484 ;; This function uses a non-reentrant model
 16485 ;;
 16486                           
 16487                           	psect	text45
 16488  006586                     __ptext45:
 16489                           	opt stack 0
 16490  006586                     _wait_ready:
 16491                           	opt stack 25
 16492                           
 16493                           ;diskio.c: 76: UINT tmr;
 16494                           ;diskio.c: 79: for (tmr = 5000; tmr; tmr--) {
 16495                           
 16496                           ;incstack = 0
 16497  006586  0E13               	movlw	19
 16498  006588  6E03               	movwf	wait_ready@tmr+1,c
 16499  00658A  0E88               	movlw	136
 16500  00658C  6E02               	movwf	wait_ready@tmr,c
 16501  00658E  D00F               	goto	l43
 16502  006590                     l3727:
 16503                           
 16504                           ;diskio.c: 80: if (SPI1_Exchange8bit(0xFF) == 0xFF) break;
 16505  006590  0EFF               	movlw	255
 16506  006592  EC79  F033         	call	_SPI1_Exchange8bit
 16507  006596  0AFF               	xorlw	255
 16508  006598  B4D8               	btfsc	status,2,c
 16509  00659A  D00D               	goto	l3735
 16510  00659C  D001               	goto	l3731
 16511  00659E  D00B               	goto	l3735
 16512  0065A0                     l3731:
 16513                           
 16514                           ;diskio.c: 81: _delay((unsigned long)((100)*(16000000/4000000.0)));
 16515  0065A0  0E85               	movlw	133
 16516  0065A2                     u8957:
 16517  0065A2  2EE8               	decfsz	wreg,f,c
 16518  0065A4  D7FE               	goto	u8957
 16519  0065A6  F000               	nop	
 16520  0065A8  0602               	decf	wait_ready@tmr,f,c
 16521  0065AA  A0D8               	btfss	status,0,c
 16522  0065AC  0603               	decf	wait_ready@tmr+1,f,c
 16523  0065AE                     l43:
 16524  0065AE  5002               	movf	wait_ready@tmr,w,c
 16525  0065B0  1003               	iorwf	wait_ready@tmr+1,w,c
 16526  0065B2  A4D8               	btfss	status,2,c
 16527  0065B4  D7ED               	goto	l3727
 16528  0065B6                     l3735:
 16529                           
 16530                           ;diskio.c: 82: }
 16531                           ;diskio.c: 84: return tmr ? 1 : 0;
 16532  0065B6  5002               	movf	wait_ready@tmr,w,c
 16533  0065B8  1003               	iorwf	wait_ready@tmr+1,w,c
 16534  0065BA  B4D8               	btfsc	status,2,c
 16535  0065BC  D002               	goto	u4500
 16536  0065BE  0E01               	movlw	1
 16537  0065C0  0012               	return	
 16538  0065C2                     u4500:
 16539  0065C2  0E00               	movlw	0
 16540  0065C4  0012               	return	
 16541  0065C6  0012               	return		;funcret
 16542  0065C8                     __end_of_wait_ready:
 16543                           	opt stack 0
 16544                           tblptru	equ	0xFF8
 16545                           tblptrh	equ	0xFF7
 16546                           tblptrl	equ	0xFF6
 16547                           tablat	equ	0xFF5
 16548                           prodh	equ	0xFF4
 16549                           prodl	equ	0xFF3
 16550                           indf0	equ	0xFEF
 16551                           postinc0	equ	0xFEE
 16552                           fsr0h	equ	0xFEA
 16553                           fsr0l	equ	0xFE9
 16554                           wreg	equ	0xFE8
 16555                           indf1	equ	0xFE7
 16556                           postinc1	equ	0xFE6
 16557                           postdec1	equ	0xFE5
 16558                           fsr1h	equ	0xFE2
 16559                           fsr1l	equ	0xFE1
 16560                           indf2	equ	0xFDF
 16561                           postinc2	equ	0xFDE
 16562                           postdec2	equ	0xFDD
 16563                           plusw2	equ	0xFDB
 16564                           fsr2h	equ	0xFDA
 16565                           fsr2l	equ	0xFD9
 16566                           status	equ	0xFD8
 16567                           
 16568 ;; *************** function _deselect *****************
 16569 ;; Defined at:
 16570 ;;		line 94 in file "../../SD_Card_FatFs/diskio.c"
 16571 ;; Parameters:    Size  Location     Type
 16572 ;;		None
 16573 ;; Auto vars:     Size  Location     Type
 16574 ;;		None
 16575 ;; Return value:  Size  Location     Type
 16576 ;;		None               void
 16577 ;; Registers used:
 16578 ;;		wreg, status,2, cstack
 16579 ;; Tracked objects:
 16580 ;;		On entry : 0/0
 16581 ;;		On exit  : 0/0
 16582 ;;		Unchanged: 0/0
 16583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16587 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16588 ;;Total ram usage:        0 bytes
 16589 ;; Hardware stack levels used:    1
 16590 ;; Hardware stack levels required when called:    1
 16591 ;; This function calls:
 16592 ;;		_SPI1_Exchange8bit
 16593 ;; This function is called by:
 16594 ;;		_select
 16595 ;;		___send_cmd
 16596 ;;		_disk_initialize
 16597 ;;		_disk_read
 16598 ;;		_disk_write
 16599 ;;		_disk_ioctl
 16600 ;; This function uses a non-reentrant model
 16601 ;;
 16602                           
 16603                           	psect	text46
 16604  00673C                     __ptext46:
 16605                           	opt stack 0
 16606  00673C                     _deselect:
 16607                           	opt stack 23
 16608                           
 16609                           ;incstack = 0
 16610                           ;diskio.c: 96: do { LATC0 = 1; } while(0);
 16611  00673C  808B               	bsf	3979,0,c	;volatile
 16612  00673E  D000               	goto	l3739
 16613  006740                     l3739:
 16614                           
 16615                           ;diskio.c: 97: SPI1_Exchange8bit(0xFF);
 16616  006740  0EFF               	movlw	255
 16617  006742  EC79  F033         	call	_SPI1_Exchange8bit
 16618  006746  0012               	return		;funcret
 16619  006748                     __end_of_deselect:
 16620                           	opt stack 0
 16621                           tblptru	equ	0xFF8
 16622                           tblptrh	equ	0xFF7
 16623                           tblptrl	equ	0xFF6
 16624                           tablat	equ	0xFF5
 16625                           prodh	equ	0xFF4
 16626                           prodl	equ	0xFF3
 16627                           indf0	equ	0xFEF
 16628                           postinc0	equ	0xFEE
 16629                           fsr0h	equ	0xFEA
 16630                           fsr0l	equ	0xFE9
 16631                           wreg	equ	0xFE8
 16632                           indf1	equ	0xFE7
 16633                           postinc1	equ	0xFE6
 16634                           postdec1	equ	0xFE5
 16635                           fsr1h	equ	0xFE2
 16636                           fsr1l	equ	0xFE1
 16637                           indf2	equ	0xFDF
 16638                           postinc2	equ	0xFDE
 16639                           postdec2	equ	0xFDD
 16640                           plusw2	equ	0xFDB
 16641                           fsr2h	equ	0xFDA
 16642                           fsr2l	equ	0xFD9
 16643                           status	equ	0xFD8
 16644                           
 16645 ;; *************** function _rcvr_datablock *****************
 16646 ;; Defined at:
 16647 ;;		line 124 in file "../../SD_Card_FatFs/diskio.c"
 16648 ;; Parameters:    Size  Location     Type
 16649 ;;  buff            2    1[COMRAM] PTR unsigned char 
 16650 ;;		 -> NULL(0), disk_ioctl@csd(16), FatFs(558), 
 16651 ;;  btr             2    3[COMRAM] unsigned int 
 16652 ;; Auto vars:     Size  Location     Type
 16653 ;;  tmr             2    5[COMRAM] unsigned int 
 16654 ;;  token           1    7[COMRAM] unsigned char 
 16655 ;; Return value:  Size  Location     Type
 16656 ;;                  1    wreg      unsigned char 
 16657 ;; Registers used:
 16658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16659 ;; Tracked objects:
 16660 ;;		On entry : 0/0
 16661 ;;		On exit  : 0/0
 16662 ;;		Unchanged: 0/0
 16663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16664 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16665 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16667 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16668 ;;Total ram usage:        7 bytes
 16669 ;; Hardware stack levels used:    1
 16670 ;; Hardware stack levels required when called:    1
 16671 ;; This function calls:
 16672 ;;		_SPI1_Exchange8bit
 16673 ;; This function is called by:
 16674 ;;		_disk_read
 16675 ;;		_disk_ioctl
 16676 ;; This function uses a non-reentrant model
 16677 ;;
 16678                           
 16679                           	psect	text47
 16680  006364                     __ptext47:
 16681                           	opt stack 0
 16682  006364                     _rcvr_datablock:
 16683                           	opt stack 26
 16684                           
 16685                           ;diskio.c: 129: BYTE token;
 16686                           ;diskio.c: 130: UINT tmr;
 16687                           ;diskio.c: 133: for (tmr = 2000; tmr; tmr--) {
 16688                           
 16689                           ;incstack = 0
 16690  006364  0E07               	movlw	7
 16691  006366  6E07               	movwf	rcvr_datablock@tmr+1,c
 16692  006368  0ED0               	movlw	208
 16693  00636A  6E06               	movwf	rcvr_datablock@tmr,c
 16694  00636C  D010               	goto	l61
 16695  00636E                     l3851:
 16696                           
 16697                           ;diskio.c: 134: token = SPI1_Exchange8bit(0xFF);
 16698  00636E  0EFF               	movlw	255
 16699  006370  EC79  F033         	call	_SPI1_Exchange8bit
 16700  006374  6E08               	movwf	rcvr_datablock@token,c
 16701                           
 16702                           ;diskio.c: 135: if (token != 0xFF) break;
 16703  006376  2808               	incf	rcvr_datablock@token,w,c
 16704  006378  A4D8               	btfss	status,2,c
 16705  00637A  D00D               	goto	l3861
 16706  00637C  D001               	goto	l3857
 16707  00637E  D00B               	goto	l3861
 16708  006380                     l3857:
 16709                           
 16710                           ;diskio.c: 136: _delay((unsigned long)((100)*(16000000/4000000.0)));
 16711  006380  0E85               	movlw	133
 16712  006382                     u8967:
 16713  006382  2EE8               	decfsz	wreg,f,c
 16714  006384  D7FE               	goto	u8967
 16715  006386  F000               	nop	
 16716  006388  0606               	decf	rcvr_datablock@tmr,f,c
 16717  00638A  A0D8               	btfss	status,0,c
 16718  00638C  0607               	decf	rcvr_datablock@tmr+1,f,c
 16719  00638E                     l61:
 16720  00638E  5006               	movf	rcvr_datablock@tmr,w,c
 16721  006390  1007               	iorwf	rcvr_datablock@tmr+1,w,c
 16722  006392  A4D8               	btfss	status,2,c
 16723  006394  D7EC               	goto	l3851
 16724  006396                     l3861:
 16725                           
 16726                           ;diskio.c: 137: }
 16727                           ;diskio.c: 138: if (token != 0xFE) return 0;
 16728  006396  0EFE               	movlw	254
 16729  006398  1808               	xorwf	rcvr_datablock@token,w,c
 16730  00639A  B4D8               	btfsc	status,2,c
 16731  00639C  D003               	goto	l3867
 16732  00639E  0E00               	movlw	0
 16733  0063A0  0012               	return	
 16734  0063A2  D000               	goto	l3867
 16735  0063A4                     l3867:
 16736                           
 16737                           ;diskio.c: 141: *buff++ = SPI1_Exchange8bit(0xFF);
 16738  0063A4  0EFF               	movlw	255
 16739  0063A6  EC79  F033         	call	_SPI1_Exchange8bit
 16740  0063AA  C002  FFD9         	movff	rcvr_datablock@buff,fsr2l
 16741  0063AE  C003  FFDA         	movff	rcvr_datablock@buff+1,fsr2h
 16742  0063B2  6EDF               	movwf	indf2,c
 16743  0063B4  4A02               	infsnz	rcvr_datablock@buff,f,c
 16744  0063B6  2A03               	incf	rcvr_datablock@buff+1,f,c
 16745                           
 16746                           ;diskio.c: 142: while (--btr);
 16747  0063B8  0604               	decf	rcvr_datablock@btr,f,c
 16748  0063BA  A0D8               	btfss	status,0,c
 16749  0063BC  0605               	decf	rcvr_datablock@btr+1,f,c
 16750  0063BE  5004               	movf	rcvr_datablock@btr,w,c
 16751  0063C0  1005               	iorwf	rcvr_datablock@btr+1,w,c
 16752  0063C2  A4D8               	btfss	status,2,c
 16753  0063C4  D7EF               	goto	l3867
 16754                           
 16755                           ;diskio.c: 143: SPI1_Exchange8bit(0xFF);
 16756  0063C6  0EFF               	movlw	255
 16757  0063C8  EC79  F033         	call	_SPI1_Exchange8bit
 16758                           
 16759                           ;diskio.c: 144: SPI1_Exchange8bit(0xFF);
 16760  0063CC  0EFF               	movlw	255
 16761  0063CE  EC79  F033         	call	_SPI1_Exchange8bit
 16762                           
 16763                           ;diskio.c: 146: return 1;
 16764  0063D2  0E01               	movlw	1
 16765  0063D4  0012               	return	
 16766  0063D6  0012               	return		;funcret
 16767  0063D8                     __end_of_rcvr_datablock:
 16768                           	opt stack 0
 16769                           tblptru	equ	0xFF8
 16770                           tblptrh	equ	0xFF7
 16771                           tblptrl	equ	0xFF6
 16772                           tablat	equ	0xFF5
 16773                           prodh	equ	0xFF4
 16774                           prodl	equ	0xFF3
 16775                           indf0	equ	0xFEF
 16776                           postinc0	equ	0xFEE
 16777                           fsr0h	equ	0xFEA
 16778                           fsr0l	equ	0xFE9
 16779                           wreg	equ	0xFE8
 16780                           indf1	equ	0xFE7
 16781                           postinc1	equ	0xFE6
 16782                           postdec1	equ	0xFE5
 16783                           fsr1h	equ	0xFE2
 16784                           fsr1l	equ	0xFE1
 16785                           indf2	equ	0xFDF
 16786                           postinc2	equ	0xFDE
 16787                           postdec2	equ	0xFDD
 16788                           plusw2	equ	0xFDB
 16789                           fsr2h	equ	0xFDA
 16790                           fsr2l	equ	0xFD9
 16791                           status	equ	0xFD8
 16792                           
 16793 ;; *************** function _SPI1_Exchange8bit *****************
 16794 ;; Defined at:
 16795 ;;		line 90 in file "mcc_generated_files/spi1.c"
 16796 ;; Parameters:    Size  Location     Type
 16797 ;;  data            1    wreg     unsigned char 
 16798 ;; Auto vars:     Size  Location     Type
 16799 ;;  data            1    0[COMRAM] unsigned char 
 16800 ;; Return value:  Size  Location     Type
 16801 ;;                  1    wreg      unsigned char 
 16802 ;; Registers used:
 16803 ;;		wreg, status,2
 16804 ;; Tracked objects:
 16805 ;;		On entry : 0/0
 16806 ;;		On exit  : 0/0
 16807 ;;		Unchanged: 0/0
 16808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16810 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16812 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16813 ;;Total ram usage:        1 bytes
 16814 ;; Hardware stack levels used:    1
 16815 ;; This function calls:
 16816 ;;		Nothing
 16817 ;; This function is called by:
 16818 ;;		_wait_ready
 16819 ;;		_deselect
 16820 ;;		_select
 16821 ;;		_rcvr_datablock
 16822 ;;		_xmit_datablock
 16823 ;;		___send_cmd
 16824 ;;		_disk_initialize
 16825 ;;		_disk_ioctl
 16826 ;;		_SPI1_Exchange8bitBuffer
 16827 ;; This function uses a non-reentrant model
 16828 ;;
 16829                           
 16830                           	psect	text48
 16831  0066F2                     __ptext48:
 16832                           	opt stack 0
 16833  0066F2                     _SPI1_Exchange8bit:
 16834                           	opt stack 25
 16835                           
 16836                           ;incstack = 0
 16837                           ;SPI1_Exchange8bit@data stored from wreg
 16838  0066F2  6E01               	movwf	SPI1_Exchange8bit@data,c
 16839                           
 16840                           ;spi1.c: 92: SSP1CON1bits.WCOL = 0;
 16841  0066F4  9EC6               	bcf	4038,7,c	;volatile
 16842                           
 16843                           ;spi1.c: 94: SSP1BUF = data;
 16844  0066F6  C001  FFC9         	movff	SPI1_Exchange8bit@data,4041	;volatile
 16845                           
 16846                           ;spi1.c: 96: while (SSP1STATbits.BF == 0x0) {
 16847  0066FA  D000               	goto	l790
 16848  0066FC                     l790:
 16849  0066FC  A0C7               	btfss	4039,0,c	;volatile
 16850  0066FE  D7FE               	goto	l790
 16851                           
 16852                           ;spi1.c: 97: }
 16853                           ;spi1.c: 99: return (SSP1BUF);
 16854  006700  50C9               	movf	4041,w,c	;volatile
 16855  006702  0012               	return		;funcret
 16856  006704                     __end_of_SPI1_Exchange8bit:
 16857                           	opt stack 0
 16858                           tblptru	equ	0xFF8
 16859                           tblptrh	equ	0xFF7
 16860                           tblptrl	equ	0xFF6
 16861                           tablat	equ	0xFF5
 16862                           prodh	equ	0xFF4
 16863                           prodl	equ	0xFF3
 16864                           indf0	equ	0xFEF
 16865                           postinc0	equ	0xFEE
 16866                           fsr0h	equ	0xFEA
 16867                           fsr0l	equ	0xFE9
 16868                           wreg	equ	0xFE8
 16869                           indf1	equ	0xFE7
 16870                           postinc1	equ	0xFE6
 16871                           postdec1	equ	0xFE5
 16872                           fsr1h	equ	0xFE2
 16873                           fsr1l	equ	0xFE1
 16874                           indf2	equ	0xFDF
 16875                           postinc2	equ	0xFDE
 16876                           postdec2	equ	0xFDD
 16877                           plusw2	equ	0xFDB
 16878                           fsr2h	equ	0xFDA
 16879                           fsr2l	equ	0xFD9
 16880                           status	equ	0xFD8
 16881                           
 16882 ;; *************** function _SYSTEM_Initialize *****************
 16883 ;; Defined at:
 16884 ;;		line 112 in file "mcc_generated_files/mcc.c"
 16885 ;; Parameters:    Size  Location     Type
 16886 ;;		None
 16887 ;; Auto vars:     Size  Location     Type
 16888 ;;		None
 16889 ;; Return value:  Size  Location     Type
 16890 ;;		None               void
 16891 ;; Registers used:
 16892 ;;		wreg, status,2, cstack
 16893 ;; Tracked objects:
 16894 ;;		On entry : 0/0
 16895 ;;		On exit  : 0/0
 16896 ;;		Unchanged: 0/0
 16897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16902 ;;Total ram usage:        0 bytes
 16903 ;; Hardware stack levels used:    1
 16904 ;; Hardware stack levels required when called:    1
 16905 ;; This function calls:
 16906 ;;		_OSCILLATOR_Initialize
 16907 ;;		_PIN_MANAGER_Initialize
 16908 ;;		_SPI1_Initialize
 16909 ;; This function is called by:
 16910 ;;		_main
 16911 ;; This function uses a non-reentrant model
 16912 ;;
 16913                           
 16914                           	psect	text49
 16915  006712                     __ptext49:
 16916                           	opt stack 0
 16917  006712                     _SYSTEM_Initialize:
 16918                           	opt stack 29
 16919                           
 16920                           ;mcc.c: 113: OSCILLATOR_Initialize();
 16921                           
 16922                           ;incstack = 0
 16923  006712  EC97  F033         	call	_OSCILLATOR_Initialize	;wreg free
 16924                           
 16925                           ;mcc.c: 114: PIN_MANAGER_Initialize();
 16926  006716  ECA0  F032         	call	_PIN_MANAGER_Initialize	;wreg free
 16927                           
 16928                           ;mcc.c: 115: SPI1_Initialize();
 16929  00671A  EC90  F033         	call	_SPI1_Initialize	;wreg free
 16930  00671E  0012               	return		;funcret
 16931  006720                     __end_of_SYSTEM_Initialize:
 16932                           	opt stack 0
 16933                           tblptru	equ	0xFF8
 16934                           tblptrh	equ	0xFF7
 16935                           tblptrl	equ	0xFF6
 16936                           tablat	equ	0xFF5
 16937                           prodh	equ	0xFF4
 16938                           prodl	equ	0xFF3
 16939                           indf0	equ	0xFEF
 16940                           postinc0	equ	0xFEE
 16941                           fsr0h	equ	0xFEA
 16942                           fsr0l	equ	0xFE9
 16943                           wreg	equ	0xFE8
 16944                           indf1	equ	0xFE7
 16945                           postinc1	equ	0xFE6
 16946                           postdec1	equ	0xFE5
 16947                           fsr1h	equ	0xFE2
 16948                           fsr1l	equ	0xFE1
 16949                           indf2	equ	0xFDF
 16950                           postinc2	equ	0xFDE
 16951                           postdec2	equ	0xFDD
 16952                           plusw2	equ	0xFDB
 16953                           fsr2h	equ	0xFDA
 16954                           fsr2l	equ	0xFD9
 16955                           status	equ	0xFD8
 16956                           
 16957 ;; *************** function _SPI1_Initialize *****************
 16958 ;; Defined at:
 16959 ;;		line 64 in file "mcc_generated_files/spi1.c"
 16960 ;; Parameters:    Size  Location     Type
 16961 ;;		None
 16962 ;; Auto vars:     Size  Location     Type
 16963 ;;		None
 16964 ;; Return value:  Size  Location     Type
 16965 ;;		None               void
 16966 ;; Registers used:
 16967 ;;		wreg, status,2
 16968 ;; Tracked objects:
 16969 ;;		On entry : 0/0
 16970 ;;		On exit  : 0/0
 16971 ;;		Unchanged: 0/0
 16972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16977 ;;Total ram usage:        0 bytes
 16978 ;; Hardware stack levels used:    1
 16979 ;; This function calls:
 16980 ;;		Nothing
 16981 ;; This function is called by:
 16982 ;;		_disk_initialize
 16983 ;;		_SYSTEM_Initialize
 16984 ;; This function uses a non-reentrant model
 16985 ;;
 16986                           
 16987                           	psect	text50
 16988  006720                     __ptext50:
 16989                           	opt stack 0
 16990  006720                     _SPI1_Initialize:
 16991                           	opt stack 27
 16992                           
 16993                           ;spi1.c: 68: SSP1STAT = 0x40;
 16994                           
 16995                           ;incstack = 0
 16996  006720  0E40               	movlw	64
 16997  006722  6EC7               	movwf	4039,c	;volatile
 16998                           
 16999                           ;spi1.c: 71: SSP1CON1 = 0x22;
 17000  006724  0E22               	movlw	34
 17001  006726  6EC6               	movwf	4038,c	;volatile
 17002                           
 17003                           ;spi1.c: 74: SSP1ADD = 0x00;
 17004  006728  0E00               	movlw	0
 17005  00672A  6EC8               	movwf	4040,c	;volatile
 17006  00672C  0012               	return		;funcret
 17007  00672E                     __end_of_SPI1_Initialize:
 17008                           	opt stack 0
 17009                           tblptru	equ	0xFF8
 17010                           tblptrh	equ	0xFF7
 17011                           tblptrl	equ	0xFF6
 17012                           tablat	equ	0xFF5
 17013                           prodh	equ	0xFF4
 17014                           prodl	equ	0xFF3
 17015                           indf0	equ	0xFEF
 17016                           postinc0	equ	0xFEE
 17017                           fsr0h	equ	0xFEA
 17018                           fsr0l	equ	0xFE9
 17019                           wreg	equ	0xFE8
 17020                           indf1	equ	0xFE7
 17021                           postinc1	equ	0xFE6
 17022                           postdec1	equ	0xFE5
 17023                           fsr1h	equ	0xFE2
 17024                           fsr1l	equ	0xFE1
 17025                           indf2	equ	0xFDF
 17026                           postinc2	equ	0xFDE
 17027                           postdec2	equ	0xFDD
 17028                           plusw2	equ	0xFDB
 17029                           fsr2h	equ	0xFDA
 17030                           fsr2l	equ	0xFD9
 17031                           status	equ	0xFD8
 17032                           
 17033 ;; *************** function _PIN_MANAGER_Initialize *****************
 17034 ;; Defined at:
 17035 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
 17036 ;; Parameters:    Size  Location     Type
 17037 ;;		None
 17038 ;; Auto vars:     Size  Location     Type
 17039 ;;		None
 17040 ;; Return value:  Size  Location     Type
 17041 ;;		None               void
 17042 ;; Registers used:
 17043 ;;		wreg, status,2
 17044 ;; Tracked objects:
 17045 ;;		On entry : 0/0
 17046 ;;		On exit  : 0/0
 17047 ;;		Unchanged: 0/0
 17048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17052 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17053 ;;Total ram usage:        0 bytes
 17054 ;; Hardware stack levels used:    1
 17055 ;; This function calls:
 17056 ;;		Nothing
 17057 ;; This function is called by:
 17058 ;;		_SYSTEM_Initialize
 17059 ;; This function uses a non-reentrant model
 17060 ;;
 17061                           
 17062                           	psect	text51
 17063  006540                     __ptext51:
 17064                           	opt stack 0
 17065  006540                     _PIN_MANAGER_Initialize:
 17066                           	opt stack 29
 17067                           
 17068                           ;pin_manager.c: 51: LATA = 0x00;
 17069                           
 17070                           ;incstack = 0
 17071  006540  0E00               	movlw	0
 17072  006542  6E89               	movwf	3977,c	;volatile
 17073                           
 17074                           ;pin_manager.c: 52: TRISA = 0xFF;
 17075  006544  6892               	setf	3986,c	;volatile
 17076                           
 17077                           ;pin_manager.c: 53: ANSELA = 0x2F;
 17078  006546  0E2F               	movlw	47
 17079  006548  010F               	movlb	15	; () banked
 17080  00654A  6F38               	movwf	56,b	;volatile
 17081                           
 17082                           ;pin_manager.c: 55: LATB = 0x00;
 17083  00654C  0E00               	movlw	0
 17084  00654E  6E8A               	movwf	3978,c	;volatile
 17085                           
 17086                           ; BSR set to: 15
 17087                           ;pin_manager.c: 56: TRISB = 0xFF;
 17088  006550  6893               	setf	3987,c	;volatile
 17089                           
 17090                           ;pin_manager.c: 57: ANSELB = 0x3F;
 17091  006552  0E3F               	movlw	63
 17092  006554  010F               	movlb	15	; () banked
 17093  006556  6F39               	movwf	57,b	;volatile
 17094                           
 17095                           ;pin_manager.c: 58: WPUB = 0x00;
 17096  006558  0E00               	movlw	0
 17097  00655A  6E61               	movwf	3937,c	;volatile
 17098                           
 17099                           ;pin_manager.c: 60: LATC = 0x01;
 17100  00655C  0E01               	movlw	1
 17101  00655E  6E8B               	movwf	3979,c	;volatile
 17102                           
 17103                           ;pin_manager.c: 61: TRISC = 0xD6;
 17104  006560  0ED6               	movlw	214
 17105  006562  6E94               	movwf	3988,c	;volatile
 17106                           
 17107                           ;pin_manager.c: 62: ANSELC = 0xC4;
 17108  006564  0EC4               	movlw	196
 17109  006566  010F               	movlb	15	; () banked
 17110  006568  6F3A               	movwf	58,b	;volatile
 17111                           
 17112                           ;pin_manager.c: 64: LATD = 0x00;
 17113  00656A  0E00               	movlw	0
 17114  00656C  6E8C               	movwf	3980,c	;volatile
 17115                           
 17116                           ; BSR set to: 15
 17117                           ;pin_manager.c: 65: TRISD = 0xFF;
 17118  00656E  6895               	setf	3989,c	;volatile
 17119                           
 17120                           ; BSR set to: 15
 17121                           ;pin_manager.c: 66: ANSELD = 0xFF;
 17122  006570  010F               	movlb	15	; () banked
 17123  006572  693B               	setf	59,b	;volatile
 17124                           
 17125                           ;pin_manager.c: 68: LATE = 0x00;
 17126  006574  0E00               	movlw	0
 17127  006576  6E8D               	movwf	3981,c	;volatile
 17128                           
 17129                           ;pin_manager.c: 69: TRISE = 0x07;
 17130  006578  0E07               	movlw	7
 17131  00657A  6E96               	movwf	3990,c	;volatile
 17132                           
 17133                           ;pin_manager.c: 70: ANSELE = 0x07;
 17134  00657C  0E07               	movlw	7
 17135  00657E  010F               	movlb	15	; () banked
 17136  006580  6F3C               	movwf	60,b	;volatile
 17137                           
 17138                           ; BSR set to: 15
 17139                           ;pin_manager.c: 72: INTCON2bits.nRBPU = 0x01;
 17140  006582  8EF1               	bsf	intcon2,7,c	;volatile
 17141                           
 17142                           ; BSR set to: 15
 17143  006584  0012               	return		;funcret
 17144  006586                     __end_of_PIN_MANAGER_Initialize:
 17145                           	opt stack 0
 17146                           tblptru	equ	0xFF8
 17147                           tblptrh	equ	0xFF7
 17148                           tblptrl	equ	0xFF6
 17149                           tablat	equ	0xFF5
 17150                           prodh	equ	0xFF4
 17151                           prodl	equ	0xFF3
 17152                           intcon2	equ	0xFF1
 17153                           indf0	equ	0xFEF
 17154                           postinc0	equ	0xFEE
 17155                           fsr0h	equ	0xFEA
 17156                           fsr0l	equ	0xFE9
 17157                           wreg	equ	0xFE8
 17158                           indf1	equ	0xFE7
 17159                           postinc1	equ	0xFE6
 17160                           postdec1	equ	0xFE5
 17161                           fsr1h	equ	0xFE2
 17162                           fsr1l	equ	0xFE1
 17163                           indf2	equ	0xFDF
 17164                           postinc2	equ	0xFDE
 17165                           postdec2	equ	0xFDD
 17166                           plusw2	equ	0xFDB
 17167                           fsr2h	equ	0xFDA
 17168                           fsr2l	equ	0xFD9
 17169                           status	equ	0xFD8
 17170                           
 17171 ;; *************** function _OSCILLATOR_Initialize *****************
 17172 ;; Defined at:
 17173 ;;		line 118 in file "mcc_generated_files/mcc.c"
 17174 ;; Parameters:    Size  Location     Type
 17175 ;;		None
 17176 ;; Auto vars:     Size  Location     Type
 17177 ;;		None
 17178 ;; Return value:  Size  Location     Type
 17179 ;;		None               void
 17180 ;; Registers used:
 17181 ;;		wreg, status,2
 17182 ;; Tracked objects:
 17183 ;;		On entry : 0/0
 17184 ;;		On exit  : 0/0
 17185 ;;		Unchanged: 0/0
 17186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17190 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17191 ;;Total ram usage:        0 bytes
 17192 ;; Hardware stack levels used:    1
 17193 ;; This function calls:
 17194 ;;		Nothing
 17195 ;; This function is called by:
 17196 ;;		_SYSTEM_Initialize
 17197 ;; This function uses a non-reentrant model
 17198 ;;
 17199                           
 17200                           	psect	text52
 17201  00672E                     __ptext52:
 17202                           	opt stack 0
 17203  00672E                     _OSCILLATOR_Initialize:
 17204                           	opt stack 29
 17205                           
 17206                           ;mcc.c: 120: OSCCON = 0x30;
 17207                           
 17208                           ; BSR set to: 15
 17209                           ;incstack = 0
 17210  00672E  0E30               	movlw	48
 17211  006730  6ED3               	movwf	4051,c	;volatile
 17212                           
 17213                           ;mcc.c: 122: OSCCON2 = 0x04;
 17214  006732  0E04               	movlw	4
 17215  006734  6ED2               	movwf	4050,c	;volatile
 17216                           
 17217                           ;mcc.c: 124: OSCTUNE = 0x00;
 17218  006736  0E00               	movlw	0
 17219  006738  6E9B               	movwf	3995,c	;volatile
 17220  00673A  0012               	return		;funcret
 17221  00673C                     __end_of_OSCILLATOR_Initialize:
 17222                           	opt stack 0
 17223                           tblptru	equ	0xFF8
 17224                           tblptrh	equ	0xFF7
 17225                           tblptrl	equ	0xFF6
 17226                           tablat	equ	0xFF5
 17227                           prodh	equ	0xFF4
 17228                           prodl	equ	0xFF3
 17229                           intcon2	equ	0xFF1
 17230                           indf0	equ	0xFEF
 17231                           postinc0	equ	0xFEE
 17232                           fsr0h	equ	0xFEA
 17233                           fsr0l	equ	0xFE9
 17234                           wreg	equ	0xFE8
 17235                           indf1	equ	0xFE7
 17236                           postinc1	equ	0xFE6
 17237                           postdec1	equ	0xFE5
 17238                           fsr1h	equ	0xFE2
 17239                           fsr1l	equ	0xFE1
 17240                           indf2	equ	0xFDF
 17241                           postinc2	equ	0xFDE
 17242                           postdec2	equ	0xFDD
 17243                           plusw2	equ	0xFDB
 17244                           fsr2h	equ	0xFDA
 17245                           fsr2l	equ	0xFD9
 17246                           status	equ	0xFD8
 17247                           tblptru	equ	0xFF8
 17248                           tblptrh	equ	0xFF7
 17249                           tblptrl	equ	0xFF6
 17250                           tablat	equ	0xFF5
 17251                           prodh	equ	0xFF4
 17252                           prodl	equ	0xFF3
 17253                           intcon2	equ	0xFF1
 17254                           indf0	equ	0xFEF
 17255                           postinc0	equ	0xFEE
 17256                           fsr0h	equ	0xFEA
 17257                           fsr0l	equ	0xFE9
 17258                           wreg	equ	0xFE8
 17259                           indf1	equ	0xFE7
 17260                           postinc1	equ	0xFE6
 17261                           postdec1	equ	0xFE5
 17262                           fsr1h	equ	0xFE2
 17263                           fsr1l	equ	0xFE1
 17264                           indf2	equ	0xFDF
 17265                           postinc2	equ	0xFDE
 17266                           postdec2	equ	0xFDD
 17267                           plusw2	equ	0xFDB
 17268                           fsr2h	equ	0xFDA
 17269                           fsr2l	equ	0xFD9
 17270                           status	equ	0xFD8
 17271                           
 17272                           	psect	rparam
 17273  0000                     tblptru	equ	0xFF8
 17274                           tblptrh	equ	0xFF7
 17275                           tblptrl	equ	0xFF6
 17276                           tablat	equ	0xFF5
 17277                           prodh	equ	0xFF4
 17278                           prodl	equ	0xFF3
 17279                           intcon2	equ	0xFF1
 17280                           indf0	equ	0xFEF
 17281                           postinc0	equ	0xFEE
 17282                           fsr0h	equ	0xFEA
 17283                           fsr0l	equ	0xFE9
 17284                           wreg	equ	0xFE8
 17285                           indf1	equ	0xFE7
 17286                           postinc1	equ	0xFE6
 17287                           postdec1	equ	0xFE5
 17288                           fsr1h	equ	0xFE2
 17289                           fsr1l	equ	0xFE1
 17290                           indf2	equ	0xFDF
 17291                           postinc2	equ	0xFDE
 17292                           postdec2	equ	0xFDD
 17293                           plusw2	equ	0xFDB
 17294                           fsr2h	equ	0xFDA
 17295                           fsr2l	equ	0xFD9
 17296                           status	equ	0xFD8


Data Sizes:
    Strings     79
    Constant    0
    Data        1
    BSS         595
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160    114     152
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_lseek@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_lseek@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_close@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_close@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_sync@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_sync@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_write@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_write@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_write@bw	PTR unsigned int  size(2) Largest target is 2
		 -> main@bw(BANK0[2]), 

    f_write@buff	PTR const void  size(2) Largest target is 55
		 -> STR_3(CODE[55]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 55
		 -> STR_3(CODE[55]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_read@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), STR_1(CODE[1]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dj.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dj.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_mount@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_mount@cfs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_mount@path	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), STR_1(CODE[1]), 

    f_mount@rp	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), STR_1(CODE[1]), 

    validate@fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    validate@fil.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    validate@obj	PTR void  size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    validate@fil	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    find_volume@pt	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    ff@FatFs	PTR struct .[1] size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    find_volume@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    find_volume@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), 

    find_volume@rfs	PTR PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), f_mount@fs(COMRAM[2]), 

    check_fs@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    get_ldnumber@tp	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), STR_1(CODE[1]), 

    get_ldnumber@tt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), STR_1(CODE[1]), 

    get_ldnumber@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), f_mount@rp(COMRAM[2]), 

    follow_path@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    follow_path@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    follow_path@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    follow_path@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    follow_path@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), STR_1(CODE[1]), 

    create_name@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    create_name@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    create_name@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> follow_path@path(BANK0[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), STR_1(CODE[1]), 

    dir_register@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_register@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_register@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_register@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_find@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_find@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_find@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_find@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_find@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    st_clust@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    ld_clust@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    ld_clust@dir	PTR const unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_alloc@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_alloc@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_alloc@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_alloc@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_next@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_next@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_next@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_next@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    S285$fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_sdi@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    S285$dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_sdi@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    S285$fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_sdi@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_sdi@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_chain@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    remove_chain@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    put_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    put_fat@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    get_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    get_fat@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    clust2sect@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    sync_fs@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    move_window@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    sync_window@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    chk_chr@str	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_4(CODE[15]), 

    mem_cmp@src	PTR const void  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@s	PTR const unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_set@dst	PTR void  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_cpy@src	PTR const void  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), STR_3(CODE[55]), FatFs(BIGRAM[558]), 

    mem_cpy@s	PTR const unsigned char  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), STR_3(CODE[55]), FatFs(BIGRAM[558]), 

    mem_cpy@dst	PTR void  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_cpy@d	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_ioctl@ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), STR_3(CODE[55]), FatFs(BIGRAM[558]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    xmit_datablock@buff	PTR const unsigned char  size(3) Largest target is 65535
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), ROM(CODE[65535]), STR_3(CODE[55]), 
		 -> FatFs(BIGRAM[558]), 

    rcvr_datablock@buff	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), disk_ioctl@csd(COMRAM[16]), FatFs(BIGRAM[558]), 

    S40$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    Fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    S40$fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    Fil.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 


Critical Paths under _main in COMRAM

    _f_write->_create_chain
    _f_open->_remove_chain
    _remove_chain->_put_fat
    _follow_path->_dir_sdi
    _dir_find->_dir_sdi
    _create_name->_mem_set
    _dir_alloc->_dir_sdi
    _dir_sdi->_get_fat
    _dir_next->_create_chain
    _f_mount->_find_volume
    _find_volume->_check_fs
    _disk_initialize->_send_cmd
    _check_fs->_move_window
    _f_lseek->_create_chain
    _create_chain->_put_fat
    _put_fat->_move_window
    _get_fat->_move_window
    _clust2sect->___lmul
    _f_close->_f_sync
    _f_sync->_sync_fs
    _validate->_disk_status
    _sync_fs->_disk_ioctl
    _disk_ioctl->_send_cmd
    _move_window->_sync_window
    _sync_window->_disk_write
    _disk_write->_send_cmd
    _xmit_datablock->_wait_ready
    _disk_read->_send_cmd
    _send_cmd->___send_cmd
    _select->_wait_ready
    _wait_ready->_SPI1_Exchange8bit
    _deselect->_SPI1_Exchange8bit
    _rcvr_datablock->_SPI1_Exchange8bit

Critical Paths under _main in BANK0

    _main->_f_open
    _f_write->_create_chain
    _f_open->_find_volume
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_register->_dir_alloc
    _dir_alloc->_dir_next
    _dir_next->_create_chain
    _f_mount->_find_volume
    _f_lseek->_create_chain

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  381219
                                            112 BANK0      2     2      0
                  _SYSTEM_Initialize
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                            _f_write
 ---------------------------------------------------------------------------------
 (1) _f_write                                             40    32      8   48706
                                             13 BANK0     40    32      8
                         _clust2sect
                       _create_chain
                         _disk_write
                            _mem_cpy
                        _move_window
                        _sync_window
                           _validate
 ---------------------------------------------------------------------------------
 (1) _f_open                                              54    49      5  235991
                                             58 BANK0     54    49      5
                       _dir_register
                        _find_volume
                        _follow_path
                           _ld_clust
                        _move_window
                       _remove_chain
                           _st_clust
 ---------------------------------------------------------------------------------
 (2) _remove_chain                                        15     9      6   24374
                                             85 COMRAM    10     4      6
                                              0 BANK0      5     5      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (2) _follow_path                                          8     4      4   88296
                                             38 BANK0      8     4      4
                        _create_name
                           _dir_find
                            _dir_sdi
                           _ld_clust
 ---------------------------------------------------------------------------------
 (2) _ld_clust                                            14    10      4     474
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) _dir_find                                             6     4      2   70327
                                             32 BANK0      6     4      2
                           _dir_next
                            _dir_sdi
                            _mem_cmp
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _mem_cmp                                             15     9      6     328
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) _create_name                                         23    19      4    2440
                                              8 COMRAM    23    19      4
                            _chk_chr
                            _mem_set
 ---------------------------------------------------------------------------------
 (4) _chk_chr                                              6     2      4     217
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _dir_register                                         3     1      2   82540
                                             42 BANK0      3     1      2
                          _dir_alloc
                            _mem_cpy
                            _mem_set
                        _move_window
 ---------------------------------------------------------------------------------
 (2) _mem_cpy                                             12     6      6    1143
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) _dir_alloc                                           10     6      4   70019
                                             32 BANK0     10     6      4
                           _dir_next
                            _dir_sdi
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _dir_sdi                                             21    17      4   14365
                                             84 COMRAM    11     7      4
                                              0 BANK0     10    10      0
                         _clust2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (4) _dir_next                                            19    15      4   45000
                                             13 BANK0     19    15      4
                         _clust2sect
                       _create_chain
                            _get_fat
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (1) _f_mount                                             12     7      5   28988
                                             81 COMRAM    12     7      5
                        _find_volume
                       _get_ldnumber
 ---------------------------------------------------------------------------------
 (2) _find_volume                                         71    66      5   27936
                                             68 COMRAM    13     8      5
                                              0 BANK0     58    58      0
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                       _get_ldnumber
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _get_ldnumber                                        14    12      2     512
                                              0 COMRAM    14    12      2
 ---------------------------------------------------------------------------------
 (3) _disk_initialize                                     13    13      0    2434
                                             16 COMRAM    13    13      0
                  _SPI1_Exchange8bit
                    _SPI1_Initialize
                          _SPI1_Open
                           _deselect
                           _send_cmd
 ---------------------------------------------------------------------------------
 (4) _SPI1_Open                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _check_fs                                            10     4      6   10644
                                             58 COMRAM    10     4      6
                        _move_window
 ---------------------------------------------------------------------------------
 (1) _f_lseek                                             35    29      6   41425
                                             13 BANK0     35    29      6
                            ___lldiv
                         _clust2sect
                       _create_chain
                            _get_fat
                           _validate
 ---------------------------------------------------------------------------------
 (2) _create_chain                                        23    17      6   25419
                                             85 COMRAM    10     4      6
                                              0 BANK0     13    13      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (3) _put_fat                                             27    17     10   11972
                                             58 COMRAM    27    17     10
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _get_fat                                             26    20      6   11871
                                             58 COMRAM    26    20      6
                        _move_window
 ---------------------------------------------------------------------------------
 (2) _clust2sect                                          11     5      6    1355
                                             12 COMRAM    11     5      6
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     476
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     512
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _f_close                                              3     1      2   26083
                                             77 COMRAM     3     1      2
                             _f_sync
                           _validate
 ---------------------------------------------------------------------------------
 (2) _f_sync                                               9     7      2   25404
                                             68 COMRAM     9     7      2
                        _move_window
                           _st_clust
                            _sync_fs
                           _validate
 ---------------------------------------------------------------------------------
 (2) _validate                                             8     6      2     497
                                              1 COMRAM     8     6      2
                        _disk_status
 ---------------------------------------------------------------------------------
 (3) _disk_status                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _sync_fs                                             11     9      2   13842
                                             57 COMRAM    11     9      2
                         _disk_ioctl
                         _disk_write
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (5) _mem_set                                              8     2      6     858
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (4) _disk_ioctl                                          41    38      3    4706
                                             16 COMRAM    41    38      3
                  _SPI1_Exchange8bit
                             ___wmul
                           _deselect
                     _rcvr_datablock
                             _select
                           _send_cmd
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     591
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _st_clust                                             6     0      6     344
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (2) _move_window                                         11     5      6   10234
                                             47 COMRAM    11     5      6
                          _disk_read
                        _sync_window
 ---------------------------------------------------------------------------------
 (2) _sync_window                                         21    19      2    4268
                                             26 COMRAM    21    19      2
                         _disk_write
 ---------------------------------------------------------------------------------
 (3) _disk_write                                          10     2      8    3504
                                             16 COMRAM    10     2      8
                           _deselect
                           _send_cmd
                     _xmit_datablock
 ---------------------------------------------------------------------------------
 (4) _xmit_datablock                                       7     3      4     587
                                              3 COMRAM     7     3      4
                  _SPI1_Exchange8bit
                         _wait_ready
 ---------------------------------------------------------------------------------
 (3) _disk_read                                           12     4      8    3566
                                             16 COMRAM    12     4      8
                           _deselect
                     _rcvr_datablock
                           _send_cmd
 ---------------------------------------------------------------------------------
 (4) _send_cmd                                             6     2      4    1903
                                             10 COMRAM     6     2      4
                         ___send_cmd
 ---------------------------------------------------------------------------------
 (5) ___send_cmd                                           7     3      4     575
                                              3 COMRAM     7     3      4
                  _SPI1_Exchange8bit
                           _deselect
                             _select
 ---------------------------------------------------------------------------------
 (6) _select                                               0     0      0     112
                  _SPI1_Exchange8bit
                           _deselect
                         _wait_ready
 ---------------------------------------------------------------------------------
 (5) _wait_ready                                           2     2      0      68
                                              1 COMRAM     2     2      0
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (7) _deselect                                             0     0      0      22
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _rcvr_datablock                                       7     3      4    1032
                                              1 COMRAM     7     3      4
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (6) _SPI1_Exchange8bit                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
 ---------------------------------------------------------------------------------
 (4) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI1_Initialize
   _f_close
     _f_sync
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _st_clust
       _sync_fs
         _disk_ioctl
           _SPI1_Exchange8bit
           ___wmul
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _select
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _disk_write
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
           _xmit_datablock
             _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
         _mem_set
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _validate
         _disk_status
     _validate
       _disk_status
   _f_lseek
     ___lldiv
     _clust2sect
       ___lmul
     _create_chain
       _get_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _put_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
     _get_fat
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
     _validate
       _disk_status
   _f_mount
     _find_volume
       ___lldiv
       ___lmul
       _check_fs
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _disk_initialize
         _SPI1_Exchange8bit
         _SPI1_Initialize
         _SPI1_Open
         _deselect
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _disk_status
       _get_ldnumber
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
     _get_ldnumber
   _f_open
     _dir_register
       _dir_alloc
         _dir_next
           _clust2sect
             ___lmul
           _create_chain
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _put_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
           _mem_set
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _dir_sdi
           _clust2sect
             ___lmul
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _mem_cpy
       _mem_set
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
     _find_volume
       ___lldiv
       ___lmul
       _check_fs
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _disk_initialize
         _SPI1_Exchange8bit
         _SPI1_Initialize
         _SPI1_Open
         _deselect
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _disk_status
       _get_ldnumber
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
     _follow_path
       _create_name
         _chk_chr
         _mem_set
       _dir_find
         _dir_next
           _clust2sect
             ___lmul
           _create_chain
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _put_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
           _mem_set
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _dir_sdi
           _clust2sect
             ___lmul
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
         _mem_cmp
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _dir_sdi
         _clust2sect
           ___lmul
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _ld_clust
     _ld_clust
     _move_window
       _disk_read
         _deselect
           _SPI1_Exchange8bit
         _rcvr_datablock
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _sync_window
         _disk_write
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
           _xmit_datablock
             _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
     _remove_chain
       _get_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _put_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
     _st_clust
   _f_write
     _clust2sect
       ___lmul
     _create_chain
       _get_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _put_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
     _disk_write
       _deselect
         _SPI1_Exchange8bit
       _send_cmd
         ___send_cmd
           _SPI1_Exchange8bit
           _deselect
             _SPI1_Exchange8bit
           _select
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
       _xmit_datablock
         _SPI1_Exchange8bit
         _wait_ready
           _SPI1_Exchange8bit
     _mem_cpy
     _move_window
       _disk_read
         _deselect
           _SPI1_Exchange8bit
         _rcvr_datablock
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _sync_window
         _disk_write
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
           _xmit_datablock
             _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
     _sync_window
       _disk_write
         _deselect
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
         _xmit_datablock
           _SPI1_Exchange8bit
           _wait_ready
             _SPI1_Exchange8bit
     _validate
       _disk_status

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0     22E      37       14.3%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     72      98       5       95.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F7      12        0.0%
DATA                 0      0     325       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Jul 25 04:31:23 2019

              _SPI1_Exchange8bit 66F2                      get_fat@clst 003D  
                   create_name@b 0015                     create_name@c 001F  
                   create_name@d 001A                     create_name@i 001D  
                   create_name@p 0018               ?_SPI1_Exchange8bit 0001  
               get_ldnumber@path 0001                               l24 5DBA  
                             l43 65AE                               l61 638E  
                             l96 4BD0                      disk_ioctl@n 0037  
            ___wmul@multiplicand 0003                   ??_dir_register 0060  
               disk_write@sector 0013                     __CFG_CP0$OFF 000000  
                   __CFG_CP1$OFF 000000                    create_name@dp 0009  
                  create_name@ni 0016                     __CFG_CP2$OFF 000000  
                  create_name@si 0013                   create_chain@cs 0069  
                   __CFG_CP3$OFF 000000                   create_chain@fs 0056  
                            l121 4D86                              l113 4CFC  
                            l107 4CA8                              l140 5C4E  
                            l135 5C2E                              l152 55B6  
                            l304 3ACE                              l241 6440  
                            l162 5652                              l139 5C38  
                            l156 55C0                              l157 55CA  
                            l181 3354                              l158 55E0  
                            l343 3FF6                              l360 4256  
                            l328 52AC                              l281 45DC  
                            l417 5806                              l362 424A  
                            l283 42A2                              l355 40FA  
                            l347 3FE6                              l268 4F98  
                            l614 3944                              l375 47EE  
                            l607 3766                              l616 3922  
                            l608 3758                              l546 1230  
                            l482 4B92                              l458 4A20  
                            l573 19D4                              l565 1590  
                            l559 13C2                              l495 50E4  
                            l497 50D6                              l693 25AC  
                            l790 66FC                              l697 28CA  
                   __CFG_CPB$OFF 000000                     __CFG_CPD$OFF 000000  
                            _Fil 00D7              ??_SPI1_Exchange8bit 0001  
                   disk_read@cmd 001C                              prod 000FF3  
                 ??_create_chain 005C                              wreg 000FE8  
              disk_initialize@ty 001A                   create_name@sfn 001B  
                create_chain@ncl 0065                  create_chain@scl 0061  
                create_chain@res 0060                      ld_clust@dir 0003  
                   __CFG_LVP$OFF 000000                             l1275 62D0  
                           l4007 607E                             l4103 3CA0  
                           l4009 609C                             l4041 4426  
                           l4033 43B6                             l4025 431C  
                           l4113 3D42                             l4105 3CCA  
                           l4051 44E8                             l4043 4430  
                           l4123 3DF4                             l4107 3CD8  
                           l4131 3E8C                             l4211 40CC  
                           l5003 5B2C                             l5021 6132  
                           l4061 45BE                             l4117 3D86  
                           l4133 3EAC                             l4221 414A  
                           l4205 4088                             l4303 339C  
                           l5031 6278                             l4143 6472  
                           l4055 4554                             l4047 4498  
                           l4039 4406                             l4127 3E74  
                           l4215 410C                             l4321 347E  
                           l4313 33EE                             l4153 6658  
                           l5017 612E                             l5033 6286  
                           l4129 3E86                             l4307 33A6  
                           l5043 62C0                             l5035 628E  
                           l4139 645C                             l4163 5EDA  
                           l4059 45AC                             l4235 422E  
                           l4403 4666                             l5123 504E  
                           l5107 4FC6                             l4341 3580  
                           l4325 350A                             l4149 6646  
                           l4085 3B86                             l4077 3B4A  
                           l4229 41C2                             l4421 4744  
                           l5141 50D2                             l5117 5028  
                           l5109 4FCE                             l5061 51DE  
                           l4351 35BA                             l4335 354C  
                           l4255 66EA                             l4087 3BBC  
                           l4175 3F16                             l5231 11AC  
                           l5215 1150                             l5207 1140  
                           l5151 511C                             l5063 51F2  
                           l5055 519A                             l4361 3600  
                           l4345 35A2                             l4329 3518  
                           l4097 3C3A                             l4193 4008  
                           l4185 3F80                             l4177 3F2A  
                           l5305 14E8                             l5225 118E  
                           l4513 2F32                             l4433 47DE  
                           l4441 4834                             l4417 46F8  
                           l4409 46C0                             l5153 515A  
                           l5065 51F6                             l5081 52D0  
                           l3731 65A0                             l4363 3606  
                           l4355 35C4                             l4275 31AC  
                           l4267 319C                             l4611 4CB0  
                           l4603 4C72                             l5411 1BA8  
                           l5243 126E                             l5227 1198  
                           l4531 2FF6                             l4507 2F1A  
                           l4419 471E                             l5147 50EE  
                           l5075 5256                             l3741 66C0  
                           l4365 360C                             l4189 3FAC  
                           l4621 4CDC                             l5317 153A  
                           l5309 14EC                             l5237 1212  
                           l4525 2F6E                             l4461 2D14  
                           l4437 47E2                             l4429 4796  
                           l5149 5118                             l5069 5218  
                           l3735 65B6                             l3727 6590  
                           l3815 61EE                             l3911 5698  
                           l3903 5634                             l4279 31B4  
                           l4367 3640                             l4631 4D12  
                           l4607 4C92                             l5351 16F4  
                           l5255 12E2                             l5263 1332  
                           l5191 10FA                             l5175 10AE  
                           l5167 1080                             l4543 3052  
                           l4519 2F50                             l4551 310A  
                           l4383 64A6                             l5079 529C  
                           l3809 61D6                             l3913 56AA  
                           l4289 3292                             l4713 4F6E  
                           l4625 4CF6                             l4633 4D18  
                           l5345 16CC                             l5337 1642  
                           l5329 15B6                             l5281 136C  
                           l5257 130A                             l5249 128E  
                           l4465 2D18                             l4449 4868  
                           l4385 64AC                             l4801 4924  
                           l4377 63F2                             l3851 636E  
                           l3739 6740                             l3907 566E  
                           l4651 4DB2                             l4643 4D70  
                           l5371 181E                             l5355 1716  
                           l5275 134E                             l5195 1100  
                           l4539 302C                             l4547 30A8  
                           l4491 2E80                             l4475 2D94  
                           l4731 5756                             l5099 5C12  
                           l5611 3A92                             l5507 365A  
                           l3861 6396                             l3749 66D4  
                           l3781 6186                             l3765 6156  
                           l3845 6526                             l3941 5C6C  
                           l3829 6250                             l3917 56CE  
                           l5701 2A36                             l4637 4D3E  
                           l4629 4D08                             l4653 4DB8  
                           l4573 4BE6                             l5381 18A4  
                           l5269 1340                             l4485 2E62  
                           l4741 57CE                             l4725 5712  
                           l4389 64E4                             l4813 4998  
                           l5541 3736                             l3791 61AA  
                           l3951 5CBC                             l3927 5C2A  
                           l5447 559C                             l5623 252A  
                           l4663 4DD0                             l4647 4D8E  
                           l4639 4D50                             l4591 4C3E  
                           l5375 188A                             l4399 4662  
                           l4735 57A0                             l4903 4B48  
                           l4831 49F8                             l4823 49D2  
                           l3857 6380                             l3793 61B0  
                           l3785 6194                             l3945 5C8C  
                           l5721 2B74                             l5705 2A96  
                           l4577 4BF0                             l4569 4BDC  
                           l5393 1A2C                             l5297 142E  
                           l4745 57F6                             l4913 4B62  
                           l4905 4B52                             l5537 3728  
                           l5529 36F0                             l3867 63A4  
                           l3955 5CDC                             l3939 5C62  
                           l3883 55B2                             l3971 534C  
                           l5707 2ABA                             l5723 2BBA  
                           l4587 4C36                             l5387 199A  
                           l5491 5FD2                             l5483 5F94  
                           l4499 2EC0                             l4739 57C2  
                           l4923 4BA0                             l4835 49FC  
                           l4827 49E6                             l4755 6350  
                           l3949 5CAA                             l3981 53E8  
                           l5645 27EC                             l5629 2550  
                           l4597 4C5A                             l4941 5954  
                           l5477 5F64                             l4685 5E72  
                           l4669 5DD2                             l4677 5E2C  
                           l4917 4B80                             l4861 4A78  
                           l4845 4A2E                             l5813 1FB2  
                           l5805 1F48                             l3799 61C2  
                           l5735 2CBC                             l5495 5FD6  
                           l5487 5FAA                             l4679 5E3C  
                           l4927 4BAE                             l4863 4A9C  
                           l4839 4A16                             l4783 58B2  
                           l4775 587C                             l5591 395A  
                           l5831 222C                             l5903 5D7A  
                           l3977 53D8                             l5729 2C4C  
                           l5681 2972                             l5673 2902  
                           l4945 5966                             l4857 4A6A  
                           l4873 4AC6                             l4849 4A3C  
                           l4793 5920                             l4769 5838  
                           l5577 3900                             l5841 22AA  
                           l5825 20D2                             l5833 224C  
                           l5761 1CBC                             l5753 1C24  
                           l5905 5DAE                             l5691 29D8  
                           l5683 29A8                             l5667 28AC  
                           l5659 287C                             l4971 5A2A  
                           l4939 594E                             l4867 4AA0  
                           l5595 399E                             l5851 235E  
                           l5843 22D0                             l5819 207E  
                           l3989 5446                             l5669 28EA  
                           l4949 599C                             l4973 5A34  
                           l4893 4B08                             l4885 4AF4  
                           l4789 58FC                             l5861 2438  
                           l5781 1E30                             l5845 22F0  
                           l5757 1C3C                             l5749 1C0C  
                           l5695 2A20                             l4991 5AB0  
                           l4967 5A20                             l4895 4B18  
                           l4879 4AE4                             l4799 491E  
                           l5871 2496                             l5775 1DD4  
                           l4985 5A92                             l4897 4B1E  
                           l5857 23AA                             l5793 1E86  
                           l5777 1E18                             l5875 24F4  
                           l5787 1E58                             l4997 5AEE  
                           l5797 1EDE                             l5869 248A  
                           STR_1 1037                             STR_2 1047  
                           STR_3 1001                             STR_4 1038  
                           _LATA 000F89                             _LATB 000F8A  
                           _LATC 000F8B                             _LATD 000F8C  
                           _LATE 000F8D                             u5105 42EC  
                           u5050 6020                             u4500 65C2  
                           u5125 4386                             u5215 3B18  
                           u5080 4278                             u7000 5AAC  
                           u4610 620E                             u5170 452A  
                           u5155 4412                             u5500 4206  
                           u5245 3C08                             u5270 3CBE  
                           u5190 3AAA                             u7110 5172  
                           u5175 4520                             u6055 2DA2  
                           u5440 40E6                             u6400 5E02  
                           u4617 6204                             u5290 3DC8  
                           u5275 3CB4                             u5620 3332  
                           u6420 5E66                             u4821 5686  
                           u5605 32A8                             u5461 4134  
                           u5615 32C2                             u5295 3DBE  
                           u6175 3136                             u6407 5DF2  
                           u5625 3328                             u8210 29F0  
                           u7170 5274                             u4755 55D2  
                           u5715 3432                             u8115 2636  
                           u6427 5E5C                             u4860 56DE  
                           u4925 5C40                             u4781 561C  
                           u5725 3454                             u5734 3472  
                           u5670 33CE                             u7510 1368  
                           u5830 6402                             u5735 346C  
                           u5745 34BC                             u5675 33C4  
                           u5595 326A                             u4980 5CEC  
                           u8260 2B94                             u7700 1A02  
                           u5940 47AE                             u7605 15D0  
                           u7630 16EC                             u8350 1D2C  
                           u8280 2C2C                             u7640 170E  
                           u8265 2B88                             u7705 19F8  
                           u8515 21E6                             u8355 1D20  
                           u8525 2236                             u5985 4874  
                           u8465 1FD0                             u7675 186A  
                           u5995 48C8                             u8937 4C98  
                           u8947 4D76                             u8957 65A2  
                           u8967 6382                             _WPUB 000F61  
                           _Fsid 00D2                             _Stat 00F7  
                           _main 5CF2                     find_volume@i 0095  
                           fsr0h 000FEA                             fsr1h 000FE2  
                           indf0 000FEF                             fsr0l 000FE9  
                           fsr2h 000FDA                             indf1 000FE7  
                           fsr1l 000FE1                             indf2 000FDF  
                           fsr2l 000FD9                    __CFG_BORV$190 000000  
                  disk_ioctl@cmd 0011                    disk_ioctl@csd 0021  
                  disk_read@buff 0011                    disk_ioctl@res 0036  
                  disk_ioctl@ptr 0038                    disk_read@pdrv 0019  
                           prodh 000FF4                             prodl 000FF3  
                 ??_get_ldnumber 0003                             start 0000  
      __end_of_SPI1_Exchange8bit 6704                    __CFG_IESO$OFF 000000  
             disk_initialize@cmd 0019                     ?_follow_path 0086  
             disk_initialize@ocr 0013                     ___param_bank 000010  
             disk_initialize@tmr 001B                  create_name@path 000B  
               create_chain@clst 0058                      _sync_window 52D8  
 __size_of_OSCILLATOR_Initialize 000E    __end_of_OSCILLATOR_Initialize 673C  
                          ?_main 0001                  __end_of___lldiv 62E2  
                          _LATC0 007C58                   __CFG_DEBUG$OFF 000000  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                            _TRISD 000F95  
                          _TRISE 000F96                  __end_of_f_close 6604  
                          _FatFs 0D0A                  __end_of_chk_chr 64FA  
             __size_of_SPI1_Open 000E                  __end_of_f_lseek 2CC4  
                  __CFG_WRT0$OFF 000000                    __CFG_WRT1$OFF 000000  
                  __CFG_WRT2$OFF 000000              ___lmul@multiplicand 0005  
                  __CFG_WRT3$OFF 000000                  __end_of_f_mount 5FF6  
                 __CFG_EBTR0$OFF 000000                   __CFG_FCMEN$OFF 000000  
                   ___send_cmd@n 0009                   __CFG_EBTR1$OFF 000000  
                 __CFG_EBTR2$OFF 000000                  __end_of_dir_sdi 490C  
                 __CFG_EBTR3$OFF 000000                  __end_of_f_write 250A  
                __end_of_get_fat 45EE                    __CFG_WRTB$OFF 000000  
                  __CFG_WRTC$OFF 000000                    __CFG_WRTD$OFF 000000  
                 __CFG_EBTRB$OFF 000000                  __end_of_mem_cmp 644A  
                __end_of_mem_cpy 5E84                  __end_of_mem_set 666A  
                  find_volume@br 0060                    find_volume@fs 0098  
                  find_volume@pt 007A               __CFG_MCLRE$EXTMCLR 000000  
                 disk_ioctl@buff 0012                   disk_read@count 0017  
                          tablat 000FF5                   disk_ioctl@pdrv 0031  
                          plusw2 000FDB                  __end_of_put_fat 3EB2  
                          status 000FD8                   __CFG_HFOFST$ON 000000  
                __end_of_sync_fs 4F9E                   __CFG_FOSC$HSMP 000000  
                  get_ldnumber@i 000B         __size_of_SPI1_Initialize 000E  
                __initialization 6604              disk_initialize@pdrv 0012  
                   __end_of_main 5DC0                     clust2sect@fs 000D  
                         ??_main 0060                    __activetblptr 000003  
                         _ANSELA 000F38                           _ANSELB 000F39  
                         _ANSELC 000F3A                           _ANSELD 000F3B  
                         _ANSELE 000F3C                   __CFG_WDTEN$OFF 000000  
                         _OSCCON 000FD3             __end_of_dir_register 5C1A  
               __end_of_check_fs 5B32            SPI1_Exchange8bit@data 0001  
     __size_of_SPI1_Exchange8bit 0012             __size_of_create_name 02B8  
       __size_of_disk_initialize 0214                 __end_of_deselect 6748  
               __end_of_dir_find 5928                   __CFG_XINST$OFF 000000  
              __end_of_SPI1_Open 6712                 __end_of_dir_next 3188  
                   ?_move_window 0030             __end_of_create_chain 4268  
               __end_of_ld_clust 6364                           ___lmul 644A  
           __size_of_find_volume 0B84             __size_of_disk_status 0014  
                         ___wmul 6694                   __CFG_STVREN$ON 000000  
                      ??___lldiv 0009                           _f_open 364A  
                         _f_sync 544C                        ??_f_close 0050  
                 find_volume@fmt 0097                           clear_0 660C  
                         clear_1 661E                   find_volume@rfs 0045  
                      ??_chk_chr 0005                   find_volume@vol 0080  
                         _select 66BC                        ??_f_lseek 0073  
                      ??_f_mount 0057                        ??_dir_sdi 0059  
                      ??_f_write 0075                        ??_get_fat 0041  
                         main@bw 00D0                 __end_of_send_cmd 6540  
                      ??_mem_cmp 0007                        ??_mem_cpy 0007  
                      ??_mem_set 0007                  disk_ioctl@csize 0032  
               __end_of_validate 6138             __end_of_get_ldnumber 5A40  
                   __mediumconst 0000                  disk_read@sector 0013  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                 __end_of_st_clust 6694  
                      ??_put_fat 0045                  xmit_datablock@i 0008  
                      ??_sync_fs 003C               rcvr_datablock@buff 0002  
              _SYSTEM_Initialize 6712                       __accesstop 0060  
        __end_of__initialization 6636                  __CFG_PBADEN$OFF 000000  
                 disk_write@buff 0011                   get_ldnumber@tp 0007  
                 get_ldnumber@tt 000D                   disk_write@pdrv 001A  
             ?_SYSTEM_Initialize 0001                    ___rparam_used 000001  
        __size_of_rcvr_datablock 0074                   __pcstackCOMRAM 0001  
                   __pidataBANK0 6748              ??_SYSTEM_Initialize 0001  
                     ___send_cmd 6138             __size_of_follow_path 01C4  
              ??_SPI1_Initialize 0001               __size_of_dir_alloc 012A  
             __size_of_disk_read 00D8        __end_of_SYSTEM_Initialize 6720  
                     __pbssBANK0 00D2                  __CFG_PLLCFG$OFF 000000  
             __CFG_CCP2MX$PORTC1 000000                          ?___lmul 0001  
                        ?___wmul 0001               __CFG_CCP3MX$PORTB5 000000  
                        ?_f_open 009A          __size_of_xmit_datablock 008E  
                        ?_f_sync 0045                ??_disk_initialize 0011  
                   ?_sync_window 001B                   ___lmul@product 0009  
                        ?_select 0001                        ?_check_fs 003B  
                     _disk_ioctl 3188                   follow_path@dir 008A  
                        _OSCCON2 000FD2                   follow_path@res 008D  
                     _disk_write 55A2                __CFG_PRICLKEN$OFF 000000  
                        _OSCTUNE 000F9B                      send_cmd@cmd 000F  
                      ?_deselect 0001                      send_cmd@arg 000B  
                        _SSP1ADD 000FC8                      send_cmd@res 0010  
                 remove_chain@fs 0056                          _SSP1BUF 000FC9  
                      ?_dir_find 0080                        ?_dir_next 006D  
          __size_of_dir_register 00E8                        ?_ld_clust 0001  
                     _clust2sect 5E84                 sync_window@wsect 002C  
                  ?_remove_chain 0056            __size_of_create_chain 03B6  
                __CFG_PWRTEN$OFF 000000                __end_of_dir_alloc 580E  
                      ?_send_cmd 000B                          __Hparam 0000  
                 ___send_cmd@cmd 000A                   ___send_cmd@arg 0004  
                 ___send_cmd@res 0008                          __Lparam 0000  
                      ?_validate 0002                __end_of_disk_read 5CF2  
                        ff@FatFs 00D4                       f_close@res 0050  
                __size_of___lmul 005A                        ?_st_clust 0001  
                    ?___send_cmd 0004                          ___lldiv 6256  
                __size_of___wmul 0028             __size_of_move_window 00AC  
                     check_fs@fs 003B                  __size_of_f_open 0450  
                   __psmallconst 1000                  __size_of_f_sync 0156  
                        _f_close 65C8                 _get_ldnumber$724 0005  
          __size_of_get_ldnumber 0118              _disk_initialize$209 0017  
                        __pcinit 6604                          _chk_chr 64A4  
                        _f_lseek 250A                          __ramtop 1000  
                        _f_mount 5F40                  __size_of_select 0022  
                        __ptext0 5CF2                          __ptext1 1BD6  
                        __ptext2 364A                          __ptext3 5162  
                        __ptext4 4F9E                          __ptext5 62E2  
                        __ptext6 580E                          __ptext7 63D8  
                        __ptext8 490C                          __ptext9 64A4  
                        _dir_sdi 45EE                      validate@fil 0008  
                        _f_write 1BD6                      validate@obj 0002  
                        _get_fat 4268                       chk_chr@chr 0003  
                   _dir_register 5B32                       chk_chr@str 0001  
                        _mem_cmp 63D8                          _mem_cpy 5DC0  
          _OSCILLATOR_Initialize 672E                          _mem_set 663C  
                     ??_check_fs 0041                  find_volume@path 0047  
                find_volume@nrsv 0082                  find_volume@stat 008C  
       ??_PIN_MANAGER_Initialize 0001                     _create_chain 3EB2  
                     ??_deselect 0002                       ??_dir_find 0060  
                        _put_fat 3A9A                       ??_dir_next 0071  
     __size_of_SYSTEM_Initialize 000E                       f_lseek@bcs 0088  
                     ??_ld_clust 0005                          _sync_fs 4DD8  
                     f_lseek@ofs 006F                       f_lseek@res 0083  
           end_of_initialization 6636                       f_open@mode 009E  
                     f_open@path 009C                   ??_remove_chain 005C  
                disk_status@pdrv 0001                   _rcvr_datablock 6364  
                ___lldiv@divisor 0005                       f_mount@cfs 0058  
                     f_mount@res 0057                       ??_send_cmd 000F  
                     f_mount@opt 0056                       f_mount@vol 005C  
                ___lldiv@counter 000D                     _get_ldnumber 5928  
                     ??_validate 0004                          postdec1 000FE5  
                        postdec2 000FDD                          postinc0 000FEE  
                        postinc1 000FE6                          postinc2 000FDE  
                     ??_st_clust 0007                   move_window@res 003A  
                      _SPI1_Open 6704                       _wait_ready 6586  
                     dir_alloc@n 0087                 remove_chain@clst 0058  
                     dir_find@dp 0080                  _create_name$700 0011  
                     dir_sdi@idx 0057                       dir_next@dp 006D  
                    ?_disk_ioctl 0011              rcvr_datablock@token 0008  
                     f_write@btw 0071                       f_write@res 0085  
                    ?_disk_write 0011                       get_fat@val 004B  
                get_ldnumber@vol 0009                  disk_write@count 0017  
                    ?_clust2sect 000D              __size_of___send_cmd 0090  
         __end_of_rcvr_datablock 63D8                    ??_create_name 000D  
               disk_initialize@n 001D                       ld_clust@cl 000B  
                     ld_clust@fs 0001                  _SPI1_Initialize 6720  
                  ??_find_volume 004A                    ??_disk_status 0001  
                 _xmit_datablock 61C8                       ?_SPI1_Open 0001  
                 __end_of___lmul 64A4                      st_clust@dir 0001  
                 __end_of___wmul 66BC                   __end_of_f_open 3A9A  
                 __end_of_f_sync 55A2                   clust2sect@clst 000F  
         ?_OSCILLATOR_Initialize 0001                   __end_of_select 66DE  
           __size_of_sync_window 0174              start_initialization 6604  
__size_of_PIN_MANAGER_Initialize 0046                       mem_cmp@cnt 0005  
                     mem_cmp@dst 0001                       mem_cmp@src 0003  
                     mem_cpy@cnt 0005                      put_fat@clst 003D  
                     mem_cpy@dst 0001                       mem_cpy@src 0003  
                ?_rcvr_datablock 0002                  _disk_initialize 4BC4  
                     mem_set@cnt 0005                       mem_set@dst 0001  
                     mem_set@val 0003           __end_of_xmit_datablock 6256  
                  ??_follow_path 0060              __size_of_disk_ioctl 04C2  
            __end_of_create_name 4BC4              __size_of_disk_write 0142  
                       ??___lmul 0009                         ??___wmul 0005  
                       ??_f_open 009F                         ??_f_sync 0047  
                    ?_wait_ready 0001                      __pdataBANK0 00F7  
            __end_of_find_volume 1BD6              __end_of_disk_status 66F2  
            __size_of_clust2sect 00BC                         ??_select 0004  
           __end_of_remove_chain 52D8                rcvr_datablock@btr 0004  
              rcvr_datablock@tmr 0006                      __pbssBIGRAM 0D0A  
                  __pcstackBANK0 0060                __size_of_check_fs 00F2  
        __end_of_SPI1_Initialize 672E                     check_fs@sect 003D  
              __size_of_deselect 000C                __size_of_dir_find 011A  
              __size_of_dir_next 04C4                __size_of_ld_clust 0082  
                _find_volume$804 0070                  _find_volume$805 0074  
         _PIN_MANAGER_Initialize 6540                  ?_xmit_datablock 0004  
              __size_of_send_cmd 0046                     ??___send_cmd 0008  
                      _dir_alloc 56E4                         ?___lldiv 0001  
              __size_of_validate 0096                      ??_SPI1_Open 0001  
                       ?_f_close 004E                        _disk_read 5C1A  
                       ?_chk_chr 0001                    follow_path@dp 0086  
                       ?_f_lseek 006D                    follow_path@ns 008C  
              __size_of_st_clust 002A              __end_of_follow_path 5162  
                       ?_f_mount 0052                         ?_dir_sdi 0055  
                       ?_f_write 006D                         ?_get_fat 003B  
                    __smallconst 1000                         ?_mem_cmp 0001  
                       ?_mem_cpy 0001                         ?_mem_set 0001  
                      f_close@fp 004E                         ?_put_fat 003B  
        __end_of_disk_initialize 4DD8                         ?_sync_fs 003A  
                    _get_fat$450 0049                find_volume@fasize 008D  
            __size_of_wait_ready 0042               __end_of___send_cmd 61C8  
                    _create_name 490C                   ___wmul@product 0005  
                      f_lseek@fp 006D                find_volume@szbfat 0076  
                      f_open@dir 00B8                        f_open@res 00B7  
                      f_open@sfn 00A3                find_volume@sysect 007C  
                    _find_volume 1052                      _disk_status 66DE  
                  ??_move_window 0036                        f_mount@fs 0052  
                      f_mount@rp 005A                  follow_path@path 0088  
                  move_window@fs 0030                 __CFG_WDTPS$32768 000000  
                       _SSP1CON1 000FC6                        dir_find@c 0082  
                     ?_dir_alloc 0080                  remove_chain@res 0060  
                remove_chain@nxt 0061                         _SSP1STAT 000FC7  
                      f_sync@dir 004C                        f_sync@res 004B  
                      dir_sdi@ic 0060                        dir_sdi@dp 0055  
                      dir_next@c 0078                        dir_next@i 007A  
                     ?_disk_read 0011                        f_write@cc 0089  
                      f_write@bw 0073                        f_write@fp 006D  
                      get_fat@bc 0053                        get_fat@fs 003B  
                      get_fat@wc 004F                ___wmul@multiplier 0001  
                       _CardType 00D6                     ??_disk_ioctl 0014  
                   ??_disk_write 0019                     f_lseek@ifptr 007F  
                   f_lseek@nsect 0084                       st_clust@cl 0003  
               ?_SPI1_Initialize 0001                     ??_clust2sect 0013  
              ___lmul@multiplier 0001                      _INTCON2bits 000FF1  
                     put_fat@res 0053                       put_fat@val 0041  
              move_window@sector 0032                  dir_next@stretch 006F  
                       __Hrparam 0000                         __Lrparam 0000  
                    _follow_path 4F9E               __CFG_BOREN$SBORDIS 000000  
             __end_of_disk_ioctl 364A            __size_of_remove_chain 0176  
              __CFG_P2BMX$PORTD2 000000               __end_of_disk_write 56E4  
        ??_OSCILLATOR_Initialize 0001                 __size_of___lldiv 008C  
            __end_of_move_window 60A2               __end_of_clust2sect 5F40  
               __size_of_f_close 003C                 __size_of_chk_chr 0056  
               __size_of_f_lseek 07BA                 __size_of_f_mount 00B6  
               __size_of_dir_sdi 031E                 __size_of_f_write 0934  
               __size_of_get_fat 0386                         _check_fs 5A40  
               __size_of_mem_cmp 0072                 __size_of_mem_cpy 00C4  
               __size_of_mem_set 002E              xmit_datablock@token 0007  
               ??_rcvr_datablock 0006                  dir_register@res 008C  
                       _deselect 673C                         __ptext10 5B32  
                       __ptext11 5DC0                         __ptext20 5A40  
                       __ptext12 56E4                         __ptext21 250A  
                       __ptext13 45EE                         __ptext30 60A2  
                       __ptext22 3EB2                         __ptext14 2CC4  
                       __ptext31 66DE                         __ptext23 3A9A  
                       __ptext15 5F40                         __ptext40 61C8  
                       __ptext32 4DD8                         __ptext24 4268  
                       __ptext16 1052                         __ptext41 5C1A  
                       __ptext33 663C                         __ptext25 5E84  
                       __ptext17 5928                         __ptext50 6720  
                       __ptext42 64FA                         __ptext34 3188  
                       __ptext26 644A                         __ptext18 4BC4  
                       __ptext51 6540                         __ptext43 6138  
                       __ptext35 6694                         __ptext27 6256  
                       __ptext19 6704                         __ptext52 672E  
                       __ptext44 66BC                         __ptext36 666A  
                       __ptext28 65C8                         __ptext45 6586  
                       __ptext37 5FF6                         __ptext29 544C  
                       __ptext46 673C                         __ptext38 52D8  
                       __ptext47 6364                         __ptext39 55A2  
                       __ptext48 66F2                         __ptext49 6712  
                       _dir_find 580E                     _SSP1CON1bits 000FC6  
                       _dir_next 2CC4                    dir_alloc@nent 0082  
               ?_disk_initialize 0001                         _ld_clust 62E2  
               __size_of_put_fat 0418                   sync_window@res 0029  
               __size_of_sync_fs 01C6                    __size_of_main 00CE  
                     sync_fs@res 0044                     _remove_chain 5162  
               find_volume@bsect 0091                 find_volume@nclst 0088  
               find_volume@tsect 0084                 find_volume@wmode 0049  
                       f_open@dj 00BA                         f_open@cl 00AF  
                       f_open@fp 009A                         f_open@dw 00B3  
                       _send_cmd 64FA                         _validate 60A2  
                       f_sync@fp 0045                         f_sync@tm 0047  
                    ??_dir_alloc 0084                         _st_clust 666A  
                       get_fat@p 0051                     ??_wait_ready 0002  
                  ??_sync_window 001D                     _SSP1STATbits 000FC7  
                    ??_disk_read 0019                    _disk_read$218 001A  
                    f_lseek@clst 008C                         mem_cmp@d 000A  
                       mem_cmp@r 000E                         mem_cmp@s 000C  
                      put_fat@bc 0051                         mem_cpy@d 0009  
                      put_fat@fs 003B                         mem_cpy@s 000B  
                       mem_set@d 0007                    wait_ready@tmr 0002  
             xmit_datablock@buff 0004               xmit_datablock@resp 000A  
                 dir_register@dp 008A                 ??_xmit_datablock 0008  
             __end_of_wait_ready 65C8                 ___lldiv@dividend 0001  
        ?_PIN_MANAGER_Initialize 0001                     dir_alloc@res 0089  
                  sync_window@fs 001B                    sync_window@nf 002A  
                    f_mount@path 0054                        sync_fs@fs 003A  
                    _move_window 5FF6                         put_fat@p 0054  
                  ?_dir_register 008A                      dir_alloc@dp 0080  
               ___lldiv@quotient 0009                      dir_find@dir 0083  
            __end_of_sync_window 544C                      dir_find@res 0085  
                  ?_create_chain 0056                __CFG_T3CMX$PORTC0 000000  
                   dir_next@clst 007C                      dir_sdi@clst 0066  
 __end_of_PIN_MANAGER_Initialize 6586                      dir_sdi@sect 0062  
                   ?_create_name 0009                     f_write@csect 0088  
                   f_write@wbuff 0086                      f_write@buff 006F  
                    f_write@clst 008F                      f_write@sect 008B  
                   ?_find_volume 0045                      f_write@wcnt 0093  
                  ?_get_ldnumber 0001                     ?_disk_status 0001  
                    _put_fat$476 004D                      _put_fat$477 004F  
